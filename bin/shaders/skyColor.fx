#if IS_RLR_ENVPROBE
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "postfx_common.fx"
#include "include_utilities.fx"
#include "include_constants.fx"

#define vRLRSkyParams		PSC_Custom_0

struct VS_INPUT
{
	float4 pos			: POSITION0;
};

struct VS_OUTPUT
{
	float4 pos		   : SYS_POSITION;
};

#ifdef VERTEXSHADER
VS_OUTPUT vs_main( VS_INPUT i )
{
	VS_OUTPUT o;

	o.pos   = i.pos;

	return o;
}
#endif

#ifdef PIXELSHADER
float4 ps_main( VS_OUTPUT i ) : SYS_TARGET_OUTPUT0
{
	const uint2 pixelCoord = (uint2)i.pos.xy;

	const float3 dir = ParaboloidToCube( i.pos.xy / vRLRSkyParams.xy, GetCubeDirParaboloidIndexUp() );
	const float  distance = cameraDepthRange.w;
	const float3 worldSpacePosition = cameraPosition.xyz + dir * distance;

	float3 resultColor = CalcSkyColor( worldSpacePosition.xyz, dir );
	//resultColor = ApplyFogDataFull( resultColor, CalculateFogFullCustomCamera( true, false, worldSpacePosition, float3( cameraPosition.xy, 0 ) ) );
	resultColor = ApplyFog( resultColor, true, false, worldSpacePosition ).xyz;

	return float4 ( resultColor, 1 );
}
#endif

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#else
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "postfx_common.fx"
#include "include_utilities.fx"
#include "include_constants.fx"

struct VS_INPUT
{
	float4 pos			: POSITION0;
};

struct VS_OUTPUT
{
	float4 pos		   : SYS_POSITION;
};

#ifdef VERTEXSHADER
VS_OUTPUT vs_main( VS_INPUT i )
{
	VS_OUTPUT o;

	o.pos   = i.pos;

	return o;
}
#endif

#ifdef PIXELSHADER
float4 ps_main( VS_OUTPUT i ) : SYS_TARGET_OUTPUT0
{
	const uint2 pixelCoord = (uint2)i.pos.xy;

	const float zw = 1;	
	const float3 worldSpacePosition = PositionFromDepth(zw,pixelCoord);

	float3 resultColor = CalcSkyColor( worldSpacePosition, normalize( worldSpacePosition - cameraPosition.xyz ) );
	resultColor = ApplyFog( resultColor, true, false, worldSpacePosition ).xyz;	
	resultColor = FilterSkyBanding( pixelCoord, resultColor );
		
	return float4 ( resultColor, 1 );
}
#endif

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#endif
