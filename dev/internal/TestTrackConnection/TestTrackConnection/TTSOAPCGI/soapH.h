/* soapH.h
   Generated by gSOAP 2.8.14 from ttsoapcgi.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

#ifndef SOAP_TYPE_xsd__byte
#define SOAP_TYPE_xsd__byte (12)
#endif

#define soap_default_xsd__byte(soap, a) soap_default_byte(soap, a)

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_xsd__byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_xsd__byte
#define soap_write_xsd__byte(soap, data) ( soap_begin(soap), soap_serialize_xsd__byte(soap, data), soap_begin_send(soap) || soap_put_xsd__byte(soap, data, "xsd:byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_xsd__byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_xsd__byte
#define soap_read_xsd__byte(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__byte(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_begin(soap), soap_serialize_byte(soap, data), soap_begin_send(soap) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_short
#define SOAP_TYPE_short (156)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_short(struct soap*, short *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap*, const char*, int, const short *, const char*);
SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap*, const char*, short *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap*, const short *, const char*, const char*);

#ifndef soap_write_short
#define soap_write_short(soap, data) ( soap_begin(soap), soap_serialize_short(soap, data), soap_begin_send(soap) || soap_put_short(soap, data, "short", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap*, short *, const char*, const char*);

#ifndef soap_read_short
#define soap_read_short(soap, data) ( soap_begin_recv(soap) || !soap_get_short(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_begin(soap), soap_serialize_int(soap, data), soap_begin_send(soap) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_LONG64
#define SOAP_TYPE_LONG64 (115)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap*, LONG64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap*, const char*, LONG64 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap*, const LONG64 *, const char*, const char*);

#ifndef soap_write_LONG64
#define soap_write_LONG64(soap, data) ( soap_begin(soap), soap_serialize_LONG64(soap, data), soap_begin_send(soap) || soap_put_LONG64(soap, data, "long", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap*, LONG64 *, const char*, const char*);

#ifndef soap_read_LONG64
#define soap_read_LONG64(soap, data) ( soap_begin_recv(soap) || !soap_get_LONG64(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_double
#define SOAP_TYPE_double (123)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap*, double *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

#ifndef soap_write_double
#define soap_write_double(soap, data) ( soap_begin(soap), soap_serialize_double(soap, data), soap_begin_send(soap) || soap_put_double(soap, data, "double", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

#ifndef soap_read_double
#define soap_read_double(soap, data) ( soap_begin_recv(soap) || !soap_get_double(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_unsignedByte
#define SOAP_TYPE_unsignedByte (9)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap*, unsigned char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

#ifndef soap_write_unsignedByte
#define soap_write_unsignedByte(soap, data) ( soap_begin(soap), soap_serialize_unsignedByte(soap, data), soap_begin_send(soap) || soap_put_unsignedByte(soap, data, "unsignedByte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

#ifndef soap_read_unsignedByte
#define soap_read_unsignedByte(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedByte(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_unsignedInt
#define SOAP_TYPE_unsignedInt (8)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap*, unsigned int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

#ifndef soap_write_unsignedInt
#define soap_write_unsignedInt(soap, data) ( soap_begin(soap), soap_serialize_unsignedInt(soap, data), soap_begin_send(soap) || soap_put_unsignedInt(soap, data, "unsignedInt", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

#ifndef soap_read_unsignedInt
#define soap_read_unsignedInt(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedInt(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_time
#define SOAP_TYPE_time (146)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_time(struct soap*, time_t *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_time(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_time(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_time(struct soap*, const time_t *, const char*, const char*);

#ifndef soap_write_time
#define soap_write_time(soap, data) ( soap_begin(soap), soap_serialize_time(soap, data), soap_begin_send(soap) || soap_put_time(soap, data, "dateTime", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_time(struct soap*, time_t *, const char*, const char*);

#ifndef soap_read_time
#define soap_read_time(soap, data) ( soap_begin_recv(soap) || !soap_get_time(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (118)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

#ifndef soap_write_bool
#define soap_write_bool(soap, data) ( soap_begin(soap), soap_serialize_bool(soap, data), soap_begin_send(soap) || soap_put_bool(soap, data, "boolean", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

#ifndef soap_read_bool
#define soap_read_bool(soap, data) ( soap_begin_recv(soap) || !soap_get_bool(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_ns1__CItemHyperlinkContainer
#define SOAP_TYPE_ns1__CItemHyperlinkContainer (108)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CItemHyperlinkContainer(struct soap*, const char*, int, const ns1__CItemHyperlinkContainer *, const char*);
SOAP_FMAC3 ns1__CItemHyperlinkContainer * SOAP_FMAC4 soap_in_ns1__CItemHyperlinkContainer(struct soap*, const char*, ns1__CItemHyperlinkContainer *, const char*);

#ifndef soap_write_ns1__CItemHyperlinkContainer
#define soap_write_ns1__CItemHyperlinkContainer(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CItemHyperlinkContainer", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CItemHyperlinkContainer * SOAP_FMAC4 soap_get_ns1__CItemHyperlinkContainer(struct soap*, ns1__CItemHyperlinkContainer *, const char*, const char*);

#ifndef soap_read_ns1__CItemHyperlinkContainer
#define soap_read_ns1__CItemHyperlinkContainer(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CItemHyperlinkContainer(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CItemHyperlinkContainer * SOAP_FMAC2 soap_instantiate_ns1__CItemHyperlinkContainer(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CItemHyperlinkContainer * soap_new_ns1__CItemHyperlinkContainer(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CItemHyperlinkContainer(soap, n, NULL, NULL, NULL); }

inline ns1__CItemHyperlinkContainer * soap_new_req_ns1__CItemHyperlinkContainer(struct soap *soap) { ns1__CItemHyperlinkContainer *_p = soap_instantiate_ns1__CItemHyperlinkContainer(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__CItemHyperlinkContainer * soap_new_set_ns1__CItemHyperlinkContainer(struct soap *soap, char *ttstudioHyperlink, char *httpHyperlink) { ns1__CItemHyperlinkContainer *_p = soap_instantiate_ns1__CItemHyperlinkContainer(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CItemHyperlinkContainer::ttstudioHyperlink = ttstudioHyperlink; _p->ns1__CItemHyperlinkContainer::httpHyperlink = httpHyperlink; } return _p; }

inline void soap_delete_ns1__CItemHyperlinkContainer(struct soap *soap, ns1__CItemHyperlinkContainer *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CItemHyperlinkContainer(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CDocumentTreeNode
#define SOAP_TYPE_ns1__CDocumentTreeNode (107)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CDocumentTreeNode(struct soap*, const char*, int, const ns1__CDocumentTreeNode *, const char*);
SOAP_FMAC3 ns1__CDocumentTreeNode * SOAP_FMAC4 soap_in_ns1__CDocumentTreeNode(struct soap*, const char*, ns1__CDocumentTreeNode *, const char*);

#ifndef soap_write_ns1__CDocumentTreeNode
#define soap_write_ns1__CDocumentTreeNode(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CDocumentTreeNode", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CDocumentTreeNode * SOAP_FMAC4 soap_get_ns1__CDocumentTreeNode(struct soap*, ns1__CDocumentTreeNode *, const char*, const char*);

#ifndef soap_read_ns1__CDocumentTreeNode
#define soap_read_ns1__CDocumentTreeNode(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CDocumentTreeNode(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CDocumentTreeNode * SOAP_FMAC2 soap_instantiate_ns1__CDocumentTreeNode(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CDocumentTreeNode * soap_new_ns1__CDocumentTreeNode(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CDocumentTreeNode(soap, n, NULL, NULL, NULL); }

inline ns1__CDocumentTreeNode * soap_new_req_ns1__CDocumentTreeNode(struct soap *soap, LONG64 entityRecordID) { ns1__CDocumentTreeNode *_p = soap_instantiate_ns1__CDocumentTreeNode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CDocumentTreeNode::entityRecordID = entityRecordID; } return _p; }

inline ns1__CDocumentTreeNode * soap_new_set_ns1__CDocumentTreeNode(struct soap *soap, char *entityTableName, LONG64 entityRecordID, ArrayOfCTreeNodeSoap *childList, char *summary, char *outlineNumber, char *tag) { ns1__CDocumentTreeNode *_p = soap_instantiate_ns1__CDocumentTreeNode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CDocumentTreeNode::entityTableName = entityTableName; _p->ns1__CDocumentTreeNode::entityRecordID = entityRecordID; _p->ns1__CDocumentTreeNode::childList = childList; _p->ns1__CDocumentTreeNode::summary = summary; _p->ns1__CDocumentTreeNode::outlineNumber = outlineNumber; _p->ns1__CDocumentTreeNode::tag = tag; } return _p; }

inline void soap_delete_ns1__CDocumentTreeNode(struct soap *soap, ns1__CDocumentTreeNode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CDocumentTreeNode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfCTreeNodeSoap
#define SOAP_TYPE_ArrayOfCTreeNodeSoap (106)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfCTreeNodeSoap(struct soap*, const char*, int, const ArrayOfCTreeNodeSoap *, const char*);
SOAP_FMAC3 ArrayOfCTreeNodeSoap * SOAP_FMAC4 soap_in_ArrayOfCTreeNodeSoap(struct soap*, const char*, ArrayOfCTreeNodeSoap *, const char*);

#ifndef soap_write_ArrayOfCTreeNodeSoap
#define soap_write_ArrayOfCTreeNodeSoap(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCTreeNodeSoap * SOAP_FMAC4 soap_get_ArrayOfCTreeNodeSoap(struct soap*, ArrayOfCTreeNodeSoap *, const char*, const char*);

#ifndef soap_read_ArrayOfCTreeNodeSoap
#define soap_read_ArrayOfCTreeNodeSoap(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfCTreeNodeSoap(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ArrayOfCTreeNodeSoap * SOAP_FMAC2 soap_instantiate_ArrayOfCTreeNodeSoap(struct soap*, int, const char*, const char*, size_t*);

inline ArrayOfCTreeNodeSoap * soap_new_ArrayOfCTreeNodeSoap(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfCTreeNodeSoap(soap, n, NULL, NULL, NULL); }

inline ArrayOfCTreeNodeSoap * soap_new_req_ArrayOfCTreeNodeSoap(struct soap *soap) { ArrayOfCTreeNodeSoap *_p = soap_instantiate_ArrayOfCTreeNodeSoap(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ArrayOfCTreeNodeSoap * soap_new_set_ArrayOfCTreeNodeSoap(struct soap *soap, ns1__CTreeNodeSoap **__ptritem, int __size) { ArrayOfCTreeNodeSoap *_p = soap_instantiate_ArrayOfCTreeNodeSoap(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ArrayOfCTreeNodeSoap::__ptritem = __ptritem; _p->ArrayOfCTreeNodeSoap::__size = __size; } return _p; }

inline void soap_delete_ArrayOfCTreeNodeSoap(struct soap *soap, ArrayOfCTreeNodeSoap *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfCTreeNodeSoap(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CTreeNodeSoap
#define SOAP_TYPE_ns1__CTreeNodeSoap (105)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CTreeNodeSoap(struct soap*, const char*, int, const ns1__CTreeNodeSoap *, const char*);
SOAP_FMAC3 ns1__CTreeNodeSoap * SOAP_FMAC4 soap_in_ns1__CTreeNodeSoap(struct soap*, const char*, ns1__CTreeNodeSoap *, const char*);

#ifndef soap_write_ns1__CTreeNodeSoap
#define soap_write_ns1__CTreeNodeSoap(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CTreeNodeSoap", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CTreeNodeSoap * SOAP_FMAC4 soap_get_ns1__CTreeNodeSoap(struct soap*, ns1__CTreeNodeSoap *, const char*, const char*);

#ifndef soap_read_ns1__CTreeNodeSoap
#define soap_read_ns1__CTreeNodeSoap(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CTreeNodeSoap(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CTreeNodeSoap * SOAP_FMAC2 soap_instantiate_ns1__CTreeNodeSoap(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CTreeNodeSoap * soap_new_ns1__CTreeNodeSoap(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CTreeNodeSoap(soap, n, NULL, NULL, NULL); }

inline ns1__CTreeNodeSoap * soap_new_req_ns1__CTreeNodeSoap(struct soap *soap, LONG64 entityRecordID) { ns1__CTreeNodeSoap *_p = soap_instantiate_ns1__CTreeNodeSoap(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CTreeNodeSoap::entityRecordID = entityRecordID; } return _p; }

inline ns1__CTreeNodeSoap * soap_new_set_ns1__CTreeNodeSoap(struct soap *soap, char *entityTableName, LONG64 entityRecordID, ArrayOfCTreeNodeSoap *childList) { ns1__CTreeNodeSoap *_p = soap_instantiate_ns1__CTreeNodeSoap(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CTreeNodeSoap::entityTableName = entityTableName; _p->ns1__CTreeNodeSoap::entityRecordID = entityRecordID; _p->ns1__CTreeNodeSoap::childList = childList; } return _p; }

inline void soap_delete_ns1__CTreeNodeSoap(struct soap *soap, ns1__CTreeNodeSoap *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CTreeNodeSoap(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CRequirementDocument
#define SOAP_TYPE_ns1__CRequirementDocument (104)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CRequirementDocument(struct soap*, const char*, int, const ns1__CRequirementDocument *, const char*);
SOAP_FMAC3 ns1__CRequirementDocument * SOAP_FMAC4 soap_in_ns1__CRequirementDocument(struct soap*, const char*, ns1__CRequirementDocument *, const char*);

#ifndef soap_write_ns1__CRequirementDocument
#define soap_write_ns1__CRequirementDocument(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CRequirementDocument", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CRequirementDocument * SOAP_FMAC4 soap_get_ns1__CRequirementDocument(struct soap*, ns1__CRequirementDocument *, const char*, const char*);

#ifndef soap_read_ns1__CRequirementDocument
#define soap_read_ns1__CRequirementDocument(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CRequirementDocument(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CRequirementDocument * SOAP_FMAC2 soap_instantiate_ns1__CRequirementDocument(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CRequirementDocument * soap_new_ns1__CRequirementDocument(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CRequirementDocument(soap, n, NULL, NULL, NULL); }

inline ns1__CRequirementDocument * soap_new_req_ns1__CRequirementDocument(struct soap *soap, LONG64 recordid) { ns1__CRequirementDocument *_p = soap_instantiate_ns1__CRequirementDocument(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CRequirementDocument::recordid = recordid; } return _p; }

inline ns1__CRequirementDocument * soap_new_set_ns1__CRequirementDocument(struct soap *soap, LONG64 recordid, LONG64 *number, char *name, char *description, ArrayOfCFileAttachment *descriptionInlineAttachList, char *state, ArrayOfCFileAttachment *attachmentList, ArrayOfCSCCFileRecord *sccFileList, ArrayOfCField *customFieldList, ArrayOfCEvent *eventList, ArrayOfCSnapshotInfo *snapshotList, time_t *dateTimeCreated, char *createdByUser, char *locationAddedFrom, char *modifiedByUser, time_t *dateTimeModified, double *actualHours, double *estimatedHours, double *remainingHours, double *variance, LONG64 *storyPoints, LONG64 *percentDone) { ns1__CRequirementDocument *_p = soap_instantiate_ns1__CRequirementDocument(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CRequirementDocument::recordid = recordid; _p->ns1__CRequirementDocument::number = number; _p->ns1__CRequirementDocument::name = name; _p->ns1__CRequirementDocument::description = description; _p->ns1__CRequirementDocument::descriptionInlineAttachList = descriptionInlineAttachList; _p->ns1__CRequirementDocument::state = state; _p->ns1__CRequirementDocument::attachmentList = attachmentList; _p->ns1__CRequirementDocument::sccFileList = sccFileList; _p->ns1__CRequirementDocument::customFieldList = customFieldList; _p->ns1__CRequirementDocument::eventList = eventList; _p->ns1__CRequirementDocument::snapshotList = snapshotList; _p->ns1__CRequirementDocument::dateTimeCreated = dateTimeCreated; _p->ns1__CRequirementDocument::createdByUser = createdByUser; _p->ns1__CRequirementDocument::locationAddedFrom = locationAddedFrom; _p->ns1__CRequirementDocument::modifiedByUser = modifiedByUser; _p->ns1__CRequirementDocument::dateTimeModified = dateTimeModified; _p->ns1__CRequirementDocument::actualHours = actualHours; _p->ns1__CRequirementDocument::estimatedHours = estimatedHours; _p->ns1__CRequirementDocument::remainingHours = remainingHours; _p->ns1__CRequirementDocument::variance = variance; _p->ns1__CRequirementDocument::storyPoints = storyPoints; _p->ns1__CRequirementDocument::percentDone = percentDone; } return _p; }

inline void soap_delete_ns1__CRequirementDocument(struct soap *soap, ns1__CRequirementDocument *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CRequirementDocument(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CRequirement
#define SOAP_TYPE_ns1__CRequirement (103)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CRequirement(struct soap*, const char*, int, const ns1__CRequirement *, const char*);
SOAP_FMAC3 ns1__CRequirement * SOAP_FMAC4 soap_in_ns1__CRequirement(struct soap*, const char*, ns1__CRequirement *, const char*);

#ifndef soap_write_ns1__CRequirement
#define soap_write_ns1__CRequirement(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CRequirement", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CRequirement * SOAP_FMAC4 soap_get_ns1__CRequirement(struct soap*, ns1__CRequirement *, const char*, const char*);

#ifndef soap_read_ns1__CRequirement
#define soap_read_ns1__CRequirement(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CRequirement(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CRequirement * SOAP_FMAC2 soap_instantiate_ns1__CRequirement(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CRequirement * soap_new_ns1__CRequirement(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CRequirement(soap, n, NULL, NULL, NULL); }

inline ns1__CRequirement * soap_new_req_ns1__CRequirement(struct soap *soap, LONG64 recordid, char *type) { ns1__CRequirement *_p = soap_instantiate_ns1__CRequirement(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CRequirement::recordid = recordid; _p->ns1__CRequirement::type = type; } return _p; }

inline ns1__CRequirement * soap_new_set_ns1__CRequirement(struct soap *soap, LONG64 recordid, LONG64 *number, char *type, char *summary, char *tag, char *dateEntered, char *enteredBy, char *importance, char *description, ArrayOfCFileAttachment *descriptionInlineAttachList, char *state, ArrayOfCFileAttachment *attachmentList, ArrayOfCSCCFileRecord *sccFileList, ArrayOfCField *customFieldList, ArrayOfCEvent *eventList, ArrayOfCVersionInfo *versionList, time_t *dateTimeCreated, char *createdByUser, char *locationAddedFrom, char *modifiedByUser, time_t *dateTimeModified, double *actualHours, double *estimatedHours, double *remainingHours, double *variance, LONG64 *storyPoints, LONG64 *percentDone) { ns1__CRequirement *_p = soap_instantiate_ns1__CRequirement(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CRequirement::recordid = recordid; _p->ns1__CRequirement::number = number; _p->ns1__CRequirement::type = type; _p->ns1__CRequirement::summary = summary; _p->ns1__CRequirement::tag = tag; _p->ns1__CRequirement::dateEntered = dateEntered; _p->ns1__CRequirement::enteredBy = enteredBy; _p->ns1__CRequirement::importance = importance; _p->ns1__CRequirement::description = description; _p->ns1__CRequirement::descriptionInlineAttachList = descriptionInlineAttachList; _p->ns1__CRequirement::state = state; _p->ns1__CRequirement::attachmentList = attachmentList; _p->ns1__CRequirement::sccFileList = sccFileList; _p->ns1__CRequirement::customFieldList = customFieldList; _p->ns1__CRequirement::eventList = eventList; _p->ns1__CRequirement::versionList = versionList; _p->ns1__CRequirement::dateTimeCreated = dateTimeCreated; _p->ns1__CRequirement::createdByUser = createdByUser; _p->ns1__CRequirement::locationAddedFrom = locationAddedFrom; _p->ns1__CRequirement::modifiedByUser = modifiedByUser; _p->ns1__CRequirement::dateTimeModified = dateTimeModified; _p->ns1__CRequirement::actualHours = actualHours; _p->ns1__CRequirement::estimatedHours = estimatedHours; _p->ns1__CRequirement::remainingHours = remainingHours; _p->ns1__CRequirement::variance = variance; _p->ns1__CRequirement::storyPoints = storyPoints; _p->ns1__CRequirement::percentDone = percentDone; } return _p; }

inline void soap_delete_ns1__CRequirement(struct soap *soap, ns1__CRequirement *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CRequirement(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfCSnapshotInfo
#define SOAP_TYPE_ArrayOfCSnapshotInfo (102)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfCSnapshotInfo(struct soap*, const char*, int, const ArrayOfCSnapshotInfo *, const char*);
SOAP_FMAC3 ArrayOfCSnapshotInfo * SOAP_FMAC4 soap_in_ArrayOfCSnapshotInfo(struct soap*, const char*, ArrayOfCSnapshotInfo *, const char*);

#ifndef soap_write_ArrayOfCSnapshotInfo
#define soap_write_ArrayOfCSnapshotInfo(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCSnapshotInfo * SOAP_FMAC4 soap_get_ArrayOfCSnapshotInfo(struct soap*, ArrayOfCSnapshotInfo *, const char*, const char*);

#ifndef soap_read_ArrayOfCSnapshotInfo
#define soap_read_ArrayOfCSnapshotInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfCSnapshotInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ArrayOfCSnapshotInfo * SOAP_FMAC2 soap_instantiate_ArrayOfCSnapshotInfo(struct soap*, int, const char*, const char*, size_t*);

inline ArrayOfCSnapshotInfo * soap_new_ArrayOfCSnapshotInfo(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfCSnapshotInfo(soap, n, NULL, NULL, NULL); }

inline ArrayOfCSnapshotInfo * soap_new_req_ArrayOfCSnapshotInfo(struct soap *soap) { ArrayOfCSnapshotInfo *_p = soap_instantiate_ArrayOfCSnapshotInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ArrayOfCSnapshotInfo * soap_new_set_ArrayOfCSnapshotInfo(struct soap *soap, ns1__CSnapshotInfo **__ptritem, int __size) { ArrayOfCSnapshotInfo *_p = soap_instantiate_ArrayOfCSnapshotInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ArrayOfCSnapshotInfo::__ptritem = __ptritem; _p->ArrayOfCSnapshotInfo::__size = __size; } return _p; }

inline void soap_delete_ArrayOfCSnapshotInfo(struct soap *soap, ArrayOfCSnapshotInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfCSnapshotInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CSnapshotInfo
#define SOAP_TYPE_ns1__CSnapshotInfo (101)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CSnapshotInfo(struct soap*, const char*, int, const ns1__CSnapshotInfo *, const char*);
SOAP_FMAC3 ns1__CSnapshotInfo * SOAP_FMAC4 soap_in_ns1__CSnapshotInfo(struct soap*, const char*, ns1__CSnapshotInfo *, const char*);

#ifndef soap_write_ns1__CSnapshotInfo
#define soap_write_ns1__CSnapshotInfo(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CSnapshotInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CSnapshotInfo * SOAP_FMAC4 soap_get_ns1__CSnapshotInfo(struct soap*, ns1__CSnapshotInfo *, const char*, const char*);

#ifndef soap_read_ns1__CSnapshotInfo
#define soap_read_ns1__CSnapshotInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CSnapshotInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CSnapshotInfo * SOAP_FMAC2 soap_instantiate_ns1__CSnapshotInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CSnapshotInfo * soap_new_ns1__CSnapshotInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CSnapshotInfo(soap, n, NULL, NULL, NULL); }

inline ns1__CSnapshotInfo * soap_new_req_ns1__CSnapshotInfo(struct soap *soap) { ns1__CSnapshotInfo *_p = soap_instantiate_ns1__CSnapshotInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__CSnapshotInfo * soap_new_set_ns1__CSnapshotInfo(struct soap *soap, LONG64 *versionNumber, char *createdByUser, char *dateTimeCreated, char *label, char *comment) { ns1__CSnapshotInfo *_p = soap_instantiate_ns1__CSnapshotInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CSnapshotInfo::versionNumber = versionNumber; _p->ns1__CSnapshotInfo::createdByUser = createdByUser; _p->ns1__CSnapshotInfo::dateTimeCreated = dateTimeCreated; _p->ns1__CSnapshotInfo::label = label; _p->ns1__CSnapshotInfo::comment = comment; } return _p; }

inline void soap_delete_ns1__CSnapshotInfo(struct soap *soap, ns1__CSnapshotInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CSnapshotInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfCVersionInfo
#define SOAP_TYPE_ArrayOfCVersionInfo (100)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfCVersionInfo(struct soap*, const char*, int, const ArrayOfCVersionInfo *, const char*);
SOAP_FMAC3 ArrayOfCVersionInfo * SOAP_FMAC4 soap_in_ArrayOfCVersionInfo(struct soap*, const char*, ArrayOfCVersionInfo *, const char*);

#ifndef soap_write_ArrayOfCVersionInfo
#define soap_write_ArrayOfCVersionInfo(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCVersionInfo * SOAP_FMAC4 soap_get_ArrayOfCVersionInfo(struct soap*, ArrayOfCVersionInfo *, const char*, const char*);

#ifndef soap_read_ArrayOfCVersionInfo
#define soap_read_ArrayOfCVersionInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfCVersionInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ArrayOfCVersionInfo * SOAP_FMAC2 soap_instantiate_ArrayOfCVersionInfo(struct soap*, int, const char*, const char*, size_t*);

inline ArrayOfCVersionInfo * soap_new_ArrayOfCVersionInfo(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfCVersionInfo(soap, n, NULL, NULL, NULL); }

inline ArrayOfCVersionInfo * soap_new_req_ArrayOfCVersionInfo(struct soap *soap) { ArrayOfCVersionInfo *_p = soap_instantiate_ArrayOfCVersionInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ArrayOfCVersionInfo * soap_new_set_ArrayOfCVersionInfo(struct soap *soap, ns1__CVersionInfo **__ptritem, int __size) { ArrayOfCVersionInfo *_p = soap_instantiate_ArrayOfCVersionInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ArrayOfCVersionInfo::__ptritem = __ptritem; _p->ArrayOfCVersionInfo::__size = __size; } return _p; }

inline void soap_delete_ArrayOfCVersionInfo(struct soap *soap, ArrayOfCVersionInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfCVersionInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CVersionInfo
#define SOAP_TYPE_ns1__CVersionInfo (99)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CVersionInfo(struct soap*, const char*, int, const ns1__CVersionInfo *, const char*);
SOAP_FMAC3 ns1__CVersionInfo * SOAP_FMAC4 soap_in_ns1__CVersionInfo(struct soap*, const char*, ns1__CVersionInfo *, const char*);

#ifndef soap_write_ns1__CVersionInfo
#define soap_write_ns1__CVersionInfo(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CVersionInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CVersionInfo * SOAP_FMAC4 soap_get_ns1__CVersionInfo(struct soap*, ns1__CVersionInfo *, const char*, const char*);

#ifndef soap_read_ns1__CVersionInfo
#define soap_read_ns1__CVersionInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CVersionInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CVersionInfo * SOAP_FMAC2 soap_instantiate_ns1__CVersionInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CVersionInfo * soap_new_ns1__CVersionInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CVersionInfo(soap, n, NULL, NULL, NULL); }

inline ns1__CVersionInfo * soap_new_req_ns1__CVersionInfo(struct soap *soap) { ns1__CVersionInfo *_p = soap_instantiate_ns1__CVersionInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__CVersionInfo * soap_new_set_ns1__CVersionInfo(struct soap *soap, LONG64 *versionNumber, char *createdByUser, char *dateTimeCreated) { ns1__CVersionInfo *_p = soap_instantiate_ns1__CVersionInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CVersionInfo::versionNumber = versionNumber; _p->ns1__CVersionInfo::createdByUser = createdByUser; _p->ns1__CVersionInfo::dateTimeCreated = dateTimeCreated; } return _p; }

inline void soap_delete_ns1__CVersionInfo(struct soap *soap, ns1__CVersionInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CVersionInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfCFolderItem
#define SOAP_TYPE_ArrayOfCFolderItem (98)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfCFolderItem(struct soap*, const char*, int, const ArrayOfCFolderItem *, const char*);
SOAP_FMAC3 ArrayOfCFolderItem * SOAP_FMAC4 soap_in_ArrayOfCFolderItem(struct soap*, const char*, ArrayOfCFolderItem *, const char*);

#ifndef soap_write_ArrayOfCFolderItem
#define soap_write_ArrayOfCFolderItem(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCFolderItem * SOAP_FMAC4 soap_get_ArrayOfCFolderItem(struct soap*, ArrayOfCFolderItem *, const char*, const char*);

#ifndef soap_read_ArrayOfCFolderItem
#define soap_read_ArrayOfCFolderItem(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfCFolderItem(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ArrayOfCFolderItem * SOAP_FMAC2 soap_instantiate_ArrayOfCFolderItem(struct soap*, int, const char*, const char*, size_t*);

inline ArrayOfCFolderItem * soap_new_ArrayOfCFolderItem(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfCFolderItem(soap, n, NULL, NULL, NULL); }

inline ArrayOfCFolderItem * soap_new_req_ArrayOfCFolderItem(struct soap *soap) { ArrayOfCFolderItem *_p = soap_instantiate_ArrayOfCFolderItem(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ArrayOfCFolderItem * soap_new_set_ArrayOfCFolderItem(struct soap *soap, ns1__CFolderItem **__ptritem, int __size) { ArrayOfCFolderItem *_p = soap_instantiate_ArrayOfCFolderItem(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ArrayOfCFolderItem::__ptritem = __ptritem; _p->ArrayOfCFolderItem::__size = __size; } return _p; }

inline void soap_delete_ArrayOfCFolderItem(struct soap *soap, ArrayOfCFolderItem *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfCFolderItem(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfCFolder
#define SOAP_TYPE_ArrayOfCFolder (97)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfCFolder(struct soap*, const char*, int, const ArrayOfCFolder *, const char*);
SOAP_FMAC3 ArrayOfCFolder * SOAP_FMAC4 soap_in_ArrayOfCFolder(struct soap*, const char*, ArrayOfCFolder *, const char*);

#ifndef soap_write_ArrayOfCFolder
#define soap_write_ArrayOfCFolder(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCFolder * SOAP_FMAC4 soap_get_ArrayOfCFolder(struct soap*, ArrayOfCFolder *, const char*, const char*);

#ifndef soap_read_ArrayOfCFolder
#define soap_read_ArrayOfCFolder(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfCFolder(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ArrayOfCFolder * SOAP_FMAC2 soap_instantiate_ArrayOfCFolder(struct soap*, int, const char*, const char*, size_t*);

inline ArrayOfCFolder * soap_new_ArrayOfCFolder(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfCFolder(soap, n, NULL, NULL, NULL); }

inline ArrayOfCFolder * soap_new_req_ArrayOfCFolder(struct soap *soap) { ArrayOfCFolder *_p = soap_instantiate_ArrayOfCFolder(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ArrayOfCFolder * soap_new_set_ArrayOfCFolder(struct soap *soap, ns1__CFolder **__ptritem, int __size) { ArrayOfCFolder *_p = soap_instantiate_ArrayOfCFolder(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ArrayOfCFolder::__ptritem = __ptritem; _p->ArrayOfCFolder::__size = __size; } return _p; }

inline void soap_delete_ArrayOfCFolder(struct soap *soap, ArrayOfCFolder *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfCFolder(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CFolderItem
#define SOAP_TYPE_ns1__CFolderItem (96)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CFolderItem(struct soap*, const char*, int, const ns1__CFolderItem *, const char*);
SOAP_FMAC3 ns1__CFolderItem * SOAP_FMAC4 soap_in_ns1__CFolderItem(struct soap*, const char*, ns1__CFolderItem *, const char*);

#ifndef soap_write_ns1__CFolderItem
#define soap_write_ns1__CFolderItem(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CFolderItem", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CFolderItem * SOAP_FMAC4 soap_get_ns1__CFolderItem(struct soap*, ns1__CFolderItem *, const char*, const char*);

#ifndef soap_read_ns1__CFolderItem
#define soap_read_ns1__CFolderItem(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CFolderItem(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CFolderItem * SOAP_FMAC2 soap_instantiate_ns1__CFolderItem(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CFolderItem * soap_new_ns1__CFolderItem(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CFolderItem(soap, n, NULL, NULL, NULL); }

inline ns1__CFolderItem * soap_new_req_ns1__CFolderItem(struct soap *soap, LONG64 recordid, char *entitytablename, LONG64 entityrecordid) { ns1__CFolderItem *_p = soap_instantiate_ns1__CFolderItem(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CFolderItem::recordid = recordid; _p->ns1__CFolderItem::entitytablename = entitytablename; _p->ns1__CFolderItem::entityrecordid = entityrecordid; } return _p; }

inline ns1__CFolderItem * soap_new_set_ns1__CFolderItem(struct soap *soap, LONG64 recordid, char *entitytablename, LONG64 entityrecordid, LONG64 *rank) { ns1__CFolderItem *_p = soap_instantiate_ns1__CFolderItem(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CFolderItem::recordid = recordid; _p->ns1__CFolderItem::entitytablename = entitytablename; _p->ns1__CFolderItem::entityrecordid = entityrecordid; _p->ns1__CFolderItem::rank = rank; } return _p; }

inline void soap_delete_ns1__CFolderItem(struct soap *soap, ns1__CFolderItem *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CFolderItem(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CFolder
#define SOAP_TYPE_ns1__CFolder (95)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CFolder(struct soap*, const char*, int, const ns1__CFolder *, const char*);
SOAP_FMAC3 ns1__CFolder * SOAP_FMAC4 soap_in_ns1__CFolder(struct soap*, const char*, ns1__CFolder *, const char*);

#ifndef soap_write_ns1__CFolder
#define soap_write_ns1__CFolder(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CFolder", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CFolder * SOAP_FMAC4 soap_get_ns1__CFolder(struct soap*, ns1__CFolder *, const char*, const char*);

#ifndef soap_read_ns1__CFolder
#define soap_read_ns1__CFolder(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CFolder(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CFolder * SOAP_FMAC2 soap_instantiate_ns1__CFolder(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CFolder * soap_new_ns1__CFolder(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CFolder(soap, n, NULL, NULL, NULL); }

inline ns1__CFolder * soap_new_req_ns1__CFolder(struct soap *soap, LONG64 recordid) { ns1__CFolder *_p = soap_instantiate_ns1__CFolder(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CFolder::recordid = recordid; } return _p; }

inline ns1__CFolder * soap_new_set_ns1__CFolder(struct soap *soap, LONG64 recordid, LONG64 *createdbyuser, bool *ispublic, LONG64 *modifiedbyuser, char *locationaddedfrom, time_t *datetimecreated, time_t *datetimemodified, char *name, char *description, char *path, LONG64 *order, LONG64 *parentid, char *foldertypename, char *webview, char *notes, ArrayOfCFileAttachment *notesInlineAttachList, bool *noteseditable, ns1__CScheduleInfo *scheduleinfo) { ns1__CFolder *_p = soap_instantiate_ns1__CFolder(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CFolder::recordid = recordid; _p->ns1__CFolder::createdbyuser = createdbyuser; _p->ns1__CFolder::ispublic = ispublic; _p->ns1__CFolder::modifiedbyuser = modifiedbyuser; _p->ns1__CFolder::locationaddedfrom = locationaddedfrom; _p->ns1__CFolder::datetimecreated = datetimecreated; _p->ns1__CFolder::datetimemodified = datetimemodified; _p->ns1__CFolder::name = name; _p->ns1__CFolder::description = description; _p->ns1__CFolder::path = path; _p->ns1__CFolder::order = order; _p->ns1__CFolder::parentid = parentid; _p->ns1__CFolder::foldertypename = foldertypename; _p->ns1__CFolder::webview = webview; _p->ns1__CFolder::notes = notes; _p->ns1__CFolder::notesInlineAttachList = notesInlineAttachList; _p->ns1__CFolder::noteseditable = noteseditable; _p->ns1__CFolder::scheduleinfo = scheduleinfo; } return _p; }

inline void soap_delete_ns1__CFolder(struct soap *soap, ns1__CFolder *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CFolder(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfCFolderType
#define SOAP_TYPE_ArrayOfCFolderType (94)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfCFolderType(struct soap*, const char*, int, const ArrayOfCFolderType *, const char*);
SOAP_FMAC3 ArrayOfCFolderType * SOAP_FMAC4 soap_in_ArrayOfCFolderType(struct soap*, const char*, ArrayOfCFolderType *, const char*);

#ifndef soap_write_ArrayOfCFolderType
#define soap_write_ArrayOfCFolderType(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCFolderType * SOAP_FMAC4 soap_get_ArrayOfCFolderType(struct soap*, ArrayOfCFolderType *, const char*, const char*);

#ifndef soap_read_ArrayOfCFolderType
#define soap_read_ArrayOfCFolderType(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfCFolderType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ArrayOfCFolderType * SOAP_FMAC2 soap_instantiate_ArrayOfCFolderType(struct soap*, int, const char*, const char*, size_t*);

inline ArrayOfCFolderType * soap_new_ArrayOfCFolderType(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfCFolderType(soap, n, NULL, NULL, NULL); }

inline ArrayOfCFolderType * soap_new_req_ArrayOfCFolderType(struct soap *soap) { ArrayOfCFolderType *_p = soap_instantiate_ArrayOfCFolderType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ArrayOfCFolderType * soap_new_set_ArrayOfCFolderType(struct soap *soap, ns1__CFolderType **__ptritem, int __size) { ArrayOfCFolderType *_p = soap_instantiate_ArrayOfCFolderType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ArrayOfCFolderType::__ptritem = __ptritem; _p->ArrayOfCFolderType::__size = __size; } return _p; }

inline void soap_delete_ArrayOfCFolderType(struct soap *soap, ArrayOfCFolderType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfCFolderType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CFolderType
#define SOAP_TYPE_ns1__CFolderType (93)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CFolderType(struct soap*, const char*, int, const ns1__CFolderType *, const char*);
SOAP_FMAC3 ns1__CFolderType * SOAP_FMAC4 soap_in_ns1__CFolderType(struct soap*, const char*, ns1__CFolderType *, const char*);

#ifndef soap_write_ns1__CFolderType
#define soap_write_ns1__CFolderType(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CFolderType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CFolderType * SOAP_FMAC4 soap_get_ns1__CFolderType(struct soap*, ns1__CFolderType *, const char*, const char*);

#ifndef soap_read_ns1__CFolderType
#define soap_read_ns1__CFolderType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CFolderType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CFolderType * SOAP_FMAC2 soap_instantiate_ns1__CFolderType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CFolderType * soap_new_ns1__CFolderType(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CFolderType(soap, n, NULL, NULL, NULL); }

inline ns1__CFolderType * soap_new_req_ns1__CFolderType(struct soap *soap, LONG64 recordid) { ns1__CFolderType *_p = soap_instantiate_ns1__CFolderType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CFolderType::recordid = recordid; } return _p; }

inline ns1__CFolderType * soap_new_set_ns1__CFolderType(struct soap *soap, LONG64 recordid, char *name, char *description, bool *allowweb, bool *allowdetails, bool *releaseplanning) { ns1__CFolderType *_p = soap_instantiate_ns1__CFolderType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CFolderType::recordid = recordid; _p->ns1__CFolderType::name = name; _p->ns1__CFolderType::description = description; _p->ns1__CFolderType::allowweb = allowweb; _p->ns1__CFolderType::allowdetails = allowdetails; _p->ns1__CFolderType::releaseplanning = releaseplanning; } return _p; }

inline void soap_delete_ns1__CFolderType(struct soap *soap, ns1__CFolderType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CFolderType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CScheduleInfo
#define SOAP_TYPE_ns1__CScheduleInfo (92)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CScheduleInfo(struct soap*, const char*, int, const ns1__CScheduleInfo *, const char*);
SOAP_FMAC3 ns1__CScheduleInfo * SOAP_FMAC4 soap_in_ns1__CScheduleInfo(struct soap*, const char*, ns1__CScheduleInfo *, const char*);

#ifndef soap_write_ns1__CScheduleInfo
#define soap_write_ns1__CScheduleInfo(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CScheduleInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CScheduleInfo * SOAP_FMAC4 soap_get_ns1__CScheduleInfo(struct soap*, ns1__CScheduleInfo *, const char*, const char*);

#ifndef soap_read_ns1__CScheduleInfo
#define soap_read_ns1__CScheduleInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CScheduleInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CScheduleInfo * SOAP_FMAC2 soap_instantiate_ns1__CScheduleInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CScheduleInfo * soap_new_ns1__CScheduleInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CScheduleInfo(soap, n, NULL, NULL, NULL); }

inline ns1__CScheduleInfo * soap_new_req_ns1__CScheduleInfo(struct soap *soap) { ns1__CScheduleInfo *_p = soap_instantiate_ns1__CScheduleInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__CScheduleInfo * soap_new_set_ns1__CScheduleInfo(struct soap *soap, char *startdate, char *enddate, bool *includeweekends, LONG64 *nonworkingdays, double *hoursperday, double *ptohours, double *usersavailable, LONG64 *storypoints) { ns1__CScheduleInfo *_p = soap_instantiate_ns1__CScheduleInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CScheduleInfo::startdate = startdate; _p->ns1__CScheduleInfo::enddate = enddate; _p->ns1__CScheduleInfo::includeweekends = includeweekends; _p->ns1__CScheduleInfo::nonworkingdays = nonworkingdays; _p->ns1__CScheduleInfo::hoursperday = hoursperday; _p->ns1__CScheduleInfo::ptohours = ptohours; _p->ns1__CScheduleInfo::usersavailable = usersavailable; _p->ns1__CScheduleInfo::storypoints = storypoints; } return _p; }

inline void soap_delete_ns1__CScheduleInfo(struct soap *soap, ns1__CScheduleInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CScheduleInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfCItemToTrack
#define SOAP_TYPE_ArrayOfCItemToTrack (91)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfCItemToTrack(struct soap*, const char*, int, const ArrayOfCItemToTrack *, const char*);
SOAP_FMAC3 ArrayOfCItemToTrack * SOAP_FMAC4 soap_in_ArrayOfCItemToTrack(struct soap*, const char*, ArrayOfCItemToTrack *, const char*);

#ifndef soap_write_ArrayOfCItemToTrack
#define soap_write_ArrayOfCItemToTrack(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCItemToTrack * SOAP_FMAC4 soap_get_ArrayOfCItemToTrack(struct soap*, ArrayOfCItemToTrack *, const char*, const char*);

#ifndef soap_read_ArrayOfCItemToTrack
#define soap_read_ArrayOfCItemToTrack(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfCItemToTrack(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ArrayOfCItemToTrack * SOAP_FMAC2 soap_instantiate_ArrayOfCItemToTrack(struct soap*, int, const char*, const char*, size_t*);

inline ArrayOfCItemToTrack * soap_new_ArrayOfCItemToTrack(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfCItemToTrack(soap, n, NULL, NULL, NULL); }

inline ArrayOfCItemToTrack * soap_new_req_ArrayOfCItemToTrack(struct soap *soap) { ArrayOfCItemToTrack *_p = soap_instantiate_ArrayOfCItemToTrack(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ArrayOfCItemToTrack * soap_new_set_ArrayOfCItemToTrack(struct soap *soap, ns1__CItemToTrack **__ptritem, int __size) { ArrayOfCItemToTrack *_p = soap_instantiate_ArrayOfCItemToTrack(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ArrayOfCItemToTrack::__ptritem = __ptritem; _p->ArrayOfCItemToTrack::__size = __size; } return _p; }

inline void soap_delete_ArrayOfCItemToTrack(struct soap *soap, ArrayOfCItemToTrack *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfCItemToTrack(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CTestRun
#define SOAP_TYPE_ns1__CTestRun (90)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CTestRun(struct soap*, const char*, int, const ns1__CTestRun *, const char*);
SOAP_FMAC3 ns1__CTestRun * SOAP_FMAC4 soap_in_ns1__CTestRun(struct soap*, const char*, ns1__CTestRun *, const char*);

#ifndef soap_write_ns1__CTestRun
#define soap_write_ns1__CTestRun(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CTestRun", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CTestRun * SOAP_FMAC4 soap_get_ns1__CTestRun(struct soap*, ns1__CTestRun *, const char*, const char*);

#ifndef soap_read_ns1__CTestRun
#define soap_read_ns1__CTestRun(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CTestRun(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CTestRun * SOAP_FMAC2 soap_instantiate_ns1__CTestRun(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CTestRun * soap_new_ns1__CTestRun(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CTestRun(soap, n, NULL, NULL, NULL); }

inline ns1__CTestRun * soap_new_req_ns1__CTestRun(struct soap *soap, LONG64 recordid) { ns1__CTestRun *_p = soap_instantiate_ns1__CTestRun(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CTestRun::recordid = recordid; } return _p; }

inline ns1__CTestRun * soap_new_set_ns1__CTestRun(struct soap *soap, LONG64 recordid, LONG64 *testrunnumber, char *summary, char *state, char *createdbyuser, time_t *datetimecreated, char *locationaddedfrom, char *modifiedbyuser, time_t *datetimemodified, ArrayOfCField *customFieldList, ArrayOfCEvent *eventlist, double *actualhours, double *estimatedhours, double *remaininghours, double *variance, LONG64 *storypoints, LONG64 *percentdone, LONG64 *testcasenumber, LONG64 *testcaserecordid, char *type, char *testrunset, bool *isautomated, char *estimatedtime, char *steps, char *problemstatement, ArrayOfCTestCaseVariantField *testVariants, ArrayOfCFileAttachment *attachmentlist, ArrayOfCSCCFileRecord *sccFileList, char *stepsmode) { ns1__CTestRun *_p = soap_instantiate_ns1__CTestRun(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CTestRun::recordid = recordid; _p->ns1__CTestRun::testrunnumber = testrunnumber; _p->ns1__CTestRun::summary = summary; _p->ns1__CTestRun::state = state; _p->ns1__CTestRun::createdbyuser = createdbyuser; _p->ns1__CTestRun::datetimecreated = datetimecreated; _p->ns1__CTestRun::locationaddedfrom = locationaddedfrom; _p->ns1__CTestRun::modifiedbyuser = modifiedbyuser; _p->ns1__CTestRun::datetimemodified = datetimemodified; _p->ns1__CTestRun::customFieldList = customFieldList; _p->ns1__CTestRun::eventlist = eventlist; _p->ns1__CTestRun::actualhours = actualhours; _p->ns1__CTestRun::estimatedhours = estimatedhours; _p->ns1__CTestRun::remaininghours = remaininghours; _p->ns1__CTestRun::variance = variance; _p->ns1__CTestRun::storypoints = storypoints; _p->ns1__CTestRun::percentdone = percentdone; _p->ns1__CTestRun::testcasenumber = testcasenumber; _p->ns1__CTestRun::testcaserecordid = testcaserecordid; _p->ns1__CTestRun::type = type; _p->ns1__CTestRun::testrunset = testrunset; _p->ns1__CTestRun::isautomated = isautomated; _p->ns1__CTestRun::estimatedtime = estimatedtime; _p->ns1__CTestRun::steps = steps; _p->ns1__CTestRun::problemstatement = problemstatement; _p->ns1__CTestRun::testVariants = testVariants; _p->ns1__CTestRun::attachmentlist = attachmentlist; _p->ns1__CTestRun::sccFileList = sccFileList; _p->ns1__CTestRun::stepsmode = stepsmode; } return _p; }

inline void soap_delete_ns1__CTestRun(struct soap *soap, ns1__CTestRun *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CTestRun(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CTestCase
#define SOAP_TYPE_ns1__CTestCase (89)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CTestCase(struct soap*, const char*, int, const ns1__CTestCase *, const char*);
SOAP_FMAC3 ns1__CTestCase * SOAP_FMAC4 soap_in_ns1__CTestCase(struct soap*, const char*, ns1__CTestCase *, const char*);

#ifndef soap_write_ns1__CTestCase
#define soap_write_ns1__CTestCase(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CTestCase", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CTestCase * SOAP_FMAC4 soap_get_ns1__CTestCase(struct soap*, ns1__CTestCase *, const char*, const char*);

#ifndef soap_read_ns1__CTestCase
#define soap_read_ns1__CTestCase(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CTestCase(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CTestCase * SOAP_FMAC2 soap_instantiate_ns1__CTestCase(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CTestCase * soap_new_ns1__CTestCase(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CTestCase(soap, n, NULL, NULL, NULL); }

inline ns1__CTestCase * soap_new_req_ns1__CTestCase(struct soap *soap, LONG64 recordid) { ns1__CTestCase *_p = soap_instantiate_ns1__CTestCase(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CTestCase::recordid = recordid; } return _p; }

inline ns1__CTestCase * soap_new_set_ns1__CTestCase(struct soap *soap, LONG64 recordid, LONG64 *testcasenumber, char *summary, char *state, char *createdbyuser, time_t *datetimecreated, char *locationaddedfrom, char *modifiedbyuser, time_t *datetimemodified, ArrayOfCField *customFieldList, ArrayOfCEvent *eventlist, double *actualhours, double *estimatedhours, double *remaininghours, double *variance, LONG64 *storypoints, LONG64 *percentdone, char *type, char *testrunstepsmode, bool *isautomated, char *estimatedtime, char *steps, ArrayOfCTestCaseVariantField *testVariants, ArrayOfCFileAttachment *attachmentlist, ArrayOfCSCCFileRecord *sccFileList) { ns1__CTestCase *_p = soap_instantiate_ns1__CTestCase(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CTestCase::recordid = recordid; _p->ns1__CTestCase::testcasenumber = testcasenumber; _p->ns1__CTestCase::summary = summary; _p->ns1__CTestCase::state = state; _p->ns1__CTestCase::createdbyuser = createdbyuser; _p->ns1__CTestCase::datetimecreated = datetimecreated; _p->ns1__CTestCase::locationaddedfrom = locationaddedfrom; _p->ns1__CTestCase::modifiedbyuser = modifiedbyuser; _p->ns1__CTestCase::datetimemodified = datetimemodified; _p->ns1__CTestCase::customFieldList = customFieldList; _p->ns1__CTestCase::eventlist = eventlist; _p->ns1__CTestCase::actualhours = actualhours; _p->ns1__CTestCase::estimatedhours = estimatedhours; _p->ns1__CTestCase::remaininghours = remaininghours; _p->ns1__CTestCase::variance = variance; _p->ns1__CTestCase::storypoints = storypoints; _p->ns1__CTestCase::percentdone = percentdone; _p->ns1__CTestCase::type = type; _p->ns1__CTestCase::testrunstepsmode = testrunstepsmode; _p->ns1__CTestCase::isautomated = isautomated; _p->ns1__CTestCase::estimatedtime = estimatedtime; _p->ns1__CTestCase::steps = steps; _p->ns1__CTestCase::testVariants = testVariants; _p->ns1__CTestCase::attachmentlist = attachmentlist; _p->ns1__CTestCase::sccFileList = sccFileList; } return _p; }

inline void soap_delete_ns1__CTestCase(struct soap *soap, ns1__CTestCase *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CTestCase(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfCLink
#define SOAP_TYPE_ArrayOfCLink (88)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfCLink(struct soap*, const char*, int, const ArrayOfCLink *, const char*);
SOAP_FMAC3 ArrayOfCLink * SOAP_FMAC4 soap_in_ArrayOfCLink(struct soap*, const char*, ArrayOfCLink *, const char*);

#ifndef soap_write_ArrayOfCLink
#define soap_write_ArrayOfCLink(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCLink * SOAP_FMAC4 soap_get_ArrayOfCLink(struct soap*, ArrayOfCLink *, const char*, const char*);

#ifndef soap_read_ArrayOfCLink
#define soap_read_ArrayOfCLink(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfCLink(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ArrayOfCLink * SOAP_FMAC2 soap_instantiate_ArrayOfCLink(struct soap*, int, const char*, const char*, size_t*);

inline ArrayOfCLink * soap_new_ArrayOfCLink(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfCLink(soap, n, NULL, NULL, NULL); }

inline ArrayOfCLink * soap_new_req_ArrayOfCLink(struct soap *soap) { ArrayOfCLink *_p = soap_instantiate_ArrayOfCLink(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ArrayOfCLink * soap_new_set_ArrayOfCLink(struct soap *soap, ns1__CLink **__ptritem, int __size) { ArrayOfCLink *_p = soap_instantiate_ArrayOfCLink(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ArrayOfCLink::__ptritem = __ptritem; _p->ArrayOfCLink::__size = __size; } return _p; }

inline void soap_delete_ArrayOfCLink(struct soap *soap, ArrayOfCLink *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfCLink(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CLink
#define SOAP_TYPE_ns1__CLink (87)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CLink(struct soap*, const char*, int, const ns1__CLink *, const char*);
SOAP_FMAC3 ns1__CLink * SOAP_FMAC4 soap_in_ns1__CLink(struct soap*, const char*, ns1__CLink *, const char*);

#ifndef soap_write_ns1__CLink
#define soap_write_ns1__CLink(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CLink", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CLink * SOAP_FMAC4 soap_get_ns1__CLink(struct soap*, ns1__CLink *, const char*, const char*);

#ifndef soap_read_ns1__CLink
#define soap_read_ns1__CLink(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CLink(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CLink * SOAP_FMAC2 soap_instantiate_ns1__CLink(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CLink * soap_new_ns1__CLink(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CLink(soap, n, NULL, NULL, NULL); }

inline ns1__CLink * soap_new_req_ns1__CLink(struct soap *soap, LONG64 recordid, char *linkDefinitionName) { ns1__CLink *_p = soap_instantiate_ns1__CLink(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CLink::recordid = recordid; _p->ns1__CLink::linkDefinitionName = linkDefinitionName; } return _p; }

inline ns1__CLink * soap_new_set_ns1__CLink(struct soap *soap, LONG64 recordid, char *linkDefinitionName, char *comment, bool *linkbroken, ns1__CLinkedItem *linkparent, ArrayOfCLinkedItem *childList, ArrayOfCLinkHistoryItem *historyList) { ns1__CLink *_p = soap_instantiate_ns1__CLink(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CLink::recordid = recordid; _p->ns1__CLink::linkDefinitionName = linkDefinitionName; _p->ns1__CLink::comment = comment; _p->ns1__CLink::linkbroken = linkbroken; _p->ns1__CLink::linkparent = linkparent; _p->ns1__CLink::childList = childList; _p->ns1__CLink::historyList = historyList; } return _p; }

inline void soap_delete_ns1__CLink(struct soap *soap, ns1__CLink *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CLink(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfCLinkHistoryItem
#define SOAP_TYPE_ArrayOfCLinkHistoryItem (86)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfCLinkHistoryItem(struct soap*, const char*, int, const ArrayOfCLinkHistoryItem *, const char*);
SOAP_FMAC3 ArrayOfCLinkHistoryItem * SOAP_FMAC4 soap_in_ArrayOfCLinkHistoryItem(struct soap*, const char*, ArrayOfCLinkHistoryItem *, const char*);

#ifndef soap_write_ArrayOfCLinkHistoryItem
#define soap_write_ArrayOfCLinkHistoryItem(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCLinkHistoryItem * SOAP_FMAC4 soap_get_ArrayOfCLinkHistoryItem(struct soap*, ArrayOfCLinkHistoryItem *, const char*, const char*);

#ifndef soap_read_ArrayOfCLinkHistoryItem
#define soap_read_ArrayOfCLinkHistoryItem(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfCLinkHistoryItem(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ArrayOfCLinkHistoryItem * SOAP_FMAC2 soap_instantiate_ArrayOfCLinkHistoryItem(struct soap*, int, const char*, const char*, size_t*);

inline ArrayOfCLinkHistoryItem * soap_new_ArrayOfCLinkHistoryItem(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfCLinkHistoryItem(soap, n, NULL, NULL, NULL); }

inline ArrayOfCLinkHistoryItem * soap_new_req_ArrayOfCLinkHistoryItem(struct soap *soap) { ArrayOfCLinkHistoryItem *_p = soap_instantiate_ArrayOfCLinkHistoryItem(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ArrayOfCLinkHistoryItem * soap_new_set_ArrayOfCLinkHistoryItem(struct soap *soap, ns1__CLinkHistoryItem **__ptritem, int __size) { ArrayOfCLinkHistoryItem *_p = soap_instantiate_ArrayOfCLinkHistoryItem(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ArrayOfCLinkHistoryItem::__ptritem = __ptritem; _p->ArrayOfCLinkHistoryItem::__size = __size; } return _p; }

inline void soap_delete_ArrayOfCLinkHistoryItem(struct soap *soap, ArrayOfCLinkHistoryItem *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfCLinkHistoryItem(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CLinkHistoryItem
#define SOAP_TYPE_ns1__CLinkHistoryItem (85)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CLinkHistoryItem(struct soap*, const char*, int, const ns1__CLinkHistoryItem *, const char*);
SOAP_FMAC3 ns1__CLinkHistoryItem * SOAP_FMAC4 soap_in_ns1__CLinkHistoryItem(struct soap*, const char*, ns1__CLinkHistoryItem *, const char*);

#ifndef soap_write_ns1__CLinkHistoryItem
#define soap_write_ns1__CLinkHistoryItem(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CLinkHistoryItem", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CLinkHistoryItem * SOAP_FMAC4 soap_get_ns1__CLinkHistoryItem(struct soap*, ns1__CLinkHistoryItem *, const char*, const char*);

#ifndef soap_read_ns1__CLinkHistoryItem
#define soap_read_ns1__CLinkHistoryItem(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CLinkHistoryItem(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CLinkHistoryItem * SOAP_FMAC2 soap_instantiate_ns1__CLinkHistoryItem(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CLinkHistoryItem * soap_new_ns1__CLinkHistoryItem(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CLinkHistoryItem(soap, n, NULL, NULL, NULL); }

inline ns1__CLinkHistoryItem * soap_new_req_ns1__CLinkHistoryItem(struct soap *soap, LONG64 recordid, LONG64 order) { ns1__CLinkHistoryItem *_p = soap_instantiate_ns1__CLinkHistoryItem(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CLinkHistoryItem::recordid = recordid; _p->ns1__CLinkHistoryItem::order = order; } return _p; }

inline ns1__CLinkHistoryItem * soap_new_set_ns1__CLinkHistoryItem(struct soap *soap, LONG64 recordid, LONG64 order, time_t *date, char *firstname, char *lastname, char *history) { ns1__CLinkHistoryItem *_p = soap_instantiate_ns1__CLinkHistoryItem(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CLinkHistoryItem::recordid = recordid; _p->ns1__CLinkHistoryItem::order = order; _p->ns1__CLinkHistoryItem::date = date; _p->ns1__CLinkHistoryItem::firstname = firstname; _p->ns1__CLinkHistoryItem::lastname = lastname; _p->ns1__CLinkHistoryItem::history = history; } return _p; }

inline void soap_delete_ns1__CLinkHistoryItem(struct soap *soap, ns1__CLinkHistoryItem *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CLinkHistoryItem(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfCLinkedItem
#define SOAP_TYPE_ArrayOfCLinkedItem (84)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfCLinkedItem(struct soap*, const char*, int, const ArrayOfCLinkedItem *, const char*);
SOAP_FMAC3 ArrayOfCLinkedItem * SOAP_FMAC4 soap_in_ArrayOfCLinkedItem(struct soap*, const char*, ArrayOfCLinkedItem *, const char*);

#ifndef soap_write_ArrayOfCLinkedItem
#define soap_write_ArrayOfCLinkedItem(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCLinkedItem * SOAP_FMAC4 soap_get_ArrayOfCLinkedItem(struct soap*, ArrayOfCLinkedItem *, const char*, const char*);

#ifndef soap_read_ArrayOfCLinkedItem
#define soap_read_ArrayOfCLinkedItem(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfCLinkedItem(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ArrayOfCLinkedItem * SOAP_FMAC2 soap_instantiate_ArrayOfCLinkedItem(struct soap*, int, const char*, const char*, size_t*);

inline ArrayOfCLinkedItem * soap_new_ArrayOfCLinkedItem(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfCLinkedItem(soap, n, NULL, NULL, NULL); }

inline ArrayOfCLinkedItem * soap_new_req_ArrayOfCLinkedItem(struct soap *soap) { ArrayOfCLinkedItem *_p = soap_instantiate_ArrayOfCLinkedItem(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ArrayOfCLinkedItem * soap_new_set_ArrayOfCLinkedItem(struct soap *soap, ns1__CLinkedItem **__ptritem, int __size) { ArrayOfCLinkedItem *_p = soap_instantiate_ArrayOfCLinkedItem(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ArrayOfCLinkedItem::__ptritem = __ptritem; _p->ArrayOfCLinkedItem::__size = __size; } return _p; }

inline void soap_delete_ArrayOfCLinkedItem(struct soap *soap, ArrayOfCLinkedItem *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfCLinkedItem(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CLinkedItem
#define SOAP_TYPE_ns1__CLinkedItem (83)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CLinkedItem(struct soap*, const char*, int, const ns1__CLinkedItem *, const char*);
SOAP_FMAC3 ns1__CLinkedItem * SOAP_FMAC4 soap_in_ns1__CLinkedItem(struct soap*, const char*, ns1__CLinkedItem *, const char*);

#ifndef soap_write_ns1__CLinkedItem
#define soap_write_ns1__CLinkedItem(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CLinkedItem", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CLinkedItem * SOAP_FMAC4 soap_get_ns1__CLinkedItem(struct soap*, ns1__CLinkedItem *, const char*, const char*);

#ifndef soap_read_ns1__CLinkedItem
#define soap_read_ns1__CLinkedItem(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CLinkedItem(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CLinkedItem * SOAP_FMAC2 soap_instantiate_ns1__CLinkedItem(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CLinkedItem * soap_new_ns1__CLinkedItem(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CLinkedItem(soap, n, NULL, NULL, NULL); }

inline ns1__CLinkedItem * soap_new_req_ns1__CLinkedItem(struct soap *soap, LONG64 recordid, LONG64 order, char *tablename, LONG64 entityID) { ns1__CLinkedItem *_p = soap_instantiate_ns1__CLinkedItem(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CLinkedItem::recordid = recordid; _p->ns1__CLinkedItem::order = order; _p->ns1__CLinkedItem::tablename = tablename; _p->ns1__CLinkedItem::entityID = entityID; } return _p; }

inline ns1__CLinkedItem * soap_new_set_ns1__CLinkedItem(struct soap *soap, LONG64 recordid, LONG64 order, LONG64 *entityType, char *tablename, LONG64 entityID, char *number, char *summary, char *status, char *state, bool *issuspect) { ns1__CLinkedItem *_p = soap_instantiate_ns1__CLinkedItem(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CLinkedItem::recordid = recordid; _p->ns1__CLinkedItem::order = order; _p->ns1__CLinkedItem::entityType = entityType; _p->ns1__CLinkedItem::tablename = tablename; _p->ns1__CLinkedItem::entityID = entityID; _p->ns1__CLinkedItem::number = number; _p->ns1__CLinkedItem::summary = summary; _p->ns1__CLinkedItem::status = status; _p->ns1__CLinkedItem::state = state; _p->ns1__CLinkedItem::issuspect = issuspect; } return _p; }

inline void soap_delete_ns1__CLinkedItem(struct soap *soap, ns1__CLinkedItem *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CLinkedItem(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfCUserLicense
#define SOAP_TYPE_ArrayOfCUserLicense (82)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfCUserLicense(struct soap*, const char*, int, const ArrayOfCUserLicense *, const char*);
SOAP_FMAC3 ArrayOfCUserLicense * SOAP_FMAC4 soap_in_ArrayOfCUserLicense(struct soap*, const char*, ArrayOfCUserLicense *, const char*);

#ifndef soap_write_ArrayOfCUserLicense
#define soap_write_ArrayOfCUserLicense(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCUserLicense * SOAP_FMAC4 soap_get_ArrayOfCUserLicense(struct soap*, ArrayOfCUserLicense *, const char*, const char*);

#ifndef soap_read_ArrayOfCUserLicense
#define soap_read_ArrayOfCUserLicense(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfCUserLicense(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ArrayOfCUserLicense * SOAP_FMAC2 soap_instantiate_ArrayOfCUserLicense(struct soap*, int, const char*, const char*, size_t*);

inline ArrayOfCUserLicense * soap_new_ArrayOfCUserLicense(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfCUserLicense(soap, n, NULL, NULL, NULL); }

inline ArrayOfCUserLicense * soap_new_req_ArrayOfCUserLicense(struct soap *soap) { ArrayOfCUserLicense *_p = soap_instantiate_ArrayOfCUserLicense(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ArrayOfCUserLicense * soap_new_set_ArrayOfCUserLicense(struct soap *soap, ns1__CUserLicense **__ptritem, int __size) { ArrayOfCUserLicense *_p = soap_instantiate_ArrayOfCUserLicense(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ArrayOfCUserLicense::__ptritem = __ptritem; _p->ArrayOfCUserLicense::__size = __size; } return _p; }

inline void soap_delete_ArrayOfCUserLicense(struct soap *soap, ArrayOfCUserLicense *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfCUserLicense(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CUserLicense
#define SOAP_TYPE_ns1__CUserLicense (81)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CUserLicense(struct soap*, const char*, int, const ns1__CUserLicense *, const char*);
SOAP_FMAC3 ns1__CUserLicense * SOAP_FMAC4 soap_in_ns1__CUserLicense(struct soap*, const char*, ns1__CUserLicense *, const char*);

#ifndef soap_write_ns1__CUserLicense
#define soap_write_ns1__CUserLicense(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CUserLicense", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CUserLicense * SOAP_FMAC4 soap_get_ns1__CUserLicense(struct soap*, ns1__CUserLicense *, const char*, const char*);

#ifndef soap_read_ns1__CUserLicense
#define soap_read_ns1__CUserLicense(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CUserLicense(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CUserLicense * SOAP_FMAC2 soap_instantiate_ns1__CUserLicense(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CUserLicense * soap_new_ns1__CUserLicense(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CUserLicense(soap, n, NULL, NULL, NULL); }

inline ns1__CUserLicense * soap_new_req_ns1__CUserLicense(struct soap *soap) { ns1__CUserLicense *_p = soap_instantiate_ns1__CUserLicense(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__CUserLicense * soap_new_set_ns1__CUserLicense(struct soap *soap, char *name, int *numberUsed, int *numberTotal) { ns1__CUserLicense *_p = soap_instantiate_ns1__CUserLicense(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CUserLicense::name = name; _p->ns1__CUserLicense::numberUsed = numberUsed; _p->ns1__CUserLicense::numberTotal = numberTotal; } return _p; }

inline void soap_delete_ns1__CUserLicense(struct soap *soap, ns1__CUserLicense *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CUserLicense(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfCGlobalUser
#define SOAP_TYPE_ArrayOfCGlobalUser (80)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfCGlobalUser(struct soap*, const char*, int, const ArrayOfCGlobalUser *, const char*);
SOAP_FMAC3 ArrayOfCGlobalUser * SOAP_FMAC4 soap_in_ArrayOfCGlobalUser(struct soap*, const char*, ArrayOfCGlobalUser *, const char*);

#ifndef soap_write_ArrayOfCGlobalUser
#define soap_write_ArrayOfCGlobalUser(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCGlobalUser * SOAP_FMAC4 soap_get_ArrayOfCGlobalUser(struct soap*, ArrayOfCGlobalUser *, const char*, const char*);

#ifndef soap_read_ArrayOfCGlobalUser
#define soap_read_ArrayOfCGlobalUser(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfCGlobalUser(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ArrayOfCGlobalUser * SOAP_FMAC2 soap_instantiate_ArrayOfCGlobalUser(struct soap*, int, const char*, const char*, size_t*);

inline ArrayOfCGlobalUser * soap_new_ArrayOfCGlobalUser(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfCGlobalUser(soap, n, NULL, NULL, NULL); }

inline ArrayOfCGlobalUser * soap_new_req_ArrayOfCGlobalUser(struct soap *soap) { ArrayOfCGlobalUser *_p = soap_instantiate_ArrayOfCGlobalUser(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ArrayOfCGlobalUser * soap_new_set_ArrayOfCGlobalUser(struct soap *soap, ns1__CGlobalUser **__ptritem, int __size) { ArrayOfCGlobalUser *_p = soap_instantiate_ArrayOfCGlobalUser(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ArrayOfCGlobalUser::__ptritem = __ptritem; _p->ArrayOfCGlobalUser::__size = __size; } return _p; }

inline void soap_delete_ArrayOfCGlobalUser(struct soap *soap, ArrayOfCGlobalUser *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfCGlobalUser(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CGlobalUser
#define SOAP_TYPE_ns1__CGlobalUser (79)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CGlobalUser(struct soap*, const char*, int, const ns1__CGlobalUser *, const char*);
SOAP_FMAC3 ns1__CGlobalUser * SOAP_FMAC4 soap_in_ns1__CGlobalUser(struct soap*, const char*, ns1__CGlobalUser *, const char*);

#ifndef soap_write_ns1__CGlobalUser
#define soap_write_ns1__CGlobalUser(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CGlobalUser", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CGlobalUser * SOAP_FMAC4 soap_get_ns1__CGlobalUser(struct soap*, ns1__CGlobalUser *, const char*, const char*);

#ifndef soap_read_ns1__CGlobalUser
#define soap_read_ns1__CGlobalUser(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CGlobalUser(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CGlobalUser * SOAP_FMAC2 soap_instantiate_ns1__CGlobalUser(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CGlobalUser * soap_new_ns1__CGlobalUser(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CGlobalUser(soap, n, NULL, NULL, NULL); }

inline ns1__CGlobalUser * soap_new_req_ns1__CGlobalUser(struct soap *soap) { ns1__CGlobalUser *_p = soap_instantiate_ns1__CGlobalUser(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__CGlobalUser * soap_new_set_ns1__CGlobalUser(struct soap *soap, char *loginname, char *name) { ns1__CGlobalUser *_p = soap_instantiate_ns1__CGlobalUser(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CGlobalUser::loginname = loginname; _p->ns1__CGlobalUser::name = name; } return _p; }

inline void soap_delete_ns1__CGlobalUser(struct soap *soap, ns1__CGlobalUser *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CGlobalUser(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CUser
#define SOAP_TYPE_ns1__CUser (78)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CUser(struct soap*, const char*, int, const ns1__CUser *, const char*);
SOAP_FMAC3 ns1__CUser * SOAP_FMAC4 soap_in_ns1__CUser(struct soap*, const char*, ns1__CUser *, const char*);

#ifndef soap_write_ns1__CUser
#define soap_write_ns1__CUser(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CUser", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CUser * SOAP_FMAC4 soap_get_ns1__CUser(struct soap*, ns1__CUser *, const char*, const char*);

#ifndef soap_read_ns1__CUser
#define soap_read_ns1__CUser(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CUser(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CUser * SOAP_FMAC2 soap_instantiate_ns1__CUser(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CUser * soap_new_ns1__CUser(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CUser(soap, n, NULL, NULL, NULL); }

inline ns1__CUser * soap_new_req_ns1__CUser(struct soap *soap, LONG64 recordid) { ns1__CUser *_p = soap_instantiate_ns1__CUser(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CUser::recordid = recordid; } return _p; }

inline ns1__CUser * soap_new_set_ns1__CUser(struct soap *soap, LONG64 recordid, char *firstname, char *middleinitials, char *lastname, char *usergroupname, char *company, char *division, char *department, char *emailtype, char *emailaddress, bool *isactive, bool *iscustomer, bool *isglobal, bool *isactiveglobal, char *userLicense, char *userLicenseTCM, char *userLicenseRM, char *password, char *loginname, ns1__PhoneNumber *phoneone, ns1__PhoneNumber *phonetwo, char *notes, bool *betasite, char *address, ns1__CSystem *testconfig) { ns1__CUser *_p = soap_instantiate_ns1__CUser(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CUser::recordid = recordid; _p->ns1__CUser::firstname = firstname; _p->ns1__CUser::middleinitials = middleinitials; _p->ns1__CUser::lastname = lastname; _p->ns1__CUser::usergroupname = usergroupname; _p->ns1__CUser::company = company; _p->ns1__CUser::division = division; _p->ns1__CUser::department = department; _p->ns1__CUser::emailtype = emailtype; _p->ns1__CUser::emailaddress = emailaddress; _p->ns1__CUser::isactive = isactive; _p->ns1__CUser::iscustomer = iscustomer; _p->ns1__CUser::isglobal = isglobal; _p->ns1__CUser::isactiveglobal = isactiveglobal; _p->ns1__CUser::userLicense = userLicense; _p->ns1__CUser::userLicenseTCM = userLicenseTCM; _p->ns1__CUser::userLicenseRM = userLicenseRM; _p->ns1__CUser::password = password; _p->ns1__CUser::loginname = loginname; _p->ns1__CUser::phoneone = phoneone; _p->ns1__CUser::phonetwo = phonetwo; _p->ns1__CUser::notes = notes; _p->ns1__CUser::betasite = betasite; _p->ns1__CUser::address = address; _p->ns1__CUser::testconfig = testconfig; } return _p; }

inline void soap_delete_ns1__CUser(struct soap *soap, ns1__CUser *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CUser(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__PhoneNumber
#define SOAP_TYPE_ns1__PhoneNumber (77)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PhoneNumber(struct soap*, const char*, int, const ns1__PhoneNumber *, const char*);
SOAP_FMAC3 ns1__PhoneNumber * SOAP_FMAC4 soap_in_ns1__PhoneNumber(struct soap*, const char*, ns1__PhoneNumber *, const char*);

#ifndef soap_write_ns1__PhoneNumber
#define soap_write_ns1__PhoneNumber(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:PhoneNumber", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__PhoneNumber * SOAP_FMAC4 soap_get_ns1__PhoneNumber(struct soap*, ns1__PhoneNumber *, const char*, const char*);

#ifndef soap_read_ns1__PhoneNumber
#define soap_read_ns1__PhoneNumber(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__PhoneNumber(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__PhoneNumber * SOAP_FMAC2 soap_instantiate_ns1__PhoneNumber(struct soap*, int, const char*, const char*, size_t*);

inline ns1__PhoneNumber * soap_new_ns1__PhoneNumber(struct soap *soap, int n = -1) { return soap_instantiate_ns1__PhoneNumber(soap, n, NULL, NULL, NULL); }

inline ns1__PhoneNumber * soap_new_req_ns1__PhoneNumber(struct soap *soap) { ns1__PhoneNumber *_p = soap_instantiate_ns1__PhoneNumber(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__PhoneNumber * soap_new_set_ns1__PhoneNumber(struct soap *soap, char *numbertype, char *phonenumber) { ns1__PhoneNumber *_p = soap_instantiate_ns1__PhoneNumber(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__PhoneNumber::numbertype = numbertype; _p->ns1__PhoneNumber::phonenumber = phonenumber; } return _p; }

inline void soap_delete_ns1__PhoneNumber(struct soap *soap, ns1__PhoneNumber *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__PhoneNumber(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CTask
#define SOAP_TYPE_ns1__CTask (76)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CTask(struct soap*, const char*, int, const ns1__CTask *, const char*);
SOAP_FMAC3 ns1__CTask * SOAP_FMAC4 soap_in_ns1__CTask(struct soap*, const char*, ns1__CTask *, const char*);

#ifndef soap_write_ns1__CTask
#define soap_write_ns1__CTask(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CTask", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CTask * SOAP_FMAC4 soap_get_ns1__CTask(struct soap*, ns1__CTask *, const char*, const char*);

#ifndef soap_read_ns1__CTask
#define soap_read_ns1__CTask(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CTask(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CTask * SOAP_FMAC2 soap_instantiate_ns1__CTask(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CTask * soap_new_ns1__CTask(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CTask(soap, n, NULL, NULL, NULL); }

inline ns1__CTask * soap_new_req_ns1__CTask(struct soap *soap, LONG64 recordid) { ns1__CTask *_p = soap_instantiate_ns1__CTask(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CTask::recordid = recordid; } return _p; }

inline ns1__CTask * soap_new_set_ns1__CTask(struct soap *soap, LONG64 recordid, char *status, char *priority, char *summary, char *description, char *datedue, char *dateassigned, char *versiondue, char *assignedto, char *assignedby, LONG64 *assigneddefect) { ns1__CTask *_p = soap_instantiate_ns1__CTask(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CTask::recordid = recordid; _p->ns1__CTask::status = status; _p->ns1__CTask::priority = priority; _p->ns1__CTask::summary = summary; _p->ns1__CTask::description = description; _p->ns1__CTask::datedue = datedue; _p->ns1__CTask::dateassigned = dateassigned; _p->ns1__CTask::versiondue = versiondue; _p->ns1__CTask::assignedto = assignedto; _p->ns1__CTask::assignedby = assignedby; _p->ns1__CTask::assigneddefect = assigneddefect; } return _p; }

inline void soap_delete_ns1__CTask(struct soap *soap, ns1__CTask *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CTask(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CDefect
#define SOAP_TYPE_ns1__CDefect (75)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CDefect(struct soap*, const char*, int, const ns1__CDefect *, const char*);
SOAP_FMAC3 ns1__CDefect * SOAP_FMAC4 soap_in_ns1__CDefect(struct soap*, const char*, ns1__CDefect *, const char*);

#ifndef soap_write_ns1__CDefect
#define soap_write_ns1__CDefect(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CDefect", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CDefect * SOAP_FMAC4 soap_get_ns1__CDefect(struct soap*, ns1__CDefect *, const char*, const char*);

#ifndef soap_read_ns1__CDefect
#define soap_read_ns1__CDefect(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CDefect(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CDefect * SOAP_FMAC2 soap_instantiate_ns1__CDefect(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CDefect * soap_new_ns1__CDefect(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CDefect(soap, n, NULL, NULL, NULL); }

inline ns1__CDefect * soap_new_req_ns1__CDefect(struct soap *soap, LONG64 recordid) { ns1__CDefect *_p = soap_instantiate_ns1__CDefect(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CDefect::recordid = recordid; } return _p; }

inline ns1__CDefect * soap_new_set_ns1__CDefect(struct soap *soap, LONG64 recordid, LONG64 *defectnumber, char *summary, char *state, char *disposition, char *type, char *priority, char *product, char *component, char *reference, char *severity, char *enteredby, char *workaround, ArrayOfCFileAttachment *workaroundInlineAttachList, char *dateentered, char *locationaddedfrom, time_t *datetimecreated, time_t *datetimemodified, char *createdbyuser, char *modifiedbyuser, double *actualhourstofix, double *estimatedhours, double *remaininghours, double *variance, LONG64 *storypoints, LONG64 *percentdone, ArrayOfCReportedByRecord *reportedbylist, ArrayOfCEvent *eventlist, ArrayOfCSCCFileRecord *pSCCFileList, ArrayOfCField *customFieldList) { ns1__CDefect *_p = soap_instantiate_ns1__CDefect(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CDefect::recordid = recordid; _p->ns1__CDefect::defectnumber = defectnumber; _p->ns1__CDefect::summary = summary; _p->ns1__CDefect::state = state; _p->ns1__CDefect::disposition = disposition; _p->ns1__CDefect::type = type; _p->ns1__CDefect::priority = priority; _p->ns1__CDefect::product = product; _p->ns1__CDefect::component = component; _p->ns1__CDefect::reference = reference; _p->ns1__CDefect::severity = severity; _p->ns1__CDefect::enteredby = enteredby; _p->ns1__CDefect::workaround = workaround; _p->ns1__CDefect::workaroundInlineAttachList = workaroundInlineAttachList; _p->ns1__CDefect::dateentered = dateentered; _p->ns1__CDefect::locationaddedfrom = locationaddedfrom; _p->ns1__CDefect::datetimecreated = datetimecreated; _p->ns1__CDefect::datetimemodified = datetimemodified; _p->ns1__CDefect::createdbyuser = createdbyuser; _p->ns1__CDefect::modifiedbyuser = modifiedbyuser; _p->ns1__CDefect::actualhourstofix = actualhourstofix; _p->ns1__CDefect::estimatedhours = estimatedhours; _p->ns1__CDefect::remaininghours = remaininghours; _p->ns1__CDefect::variance = variance; _p->ns1__CDefect::storypoints = storypoints; _p->ns1__CDefect::percentdone = percentdone; _p->ns1__CDefect::reportedbylist = reportedbylist; _p->ns1__CDefect::eventlist = eventlist; _p->ns1__CDefect::pSCCFileList = pSCCFileList; _p->ns1__CDefect::customFieldList = customFieldList; } return _p; }

inline void soap_delete_ns1__CDefect(struct soap *soap, ns1__CDefect *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CDefect(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfCDefectEventDefinition
#define SOAP_TYPE_ArrayOfCDefectEventDefinition (74)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfCDefectEventDefinition(struct soap*, const char*, int, const ArrayOfCDefectEventDefinition *, const char*);
SOAP_FMAC3 ArrayOfCDefectEventDefinition * SOAP_FMAC4 soap_in_ArrayOfCDefectEventDefinition(struct soap*, const char*, ArrayOfCDefectEventDefinition *, const char*);

#ifndef soap_write_ArrayOfCDefectEventDefinition
#define soap_write_ArrayOfCDefectEventDefinition(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCDefectEventDefinition * SOAP_FMAC4 soap_get_ArrayOfCDefectEventDefinition(struct soap*, ArrayOfCDefectEventDefinition *, const char*, const char*);

#ifndef soap_read_ArrayOfCDefectEventDefinition
#define soap_read_ArrayOfCDefectEventDefinition(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfCDefectEventDefinition(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ArrayOfCDefectEventDefinition * SOAP_FMAC2 soap_instantiate_ArrayOfCDefectEventDefinition(struct soap*, int, const char*, const char*, size_t*);

inline ArrayOfCDefectEventDefinition * soap_new_ArrayOfCDefectEventDefinition(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfCDefectEventDefinition(soap, n, NULL, NULL, NULL); }

inline ArrayOfCDefectEventDefinition * soap_new_req_ArrayOfCDefectEventDefinition(struct soap *soap) { ArrayOfCDefectEventDefinition *_p = soap_instantiate_ArrayOfCDefectEventDefinition(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ArrayOfCDefectEventDefinition * soap_new_set_ArrayOfCDefectEventDefinition(struct soap *soap, ns1__CDefectEventDefinition **__ptritem, int __size) { ArrayOfCDefectEventDefinition *_p = soap_instantiate_ArrayOfCDefectEventDefinition(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ArrayOfCDefectEventDefinition::__ptritem = __ptritem; _p->ArrayOfCDefectEventDefinition::__size = __size; } return _p; }

inline void soap_delete_ArrayOfCDefectEventDefinition(struct soap *soap, ArrayOfCDefectEventDefinition *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfCDefectEventDefinition(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CDefectEventDefinition
#define SOAP_TYPE_ns1__CDefectEventDefinition (73)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CDefectEventDefinition(struct soap*, const char*, int, const ns1__CDefectEventDefinition *, const char*);
SOAP_FMAC3 ns1__CDefectEventDefinition * SOAP_FMAC4 soap_in_ns1__CDefectEventDefinition(struct soap*, const char*, ns1__CDefectEventDefinition *, const char*);

#ifndef soap_write_ns1__CDefectEventDefinition
#define soap_write_ns1__CDefectEventDefinition(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CDefectEventDefinition", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CDefectEventDefinition * SOAP_FMAC4 soap_get_ns1__CDefectEventDefinition(struct soap*, ns1__CDefectEventDefinition *, const char*, const char*);

#ifndef soap_read_ns1__CDefectEventDefinition
#define soap_read_ns1__CDefectEventDefinition(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CDefectEventDefinition(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CDefectEventDefinition * SOAP_FMAC2 soap_instantiate_ns1__CDefectEventDefinition(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CDefectEventDefinition * soap_new_ns1__CDefectEventDefinition(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CDefectEventDefinition(soap, n, NULL, NULL, NULL); }

inline ns1__CDefectEventDefinition * soap_new_req_ns1__CDefectEventDefinition(struct soap *soap) { ns1__CDefectEventDefinition *_p = soap_instantiate_ns1__CDefectEventDefinition(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__CDefectEventDefinition * soap_new_set_ns1__CDefectEventDefinition(struct soap *soap, char *name, bool *user, bool *datetime, bool *notes, bool *resultingState, ArrayOfCFieldValue *resultingStateValues, bool *fileattachments, bool *timeTracking, bool *timeSumOfAll, bool *timeHoursSinceLast, bool *newAssignment, bool *releaseNotes, bool *marksuspect, bool *reviewnote, ArrayOfCField *customFields) { ns1__CDefectEventDefinition *_p = soap_instantiate_ns1__CDefectEventDefinition(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CDefectEventDefinition::name = name; _p->ns1__CDefectEventDefinition::user = user; _p->ns1__CDefectEventDefinition::datetime = datetime; _p->ns1__CDefectEventDefinition::notes = notes; _p->ns1__CDefectEventDefinition::resultingState = resultingState; _p->ns1__CDefectEventDefinition::resultingStateValues = resultingStateValues; _p->ns1__CDefectEventDefinition::fileattachments = fileattachments; _p->ns1__CDefectEventDefinition::timeTracking = timeTracking; _p->ns1__CDefectEventDefinition::timeSumOfAll = timeSumOfAll; _p->ns1__CDefectEventDefinition::timeHoursSinceLast = timeHoursSinceLast; _p->ns1__CDefectEventDefinition::newAssignment = newAssignment; _p->ns1__CDefectEventDefinition::releaseNotes = releaseNotes; _p->ns1__CDefectEventDefinition::marksuspect = marksuspect; _p->ns1__CDefectEventDefinition::reviewnote = reviewnote; _p->ns1__CDefectEventDefinition::customFields = customFields; } return _p; }

inline void soap_delete_ns1__CDefectEventDefinition(struct soap *soap, ns1__CDefectEventDefinition *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CDefectEventDefinition(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfCEventDefinition
#define SOAP_TYPE_ArrayOfCEventDefinition (72)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfCEventDefinition(struct soap*, const char*, int, const ArrayOfCEventDefinition *, const char*);
SOAP_FMAC3 ArrayOfCEventDefinition * SOAP_FMAC4 soap_in_ArrayOfCEventDefinition(struct soap*, const char*, ArrayOfCEventDefinition *, const char*);

#ifndef soap_write_ArrayOfCEventDefinition
#define soap_write_ArrayOfCEventDefinition(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCEventDefinition * SOAP_FMAC4 soap_get_ArrayOfCEventDefinition(struct soap*, ArrayOfCEventDefinition *, const char*, const char*);

#ifndef soap_read_ArrayOfCEventDefinition
#define soap_read_ArrayOfCEventDefinition(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfCEventDefinition(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ArrayOfCEventDefinition * SOAP_FMAC2 soap_instantiate_ArrayOfCEventDefinition(struct soap*, int, const char*, const char*, size_t*);

inline ArrayOfCEventDefinition * soap_new_ArrayOfCEventDefinition(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfCEventDefinition(soap, n, NULL, NULL, NULL); }

inline ArrayOfCEventDefinition * soap_new_req_ArrayOfCEventDefinition(struct soap *soap) { ArrayOfCEventDefinition *_p = soap_instantiate_ArrayOfCEventDefinition(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ArrayOfCEventDefinition * soap_new_set_ArrayOfCEventDefinition(struct soap *soap, ns1__CEventDefinition **__ptritem, int __size) { ArrayOfCEventDefinition *_p = soap_instantiate_ArrayOfCEventDefinition(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ArrayOfCEventDefinition::__ptritem = __ptritem; _p->ArrayOfCEventDefinition::__size = __size; } return _p; }

inline void soap_delete_ArrayOfCEventDefinition(struct soap *soap, ArrayOfCEventDefinition *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfCEventDefinition(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CEventDefinition
#define SOAP_TYPE_ns1__CEventDefinition (71)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CEventDefinition(struct soap*, const char*, int, const ns1__CEventDefinition *, const char*);
SOAP_FMAC3 ns1__CEventDefinition * SOAP_FMAC4 soap_in_ns1__CEventDefinition(struct soap*, const char*, ns1__CEventDefinition *, const char*);

#ifndef soap_write_ns1__CEventDefinition
#define soap_write_ns1__CEventDefinition(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CEventDefinition", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CEventDefinition * SOAP_FMAC4 soap_get_ns1__CEventDefinition(struct soap*, ns1__CEventDefinition *, const char*, const char*);

#ifndef soap_read_ns1__CEventDefinition
#define soap_read_ns1__CEventDefinition(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CEventDefinition(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CEventDefinition * SOAP_FMAC2 soap_instantiate_ns1__CEventDefinition(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CEventDefinition * soap_new_ns1__CEventDefinition(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CEventDefinition(soap, n, NULL, NULL, NULL); }

inline ns1__CEventDefinition * soap_new_req_ns1__CEventDefinition(struct soap *soap) { ns1__CEventDefinition *_p = soap_instantiate_ns1__CEventDefinition(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__CEventDefinition * soap_new_set_ns1__CEventDefinition(struct soap *soap, char *name, bool *user, bool *datetime, bool *notes, bool *resultingState, ArrayOfCFieldValue *resultingStateValues, bool *fileattachments, bool *timeTracking, bool *timeSumOfAll, bool *timeHoursSinceLast, bool *newAssignment, bool *releaseNotes, bool *marksuspect, bool *reviewnote, ArrayOfCField *customFields) { ns1__CEventDefinition *_p = soap_instantiate_ns1__CEventDefinition(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CEventDefinition::name = name; _p->ns1__CEventDefinition::user = user; _p->ns1__CEventDefinition::datetime = datetime; _p->ns1__CEventDefinition::notes = notes; _p->ns1__CEventDefinition::resultingState = resultingState; _p->ns1__CEventDefinition::resultingStateValues = resultingStateValues; _p->ns1__CEventDefinition::fileattachments = fileattachments; _p->ns1__CEventDefinition::timeTracking = timeTracking; _p->ns1__CEventDefinition::timeSumOfAll = timeSumOfAll; _p->ns1__CEventDefinition::timeHoursSinceLast = timeHoursSinceLast; _p->ns1__CEventDefinition::newAssignment = newAssignment; _p->ns1__CEventDefinition::releaseNotes = releaseNotes; _p->ns1__CEventDefinition::marksuspect = marksuspect; _p->ns1__CEventDefinition::reviewnote = reviewnote; _p->ns1__CEventDefinition::customFields = customFields; } return _p; }

inline void soap_delete_ns1__CEventDefinition(struct soap *soap, ns1__CEventDefinition *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CEventDefinition(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfCDefectEvent
#define SOAP_TYPE_ArrayOfCDefectEvent (70)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfCDefectEvent(struct soap*, const char*, int, const ArrayOfCDefectEvent *, const char*);
SOAP_FMAC3 ArrayOfCDefectEvent * SOAP_FMAC4 soap_in_ArrayOfCDefectEvent(struct soap*, const char*, ArrayOfCDefectEvent *, const char*);

#ifndef soap_write_ArrayOfCDefectEvent
#define soap_write_ArrayOfCDefectEvent(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCDefectEvent * SOAP_FMAC4 soap_get_ArrayOfCDefectEvent(struct soap*, ArrayOfCDefectEvent *, const char*, const char*);

#ifndef soap_read_ArrayOfCDefectEvent
#define soap_read_ArrayOfCDefectEvent(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfCDefectEvent(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ArrayOfCDefectEvent * SOAP_FMAC2 soap_instantiate_ArrayOfCDefectEvent(struct soap*, int, const char*, const char*, size_t*);

inline ArrayOfCDefectEvent * soap_new_ArrayOfCDefectEvent(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfCDefectEvent(soap, n, NULL, NULL, NULL); }

inline ArrayOfCDefectEvent * soap_new_req_ArrayOfCDefectEvent(struct soap *soap) { ArrayOfCDefectEvent *_p = soap_instantiate_ArrayOfCDefectEvent(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ArrayOfCDefectEvent * soap_new_set_ArrayOfCDefectEvent(struct soap *soap, ns1__CDefectEvent **__ptritem, int __size) { ArrayOfCDefectEvent *_p = soap_instantiate_ArrayOfCDefectEvent(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ArrayOfCDefectEvent::__ptritem = __ptritem; _p->ArrayOfCDefectEvent::__size = __size; } return _p; }

inline void soap_delete_ArrayOfCDefectEvent(struct soap *soap, ArrayOfCDefectEvent *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfCDefectEvent(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CDefectEvent
#define SOAP_TYPE_ns1__CDefectEvent (69)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CDefectEvent(struct soap*, const char*, int, const ns1__CDefectEvent *, const char*);
SOAP_FMAC3 ns1__CDefectEvent * SOAP_FMAC4 soap_in_ns1__CDefectEvent(struct soap*, const char*, ns1__CDefectEvent *, const char*);

#ifndef soap_write_ns1__CDefectEvent
#define soap_write_ns1__CDefectEvent(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CDefectEvent", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CDefectEvent * SOAP_FMAC4 soap_get_ns1__CDefectEvent(struct soap*, ns1__CDefectEvent *, const char*, const char*);

#ifndef soap_read_ns1__CDefectEvent
#define soap_read_ns1__CDefectEvent(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CDefectEvent(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CDefectEvent * SOAP_FMAC2 soap_instantiate_ns1__CDefectEvent(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CDefectEvent * soap_new_ns1__CDefectEvent(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CDefectEvent(soap, n, NULL, NULL, NULL); }

inline ns1__CDefectEvent * soap_new_req_ns1__CDefectEvent(struct soap *soap, LONG64 recordid, time_t date, short eventaddorder) { ns1__CDefectEvent *_p = soap_instantiate_ns1__CDefectEvent(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CDefectEvent::recordid = recordid; _p->ns1__CDefectEvent::date = date; _p->ns1__CDefectEvent::eventaddorder = eventaddorder; } return _p; }

inline ns1__CDefectEvent * soap_new_set_ns1__CDefectEvent(struct soap *soap, LONG64 recordid, char *user, time_t date, char *notes, short eventaddorder, char *name, LONG64 *parenteventid, ArrayOfCFileAttachment *attachmentlist, ArrayOfCField *fieldlist, char *resultingstate, double *hours, ArrayOfstring *assigntolist, char *releasenotesversion, char *generatedeventtype, char *generatedbyname, double *totaltimespent, char *overrideuser, bool *marksuspect) { ns1__CDefectEvent *_p = soap_instantiate_ns1__CDefectEvent(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CDefectEvent::recordid = recordid; _p->ns1__CDefectEvent::user = user; _p->ns1__CDefectEvent::date = date; _p->ns1__CDefectEvent::notes = notes; _p->ns1__CDefectEvent::eventaddorder = eventaddorder; _p->ns1__CDefectEvent::name = name; _p->ns1__CDefectEvent::parenteventid = parenteventid; _p->ns1__CDefectEvent::attachmentlist = attachmentlist; _p->ns1__CDefectEvent::fieldlist = fieldlist; _p->ns1__CDefectEvent::resultingstate = resultingstate; _p->ns1__CDefectEvent::hours = hours; _p->ns1__CDefectEvent::assigntolist = assigntolist; _p->ns1__CDefectEvent::releasenotesversion = releasenotesversion; _p->ns1__CDefectEvent::generatedeventtype = generatedeventtype; _p->ns1__CDefectEvent::generatedbyname = generatedbyname; _p->ns1__CDefectEvent::totaltimespent = totaltimespent; _p->ns1__CDefectEvent::overrideuser = overrideuser; _p->ns1__CDefectEvent::marksuspect = marksuspect; } return _p; }

inline void soap_delete_ns1__CDefectEvent(struct soap *soap, ns1__CDefectEvent *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CDefectEvent(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfCEvent
#define SOAP_TYPE_ArrayOfCEvent (68)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfCEvent(struct soap*, const char*, int, const ArrayOfCEvent *, const char*);
SOAP_FMAC3 ArrayOfCEvent * SOAP_FMAC4 soap_in_ArrayOfCEvent(struct soap*, const char*, ArrayOfCEvent *, const char*);

#ifndef soap_write_ArrayOfCEvent
#define soap_write_ArrayOfCEvent(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCEvent * SOAP_FMAC4 soap_get_ArrayOfCEvent(struct soap*, ArrayOfCEvent *, const char*, const char*);

#ifndef soap_read_ArrayOfCEvent
#define soap_read_ArrayOfCEvent(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfCEvent(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ArrayOfCEvent * SOAP_FMAC2 soap_instantiate_ArrayOfCEvent(struct soap*, int, const char*, const char*, size_t*);

inline ArrayOfCEvent * soap_new_ArrayOfCEvent(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfCEvent(soap, n, NULL, NULL, NULL); }

inline ArrayOfCEvent * soap_new_req_ArrayOfCEvent(struct soap *soap) { ArrayOfCEvent *_p = soap_instantiate_ArrayOfCEvent(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ArrayOfCEvent * soap_new_set_ArrayOfCEvent(struct soap *soap, ns1__CEvent **__ptritem, int __size) { ArrayOfCEvent *_p = soap_instantiate_ArrayOfCEvent(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ArrayOfCEvent::__ptritem = __ptritem; _p->ArrayOfCEvent::__size = __size; } return _p; }

inline void soap_delete_ArrayOfCEvent(struct soap *soap, ArrayOfCEvent *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfCEvent(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CEvent
#define SOAP_TYPE_ns1__CEvent (67)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CEvent(struct soap*, const char*, int, const ns1__CEvent *, const char*);
SOAP_FMAC3 ns1__CEvent * SOAP_FMAC4 soap_in_ns1__CEvent(struct soap*, const char*, ns1__CEvent *, const char*);

#ifndef soap_write_ns1__CEvent
#define soap_write_ns1__CEvent(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CEvent", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CEvent * SOAP_FMAC4 soap_get_ns1__CEvent(struct soap*, ns1__CEvent *, const char*, const char*);

#ifndef soap_read_ns1__CEvent
#define soap_read_ns1__CEvent(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CEvent(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CEvent * SOAP_FMAC2 soap_instantiate_ns1__CEvent(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CEvent * soap_new_ns1__CEvent(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CEvent(soap, n, NULL, NULL, NULL); }

inline ns1__CEvent * soap_new_req_ns1__CEvent(struct soap *soap, LONG64 recordid, time_t date, short eventaddorder) { ns1__CEvent *_p = soap_instantiate_ns1__CEvent(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CEvent::recordid = recordid; _p->ns1__CEvent::date = date; _p->ns1__CEvent::eventaddorder = eventaddorder; } return _p; }

inline ns1__CEvent * soap_new_set_ns1__CEvent(struct soap *soap, LONG64 recordid, char *user, time_t date, char *notes, short eventaddorder, char *name, LONG64 *parenteventid, ArrayOfCFileAttachment *attachmentlist, ArrayOfCField *fieldlist, char *resultingstate, double *hours, ArrayOfstring *assigntolist, char *releasenotesversion, char *generatedeventtype, char *generatedbyname, double *totaltimespent, char *overrideuser, bool *marksuspect) { ns1__CEvent *_p = soap_instantiate_ns1__CEvent(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CEvent::recordid = recordid; _p->ns1__CEvent::user = user; _p->ns1__CEvent::date = date; _p->ns1__CEvent::notes = notes; _p->ns1__CEvent::eventaddorder = eventaddorder; _p->ns1__CEvent::name = name; _p->ns1__CEvent::parenteventid = parenteventid; _p->ns1__CEvent::attachmentlist = attachmentlist; _p->ns1__CEvent::fieldlist = fieldlist; _p->ns1__CEvent::resultingstate = resultingstate; _p->ns1__CEvent::hours = hours; _p->ns1__CEvent::assigntolist = assigntolist; _p->ns1__CEvent::releasenotesversion = releasenotesversion; _p->ns1__CEvent::generatedeventtype = generatedeventtype; _p->ns1__CEvent::generatedbyname = generatedbyname; _p->ns1__CEvent::totaltimespent = totaltimespent; _p->ns1__CEvent::overrideuser = overrideuser; _p->ns1__CEvent::marksuspect = marksuspect; } return _p; }

inline void soap_delete_ns1__CEvent(struct soap *soap, ns1__CEvent *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CEvent(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfCTestCaseVariantField
#define SOAP_TYPE_ArrayOfCTestCaseVariantField (66)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfCTestCaseVariantField(struct soap*, const char*, int, const ArrayOfCTestCaseVariantField *, const char*);
SOAP_FMAC3 ArrayOfCTestCaseVariantField * SOAP_FMAC4 soap_in_ArrayOfCTestCaseVariantField(struct soap*, const char*, ArrayOfCTestCaseVariantField *, const char*);

#ifndef soap_write_ArrayOfCTestCaseVariantField
#define soap_write_ArrayOfCTestCaseVariantField(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCTestCaseVariantField * SOAP_FMAC4 soap_get_ArrayOfCTestCaseVariantField(struct soap*, ArrayOfCTestCaseVariantField *, const char*, const char*);

#ifndef soap_read_ArrayOfCTestCaseVariantField
#define soap_read_ArrayOfCTestCaseVariantField(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfCTestCaseVariantField(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ArrayOfCTestCaseVariantField * SOAP_FMAC2 soap_instantiate_ArrayOfCTestCaseVariantField(struct soap*, int, const char*, const char*, size_t*);

inline ArrayOfCTestCaseVariantField * soap_new_ArrayOfCTestCaseVariantField(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfCTestCaseVariantField(soap, n, NULL, NULL, NULL); }

inline ArrayOfCTestCaseVariantField * soap_new_req_ArrayOfCTestCaseVariantField(struct soap *soap) { ArrayOfCTestCaseVariantField *_p = soap_instantiate_ArrayOfCTestCaseVariantField(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ArrayOfCTestCaseVariantField * soap_new_set_ArrayOfCTestCaseVariantField(struct soap *soap, ns1__CTestCaseVariantField **__ptritem, int __size) { ArrayOfCTestCaseVariantField *_p = soap_instantiate_ArrayOfCTestCaseVariantField(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ArrayOfCTestCaseVariantField::__ptritem = __ptritem; _p->ArrayOfCTestCaseVariantField::__size = __size; } return _p; }

inline void soap_delete_ArrayOfCTestCaseVariantField(struct soap *soap, ArrayOfCTestCaseVariantField *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfCTestCaseVariantField(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfCTestRunVariantField
#define SOAP_TYPE_ArrayOfCTestRunVariantField (65)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfCTestRunVariantField(struct soap*, const char*, int, const ArrayOfCTestRunVariantField *, const char*);
SOAP_FMAC3 ArrayOfCTestRunVariantField * SOAP_FMAC4 soap_in_ArrayOfCTestRunVariantField(struct soap*, const char*, ArrayOfCTestRunVariantField *, const char*);

#ifndef soap_write_ArrayOfCTestRunVariantField
#define soap_write_ArrayOfCTestRunVariantField(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCTestRunVariantField * SOAP_FMAC4 soap_get_ArrayOfCTestRunVariantField(struct soap*, ArrayOfCTestRunVariantField *, const char*, const char*);

#ifndef soap_read_ArrayOfCTestRunVariantField
#define soap_read_ArrayOfCTestRunVariantField(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfCTestRunVariantField(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ArrayOfCTestRunVariantField * SOAP_FMAC2 soap_instantiate_ArrayOfCTestRunVariantField(struct soap*, int, const char*, const char*, size_t*);

inline ArrayOfCTestRunVariantField * soap_new_ArrayOfCTestRunVariantField(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfCTestRunVariantField(soap, n, NULL, NULL, NULL); }

inline ArrayOfCTestRunVariantField * soap_new_req_ArrayOfCTestRunVariantField(struct soap *soap) { ArrayOfCTestRunVariantField *_p = soap_instantiate_ArrayOfCTestRunVariantField(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ArrayOfCTestRunVariantField * soap_new_set_ArrayOfCTestRunVariantField(struct soap *soap, ns1__CTestRunVariantField **__ptritem, int __size) { ArrayOfCTestRunVariantField *_p = soap_instantiate_ArrayOfCTestRunVariantField(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ArrayOfCTestRunVariantField::__ptritem = __ptritem; _p->ArrayOfCTestRunVariantField::__size = __size; } return _p; }

inline void soap_delete_ArrayOfCTestRunVariantField(struct soap *soap, ArrayOfCTestRunVariantField *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfCTestRunVariantField(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfCField
#define SOAP_TYPE_ArrayOfCField (64)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfCField(struct soap*, const char*, int, const ArrayOfCField *, const char*);
SOAP_FMAC3 ArrayOfCField * SOAP_FMAC4 soap_in_ArrayOfCField(struct soap*, const char*, ArrayOfCField *, const char*);

#ifndef soap_write_ArrayOfCField
#define soap_write_ArrayOfCField(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCField * SOAP_FMAC4 soap_get_ArrayOfCField(struct soap*, ArrayOfCField *, const char*, const char*);

#ifndef soap_read_ArrayOfCField
#define soap_read_ArrayOfCField(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfCField(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ArrayOfCField * SOAP_FMAC2 soap_instantiate_ArrayOfCField(struct soap*, int, const char*, const char*, size_t*);

inline ArrayOfCField * soap_new_ArrayOfCField(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfCField(soap, n, NULL, NULL, NULL); }

inline ArrayOfCField * soap_new_req_ArrayOfCField(struct soap *soap) { ArrayOfCField *_p = soap_instantiate_ArrayOfCField(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ArrayOfCField * soap_new_set_ArrayOfCField(struct soap *soap, ns1__CField **__ptritem, int __size) { ArrayOfCField *_p = soap_instantiate_ArrayOfCField(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ArrayOfCField::__ptritem = __ptritem; _p->ArrayOfCField::__size = __size; } return _p; }

inline void soap_delete_ArrayOfCField(struct soap *soap, ArrayOfCField *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfCField(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CTimespanField
#define SOAP_TYPE_ns1__CTimespanField (63)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CTimespanField(struct soap*, const char*, int, const ns1__CTimespanField *, const char*);
SOAP_FMAC3 ns1__CTimespanField * SOAP_FMAC4 soap_in_ns1__CTimespanField(struct soap*, const char*, ns1__CTimespanField *, const char*);

#ifndef soap_write_ns1__CTimespanField
#define soap_write_ns1__CTimespanField(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CTimespanField", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CTimespanField * SOAP_FMAC4 soap_get_ns1__CTimespanField(struct soap*, ns1__CTimespanField *, const char*, const char*);

#ifndef soap_read_ns1__CTimespanField
#define soap_read_ns1__CTimespanField(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CTimespanField(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CTimespanField * SOAP_FMAC2 soap_instantiate_ns1__CTimespanField(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CTimespanField * soap_new_ns1__CTimespanField(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CTimespanField(soap, n, NULL, NULL, NULL); }

inline ns1__CTimespanField * soap_new_req_ns1__CTimespanField(struct soap *soap, LONG64 recordid, char *name, double value, char *unit) { ns1__CTimespanField *_p = soap_instantiate_ns1__CTimespanField(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CTimespanField::recordid = recordid; _p->ns1__CTimespanField::name = name; _p->ns1__CTimespanField::value = value; _p->ns1__CTimespanField::unit = unit; } return _p; }

inline ns1__CTimespanField * soap_new_set_ns1__CTimespanField(struct soap *soap, LONG64 recordid, char *name, double value, char *unit) { ns1__CTimespanField *_p = soap_instantiate_ns1__CTimespanField(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CTimespanField::recordid = recordid; _p->ns1__CTimespanField::name = name; _p->ns1__CTimespanField::value = value; _p->ns1__CTimespanField::unit = unit; } return _p; }

inline void soap_delete_ns1__CTimespanField(struct soap *soap, ns1__CTimespanField *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CTimespanField(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CVersionField
#define SOAP_TYPE_ns1__CVersionField (62)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CVersionField(struct soap*, const char*, int, const ns1__CVersionField *, const char*);
SOAP_FMAC3 ns1__CVersionField * SOAP_FMAC4 soap_in_ns1__CVersionField(struct soap*, const char*, ns1__CVersionField *, const char*);

#ifndef soap_write_ns1__CVersionField
#define soap_write_ns1__CVersionField(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CVersionField", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CVersionField * SOAP_FMAC4 soap_get_ns1__CVersionField(struct soap*, ns1__CVersionField *, const char*, const char*);

#ifndef soap_read_ns1__CVersionField
#define soap_read_ns1__CVersionField(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CVersionField(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CVersionField * SOAP_FMAC2 soap_instantiate_ns1__CVersionField(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CVersionField * soap_new_ns1__CVersionField(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CVersionField(soap, n, NULL, NULL, NULL); }

inline ns1__CVersionField * soap_new_req_ns1__CVersionField(struct soap *soap, LONG64 recordid, char *name) { ns1__CVersionField *_p = soap_instantiate_ns1__CVersionField(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CVersionField::recordid = recordid; _p->ns1__CVersionField::name = name; } return _p; }

inline ns1__CVersionField * soap_new_set_ns1__CVersionField(struct soap *soap, LONG64 recordid, char *name, char *value) { ns1__CVersionField *_p = soap_instantiate_ns1__CVersionField(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CVersionField::recordid = recordid; _p->ns1__CVersionField::name = name; _p->ns1__CVersionField::value = value; } return _p; }

inline void soap_delete_ns1__CVersionField(struct soap *soap, ns1__CVersionField *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CVersionField(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CTestCaseVariantField
#define SOAP_TYPE_ns1__CTestCaseVariantField (61)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CTestCaseVariantField(struct soap*, const char*, int, const ns1__CTestCaseVariantField *, const char*);
SOAP_FMAC3 ns1__CTestCaseVariantField * SOAP_FMAC4 soap_in_ns1__CTestCaseVariantField(struct soap*, const char*, ns1__CTestCaseVariantField *, const char*);

#ifndef soap_write_ns1__CTestCaseVariantField
#define soap_write_ns1__CTestCaseVariantField(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CTestCaseVariantField", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CTestCaseVariantField * SOAP_FMAC4 soap_get_ns1__CTestCaseVariantField(struct soap*, ns1__CTestCaseVariantField *, const char*, const char*);

#ifndef soap_read_ns1__CTestCaseVariantField
#define soap_read_ns1__CTestCaseVariantField(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CTestCaseVariantField(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CTestCaseVariantField * SOAP_FMAC2 soap_instantiate_ns1__CTestCaseVariantField(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CTestCaseVariantField * soap_new_ns1__CTestCaseVariantField(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CTestCaseVariantField(soap, n, NULL, NULL, NULL); }

inline ns1__CTestCaseVariantField * soap_new_req_ns1__CTestCaseVariantField(struct soap *soap, LONG64 recordid, char *name, char *type) { ns1__CTestCaseVariantField *_p = soap_instantiate_ns1__CTestCaseVariantField(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CTestCaseVariantField::recordid = recordid; _p->ns1__CTestCaseVariantField::name = name; _p->ns1__CTestCaseVariantField::type = type; } return _p; }

inline ns1__CTestCaseVariantField * soap_new_set_ns1__CTestCaseVariantField(struct soap *soap, LONG64 recordid, char *name, ArrayOfCFieldValue *values, ArrayOfCFieldValue *dropdownValues, char *type) { ns1__CTestCaseVariantField *_p = soap_instantiate_ns1__CTestCaseVariantField(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CTestCaseVariantField::recordid = recordid; _p->ns1__CTestCaseVariantField::name = name; _p->ns1__CTestCaseVariantField::values = values; _p->ns1__CTestCaseVariantField::dropdownValues = dropdownValues; _p->ns1__CTestCaseVariantField::type = type; } return _p; }

inline void soap_delete_ns1__CTestCaseVariantField(struct soap *soap, ns1__CTestCaseVariantField *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CTestCaseVariantField(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CTestRunVariantField
#define SOAP_TYPE_ns1__CTestRunVariantField (60)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CTestRunVariantField(struct soap*, const char*, int, const ns1__CTestRunVariantField *, const char*);
SOAP_FMAC3 ns1__CTestRunVariantField * SOAP_FMAC4 soap_in_ns1__CTestRunVariantField(struct soap*, const char*, ns1__CTestRunVariantField *, const char*);

#ifndef soap_write_ns1__CTestRunVariantField
#define soap_write_ns1__CTestRunVariantField(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CTestRunVariantField", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CTestRunVariantField * SOAP_FMAC4 soap_get_ns1__CTestRunVariantField(struct soap*, ns1__CTestRunVariantField *, const char*, const char*);

#ifndef soap_read_ns1__CTestRunVariantField
#define soap_read_ns1__CTestRunVariantField(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CTestRunVariantField(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CTestRunVariantField * SOAP_FMAC2 soap_instantiate_ns1__CTestRunVariantField(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CTestRunVariantField * soap_new_ns1__CTestRunVariantField(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CTestRunVariantField(soap, n, NULL, NULL, NULL); }

inline ns1__CTestRunVariantField * soap_new_req_ns1__CTestRunVariantField(struct soap *soap, LONG64 recordid, char *name) { ns1__CTestRunVariantField *_p = soap_instantiate_ns1__CTestRunVariantField(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CTestRunVariantField::recordid = recordid; _p->ns1__CTestRunVariantField::name = name; } return _p; }

inline ns1__CTestRunVariantField * soap_new_set_ns1__CTestRunVariantField(struct soap *soap, LONG64 recordid, char *name, ArrayOfCFieldValue *values, ArrayOfCFieldValue *dropdownValues) { ns1__CTestRunVariantField *_p = soap_instantiate_ns1__CTestRunVariantField(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CTestRunVariantField::recordid = recordid; _p->ns1__CTestRunVariantField::name = name; _p->ns1__CTestRunVariantField::values = values; _p->ns1__CTestRunVariantField::dropdownValues = dropdownValues; } return _p; }

inline void soap_delete_ns1__CTestRunVariantField(struct soap *soap, ns1__CTestRunVariantField *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CTestRunVariantField(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CMultiSelectDropdownField
#define SOAP_TYPE_ns1__CMultiSelectDropdownField (59)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CMultiSelectDropdownField(struct soap*, const char*, int, const ns1__CMultiSelectDropdownField *, const char*);
SOAP_FMAC3 ns1__CMultiSelectDropdownField * SOAP_FMAC4 soap_in_ns1__CMultiSelectDropdownField(struct soap*, const char*, ns1__CMultiSelectDropdownField *, const char*);

#ifndef soap_write_ns1__CMultiSelectDropdownField
#define soap_write_ns1__CMultiSelectDropdownField(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CMultiSelectDropdownField", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CMultiSelectDropdownField * SOAP_FMAC4 soap_get_ns1__CMultiSelectDropdownField(struct soap*, ns1__CMultiSelectDropdownField *, const char*, const char*);

#ifndef soap_read_ns1__CMultiSelectDropdownField
#define soap_read_ns1__CMultiSelectDropdownField(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CMultiSelectDropdownField(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CMultiSelectDropdownField * SOAP_FMAC2 soap_instantiate_ns1__CMultiSelectDropdownField(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CMultiSelectDropdownField * soap_new_ns1__CMultiSelectDropdownField(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CMultiSelectDropdownField(soap, n, NULL, NULL, NULL); }

inline ns1__CMultiSelectDropdownField * soap_new_req_ns1__CMultiSelectDropdownField(struct soap *soap, LONG64 recordid, char *name) { ns1__CMultiSelectDropdownField *_p = soap_instantiate_ns1__CMultiSelectDropdownField(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CMultiSelectDropdownField::recordid = recordid; _p->ns1__CMultiSelectDropdownField::name = name; } return _p; }

inline ns1__CMultiSelectDropdownField * soap_new_set_ns1__CMultiSelectDropdownField(struct soap *soap, LONG64 recordid, char *name, ArrayOfCFieldValue *values, ArrayOfCFieldValue *dropdownValues) { ns1__CMultiSelectDropdownField *_p = soap_instantiate_ns1__CMultiSelectDropdownField(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CMultiSelectDropdownField::recordid = recordid; _p->ns1__CMultiSelectDropdownField::name = name; _p->ns1__CMultiSelectDropdownField::values = values; _p->ns1__CMultiSelectDropdownField::dropdownValues = dropdownValues; } return _p; }

inline void soap_delete_ns1__CMultiSelectDropdownField(struct soap *soap, ns1__CMultiSelectDropdownField *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CMultiSelectDropdownField(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CDropdownField
#define SOAP_TYPE_ns1__CDropdownField (58)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CDropdownField(struct soap*, const char*, int, const ns1__CDropdownField *, const char*);
SOAP_FMAC3 ns1__CDropdownField * SOAP_FMAC4 soap_in_ns1__CDropdownField(struct soap*, const char*, ns1__CDropdownField *, const char*);

#ifndef soap_write_ns1__CDropdownField
#define soap_write_ns1__CDropdownField(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CDropdownField", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CDropdownField * SOAP_FMAC4 soap_get_ns1__CDropdownField(struct soap*, ns1__CDropdownField *, const char*, const char*);

#ifndef soap_read_ns1__CDropdownField
#define soap_read_ns1__CDropdownField(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CDropdownField(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CDropdownField * SOAP_FMAC2 soap_instantiate_ns1__CDropdownField(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CDropdownField * soap_new_ns1__CDropdownField(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CDropdownField(soap, n, NULL, NULL, NULL); }

inline ns1__CDropdownField * soap_new_req_ns1__CDropdownField(struct soap *soap, LONG64 recordid, char *name) { ns1__CDropdownField *_p = soap_instantiate_ns1__CDropdownField(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CDropdownField::recordid = recordid; _p->ns1__CDropdownField::name = name; } return _p; }

inline ns1__CDropdownField * soap_new_set_ns1__CDropdownField(struct soap *soap, LONG64 recordid, char *name, char *value, ArrayOfCFieldValue *dropdownValues) { ns1__CDropdownField *_p = soap_instantiate_ns1__CDropdownField(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CDropdownField::recordid = recordid; _p->ns1__CDropdownField::name = name; _p->ns1__CDropdownField::value = value; _p->ns1__CDropdownField::dropdownValues = dropdownValues; } return _p; }

inline void soap_delete_ns1__CDropdownField(struct soap *soap, ns1__CDropdownField *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CDropdownField(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CDateTimeField
#define SOAP_TYPE_ns1__CDateTimeField (57)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CDateTimeField(struct soap*, const char*, int, const ns1__CDateTimeField *, const char*);
SOAP_FMAC3 ns1__CDateTimeField * SOAP_FMAC4 soap_in_ns1__CDateTimeField(struct soap*, const char*, ns1__CDateTimeField *, const char*);

#ifndef soap_write_ns1__CDateTimeField
#define soap_write_ns1__CDateTimeField(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CDateTimeField", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CDateTimeField * SOAP_FMAC4 soap_get_ns1__CDateTimeField(struct soap*, ns1__CDateTimeField *, const char*, const char*);

#ifndef soap_read_ns1__CDateTimeField
#define soap_read_ns1__CDateTimeField(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CDateTimeField(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CDateTimeField * SOAP_FMAC2 soap_instantiate_ns1__CDateTimeField(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CDateTimeField * soap_new_ns1__CDateTimeField(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CDateTimeField(soap, n, NULL, NULL, NULL); }

inline ns1__CDateTimeField * soap_new_req_ns1__CDateTimeField(struct soap *soap, LONG64 recordid, char *name) { ns1__CDateTimeField *_p = soap_instantiate_ns1__CDateTimeField(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CDateTimeField::recordid = recordid; _p->ns1__CDateTimeField::name = name; } return _p; }

inline ns1__CDateTimeField * soap_new_set_ns1__CDateTimeField(struct soap *soap, LONG64 recordid, char *name, time_t *value) { ns1__CDateTimeField *_p = soap_instantiate_ns1__CDateTimeField(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CDateTimeField::recordid = recordid; _p->ns1__CDateTimeField::name = name; _p->ns1__CDateTimeField::value = value; } return _p; }

inline void soap_delete_ns1__CDateTimeField(struct soap *soap, ns1__CDateTimeField *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CDateTimeField(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CDateField
#define SOAP_TYPE_ns1__CDateField (56)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CDateField(struct soap*, const char*, int, const ns1__CDateField *, const char*);
SOAP_FMAC3 ns1__CDateField * SOAP_FMAC4 soap_in_ns1__CDateField(struct soap*, const char*, ns1__CDateField *, const char*);

#ifndef soap_write_ns1__CDateField
#define soap_write_ns1__CDateField(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CDateField", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CDateField * SOAP_FMAC4 soap_get_ns1__CDateField(struct soap*, ns1__CDateField *, const char*, const char*);

#ifndef soap_read_ns1__CDateField
#define soap_read_ns1__CDateField(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CDateField(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CDateField * SOAP_FMAC2 soap_instantiate_ns1__CDateField(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CDateField * soap_new_ns1__CDateField(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CDateField(soap, n, NULL, NULL, NULL); }

inline ns1__CDateField * soap_new_req_ns1__CDateField(struct soap *soap, LONG64 recordid, char *name) { ns1__CDateField *_p = soap_instantiate_ns1__CDateField(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CDateField::recordid = recordid; _p->ns1__CDateField::name = name; } return _p; }

inline ns1__CDateField * soap_new_set_ns1__CDateField(struct soap *soap, LONG64 recordid, char *name, char *value) { ns1__CDateField *_p = soap_instantiate_ns1__CDateField(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CDateField::recordid = recordid; _p->ns1__CDateField::name = name; _p->ns1__CDateField::value = value; } return _p; }

inline void soap_delete_ns1__CDateField(struct soap *soap, ns1__CDateField *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CDateField(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CBooleanField
#define SOAP_TYPE_ns1__CBooleanField (55)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CBooleanField(struct soap*, const char*, int, const ns1__CBooleanField *, const char*);
SOAP_FMAC3 ns1__CBooleanField * SOAP_FMAC4 soap_in_ns1__CBooleanField(struct soap*, const char*, ns1__CBooleanField *, const char*);

#ifndef soap_write_ns1__CBooleanField
#define soap_write_ns1__CBooleanField(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CBooleanField", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CBooleanField * SOAP_FMAC4 soap_get_ns1__CBooleanField(struct soap*, ns1__CBooleanField *, const char*, const char*);

#ifndef soap_read_ns1__CBooleanField
#define soap_read_ns1__CBooleanField(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CBooleanField(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CBooleanField * SOAP_FMAC2 soap_instantiate_ns1__CBooleanField(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CBooleanField * soap_new_ns1__CBooleanField(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CBooleanField(soap, n, NULL, NULL, NULL); }

inline ns1__CBooleanField * soap_new_req_ns1__CBooleanField(struct soap *soap, LONG64 recordid, char *name, bool value) { ns1__CBooleanField *_p = soap_instantiate_ns1__CBooleanField(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CBooleanField::recordid = recordid; _p->ns1__CBooleanField::name = name; _p->ns1__CBooleanField::value = value; } return _p; }

inline ns1__CBooleanField * soap_new_set_ns1__CBooleanField(struct soap *soap, LONG64 recordid, char *name, bool value) { ns1__CBooleanField *_p = soap_instantiate_ns1__CBooleanField(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CBooleanField::recordid = recordid; _p->ns1__CBooleanField::name = name; _p->ns1__CBooleanField::value = value; } return _p; }

inline void soap_delete_ns1__CBooleanField(struct soap *soap, ns1__CBooleanField *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CBooleanField(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CDecimalField
#define SOAP_TYPE_ns1__CDecimalField (54)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CDecimalField(struct soap*, const char*, int, const ns1__CDecimalField *, const char*);
SOAP_FMAC3 ns1__CDecimalField * SOAP_FMAC4 soap_in_ns1__CDecimalField(struct soap*, const char*, ns1__CDecimalField *, const char*);

#ifndef soap_write_ns1__CDecimalField
#define soap_write_ns1__CDecimalField(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CDecimalField", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CDecimalField * SOAP_FMAC4 soap_get_ns1__CDecimalField(struct soap*, ns1__CDecimalField *, const char*, const char*);

#ifndef soap_read_ns1__CDecimalField
#define soap_read_ns1__CDecimalField(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CDecimalField(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CDecimalField * SOAP_FMAC2 soap_instantiate_ns1__CDecimalField(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CDecimalField * soap_new_ns1__CDecimalField(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CDecimalField(soap, n, NULL, NULL, NULL); }

inline ns1__CDecimalField * soap_new_req_ns1__CDecimalField(struct soap *soap, LONG64 recordid, char *name, double value) { ns1__CDecimalField *_p = soap_instantiate_ns1__CDecimalField(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CDecimalField::recordid = recordid; _p->ns1__CDecimalField::name = name; _p->ns1__CDecimalField::value = value; } return _p; }

inline ns1__CDecimalField * soap_new_set_ns1__CDecimalField(struct soap *soap, LONG64 recordid, char *name, double value) { ns1__CDecimalField *_p = soap_instantiate_ns1__CDecimalField(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CDecimalField::recordid = recordid; _p->ns1__CDecimalField::name = name; _p->ns1__CDecimalField::value = value; } return _p; }

inline void soap_delete_ns1__CDecimalField(struct soap *soap, ns1__CDecimalField *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CDecimalField(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CIntegerField
#define SOAP_TYPE_ns1__CIntegerField (53)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CIntegerField(struct soap*, const char*, int, const ns1__CIntegerField *, const char*);
SOAP_FMAC3 ns1__CIntegerField * SOAP_FMAC4 soap_in_ns1__CIntegerField(struct soap*, const char*, ns1__CIntegerField *, const char*);

#ifndef soap_write_ns1__CIntegerField
#define soap_write_ns1__CIntegerField(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CIntegerField", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CIntegerField * SOAP_FMAC4 soap_get_ns1__CIntegerField(struct soap*, ns1__CIntegerField *, const char*, const char*);

#ifndef soap_read_ns1__CIntegerField
#define soap_read_ns1__CIntegerField(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CIntegerField(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CIntegerField * SOAP_FMAC2 soap_instantiate_ns1__CIntegerField(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CIntegerField * soap_new_ns1__CIntegerField(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CIntegerField(soap, n, NULL, NULL, NULL); }

inline ns1__CIntegerField * soap_new_req_ns1__CIntegerField(struct soap *soap, LONG64 recordid, char *name, int value) { ns1__CIntegerField *_p = soap_instantiate_ns1__CIntegerField(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CIntegerField::recordid = recordid; _p->ns1__CIntegerField::name = name; _p->ns1__CIntegerField::value = value; } return _p; }

inline ns1__CIntegerField * soap_new_set_ns1__CIntegerField(struct soap *soap, LONG64 recordid, char *name, int value) { ns1__CIntegerField *_p = soap_instantiate_ns1__CIntegerField(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CIntegerField::recordid = recordid; _p->ns1__CIntegerField::name = name; _p->ns1__CIntegerField::value = value; } return _p; }

inline void soap_delete_ns1__CIntegerField(struct soap *soap, ns1__CIntegerField *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CIntegerField(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CStringField
#define SOAP_TYPE_ns1__CStringField (52)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CStringField(struct soap*, const char*, int, const ns1__CStringField *, const char*);
SOAP_FMAC3 ns1__CStringField * SOAP_FMAC4 soap_in_ns1__CStringField(struct soap*, const char*, ns1__CStringField *, const char*);

#ifndef soap_write_ns1__CStringField
#define soap_write_ns1__CStringField(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CStringField", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CStringField * SOAP_FMAC4 soap_get_ns1__CStringField(struct soap*, ns1__CStringField *, const char*, const char*);

#ifndef soap_read_ns1__CStringField
#define soap_read_ns1__CStringField(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CStringField(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CStringField * SOAP_FMAC2 soap_instantiate_ns1__CStringField(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CStringField * soap_new_ns1__CStringField(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CStringField(soap, n, NULL, NULL, NULL); }

inline ns1__CStringField * soap_new_req_ns1__CStringField(struct soap *soap, LONG64 recordid, char *name) { ns1__CStringField *_p = soap_instantiate_ns1__CStringField(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CStringField::recordid = recordid; _p->ns1__CStringField::name = name; } return _p; }

inline ns1__CStringField * soap_new_set_ns1__CStringField(struct soap *soap, LONG64 recordid, char *name, char *value, bool *isMultilineString, bool *containsFormatting, ArrayOfCFileAttachment *inlineAttachmentList) { ns1__CStringField *_p = soap_instantiate_ns1__CStringField(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CStringField::recordid = recordid; _p->ns1__CStringField::name = name; _p->ns1__CStringField::value = value; _p->ns1__CStringField::isMultilineString = isMultilineString; _p->ns1__CStringField::containsFormatting = containsFormatting; _p->ns1__CStringField::inlineAttachmentList = inlineAttachmentList; } return _p; }

inline void soap_delete_ns1__CStringField(struct soap *soap, ns1__CStringField *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CStringField(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CField
#define SOAP_TYPE_ns1__CField (51)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CField(struct soap*, const char*, int, const ns1__CField *, const char*);
SOAP_FMAC3 ns1__CField * SOAP_FMAC4 soap_in_ns1__CField(struct soap*, const char*, ns1__CField *, const char*);

#ifndef soap_write_ns1__CField
#define soap_write_ns1__CField(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CField", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CField * SOAP_FMAC4 soap_get_ns1__CField(struct soap*, ns1__CField *, const char*, const char*);

#ifndef soap_read_ns1__CField
#define soap_read_ns1__CField(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CField(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CField * SOAP_FMAC2 soap_instantiate_ns1__CField(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CField * soap_new_ns1__CField(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CField(soap, n, NULL, NULL, NULL); }

inline ns1__CField * soap_new_req_ns1__CField(struct soap *soap, LONG64 recordid, char *name) { ns1__CField *_p = soap_instantiate_ns1__CField(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CField::recordid = recordid; _p->ns1__CField::name = name; } return _p; }

inline ns1__CField * soap_new_set_ns1__CField(struct soap *soap, LONG64 recordid, char *name) { ns1__CField *_p = soap_instantiate_ns1__CField(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CField::recordid = recordid; _p->ns1__CField::name = name; } return _p; }

inline void soap_delete_ns1__CField(struct soap *soap, ns1__CField *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CField(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfCReportedByRecord
#define SOAP_TYPE_ArrayOfCReportedByRecord (50)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfCReportedByRecord(struct soap*, const char*, int, const ArrayOfCReportedByRecord *, const char*);
SOAP_FMAC3 ArrayOfCReportedByRecord * SOAP_FMAC4 soap_in_ArrayOfCReportedByRecord(struct soap*, const char*, ArrayOfCReportedByRecord *, const char*);

#ifndef soap_write_ArrayOfCReportedByRecord
#define soap_write_ArrayOfCReportedByRecord(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCReportedByRecord * SOAP_FMAC4 soap_get_ArrayOfCReportedByRecord(struct soap*, ArrayOfCReportedByRecord *, const char*, const char*);

#ifndef soap_read_ArrayOfCReportedByRecord
#define soap_read_ArrayOfCReportedByRecord(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfCReportedByRecord(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ArrayOfCReportedByRecord * SOAP_FMAC2 soap_instantiate_ArrayOfCReportedByRecord(struct soap*, int, const char*, const char*, size_t*);

inline ArrayOfCReportedByRecord * soap_new_ArrayOfCReportedByRecord(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfCReportedByRecord(soap, n, NULL, NULL, NULL); }

inline ArrayOfCReportedByRecord * soap_new_req_ArrayOfCReportedByRecord(struct soap *soap) { ArrayOfCReportedByRecord *_p = soap_instantiate_ArrayOfCReportedByRecord(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ArrayOfCReportedByRecord * soap_new_set_ArrayOfCReportedByRecord(struct soap *soap, ns1__CReportedByRecord **__ptritem, int __size) { ArrayOfCReportedByRecord *_p = soap_instantiate_ArrayOfCReportedByRecord(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ArrayOfCReportedByRecord::__ptritem = __ptritem; _p->ArrayOfCReportedByRecord::__size = __size; } return _p; }

inline void soap_delete_ArrayOfCReportedByRecord(struct soap *soap, ArrayOfCReportedByRecord *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfCReportedByRecord(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CReportedByRecord
#define SOAP_TYPE_ns1__CReportedByRecord (49)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CReportedByRecord(struct soap*, const char*, int, const ns1__CReportedByRecord *, const char*);
SOAP_FMAC3 ns1__CReportedByRecord * SOAP_FMAC4 soap_in_ns1__CReportedByRecord(struct soap*, const char*, ns1__CReportedByRecord *, const char*);

#ifndef soap_write_ns1__CReportedByRecord
#define soap_write_ns1__CReportedByRecord(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CReportedByRecord", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CReportedByRecord * SOAP_FMAC4 soap_get_ns1__CReportedByRecord(struct soap*, ns1__CReportedByRecord *, const char*, const char*);

#ifndef soap_read_ns1__CReportedByRecord
#define soap_read_ns1__CReportedByRecord(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CReportedByRecord(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CReportedByRecord * SOAP_FMAC2 soap_instantiate_ns1__CReportedByRecord(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CReportedByRecord * soap_new_ns1__CReportedByRecord(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CReportedByRecord(soap, n, NULL, NULL, NULL); }

inline ns1__CReportedByRecord * soap_new_req_ns1__CReportedByRecord(struct soap *soap, LONG64 recordid, short showorder) { ns1__CReportedByRecord *_p = soap_instantiate_ns1__CReportedByRecord(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CReportedByRecord::recordid = recordid; _p->ns1__CReportedByRecord::showorder = showorder; } return _p; }

inline ns1__CReportedByRecord * soap_new_set_ns1__CReportedByRecord(struct soap *soap, LONG64 recordid, char *foundby, char *datefound, char *contactinfo, char *foundinversion, char *comments, ArrayOfCFileAttachment *commentsInlineAttachList, char *reproduced, char *reproducedsteps, ArrayOfCFileAttachment *reproStepsInlineAttachList, ns1__CSystem *standardtestconfig, char *otherhardwaresoftware, ArrayOfCFileAttachment *otherHWSWInlineAttachList, short *testconfigtype, ArrayOfCFileAttachment *attachmentlist, short showorder) { ns1__CReportedByRecord *_p = soap_instantiate_ns1__CReportedByRecord(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CReportedByRecord::recordid = recordid; _p->ns1__CReportedByRecord::foundby = foundby; _p->ns1__CReportedByRecord::datefound = datefound; _p->ns1__CReportedByRecord::contactinfo = contactinfo; _p->ns1__CReportedByRecord::foundinversion = foundinversion; _p->ns1__CReportedByRecord::comments = comments; _p->ns1__CReportedByRecord::commentsInlineAttachList = commentsInlineAttachList; _p->ns1__CReportedByRecord::reproduced = reproduced; _p->ns1__CReportedByRecord::reproducedsteps = reproducedsteps; _p->ns1__CReportedByRecord::reproStepsInlineAttachList = reproStepsInlineAttachList; _p->ns1__CReportedByRecord::standardtestconfig = standardtestconfig; _p->ns1__CReportedByRecord::otherhardwaresoftware = otherhardwaresoftware; _p->ns1__CReportedByRecord::otherHWSWInlineAttachList = otherHWSWInlineAttachList; _p->ns1__CReportedByRecord::testconfigtype = testconfigtype; _p->ns1__CReportedByRecord::attachmentlist = attachmentlist; _p->ns1__CReportedByRecord::showorder = showorder; } return _p; }

inline void soap_delete_ns1__CReportedByRecord(struct soap *soap, ns1__CReportedByRecord *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CReportedByRecord(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfCFileAttachment
#define SOAP_TYPE_ArrayOfCFileAttachment (48)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfCFileAttachment(struct soap*, const char*, int, const ArrayOfCFileAttachment *, const char*);
SOAP_FMAC3 ArrayOfCFileAttachment * SOAP_FMAC4 soap_in_ArrayOfCFileAttachment(struct soap*, const char*, ArrayOfCFileAttachment *, const char*);

#ifndef soap_write_ArrayOfCFileAttachment
#define soap_write_ArrayOfCFileAttachment(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCFileAttachment * SOAP_FMAC4 soap_get_ArrayOfCFileAttachment(struct soap*, ArrayOfCFileAttachment *, const char*, const char*);

#ifndef soap_read_ArrayOfCFileAttachment
#define soap_read_ArrayOfCFileAttachment(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfCFileAttachment(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ArrayOfCFileAttachment * SOAP_FMAC2 soap_instantiate_ArrayOfCFileAttachment(struct soap*, int, const char*, const char*, size_t*);

inline ArrayOfCFileAttachment * soap_new_ArrayOfCFileAttachment(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfCFileAttachment(soap, n, NULL, NULL, NULL); }

inline ArrayOfCFileAttachment * soap_new_req_ArrayOfCFileAttachment(struct soap *soap) { ArrayOfCFileAttachment *_p = soap_instantiate_ArrayOfCFileAttachment(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ArrayOfCFileAttachment * soap_new_set_ArrayOfCFileAttachment(struct soap *soap, ns1__CFileAttachment **__ptritem, int __size) { ArrayOfCFileAttachment *_p = soap_instantiate_ArrayOfCFileAttachment(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ArrayOfCFileAttachment::__ptritem = __ptritem; _p->ArrayOfCFileAttachment::__size = __size; } return _p; }

inline void soap_delete_ArrayOfCFileAttachment(struct soap *soap, ArrayOfCFileAttachment *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfCFileAttachment(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CFileAttachment
#define SOAP_TYPE_ns1__CFileAttachment (47)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CFileAttachment(struct soap*, const char*, int, const ns1__CFileAttachment *, const char*);
SOAP_FMAC3 ns1__CFileAttachment * SOAP_FMAC4 soap_in_ns1__CFileAttachment(struct soap*, const char*, ns1__CFileAttachment *, const char*);

#ifndef soap_write_ns1__CFileAttachment
#define soap_write_ns1__CFileAttachment(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CFileAttachment", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CFileAttachment * SOAP_FMAC4 soap_get_ns1__CFileAttachment(struct soap*, ns1__CFileAttachment *, const char*, const char*);

#ifndef soap_read_ns1__CFileAttachment
#define soap_read_ns1__CFileAttachment(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CFileAttachment(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CFileAttachment * SOAP_FMAC2 soap_instantiate_ns1__CFileAttachment(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CFileAttachment * soap_new_ns1__CFileAttachment(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CFileAttachment(soap, n, NULL, NULL, NULL); }

inline ns1__CFileAttachment * soap_new_req_ns1__CFileAttachment(struct soap *soap, LONG64 m_recordid) { ns1__CFileAttachment *_p = soap_instantiate_ns1__CFileAttachment(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CFileAttachment::m_recordid = m_recordid; } return _p; }

inline ns1__CFileAttachment * soap_new_set_ns1__CFileAttachment(struct soap *soap, xsd__base64Binary *m_pFileData, char *m_strFileName, LONG64 m_recordid, char *m_strArchiveName, char *m_strType, LONG64 *m_scriptOrder, char *m_strScriptState) { ns1__CFileAttachment *_p = soap_instantiate_ns1__CFileAttachment(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CFileAttachment::m_pFileData = m_pFileData; _p->ns1__CFileAttachment::m_strFileName = m_strFileName; _p->ns1__CFileAttachment::m_recordid = m_recordid; _p->ns1__CFileAttachment::m_strArchiveName = m_strArchiveName; _p->ns1__CFileAttachment::m_strType = m_strType; _p->ns1__CFileAttachment::m_scriptOrder = m_scriptOrder; _p->ns1__CFileAttachment::m_strScriptState = m_strScriptState; } return _p; }

inline void soap_delete_ns1__CFileAttachment(struct soap *soap, ns1__CFileAttachment *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CFileAttachment(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CReportRunResults
#define SOAP_TYPE_ns1__CReportRunResults (46)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CReportRunResults(struct soap*, const char*, int, const ns1__CReportRunResults *, const char*);
SOAP_FMAC3 ns1__CReportRunResults * SOAP_FMAC4 soap_in_ns1__CReportRunResults(struct soap*, const char*, ns1__CReportRunResults *, const char*);

#ifndef soap_write_ns1__CReportRunResults
#define soap_write_ns1__CReportRunResults(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CReportRunResults", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CReportRunResults * SOAP_FMAC4 soap_get_ns1__CReportRunResults(struct soap*, ns1__CReportRunResults *, const char*, const char*);

#ifndef soap_read_ns1__CReportRunResults
#define soap_read_ns1__CReportRunResults(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CReportRunResults(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CReportRunResults * SOAP_FMAC2 soap_instantiate_ns1__CReportRunResults(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CReportRunResults * soap_new_ns1__CReportRunResults(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CReportRunResults(soap, n, NULL, NULL, NULL); }

inline ns1__CReportRunResults * soap_new_req_ns1__CReportRunResults(struct soap *soap) { ns1__CReportRunResults *_p = soap_instantiate_ns1__CReportRunResults(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__CReportRunResults * soap_new_set_ns1__CReportRunResults(struct soap *soap, ArrayOfCFile *m_FileList) { ns1__CReportRunResults *_p = soap_instantiate_ns1__CReportRunResults(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CReportRunResults::m_FileList = m_FileList; } return _p; }

inline void soap_delete_ns1__CReportRunResults(struct soap *soap, ns1__CReportRunResults *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CReportRunResults(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfCFile
#define SOAP_TYPE_ArrayOfCFile (45)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfCFile(struct soap*, const char*, int, const ArrayOfCFile *, const char*);
SOAP_FMAC3 ArrayOfCFile * SOAP_FMAC4 soap_in_ArrayOfCFile(struct soap*, const char*, ArrayOfCFile *, const char*);

#ifndef soap_write_ArrayOfCFile
#define soap_write_ArrayOfCFile(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCFile * SOAP_FMAC4 soap_get_ArrayOfCFile(struct soap*, ArrayOfCFile *, const char*, const char*);

#ifndef soap_read_ArrayOfCFile
#define soap_read_ArrayOfCFile(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfCFile(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ArrayOfCFile * SOAP_FMAC2 soap_instantiate_ArrayOfCFile(struct soap*, int, const char*, const char*, size_t*);

inline ArrayOfCFile * soap_new_ArrayOfCFile(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfCFile(soap, n, NULL, NULL, NULL); }

inline ArrayOfCFile * soap_new_req_ArrayOfCFile(struct soap *soap) { ArrayOfCFile *_p = soap_instantiate_ArrayOfCFile(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ArrayOfCFile * soap_new_set_ArrayOfCFile(struct soap *soap, ns1__CFile **__ptritem, int __size) { ArrayOfCFile *_p = soap_instantiate_ArrayOfCFile(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ArrayOfCFile::__ptritem = __ptritem; _p->ArrayOfCFile::__size = __size; } return _p; }

inline void soap_delete_ArrayOfCFile(struct soap *soap, ArrayOfCFile *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfCFile(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CFile
#define SOAP_TYPE_ns1__CFile (44)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CFile(struct soap*, const char*, int, const ns1__CFile *, const char*);
SOAP_FMAC3 ns1__CFile * SOAP_FMAC4 soap_in_ns1__CFile(struct soap*, const char*, ns1__CFile *, const char*);

#ifndef soap_write_ns1__CFile
#define soap_write_ns1__CFile(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CFile", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CFile * SOAP_FMAC4 soap_get_ns1__CFile(struct soap*, ns1__CFile *, const char*, const char*);

#ifndef soap_read_ns1__CFile
#define soap_read_ns1__CFile(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CFile(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CFile * SOAP_FMAC2 soap_instantiate_ns1__CFile(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CFile * soap_new_ns1__CFile(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CFile(soap, n, NULL, NULL, NULL); }

inline ns1__CFile * soap_new_req_ns1__CFile(struct soap *soap) { ns1__CFile *_p = soap_instantiate_ns1__CFile(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__CFile * soap_new_set_ns1__CFile(struct soap *soap, xsd__base64Binary *m_pFileData, char *m_strFileName) { ns1__CFile *_p = soap_instantiate_ns1__CFile(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CFile::m_pFileData = m_pFileData; _p->ns1__CFile::m_strFileName = m_strFileName; } return _p; }

inline void soap_delete_ns1__CFile(struct soap *soap, ns1__CFile *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CFile(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfCSCCFileRecord
#define SOAP_TYPE_ArrayOfCSCCFileRecord (43)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfCSCCFileRecord(struct soap*, const char*, int, const ArrayOfCSCCFileRecord *, const char*);
SOAP_FMAC3 ArrayOfCSCCFileRecord * SOAP_FMAC4 soap_in_ArrayOfCSCCFileRecord(struct soap*, const char*, ArrayOfCSCCFileRecord *, const char*);

#ifndef soap_write_ArrayOfCSCCFileRecord
#define soap_write_ArrayOfCSCCFileRecord(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCSCCFileRecord * SOAP_FMAC4 soap_get_ArrayOfCSCCFileRecord(struct soap*, ArrayOfCSCCFileRecord *, const char*, const char*);

#ifndef soap_read_ArrayOfCSCCFileRecord
#define soap_read_ArrayOfCSCCFileRecord(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfCSCCFileRecord(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ArrayOfCSCCFileRecord * SOAP_FMAC2 soap_instantiate_ArrayOfCSCCFileRecord(struct soap*, int, const char*, const char*, size_t*);

inline ArrayOfCSCCFileRecord * soap_new_ArrayOfCSCCFileRecord(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfCSCCFileRecord(soap, n, NULL, NULL, NULL); }

inline ArrayOfCSCCFileRecord * soap_new_req_ArrayOfCSCCFileRecord(struct soap *soap) { ArrayOfCSCCFileRecord *_p = soap_instantiate_ArrayOfCSCCFileRecord(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ArrayOfCSCCFileRecord * soap_new_set_ArrayOfCSCCFileRecord(struct soap *soap, ns1__CSCCFileRecord **__ptritem, int __size) { ArrayOfCSCCFileRecord *_p = soap_instantiate_ArrayOfCSCCFileRecord(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ArrayOfCSCCFileRecord::__ptritem = __ptritem; _p->ArrayOfCSCCFileRecord::__size = __size; } return _p; }

inline void soap_delete_ArrayOfCSCCFileRecord(struct soap *soap, ArrayOfCSCCFileRecord *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfCSCCFileRecord(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CSCCFileRecord
#define SOAP_TYPE_ns1__CSCCFileRecord (42)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CSCCFileRecord(struct soap*, const char*, int, const ns1__CSCCFileRecord *, const char*);
SOAP_FMAC3 ns1__CSCCFileRecord * SOAP_FMAC4 soap_in_ns1__CSCCFileRecord(struct soap*, const char*, ns1__CSCCFileRecord *, const char*);

#ifndef soap_write_ns1__CSCCFileRecord
#define soap_write_ns1__CSCCFileRecord(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CSCCFileRecord", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CSCCFileRecord * SOAP_FMAC4 soap_get_ns1__CSCCFileRecord(struct soap*, ns1__CSCCFileRecord *, const char*, const char*);

#ifndef soap_read_ns1__CSCCFileRecord
#define soap_read_ns1__CSCCFileRecord(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CSCCFileRecord(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CSCCFileRecord * SOAP_FMAC2 soap_instantiate_ns1__CSCCFileRecord(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CSCCFileRecord * soap_new_ns1__CSCCFileRecord(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CSCCFileRecord(soap, n, NULL, NULL, NULL); }

inline ns1__CSCCFileRecord * soap_new_req_ns1__CSCCFileRecord(struct soap *soap, LONG64 recordid, char *m_strFileName) { ns1__CSCCFileRecord *_p = soap_instantiate_ns1__CSCCFileRecord(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CSCCFileRecord::recordid = recordid; _p->ns1__CSCCFileRecord::m_strFileName = m_strFileName; } return _p; }

inline ns1__CSCCFileRecord * soap_new_set_ns1__CSCCFileRecord(struct soap *soap, LONG64 recordid, char *m_strFileName, char *m_strFixedRevision, time_t *m_dateFixedTimestamp, char *m_strType, LONG64 *m_scriptOrder, char *m_strScriptState) { ns1__CSCCFileRecord *_p = soap_instantiate_ns1__CSCCFileRecord(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CSCCFileRecord::recordid = recordid; _p->ns1__CSCCFileRecord::m_strFileName = m_strFileName; _p->ns1__CSCCFileRecord::m_strFixedRevision = m_strFixedRevision; _p->ns1__CSCCFileRecord::m_dateFixedTimestamp = m_dateFixedTimestamp; _p->ns1__CSCCFileRecord::m_strType = m_strType; _p->ns1__CSCCFileRecord::m_scriptOrder = m_scriptOrder; _p->ns1__CSCCFileRecord::m_strScriptState = m_strScriptState; } return _p; }

inline void soap_delete_ns1__CSCCFileRecord(struct soap *soap, ns1__CSCCFileRecord *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CSCCFileRecord(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CSystem
#define SOAP_TYPE_ns1__CSystem (41)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CSystem(struct soap*, const char*, int, const ns1__CSystem *, const char*);
SOAP_FMAC3 ns1__CSystem * SOAP_FMAC4 soap_in_ns1__CSystem(struct soap*, const char*, ns1__CSystem *, const char*);

#ifndef soap_write_ns1__CSystem
#define soap_write_ns1__CSystem(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CSystem", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CSystem * SOAP_FMAC4 soap_get_ns1__CSystem(struct soap*, ns1__CSystem *, const char*, const char*);

#ifndef soap_read_ns1__CSystem
#define soap_read_ns1__CSystem(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CSystem(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CSystem * SOAP_FMAC2 soap_instantiate_ns1__CSystem(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CSystem * soap_new_ns1__CSystem(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CSystem(soap, n, NULL, NULL, NULL); }

inline ns1__CSystem * soap_new_req_ns1__CSystem(struct soap *soap, LONG64 recordid, char *systemname) { ns1__CSystem *_p = soap_instantiate_ns1__CSystem(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CSystem::recordid = recordid; _p->ns1__CSystem::systemname = systemname; } return _p; }

inline ns1__CSystem * soap_new_set_ns1__CSystem(struct soap *soap, LONG64 recordid, char *systemname, char *computermodel, char *computerbrand, char *cputype, char *cpuspeed, char *harddisktype, char *harddisksize, char *ramsize, char *romsize, char *osname, char *osversion, char *videoname, bool *hascdrom, char *cdrommodel, bool *hasscanner, char *scannermodel, bool *hasmodem, char *modemmodel, bool *hasprinter, char *printermodel, char *otherhardware, bool *hasmultiplemonitors) { ns1__CSystem *_p = soap_instantiate_ns1__CSystem(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CSystem::recordid = recordid; _p->ns1__CSystem::systemname = systemname; _p->ns1__CSystem::computermodel = computermodel; _p->ns1__CSystem::computerbrand = computerbrand; _p->ns1__CSystem::cputype = cputype; _p->ns1__CSystem::cpuspeed = cpuspeed; _p->ns1__CSystem::harddisktype = harddisktype; _p->ns1__CSystem::harddisksize = harddisksize; _p->ns1__CSystem::ramsize = ramsize; _p->ns1__CSystem::romsize = romsize; _p->ns1__CSystem::osname = osname; _p->ns1__CSystem::osversion = osversion; _p->ns1__CSystem::videoname = videoname; _p->ns1__CSystem::hascdrom = hascdrom; _p->ns1__CSystem::cdrommodel = cdrommodel; _p->ns1__CSystem::hasscanner = hasscanner; _p->ns1__CSystem::scannermodel = scannermodel; _p->ns1__CSystem::hasmodem = hasmodem; _p->ns1__CSystem::modemmodel = modemmodel; _p->ns1__CSystem::hasprinter = hasprinter; _p->ns1__CSystem::printermodel = printermodel; _p->ns1__CSystem::otherhardware = otherhardware; _p->ns1__CSystem::hasmultiplemonitors = hasmultiplemonitors; } return _p; }

inline void soap_delete_ns1__CSystem(struct soap *soap, ns1__CSystem *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CSystem(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CSystemBase
#define SOAP_TYPE_ns1__CSystemBase (40)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CSystemBase(struct soap*, const char*, int, const ns1__CSystemBase *, const char*);
SOAP_FMAC3 ns1__CSystemBase * SOAP_FMAC4 soap_in_ns1__CSystemBase(struct soap*, const char*, ns1__CSystemBase *, const char*);

#ifndef soap_write_ns1__CSystemBase
#define soap_write_ns1__CSystemBase(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CSystemBase", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CSystemBase * SOAP_FMAC4 soap_get_ns1__CSystemBase(struct soap*, ns1__CSystemBase *, const char*, const char*);

#ifndef soap_read_ns1__CSystemBase
#define soap_read_ns1__CSystemBase(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CSystemBase(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CSystemBase * SOAP_FMAC2 soap_instantiate_ns1__CSystemBase(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CSystemBase * soap_new_ns1__CSystemBase(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CSystemBase(soap, n, NULL, NULL, NULL); }

inline ns1__CSystemBase * soap_new_req_ns1__CSystemBase(struct soap *soap, LONG64 recordid, char *systemname) { ns1__CSystemBase *_p = soap_instantiate_ns1__CSystemBase(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CSystemBase::recordid = recordid; _p->ns1__CSystemBase::systemname = systemname; } return _p; }

inline ns1__CSystemBase * soap_new_set_ns1__CSystemBase(struct soap *soap, LONG64 recordid, char *systemname) { ns1__CSystemBase *_p = soap_instantiate_ns1__CSystemBase(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CSystemBase::recordid = recordid; _p->ns1__CSystemBase::systemname = systemname; } return _p; }

inline void soap_delete_ns1__CSystemBase(struct soap *soap, ns1__CSystemBase *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CSystemBase(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__COrderedItemWithDBRecordId
#define SOAP_TYPE_ns1__COrderedItemWithDBRecordId (39)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__COrderedItemWithDBRecordId(struct soap*, const char*, int, const ns1__COrderedItemWithDBRecordId *, const char*);
SOAP_FMAC3 ns1__COrderedItemWithDBRecordId * SOAP_FMAC4 soap_in_ns1__COrderedItemWithDBRecordId(struct soap*, const char*, ns1__COrderedItemWithDBRecordId *, const char*);

#ifndef soap_write_ns1__COrderedItemWithDBRecordId
#define soap_write_ns1__COrderedItemWithDBRecordId(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:COrderedItemWithDBRecordId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__COrderedItemWithDBRecordId * SOAP_FMAC4 soap_get_ns1__COrderedItemWithDBRecordId(struct soap*, ns1__COrderedItemWithDBRecordId *, const char*, const char*);

#ifndef soap_read_ns1__COrderedItemWithDBRecordId
#define soap_read_ns1__COrderedItemWithDBRecordId(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__COrderedItemWithDBRecordId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__COrderedItemWithDBRecordId * SOAP_FMAC2 soap_instantiate_ns1__COrderedItemWithDBRecordId(struct soap*, int, const char*, const char*, size_t*);

inline ns1__COrderedItemWithDBRecordId * soap_new_ns1__COrderedItemWithDBRecordId(struct soap *soap, int n = -1) { return soap_instantiate_ns1__COrderedItemWithDBRecordId(soap, n, NULL, NULL, NULL); }

inline ns1__COrderedItemWithDBRecordId * soap_new_req_ns1__COrderedItemWithDBRecordId(struct soap *soap, LONG64 recordid, LONG64 order) { ns1__COrderedItemWithDBRecordId *_p = soap_instantiate_ns1__COrderedItemWithDBRecordId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__COrderedItemWithDBRecordId::recordid = recordid; _p->ns1__COrderedItemWithDBRecordId::order = order; } return _p; }

inline ns1__COrderedItemWithDBRecordId * soap_new_set_ns1__COrderedItemWithDBRecordId(struct soap *soap, LONG64 recordid, LONG64 order) { ns1__COrderedItemWithDBRecordId *_p = soap_instantiate_ns1__COrderedItemWithDBRecordId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__COrderedItemWithDBRecordId::recordid = recordid; _p->ns1__COrderedItemWithDBRecordId::order = order; } return _p; }

inline void soap_delete_ns1__COrderedItemWithDBRecordId(struct soap *soap, ns1__COrderedItemWithDBRecordId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__COrderedItemWithDBRecordId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CItemToTrack
#define SOAP_TYPE_ns1__CItemToTrack (38)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CItemToTrack(struct soap*, const char*, int, const ns1__CItemToTrack *, const char*);
SOAP_FMAC3 ns1__CItemToTrack * SOAP_FMAC4 soap_in_ns1__CItemToTrack(struct soap*, const char*, ns1__CItemToTrack *, const char*);

#ifndef soap_write_ns1__CItemToTrack
#define soap_write_ns1__CItemToTrack(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CItemToTrack", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CItemToTrack * SOAP_FMAC4 soap_get_ns1__CItemToTrack(struct soap*, ns1__CItemToTrack *, const char*, const char*);

#ifndef soap_read_ns1__CItemToTrack
#define soap_read_ns1__CItemToTrack(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CItemToTrack(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CItemToTrack * SOAP_FMAC2 soap_instantiate_ns1__CItemToTrack(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CItemToTrack * soap_new_ns1__CItemToTrack(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CItemToTrack(soap, n, NULL, NULL, NULL); }

inline ns1__CItemToTrack * soap_new_req_ns1__CItemToTrack(struct soap *soap, LONG64 recordid) { ns1__CItemToTrack *_p = soap_instantiate_ns1__CItemToTrack(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CItemToTrack::recordid = recordid; } return _p; }

inline ns1__CItemToTrack * soap_new_set_ns1__CItemToTrack(struct soap *soap, LONG64 recordid) { ns1__CItemToTrack *_p = soap_instantiate_ns1__CItemToTrack(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CItemToTrack::recordid = recordid; } return _p; }

inline void soap_delete_ns1__CItemToTrack(struct soap *soap, ns1__CItemToTrack *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CItemToTrack(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CItemWithDBRecordId
#define SOAP_TYPE_ns1__CItemWithDBRecordId (37)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CItemWithDBRecordId(struct soap*, const char*, int, const ns1__CItemWithDBRecordId *, const char*);
SOAP_FMAC3 ns1__CItemWithDBRecordId * SOAP_FMAC4 soap_in_ns1__CItemWithDBRecordId(struct soap*, const char*, ns1__CItemWithDBRecordId *, const char*);

#ifndef soap_write_ns1__CItemWithDBRecordId
#define soap_write_ns1__CItemWithDBRecordId(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CItemWithDBRecordId", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CItemWithDBRecordId * SOAP_FMAC4 soap_get_ns1__CItemWithDBRecordId(struct soap*, ns1__CItemWithDBRecordId *, const char*, const char*);

#ifndef soap_read_ns1__CItemWithDBRecordId
#define soap_read_ns1__CItemWithDBRecordId(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CItemWithDBRecordId(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CItemWithDBRecordId * SOAP_FMAC2 soap_instantiate_ns1__CItemWithDBRecordId(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CItemWithDBRecordId * soap_new_ns1__CItemWithDBRecordId(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CItemWithDBRecordId(soap, n, NULL, NULL, NULL); }

inline ns1__CItemWithDBRecordId * soap_new_req_ns1__CItemWithDBRecordId(struct soap *soap, LONG64 recordid) { ns1__CItemWithDBRecordId *_p = soap_instantiate_ns1__CItemWithDBRecordId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CItemWithDBRecordId::recordid = recordid; } return _p; }

inline ns1__CItemWithDBRecordId * soap_new_set_ns1__CItemWithDBRecordId(struct soap *soap, LONG64 recordid) { ns1__CItemWithDBRecordId *_p = soap_instantiate_ns1__CItemWithDBRecordId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CItemWithDBRecordId::recordid = recordid; } return _p; }

inline void soap_delete_ns1__CItemWithDBRecordId(struct soap *soap, ns1__CItemWithDBRecordId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CItemWithDBRecordId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CRecordListSoap
#define SOAP_TYPE_ns1__CRecordListSoap (36)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CRecordListSoap(struct soap*, const char*, int, const ns1__CRecordListSoap *, const char*);
SOAP_FMAC3 ns1__CRecordListSoap * SOAP_FMAC4 soap_in_ns1__CRecordListSoap(struct soap*, const char*, ns1__CRecordListSoap *, const char*);

#ifndef soap_write_ns1__CRecordListSoap
#define soap_write_ns1__CRecordListSoap(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CRecordListSoap", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CRecordListSoap * SOAP_FMAC4 soap_get_ns1__CRecordListSoap(struct soap*, ns1__CRecordListSoap *, const char*, const char*);

#ifndef soap_read_ns1__CRecordListSoap
#define soap_read_ns1__CRecordListSoap(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CRecordListSoap(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CRecordListSoap * SOAP_FMAC2 soap_instantiate_ns1__CRecordListSoap(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CRecordListSoap * soap_new_ns1__CRecordListSoap(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CRecordListSoap(soap, n, NULL, NULL, NULL); }

inline ns1__CRecordListSoap * soap_new_req_ns1__CRecordListSoap(struct soap *soap) { ns1__CRecordListSoap *_p = soap_instantiate_ns1__CRecordListSoap(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__CRecordListSoap * soap_new_set_ns1__CRecordListSoap(struct soap *soap, ArrayOfCTableColumn *columnlist, ArrayOfCRecordRowSoap *records) { ns1__CRecordListSoap *_p = soap_instantiate_ns1__CRecordListSoap(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CRecordListSoap::columnlist = columnlist; _p->ns1__CRecordListSoap::records = records; } return _p; }

inline void soap_delete_ns1__CRecordListSoap(struct soap *soap, ns1__CRecordListSoap *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CRecordListSoap(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfCRecordRowSoap
#define SOAP_TYPE_ArrayOfCRecordRowSoap (35)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfCRecordRowSoap(struct soap*, const char*, int, const ArrayOfCRecordRowSoap *, const char*);
SOAP_FMAC3 ArrayOfCRecordRowSoap * SOAP_FMAC4 soap_in_ArrayOfCRecordRowSoap(struct soap*, const char*, ArrayOfCRecordRowSoap *, const char*);

#ifndef soap_write_ArrayOfCRecordRowSoap
#define soap_write_ArrayOfCRecordRowSoap(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCRecordRowSoap * SOAP_FMAC4 soap_get_ArrayOfCRecordRowSoap(struct soap*, ArrayOfCRecordRowSoap *, const char*, const char*);

#ifndef soap_read_ArrayOfCRecordRowSoap
#define soap_read_ArrayOfCRecordRowSoap(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfCRecordRowSoap(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ArrayOfCRecordRowSoap * SOAP_FMAC2 soap_instantiate_ArrayOfCRecordRowSoap(struct soap*, int, const char*, const char*, size_t*);

inline ArrayOfCRecordRowSoap * soap_new_ArrayOfCRecordRowSoap(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfCRecordRowSoap(soap, n, NULL, NULL, NULL); }

inline ArrayOfCRecordRowSoap * soap_new_req_ArrayOfCRecordRowSoap(struct soap *soap) { ArrayOfCRecordRowSoap *_p = soap_instantiate_ArrayOfCRecordRowSoap(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ArrayOfCRecordRowSoap * soap_new_set_ArrayOfCRecordRowSoap(struct soap *soap, ns1__CRecordRowSoap **__ptritem, int __size) { ArrayOfCRecordRowSoap *_p = soap_instantiate_ArrayOfCRecordRowSoap(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ArrayOfCRecordRowSoap::__ptritem = __ptritem; _p->ArrayOfCRecordRowSoap::__size = __size; } return _p; }

inline void soap_delete_ArrayOfCRecordRowSoap(struct soap *soap, ArrayOfCRecordRowSoap *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfCRecordRowSoap(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CRecordRowSoap
#define SOAP_TYPE_ns1__CRecordRowSoap (34)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CRecordRowSoap(struct soap*, const char*, int, const ns1__CRecordRowSoap *, const char*);
SOAP_FMAC3 ns1__CRecordRowSoap * SOAP_FMAC4 soap_in_ns1__CRecordRowSoap(struct soap*, const char*, ns1__CRecordRowSoap *, const char*);

#ifndef soap_write_ns1__CRecordRowSoap
#define soap_write_ns1__CRecordRowSoap(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CRecordRowSoap", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CRecordRowSoap * SOAP_FMAC4 soap_get_ns1__CRecordRowSoap(struct soap*, ns1__CRecordRowSoap *, const char*, const char*);

#ifndef soap_read_ns1__CRecordRowSoap
#define soap_read_ns1__CRecordRowSoap(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CRecordRowSoap(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CRecordRowSoap * SOAP_FMAC2 soap_instantiate_ns1__CRecordRowSoap(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CRecordRowSoap * soap_new_ns1__CRecordRowSoap(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CRecordRowSoap(soap, n, NULL, NULL, NULL); }

inline ns1__CRecordRowSoap * soap_new_req_ns1__CRecordRowSoap(struct soap *soap, ArrayOfCRecordData *row) { ns1__CRecordRowSoap *_p = soap_instantiate_ns1__CRecordRowSoap(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CRecordRowSoap::row = row; } return _p; }

inline ns1__CRecordRowSoap * soap_new_set_ns1__CRecordRowSoap(struct soap *soap, ArrayOfCRecordData *row) { ns1__CRecordRowSoap *_p = soap_instantiate_ns1__CRecordRowSoap(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CRecordRowSoap::row = row; } return _p; }

inline void soap_delete_ns1__CRecordRowSoap(struct soap *soap, ns1__CRecordRowSoap *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CRecordRowSoap(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfCRecordData
#define SOAP_TYPE_ArrayOfCRecordData (33)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfCRecordData(struct soap*, const char*, int, const ArrayOfCRecordData *, const char*);
SOAP_FMAC3 ArrayOfCRecordData * SOAP_FMAC4 soap_in_ArrayOfCRecordData(struct soap*, const char*, ArrayOfCRecordData *, const char*);

#ifndef soap_write_ArrayOfCRecordData
#define soap_write_ArrayOfCRecordData(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCRecordData * SOAP_FMAC4 soap_get_ArrayOfCRecordData(struct soap*, ArrayOfCRecordData *, const char*, const char*);

#ifndef soap_read_ArrayOfCRecordData
#define soap_read_ArrayOfCRecordData(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfCRecordData(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ArrayOfCRecordData * SOAP_FMAC2 soap_instantiate_ArrayOfCRecordData(struct soap*, int, const char*, const char*, size_t*);

inline ArrayOfCRecordData * soap_new_ArrayOfCRecordData(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfCRecordData(soap, n, NULL, NULL, NULL); }

inline ArrayOfCRecordData * soap_new_req_ArrayOfCRecordData(struct soap *soap) { ArrayOfCRecordData *_p = soap_instantiate_ArrayOfCRecordData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ArrayOfCRecordData * soap_new_set_ArrayOfCRecordData(struct soap *soap, ns1__CRecordData **__ptritem, int __size) { ArrayOfCRecordData *_p = soap_instantiate_ArrayOfCRecordData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ArrayOfCRecordData::__ptritem = __ptritem; _p->ArrayOfCRecordData::__size = __size; } return _p; }

inline void soap_delete_ArrayOfCRecordData(struct soap *soap, ArrayOfCRecordData *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfCRecordData(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CRecordData
#define SOAP_TYPE_ns1__CRecordData (32)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CRecordData(struct soap*, const char*, int, const ns1__CRecordData *, const char*);
SOAP_FMAC3 ns1__CRecordData * SOAP_FMAC4 soap_in_ns1__CRecordData(struct soap*, const char*, ns1__CRecordData *, const char*);

#ifndef soap_write_ns1__CRecordData
#define soap_write_ns1__CRecordData(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CRecordData", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CRecordData * SOAP_FMAC4 soap_get_ns1__CRecordData(struct soap*, ns1__CRecordData *, const char*, const char*);

#ifndef soap_read_ns1__CRecordData
#define soap_read_ns1__CRecordData(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CRecordData(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CRecordData * SOAP_FMAC2 soap_instantiate_ns1__CRecordData(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CRecordData * soap_new_ns1__CRecordData(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CRecordData(soap, n, NULL, NULL, NULL); }

inline ns1__CRecordData * soap_new_req_ns1__CRecordData(struct soap *soap, char *value) { ns1__CRecordData *_p = soap_instantiate_ns1__CRecordData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CRecordData::value = value; } return _p; }

inline ns1__CRecordData * soap_new_set_ns1__CRecordData(struct soap *soap, char *value) { ns1__CRecordData *_p = soap_instantiate_ns1__CRecordData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CRecordData::value = value; } return _p; }

inline void soap_delete_ns1__CRecordData(struct soap *soap, ns1__CRecordData *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CRecordData(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfCFilter
#define SOAP_TYPE_ArrayOfCFilter (31)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfCFilter(struct soap*, const char*, int, const ArrayOfCFilter *, const char*);
SOAP_FMAC3 ArrayOfCFilter * SOAP_FMAC4 soap_in_ArrayOfCFilter(struct soap*, const char*, ArrayOfCFilter *, const char*);

#ifndef soap_write_ArrayOfCFilter
#define soap_write_ArrayOfCFilter(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCFilter * SOAP_FMAC4 soap_get_ArrayOfCFilter(struct soap*, ArrayOfCFilter *, const char*, const char*);

#ifndef soap_read_ArrayOfCFilter
#define soap_read_ArrayOfCFilter(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfCFilter(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ArrayOfCFilter * SOAP_FMAC2 soap_instantiate_ArrayOfCFilter(struct soap*, int, const char*, const char*, size_t*);

inline ArrayOfCFilter * soap_new_ArrayOfCFilter(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfCFilter(soap, n, NULL, NULL, NULL); }

inline ArrayOfCFilter * soap_new_req_ArrayOfCFilter(struct soap *soap) { ArrayOfCFilter *_p = soap_instantiate_ArrayOfCFilter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ArrayOfCFilter * soap_new_set_ArrayOfCFilter(struct soap *soap, ns1__CFilter **__ptritem, int __size) { ArrayOfCFilter *_p = soap_instantiate_ArrayOfCFilter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ArrayOfCFilter::__ptritem = __ptritem; _p->ArrayOfCFilter::__size = __size; } return _p; }

inline void soap_delete_ArrayOfCFilter(struct soap *soap, ArrayOfCFilter *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfCFilter(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CFilter
#define SOAP_TYPE_ns1__CFilter (30)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CFilter(struct soap*, const char*, int, const ns1__CFilter *, const char*);
SOAP_FMAC3 ns1__CFilter * SOAP_FMAC4 soap_in_ns1__CFilter(struct soap*, const char*, ns1__CFilter *, const char*);

#ifndef soap_write_ns1__CFilter
#define soap_write_ns1__CFilter(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CFilter", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CFilter * SOAP_FMAC4 soap_get_ns1__CFilter(struct soap*, ns1__CFilter *, const char*, const char*);

#ifndef soap_read_ns1__CFilter
#define soap_read_ns1__CFilter(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CFilter(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CFilter * SOAP_FMAC2 soap_instantiate_ns1__CFilter(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CFilter * soap_new_ns1__CFilter(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CFilter(soap, n, NULL, NULL, NULL); }

inline ns1__CFilter * soap_new_req_ns1__CFilter(struct soap *soap, char *name) { ns1__CFilter *_p = soap_instantiate_ns1__CFilter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CFilter::name = name; } return _p; }

inline ns1__CFilter * soap_new_set_ns1__CFilter(struct soap *soap, char *name) { ns1__CFilter *_p = soap_instantiate_ns1__CFilter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CFilter::name = name; } return _p; }

inline void soap_delete_ns1__CFilter(struct soap *soap, ns1__CFilter *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CFilter(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfCTableColumn
#define SOAP_TYPE_ArrayOfCTableColumn (29)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfCTableColumn(struct soap*, const char*, int, const ArrayOfCTableColumn *, const char*);
SOAP_FMAC3 ArrayOfCTableColumn * SOAP_FMAC4 soap_in_ArrayOfCTableColumn(struct soap*, const char*, ArrayOfCTableColumn *, const char*);

#ifndef soap_write_ArrayOfCTableColumn
#define soap_write_ArrayOfCTableColumn(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCTableColumn * SOAP_FMAC4 soap_get_ArrayOfCTableColumn(struct soap*, ArrayOfCTableColumn *, const char*, const char*);

#ifndef soap_read_ArrayOfCTableColumn
#define soap_read_ArrayOfCTableColumn(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfCTableColumn(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ArrayOfCTableColumn * SOAP_FMAC2 soap_instantiate_ArrayOfCTableColumn(struct soap*, int, const char*, const char*, size_t*);

inline ArrayOfCTableColumn * soap_new_ArrayOfCTableColumn(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfCTableColumn(soap, n, NULL, NULL, NULL); }

inline ArrayOfCTableColumn * soap_new_req_ArrayOfCTableColumn(struct soap *soap) { ArrayOfCTableColumn *_p = soap_instantiate_ArrayOfCTableColumn(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ArrayOfCTableColumn * soap_new_set_ArrayOfCTableColumn(struct soap *soap, ns1__CTableColumn **__ptritem, int __size) { ArrayOfCTableColumn *_p = soap_instantiate_ArrayOfCTableColumn(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ArrayOfCTableColumn::__ptritem = __ptritem; _p->ArrayOfCTableColumn::__size = __size; } return _p; }

inline void soap_delete_ArrayOfCTableColumn(struct soap *soap, ArrayOfCTableColumn *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfCTableColumn(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CTableColumn
#define SOAP_TYPE_ns1__CTableColumn (28)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CTableColumn(struct soap*, const char*, int, const ns1__CTableColumn *, const char*);
SOAP_FMAC3 ns1__CTableColumn * SOAP_FMAC4 soap_in_ns1__CTableColumn(struct soap*, const char*, ns1__CTableColumn *, const char*);

#ifndef soap_write_ns1__CTableColumn
#define soap_write_ns1__CTableColumn(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CTableColumn", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CTableColumn * SOAP_FMAC4 soap_get_ns1__CTableColumn(struct soap*, ns1__CTableColumn *, const char*, const char*);

#ifndef soap_read_ns1__CTableColumn
#define soap_read_ns1__CTableColumn(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CTableColumn(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CTableColumn * SOAP_FMAC2 soap_instantiate_ns1__CTableColumn(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CTableColumn * soap_new_ns1__CTableColumn(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CTableColumn(soap, n, NULL, NULL, NULL); }

inline ns1__CTableColumn * soap_new_req_ns1__CTableColumn(struct soap *soap, char *name) { ns1__CTableColumn *_p = soap_instantiate_ns1__CTableColumn(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CTableColumn::name = name; } return _p; }

inline ns1__CTableColumn * soap_new_set_ns1__CTableColumn(struct soap *soap, char *name) { ns1__CTableColumn *_p = soap_instantiate_ns1__CTableColumn(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CTableColumn::name = name; } return _p; }

inline void soap_delete_ns1__CTableColumn(struct soap *soap, ns1__CTableColumn *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CTableColumn(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfCFieldValue
#define SOAP_TYPE_ArrayOfCFieldValue (27)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfCFieldValue(struct soap*, const char*, int, const ArrayOfCFieldValue *, const char*);
SOAP_FMAC3 ArrayOfCFieldValue * SOAP_FMAC4 soap_in_ArrayOfCFieldValue(struct soap*, const char*, ArrayOfCFieldValue *, const char*);

#ifndef soap_write_ArrayOfCFieldValue
#define soap_write_ArrayOfCFieldValue(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCFieldValue * SOAP_FMAC4 soap_get_ArrayOfCFieldValue(struct soap*, ArrayOfCFieldValue *, const char*, const char*);

#ifndef soap_read_ArrayOfCFieldValue
#define soap_read_ArrayOfCFieldValue(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfCFieldValue(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ArrayOfCFieldValue * SOAP_FMAC2 soap_instantiate_ArrayOfCFieldValue(struct soap*, int, const char*, const char*, size_t*);

inline ArrayOfCFieldValue * soap_new_ArrayOfCFieldValue(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfCFieldValue(soap, n, NULL, NULL, NULL); }

inline ArrayOfCFieldValue * soap_new_req_ArrayOfCFieldValue(struct soap *soap) { ArrayOfCFieldValue *_p = soap_instantiate_ArrayOfCFieldValue(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ArrayOfCFieldValue * soap_new_set_ArrayOfCFieldValue(struct soap *soap, ns1__CFieldValue **__ptritem, int __size) { ArrayOfCFieldValue *_p = soap_instantiate_ArrayOfCFieldValue(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ArrayOfCFieldValue::__ptritem = __ptritem; _p->ArrayOfCFieldValue::__size = __size; } return _p; }

inline void soap_delete_ArrayOfCFieldValue(struct soap *soap, ArrayOfCFieldValue *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfCFieldValue(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CFieldValue
#define SOAP_TYPE_ns1__CFieldValue (26)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CFieldValue(struct soap*, const char*, int, const ns1__CFieldValue *, const char*);
SOAP_FMAC3 ns1__CFieldValue * SOAP_FMAC4 soap_in_ns1__CFieldValue(struct soap*, const char*, ns1__CFieldValue *, const char*);

#ifndef soap_write_ns1__CFieldValue
#define soap_write_ns1__CFieldValue(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CFieldValue", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CFieldValue * SOAP_FMAC4 soap_get_ns1__CFieldValue(struct soap*, ns1__CFieldValue *, const char*, const char*);

#ifndef soap_read_ns1__CFieldValue
#define soap_read_ns1__CFieldValue(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CFieldValue(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CFieldValue * SOAP_FMAC2 soap_instantiate_ns1__CFieldValue(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CFieldValue * soap_new_ns1__CFieldValue(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CFieldValue(soap, n, NULL, NULL, NULL); }

inline ns1__CFieldValue * soap_new_req_ns1__CFieldValue(struct soap *soap, char *value) { ns1__CFieldValue *_p = soap_instantiate_ns1__CFieldValue(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CFieldValue::value = value; } return _p; }

inline ns1__CFieldValue * soap_new_set_ns1__CFieldValue(struct soap *soap, char *value) { ns1__CFieldValue *_p = soap_instantiate_ns1__CFieldValue(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CFieldValue::value = value; } return _p; }

inline void soap_delete_ns1__CFieldValue(struct soap *soap, ns1__CFieldValue *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CFieldValue(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfCTableField
#define SOAP_TYPE_ArrayOfCTableField (25)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfCTableField(struct soap*, const char*, int, const ArrayOfCTableField *, const char*);
SOAP_FMAC3 ArrayOfCTableField * SOAP_FMAC4 soap_in_ArrayOfCTableField(struct soap*, const char*, ArrayOfCTableField *, const char*);

#ifndef soap_write_ArrayOfCTableField
#define soap_write_ArrayOfCTableField(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCTableField * SOAP_FMAC4 soap_get_ArrayOfCTableField(struct soap*, ArrayOfCTableField *, const char*, const char*);

#ifndef soap_read_ArrayOfCTableField
#define soap_read_ArrayOfCTableField(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfCTableField(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ArrayOfCTableField * SOAP_FMAC2 soap_instantiate_ArrayOfCTableField(struct soap*, int, const char*, const char*, size_t*);

inline ArrayOfCTableField * soap_new_ArrayOfCTableField(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfCTableField(soap, n, NULL, NULL, NULL); }

inline ArrayOfCTableField * soap_new_req_ArrayOfCTableField(struct soap *soap) { ArrayOfCTableField *_p = soap_instantiate_ArrayOfCTableField(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ArrayOfCTableField * soap_new_set_ArrayOfCTableField(struct soap *soap, ns1__CTableField **__ptritem, int __size) { ArrayOfCTableField *_p = soap_instantiate_ArrayOfCTableField(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ArrayOfCTableField::__ptritem = __ptritem; _p->ArrayOfCTableField::__size = __size; } return _p; }

inline void soap_delete_ArrayOfCTableField(struct soap *soap, ArrayOfCTableField *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfCTableField(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CTableField
#define SOAP_TYPE_ns1__CTableField (24)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CTableField(struct soap*, const char*, int, const ns1__CTableField *, const char*);
SOAP_FMAC3 ns1__CTableField * SOAP_FMAC4 soap_in_ns1__CTableField(struct soap*, const char*, ns1__CTableField *, const char*);

#ifndef soap_write_ns1__CTableField
#define soap_write_ns1__CTableField(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CTableField", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CTableField * SOAP_FMAC4 soap_get_ns1__CTableField(struct soap*, ns1__CTableField *, const char*, const char*);

#ifndef soap_read_ns1__CTableField
#define soap_read_ns1__CTableField(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CTableField(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CTableField * SOAP_FMAC2 soap_instantiate_ns1__CTableField(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CTableField * soap_new_ns1__CTableField(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CTableField(soap, n, NULL, NULL, NULL); }

inline ns1__CTableField * soap_new_req_ns1__CTableField(struct soap *soap, char *name) { ns1__CTableField *_p = soap_instantiate_ns1__CTableField(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CTableField::name = name; } return _p; }

inline ns1__CTableField * soap_new_set_ns1__CTableField(struct soap *soap, char *name) { ns1__CTableField *_p = soap_instantiate_ns1__CTableField(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CTableField::name = name; } return _p; }

inline void soap_delete_ns1__CTableField(struct soap *soap, ns1__CTableField *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CTableField(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfCDatabaseTable
#define SOAP_TYPE_ArrayOfCDatabaseTable (23)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfCDatabaseTable(struct soap*, const char*, int, const ArrayOfCDatabaseTable *, const char*);
SOAP_FMAC3 ArrayOfCDatabaseTable * SOAP_FMAC4 soap_in_ArrayOfCDatabaseTable(struct soap*, const char*, ArrayOfCDatabaseTable *, const char*);

#ifndef soap_write_ArrayOfCDatabaseTable
#define soap_write_ArrayOfCDatabaseTable(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCDatabaseTable * SOAP_FMAC4 soap_get_ArrayOfCDatabaseTable(struct soap*, ArrayOfCDatabaseTable *, const char*, const char*);

#ifndef soap_read_ArrayOfCDatabaseTable
#define soap_read_ArrayOfCDatabaseTable(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfCDatabaseTable(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ArrayOfCDatabaseTable * SOAP_FMAC2 soap_instantiate_ArrayOfCDatabaseTable(struct soap*, int, const char*, const char*, size_t*);

inline ArrayOfCDatabaseTable * soap_new_ArrayOfCDatabaseTable(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfCDatabaseTable(soap, n, NULL, NULL, NULL); }

inline ArrayOfCDatabaseTable * soap_new_req_ArrayOfCDatabaseTable(struct soap *soap) { ArrayOfCDatabaseTable *_p = soap_instantiate_ArrayOfCDatabaseTable(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ArrayOfCDatabaseTable * soap_new_set_ArrayOfCDatabaseTable(struct soap *soap, ns1__CDatabaseTable **__ptritem, int __size) { ArrayOfCDatabaseTable *_p = soap_instantiate_ArrayOfCDatabaseTable(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ArrayOfCDatabaseTable::__ptritem = __ptritem; _p->ArrayOfCDatabaseTable::__size = __size; } return _p; }

inline void soap_delete_ArrayOfCDatabaseTable(struct soap *soap, ArrayOfCDatabaseTable *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfCDatabaseTable(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CDatabaseTable
#define SOAP_TYPE_ns1__CDatabaseTable (22)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CDatabaseTable(struct soap*, const char*, int, const ns1__CDatabaseTable *, const char*);
SOAP_FMAC3 ns1__CDatabaseTable * SOAP_FMAC4 soap_in_ns1__CDatabaseTable(struct soap*, const char*, ns1__CDatabaseTable *, const char*);

#ifndef soap_write_ns1__CDatabaseTable
#define soap_write_ns1__CDatabaseTable(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CDatabaseTable", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CDatabaseTable * SOAP_FMAC4 soap_get_ns1__CDatabaseTable(struct soap*, ns1__CDatabaseTable *, const char*, const char*);

#ifndef soap_read_ns1__CDatabaseTable
#define soap_read_ns1__CDatabaseTable(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CDatabaseTable(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CDatabaseTable * SOAP_FMAC2 soap_instantiate_ns1__CDatabaseTable(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CDatabaseTable * soap_new_ns1__CDatabaseTable(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CDatabaseTable(soap, n, NULL, NULL, NULL); }

inline ns1__CDatabaseTable * soap_new_req_ns1__CDatabaseTable(struct soap *soap, char *name) { ns1__CDatabaseTable *_p = soap_instantiate_ns1__CDatabaseTable(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CDatabaseTable::name = name; } return _p; }

inline ns1__CDatabaseTable * soap_new_set_ns1__CDatabaseTable(struct soap *soap, char *name) { ns1__CDatabaseTable *_p = soap_instantiate_ns1__CDatabaseTable(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CDatabaseTable::name = name; } return _p; }

inline void soap_delete_ns1__CDatabaseTable(struct soap *soap, ns1__CDatabaseTable *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CDatabaseTable(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfCProject
#define SOAP_TYPE_ArrayOfCProject (21)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfCProject(struct soap*, const char*, int, const ArrayOfCProject *, const char*);
SOAP_FMAC3 ArrayOfCProject * SOAP_FMAC4 soap_in_ArrayOfCProject(struct soap*, const char*, ArrayOfCProject *, const char*);

#ifndef soap_write_ArrayOfCProject
#define soap_write_ArrayOfCProject(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCProject * SOAP_FMAC4 soap_get_ArrayOfCProject(struct soap*, ArrayOfCProject *, const char*, const char*);

#ifndef soap_read_ArrayOfCProject
#define soap_read_ArrayOfCProject(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfCProject(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ArrayOfCProject * SOAP_FMAC2 soap_instantiate_ArrayOfCProject(struct soap*, int, const char*, const char*, size_t*);

inline ArrayOfCProject * soap_new_ArrayOfCProject(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfCProject(soap, n, NULL, NULL, NULL); }

inline ArrayOfCProject * soap_new_req_ArrayOfCProject(struct soap *soap) { ArrayOfCProject *_p = soap_instantiate_ArrayOfCProject(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ArrayOfCProject * soap_new_set_ArrayOfCProject(struct soap *soap, ns1__CProject **__ptritem, int __size) { ArrayOfCProject *_p = soap_instantiate_ArrayOfCProject(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ArrayOfCProject::__ptritem = __ptritem; _p->ArrayOfCProject::__size = __size; } return _p; }

inline void soap_delete_ArrayOfCProject(struct soap *soap, ArrayOfCProject *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfCProject(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CProject
#define SOAP_TYPE_ns1__CProject (20)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CProject(struct soap*, const char*, int, const ns1__CProject *, const char*);
SOAP_FMAC3 ns1__CProject * SOAP_FMAC4 soap_in_ns1__CProject(struct soap*, const char*, ns1__CProject *, const char*);

#ifndef soap_write_ns1__CProject
#define soap_write_ns1__CProject(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CProject", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CProject * SOAP_FMAC4 soap_get_ns1__CProject(struct soap*, ns1__CProject *, const char*, const char*);

#ifndef soap_read_ns1__CProject
#define soap_read_ns1__CProject(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CProject(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CProject * SOAP_FMAC2 soap_instantiate_ns1__CProject(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CProject * soap_new_ns1__CProject(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CProject(soap, n, NULL, NULL, NULL); }

inline ns1__CProject * soap_new_req_ns1__CProject(struct soap *soap, ns1__CDatabase *database) { ns1__CProject *_p = soap_instantiate_ns1__CProject(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CProject::database = database; } return _p; }

inline ns1__CProject * soap_new_set_ns1__CProject(struct soap *soap, ns1__CDatabase *database, ArrayOfCProjectDataOption *options, int *servernumber) { ns1__CProject *_p = soap_instantiate_ns1__CProject(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CProject::database = database; _p->ns1__CProject::options = options; _p->ns1__CProject::servernumber = servernumber; } return _p; }

inline void soap_delete_ns1__CProject(struct soap *soap, ns1__CProject *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CProject(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfCProjectDataOption
#define SOAP_TYPE_ArrayOfCProjectDataOption (19)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfCProjectDataOption(struct soap*, const char*, int, const ArrayOfCProjectDataOption *, const char*);
SOAP_FMAC3 ArrayOfCProjectDataOption * SOAP_FMAC4 soap_in_ArrayOfCProjectDataOption(struct soap*, const char*, ArrayOfCProjectDataOption *, const char*);

#ifndef soap_write_ArrayOfCProjectDataOption
#define soap_write_ArrayOfCProjectDataOption(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCProjectDataOption * SOAP_FMAC4 soap_get_ArrayOfCProjectDataOption(struct soap*, ArrayOfCProjectDataOption *, const char*, const char*);

#ifndef soap_read_ArrayOfCProjectDataOption
#define soap_read_ArrayOfCProjectDataOption(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfCProjectDataOption(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ArrayOfCProjectDataOption * SOAP_FMAC2 soap_instantiate_ArrayOfCProjectDataOption(struct soap*, int, const char*, const char*, size_t*);

inline ArrayOfCProjectDataOption * soap_new_ArrayOfCProjectDataOption(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfCProjectDataOption(soap, n, NULL, NULL, NULL); }

inline ArrayOfCProjectDataOption * soap_new_req_ArrayOfCProjectDataOption(struct soap *soap) { ArrayOfCProjectDataOption *_p = soap_instantiate_ArrayOfCProjectDataOption(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ArrayOfCProjectDataOption * soap_new_set_ArrayOfCProjectDataOption(struct soap *soap, ns1__CProjectDataOption **__ptritem, int __size) { ArrayOfCProjectDataOption *_p = soap_instantiate_ArrayOfCProjectDataOption(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ArrayOfCProjectDataOption::__ptritem = __ptritem; _p->ArrayOfCProjectDataOption::__size = __size; } return _p; }

inline void soap_delete_ArrayOfCProjectDataOption(struct soap *soap, ArrayOfCProjectDataOption *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfCProjectDataOption(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CProjectDataOption
#define SOAP_TYPE_ns1__CProjectDataOption (18)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CProjectDataOption(struct soap*, const char*, int, const ns1__CProjectDataOption *, const char*);
SOAP_FMAC3 ns1__CProjectDataOption * SOAP_FMAC4 soap_in_ns1__CProjectDataOption(struct soap*, const char*, ns1__CProjectDataOption *, const char*);

#ifndef soap_write_ns1__CProjectDataOption
#define soap_write_ns1__CProjectDataOption(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CProjectDataOption", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CProjectDataOption * SOAP_FMAC4 soap_get_ns1__CProjectDataOption(struct soap*, ns1__CProjectDataOption *, const char*, const char*);

#ifndef soap_read_ns1__CProjectDataOption
#define soap_read_ns1__CProjectDataOption(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CProjectDataOption(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CProjectDataOption * SOAP_FMAC2 soap_instantiate_ns1__CProjectDataOption(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CProjectDataOption * soap_new_ns1__CProjectDataOption(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CProjectDataOption(soap, n, NULL, NULL, NULL); }

inline ns1__CProjectDataOption * soap_new_req_ns1__CProjectDataOption(struct soap *soap, char *name) { ns1__CProjectDataOption *_p = soap_instantiate_ns1__CProjectDataOption(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CProjectDataOption::name = name; } return _p; }

inline ns1__CProjectDataOption * soap_new_set_ns1__CProjectDataOption(struct soap *soap, char *name) { ns1__CProjectDataOption *_p = soap_instantiate_ns1__CProjectDataOption(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CProjectDataOption::name = name; } return _p; }

inline void soap_delete_ns1__CProjectDataOption(struct soap *soap, ns1__CProjectDataOption *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CProjectDataOption(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfCDatabase
#define SOAP_TYPE_ArrayOfCDatabase (17)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfCDatabase(struct soap*, const char*, int, const ArrayOfCDatabase *, const char*);
SOAP_FMAC3 ArrayOfCDatabase * SOAP_FMAC4 soap_in_ArrayOfCDatabase(struct soap*, const char*, ArrayOfCDatabase *, const char*);

#ifndef soap_write_ArrayOfCDatabase
#define soap_write_ArrayOfCDatabase(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCDatabase * SOAP_FMAC4 soap_get_ArrayOfCDatabase(struct soap*, ArrayOfCDatabase *, const char*, const char*);

#ifndef soap_read_ArrayOfCDatabase
#define soap_read_ArrayOfCDatabase(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfCDatabase(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ArrayOfCDatabase * SOAP_FMAC2 soap_instantiate_ArrayOfCDatabase(struct soap*, int, const char*, const char*, size_t*);

inline ArrayOfCDatabase * soap_new_ArrayOfCDatabase(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfCDatabase(soap, n, NULL, NULL, NULL); }

inline ArrayOfCDatabase * soap_new_req_ArrayOfCDatabase(struct soap *soap) { ArrayOfCDatabase *_p = soap_instantiate_ArrayOfCDatabase(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ArrayOfCDatabase * soap_new_set_ArrayOfCDatabase(struct soap *soap, ns1__CDatabase **__ptritem, int __size) { ArrayOfCDatabase *_p = soap_instantiate_ArrayOfCDatabase(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ArrayOfCDatabase::__ptritem = __ptritem; _p->ArrayOfCDatabase::__size = __size; } return _p; }

inline void soap_delete_ArrayOfCDatabase(struct soap *soap, ArrayOfCDatabase *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfCDatabase(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CDatabase
#define SOAP_TYPE_ns1__CDatabase (16)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CDatabase(struct soap*, const char*, int, const ns1__CDatabase *, const char*);
SOAP_FMAC3 ns1__CDatabase * SOAP_FMAC4 soap_in_ns1__CDatabase(struct soap*, const char*, ns1__CDatabase *, const char*);

#ifndef soap_write_ns1__CDatabase
#define soap_write_ns1__CDatabase(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CDatabase", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CDatabase * SOAP_FMAC4 soap_get_ns1__CDatabase(struct soap*, ns1__CDatabase *, const char*, const char*);

#ifndef soap_read_ns1__CDatabase
#define soap_read_ns1__CDatabase(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CDatabase(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CDatabase * SOAP_FMAC2 soap_instantiate_ns1__CDatabase(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CDatabase * soap_new_ns1__CDatabase(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CDatabase(soap, n, NULL, NULL, NULL); }

inline ns1__CDatabase * soap_new_req_ns1__CDatabase(struct soap *soap, char *name) { ns1__CDatabase *_p = soap_instantiate_ns1__CDatabase(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CDatabase::name = name; } return _p; }

inline ns1__CDatabase * soap_new_set_ns1__CDatabase(struct soap *soap, char *name) { ns1__CDatabase *_p = soap_instantiate_ns1__CDatabase(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CDatabase::name = name; } return _p; }

inline void soap_delete_ns1__CDatabase(struct soap *soap, ns1__CDatabase *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CDatabase(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOflong
#define SOAP_TYPE_ArrayOflong (15)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOflong(struct soap*, const char*, int, const ArrayOflong *, const char*);
SOAP_FMAC3 ArrayOflong * SOAP_FMAC4 soap_in_ArrayOflong(struct soap*, const char*, ArrayOflong *, const char*);

#ifndef soap_write_ArrayOflong
#define soap_write_ArrayOflong(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOflong * SOAP_FMAC4 soap_get_ArrayOflong(struct soap*, ArrayOflong *, const char*, const char*);

#ifndef soap_read_ArrayOflong
#define soap_read_ArrayOflong(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOflong(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ArrayOflong * SOAP_FMAC2 soap_instantiate_ArrayOflong(struct soap*, int, const char*, const char*, size_t*);

inline ArrayOflong * soap_new_ArrayOflong(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOflong(soap, n, NULL, NULL, NULL); }

inline ArrayOflong * soap_new_req_ArrayOflong(struct soap *soap) { ArrayOflong *_p = soap_instantiate_ArrayOflong(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ArrayOflong * soap_new_set_ArrayOflong(struct soap *soap, LONG64 *__ptritem, int __size) { ArrayOflong *_p = soap_instantiate_ArrayOflong(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ArrayOflong::__ptritem = __ptritem; _p->ArrayOflong::__size = __size; } return _p; }

inline void soap_delete_ArrayOflong(struct soap *soap, ArrayOflong *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOflong(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ArrayOfstring
#define SOAP_TYPE_ArrayOfstring (14)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfstring(struct soap*, const char*, int, const ArrayOfstring *, const char*);
SOAP_FMAC3 ArrayOfstring * SOAP_FMAC4 soap_in_ArrayOfstring(struct soap*, const char*, ArrayOfstring *, const char*);

#ifndef soap_write_ArrayOfstring
#define soap_write_ArrayOfstring(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfstring * SOAP_FMAC4 soap_get_ArrayOfstring(struct soap*, ArrayOfstring *, const char*, const char*);

#ifndef soap_read_ArrayOfstring
#define soap_read_ArrayOfstring(soap, data) ( soap_begin_recv(soap) || !soap_get_ArrayOfstring(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ArrayOfstring * SOAP_FMAC2 soap_instantiate_ArrayOfstring(struct soap*, int, const char*, const char*, size_t*);

inline ArrayOfstring * soap_new_ArrayOfstring(struct soap *soap, int n = -1) { return soap_instantiate_ArrayOfstring(soap, n, NULL, NULL, NULL); }

inline ArrayOfstring * soap_new_req_ArrayOfstring(struct soap *soap) { ArrayOfstring *_p = soap_instantiate_ArrayOfstring(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ArrayOfstring * soap_new_set_ArrayOfstring(struct soap *soap, char **__ptritem, int __size) { ArrayOfstring *_p = soap_instantiate_ArrayOfstring(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ArrayOfstring::__ptritem = __ptritem; _p->ArrayOfstring::__size = __size; } return _p; }

inline void soap_delete_ArrayOfstring(struct soap *soap, ArrayOfstring *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ArrayOfstring(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (7)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *, const char*);

#ifndef soap_write_xsd__base64Binary
#define soap_write_xsd__base64Binary(soap, data) ( soap_begin(soap), (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "xsd:base64Binary", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap*, xsd__base64Binary *, const char*, const char*);

#ifndef soap_read_xsd__base64Binary
#define soap_read_xsd__base64Binary(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__base64Binary(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary * soap_new_xsd__base64Binary(struct soap *soap, int n = -1) { return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL); }

inline xsd__base64Binary * soap_new_req_xsd__base64Binary(struct soap *soap) { xsd__base64Binary *_p = soap_instantiate_xsd__base64Binary(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xsd__base64Binary * soap_new_set_xsd__base64Binary(struct soap *soap, unsigned char *__ptr, int __size, char *id, char *type, char *options) { xsd__base64Binary *_p = soap_instantiate_xsd__base64Binary(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__base64Binary::__ptr = __ptr; _p->xsd__base64Binary::__size = __size; _p->xsd__base64Binary::id = id; _p->xsd__base64Binary::type = type; _p->xsd__base64Binary::options = options; } return _p; }

inline void soap_delete_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (798)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_begin(soap), soap_serialize_SOAP_ENV__Fault(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (797)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_begin(soap), soap_serialize_SOAP_ENV__Reason(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (794)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_begin(soap), soap_serialize_SOAP_ENV__Detail(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (792)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_begin(soap), soap_serialize_SOAP_ENV__Code(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (791)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_begin(soap), soap_serialize_SOAP_ENV__Header(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_ns1__getItemHyperlinks
#define SOAP_TYPE_ns1__getItemHyperlinks (790)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getItemHyperlinks(struct soap*, struct ns1__getItemHyperlinks *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getItemHyperlinks(struct soap*, const struct ns1__getItemHyperlinks *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getItemHyperlinks(struct soap*, const char*, int, const struct ns1__getItemHyperlinks *, const char*);
SOAP_FMAC3 struct ns1__getItemHyperlinks * SOAP_FMAC4 soap_in_ns1__getItemHyperlinks(struct soap*, const char*, struct ns1__getItemHyperlinks *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getItemHyperlinks(struct soap*, const struct ns1__getItemHyperlinks *, const char*, const char*);

#ifndef soap_write_ns1__getItemHyperlinks
#define soap_write_ns1__getItemHyperlinks(soap, data) ( soap_begin(soap), soap_serialize_ns1__getItemHyperlinks(soap, data), soap_begin_send(soap) || soap_put_ns1__getItemHyperlinks(soap, data, "ns1:getItemHyperlinks", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getItemHyperlinks * SOAP_FMAC4 soap_get_ns1__getItemHyperlinks(struct soap*, struct ns1__getItemHyperlinks *, const char*, const char*);

#ifndef soap_read_ns1__getItemHyperlinks
#define soap_read_ns1__getItemHyperlinks(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getItemHyperlinks(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getItemHyperlinks * SOAP_FMAC2 soap_instantiate_ns1__getItemHyperlinks(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getItemHyperlinks * soap_new_ns1__getItemHyperlinks(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getItemHyperlinks(soap, n, NULL, NULL, NULL); }

inline struct ns1__getItemHyperlinks * soap_new_req_ns1__getItemHyperlinks(struct soap *soap, LONG64 cookie, LONG64 itemID) { struct ns1__getItemHyperlinks *_p = soap_instantiate_ns1__getItemHyperlinks(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getItemHyperlinks(soap, _p); _p->cookie = cookie; _p->itemID = itemID; } return _p; }

inline struct ns1__getItemHyperlinks * soap_new_set_ns1__getItemHyperlinks(struct soap *soap, LONG64 cookie, char *itemType, LONG64 itemID) { struct ns1__getItemHyperlinks *_p = soap_instantiate_ns1__getItemHyperlinks(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getItemHyperlinks(soap, _p); _p->cookie = cookie; _p->itemType = itemType; _p->itemID = itemID; } return _p; }

inline void soap_delete_ns1__getItemHyperlinks(struct soap *soap, struct ns1__getItemHyperlinks *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getItemHyperlinks(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getItemHyperlinksResponse
#define SOAP_TYPE_ns1__getItemHyperlinksResponse (786)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getItemHyperlinksResponse(struct soap*, struct ns1__getItemHyperlinksResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getItemHyperlinksResponse(struct soap*, const struct ns1__getItemHyperlinksResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getItemHyperlinksResponse(struct soap*, const char*, int, const struct ns1__getItemHyperlinksResponse *, const char*);
SOAP_FMAC3 struct ns1__getItemHyperlinksResponse * SOAP_FMAC4 soap_in_ns1__getItemHyperlinksResponse(struct soap*, const char*, struct ns1__getItemHyperlinksResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getItemHyperlinksResponse(struct soap*, const struct ns1__getItemHyperlinksResponse *, const char*, const char*);

#ifndef soap_write_ns1__getItemHyperlinksResponse
#define soap_write_ns1__getItemHyperlinksResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getItemHyperlinksResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getItemHyperlinksResponse(soap, data, "ns1:getItemHyperlinksResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getItemHyperlinksResponse * SOAP_FMAC4 soap_get_ns1__getItemHyperlinksResponse(struct soap*, struct ns1__getItemHyperlinksResponse *, const char*, const char*);

#ifndef soap_read_ns1__getItemHyperlinksResponse
#define soap_read_ns1__getItemHyperlinksResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getItemHyperlinksResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getItemHyperlinksResponse * SOAP_FMAC2 soap_instantiate_ns1__getItemHyperlinksResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getItemHyperlinksResponse * soap_new_ns1__getItemHyperlinksResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getItemHyperlinksResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getItemHyperlinksResponse * soap_new_req_ns1__getItemHyperlinksResponse(struct soap *soap) { struct ns1__getItemHyperlinksResponse *_p = soap_instantiate_ns1__getItemHyperlinksResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getItemHyperlinksResponse(soap, _p); } return _p; }

inline struct ns1__getItemHyperlinksResponse * soap_new_set_ns1__getItemHyperlinksResponse(struct soap *soap, ns1__CItemHyperlinkContainer *hyperlinks) { struct ns1__getItemHyperlinksResponse *_p = soap_instantiate_ns1__getItemHyperlinksResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getItemHyperlinksResponse(soap, _p); _p->hyperlinks = hyperlinks; } return _p; }

inline void soap_delete_ns1__getItemHyperlinksResponse(struct soap *soap, struct ns1__getItemHyperlinksResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getItemHyperlinksResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getFolderTree
#define SOAP_TYPE_ns1__getFolderTree (785)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getFolderTree(struct soap*, struct ns1__getFolderTree *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getFolderTree(struct soap*, const struct ns1__getFolderTree *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getFolderTree(struct soap*, const char*, int, const struct ns1__getFolderTree *, const char*);
SOAP_FMAC3 struct ns1__getFolderTree * SOAP_FMAC4 soap_in_ns1__getFolderTree(struct soap*, const char*, struct ns1__getFolderTree *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getFolderTree(struct soap*, const struct ns1__getFolderTree *, const char*, const char*);

#ifndef soap_write_ns1__getFolderTree
#define soap_write_ns1__getFolderTree(soap, data) ( soap_begin(soap), soap_serialize_ns1__getFolderTree(soap, data), soap_begin_send(soap) || soap_put_ns1__getFolderTree(soap, data, "ns1:getFolderTree", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getFolderTree * SOAP_FMAC4 soap_get_ns1__getFolderTree(struct soap*, struct ns1__getFolderTree *, const char*, const char*);

#ifndef soap_read_ns1__getFolderTree
#define soap_read_ns1__getFolderTree(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getFolderTree(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getFolderTree * SOAP_FMAC2 soap_instantiate_ns1__getFolderTree(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getFolderTree * soap_new_ns1__getFolderTree(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getFolderTree(soap, n, NULL, NULL, NULL); }

inline struct ns1__getFolderTree * soap_new_req_ns1__getFolderTree(struct soap *soap, LONG64 cookie) { struct ns1__getFolderTree *_p = soap_instantiate_ns1__getFolderTree(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFolderTree(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__getFolderTree * soap_new_set_ns1__getFolderTree(struct soap *soap, LONG64 cookie, char *treeRootFolderPath) { struct ns1__getFolderTree *_p = soap_instantiate_ns1__getFolderTree(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFolderTree(soap, _p); _p->cookie = cookie; _p->treeRootFolderPath = treeRootFolderPath; } return _p; }

inline void soap_delete_ns1__getFolderTree(struct soap *soap, struct ns1__getFolderTree *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getFolderTree(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getFolderTreeResponse
#define SOAP_TYPE_ns1__getFolderTreeResponse (782)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getFolderTreeResponse(struct soap*, struct ns1__getFolderTreeResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getFolderTreeResponse(struct soap*, const struct ns1__getFolderTreeResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getFolderTreeResponse(struct soap*, const char*, int, const struct ns1__getFolderTreeResponse *, const char*);
SOAP_FMAC3 struct ns1__getFolderTreeResponse * SOAP_FMAC4 soap_in_ns1__getFolderTreeResponse(struct soap*, const char*, struct ns1__getFolderTreeResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getFolderTreeResponse(struct soap*, const struct ns1__getFolderTreeResponse *, const char*, const char*);

#ifndef soap_write_ns1__getFolderTreeResponse
#define soap_write_ns1__getFolderTreeResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getFolderTreeResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getFolderTreeResponse(soap, data, "ns1:getFolderTreeResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getFolderTreeResponse * SOAP_FMAC4 soap_get_ns1__getFolderTreeResponse(struct soap*, struct ns1__getFolderTreeResponse *, const char*, const char*);

#ifndef soap_read_ns1__getFolderTreeResponse
#define soap_read_ns1__getFolderTreeResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getFolderTreeResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getFolderTreeResponse * SOAP_FMAC2 soap_instantiate_ns1__getFolderTreeResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getFolderTreeResponse * soap_new_ns1__getFolderTreeResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getFolderTreeResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getFolderTreeResponse * soap_new_req_ns1__getFolderTreeResponse(struct soap *soap) { struct ns1__getFolderTreeResponse *_p = soap_instantiate_ns1__getFolderTreeResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFolderTreeResponse(soap, _p); } return _p; }

inline struct ns1__getFolderTreeResponse * soap_new_set_ns1__getFolderTreeResponse(struct soap *soap, ns1__CTreeNodeSoap *folderTreeRoot) { struct ns1__getFolderTreeResponse *_p = soap_instantiate_ns1__getFolderTreeResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFolderTreeResponse(soap, _p); _p->folderTreeRoot = folderTreeRoot; } return _p; }

inline void soap_delete_ns1__getFolderTreeResponse(struct soap *soap, struct ns1__getFolderTreeResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getFolderTreeResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getFolderTreeByRecordID
#define SOAP_TYPE_ns1__getFolderTreeByRecordID (781)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getFolderTreeByRecordID(struct soap*, struct ns1__getFolderTreeByRecordID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getFolderTreeByRecordID(struct soap*, const struct ns1__getFolderTreeByRecordID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getFolderTreeByRecordID(struct soap*, const char*, int, const struct ns1__getFolderTreeByRecordID *, const char*);
SOAP_FMAC3 struct ns1__getFolderTreeByRecordID * SOAP_FMAC4 soap_in_ns1__getFolderTreeByRecordID(struct soap*, const char*, struct ns1__getFolderTreeByRecordID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getFolderTreeByRecordID(struct soap*, const struct ns1__getFolderTreeByRecordID *, const char*, const char*);

#ifndef soap_write_ns1__getFolderTreeByRecordID
#define soap_write_ns1__getFolderTreeByRecordID(soap, data) ( soap_begin(soap), soap_serialize_ns1__getFolderTreeByRecordID(soap, data), soap_begin_send(soap) || soap_put_ns1__getFolderTreeByRecordID(soap, data, "ns1:getFolderTreeByRecordID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getFolderTreeByRecordID * SOAP_FMAC4 soap_get_ns1__getFolderTreeByRecordID(struct soap*, struct ns1__getFolderTreeByRecordID *, const char*, const char*);

#ifndef soap_read_ns1__getFolderTreeByRecordID
#define soap_read_ns1__getFolderTreeByRecordID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getFolderTreeByRecordID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getFolderTreeByRecordID * SOAP_FMAC2 soap_instantiate_ns1__getFolderTreeByRecordID(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getFolderTreeByRecordID * soap_new_ns1__getFolderTreeByRecordID(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getFolderTreeByRecordID(soap, n, NULL, NULL, NULL); }

inline struct ns1__getFolderTreeByRecordID * soap_new_req_ns1__getFolderTreeByRecordID(struct soap *soap, LONG64 cookie, LONG64 treeRootFolderID) { struct ns1__getFolderTreeByRecordID *_p = soap_instantiate_ns1__getFolderTreeByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFolderTreeByRecordID(soap, _p); _p->cookie = cookie; _p->treeRootFolderID = treeRootFolderID; } return _p; }

inline struct ns1__getFolderTreeByRecordID * soap_new_set_ns1__getFolderTreeByRecordID(struct soap *soap, LONG64 cookie, LONG64 treeRootFolderID) { struct ns1__getFolderTreeByRecordID *_p = soap_instantiate_ns1__getFolderTreeByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFolderTreeByRecordID(soap, _p); _p->cookie = cookie; _p->treeRootFolderID = treeRootFolderID; } return _p; }

inline void soap_delete_ns1__getFolderTreeByRecordID(struct soap *soap, struct ns1__getFolderTreeByRecordID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getFolderTreeByRecordID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getFolderTreeByRecordIDResponse
#define SOAP_TYPE_ns1__getFolderTreeByRecordIDResponse (778)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getFolderTreeByRecordIDResponse(struct soap*, struct ns1__getFolderTreeByRecordIDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getFolderTreeByRecordIDResponse(struct soap*, const struct ns1__getFolderTreeByRecordIDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getFolderTreeByRecordIDResponse(struct soap*, const char*, int, const struct ns1__getFolderTreeByRecordIDResponse *, const char*);
SOAP_FMAC3 struct ns1__getFolderTreeByRecordIDResponse * SOAP_FMAC4 soap_in_ns1__getFolderTreeByRecordIDResponse(struct soap*, const char*, struct ns1__getFolderTreeByRecordIDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getFolderTreeByRecordIDResponse(struct soap*, const struct ns1__getFolderTreeByRecordIDResponse *, const char*, const char*);

#ifndef soap_write_ns1__getFolderTreeByRecordIDResponse
#define soap_write_ns1__getFolderTreeByRecordIDResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getFolderTreeByRecordIDResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getFolderTreeByRecordIDResponse(soap, data, "ns1:getFolderTreeByRecordIDResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getFolderTreeByRecordIDResponse * SOAP_FMAC4 soap_get_ns1__getFolderTreeByRecordIDResponse(struct soap*, struct ns1__getFolderTreeByRecordIDResponse *, const char*, const char*);

#ifndef soap_read_ns1__getFolderTreeByRecordIDResponse
#define soap_read_ns1__getFolderTreeByRecordIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getFolderTreeByRecordIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getFolderTreeByRecordIDResponse * SOAP_FMAC2 soap_instantiate_ns1__getFolderTreeByRecordIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getFolderTreeByRecordIDResponse * soap_new_ns1__getFolderTreeByRecordIDResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getFolderTreeByRecordIDResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getFolderTreeByRecordIDResponse * soap_new_req_ns1__getFolderTreeByRecordIDResponse(struct soap *soap) { struct ns1__getFolderTreeByRecordIDResponse *_p = soap_instantiate_ns1__getFolderTreeByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFolderTreeByRecordIDResponse(soap, _p); } return _p; }

inline struct ns1__getFolderTreeByRecordIDResponse * soap_new_set_ns1__getFolderTreeByRecordIDResponse(struct soap *soap, ns1__CTreeNodeSoap *folderTreeRoot) { struct ns1__getFolderTreeByRecordIDResponse *_p = soap_instantiate_ns1__getFolderTreeByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFolderTreeByRecordIDResponse(soap, _p); _p->folderTreeRoot = folderTreeRoot; } return _p; }

inline void soap_delete_ns1__getFolderTreeByRecordIDResponse(struct soap *soap, struct ns1__getFolderTreeByRecordIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getFolderTreeByRecordIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getDocumentTree
#define SOAP_TYPE_ns1__getDocumentTree (777)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getDocumentTree(struct soap*, struct ns1__getDocumentTree *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getDocumentTree(struct soap*, const struct ns1__getDocumentTree *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getDocumentTree(struct soap*, const char*, int, const struct ns1__getDocumentTree *, const char*);
SOAP_FMAC3 struct ns1__getDocumentTree * SOAP_FMAC4 soap_in_ns1__getDocumentTree(struct soap*, const char*, struct ns1__getDocumentTree *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getDocumentTree(struct soap*, const struct ns1__getDocumentTree *, const char*, const char*);

#ifndef soap_write_ns1__getDocumentTree
#define soap_write_ns1__getDocumentTree(soap, data) ( soap_begin(soap), soap_serialize_ns1__getDocumentTree(soap, data), soap_begin_send(soap) || soap_put_ns1__getDocumentTree(soap, data, "ns1:getDocumentTree", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getDocumentTree * SOAP_FMAC4 soap_get_ns1__getDocumentTree(struct soap*, struct ns1__getDocumentTree *, const char*, const char*);

#ifndef soap_read_ns1__getDocumentTree
#define soap_read_ns1__getDocumentTree(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getDocumentTree(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getDocumentTree * SOAP_FMAC2 soap_instantiate_ns1__getDocumentTree(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getDocumentTree * soap_new_ns1__getDocumentTree(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getDocumentTree(soap, n, NULL, NULL, NULL); }

inline struct ns1__getDocumentTree * soap_new_req_ns1__getDocumentTree(struct soap *soap, LONG64 cookie, LONG64 documentID) { struct ns1__getDocumentTree *_p = soap_instantiate_ns1__getDocumentTree(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDocumentTree(soap, _p); _p->cookie = cookie; _p->documentID = documentID; } return _p; }

inline struct ns1__getDocumentTree * soap_new_set_ns1__getDocumentTree(struct soap *soap, LONG64 cookie, LONG64 documentID) { struct ns1__getDocumentTree *_p = soap_instantiate_ns1__getDocumentTree(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDocumentTree(soap, _p); _p->cookie = cookie; _p->documentID = documentID; } return _p; }

inline void soap_delete_ns1__getDocumentTree(struct soap *soap, struct ns1__getDocumentTree *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getDocumentTree(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getDocumentTreeResponse
#define SOAP_TYPE_ns1__getDocumentTreeResponse (774)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getDocumentTreeResponse(struct soap*, struct ns1__getDocumentTreeResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getDocumentTreeResponse(struct soap*, const struct ns1__getDocumentTreeResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getDocumentTreeResponse(struct soap*, const char*, int, const struct ns1__getDocumentTreeResponse *, const char*);
SOAP_FMAC3 struct ns1__getDocumentTreeResponse * SOAP_FMAC4 soap_in_ns1__getDocumentTreeResponse(struct soap*, const char*, struct ns1__getDocumentTreeResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getDocumentTreeResponse(struct soap*, const struct ns1__getDocumentTreeResponse *, const char*, const char*);

#ifndef soap_write_ns1__getDocumentTreeResponse
#define soap_write_ns1__getDocumentTreeResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getDocumentTreeResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getDocumentTreeResponse(soap, data, "ns1:getDocumentTreeResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getDocumentTreeResponse * SOAP_FMAC4 soap_get_ns1__getDocumentTreeResponse(struct soap*, struct ns1__getDocumentTreeResponse *, const char*, const char*);

#ifndef soap_read_ns1__getDocumentTreeResponse
#define soap_read_ns1__getDocumentTreeResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getDocumentTreeResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getDocumentTreeResponse * SOAP_FMAC2 soap_instantiate_ns1__getDocumentTreeResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getDocumentTreeResponse * soap_new_ns1__getDocumentTreeResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getDocumentTreeResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getDocumentTreeResponse * soap_new_req_ns1__getDocumentTreeResponse(struct soap *soap) { struct ns1__getDocumentTreeResponse *_p = soap_instantiate_ns1__getDocumentTreeResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDocumentTreeResponse(soap, _p); } return _p; }

inline struct ns1__getDocumentTreeResponse * soap_new_set_ns1__getDocumentTreeResponse(struct soap *soap, ns1__CTreeNodeSoap *docTreeRootNode) { struct ns1__getDocumentTreeResponse *_p = soap_instantiate_ns1__getDocumentTreeResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDocumentTreeResponse(soap, _p); _p->docTreeRootNode = docTreeRootNode; } return _p; }

inline void soap_delete_ns1__getDocumentTreeResponse(struct soap *soap, struct ns1__getDocumentTreeResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getDocumentTreeResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getRequirementIDsForDocument
#define SOAP_TYPE_ns1__getRequirementIDsForDocument (773)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getRequirementIDsForDocument(struct soap*, struct ns1__getRequirementIDsForDocument *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getRequirementIDsForDocument(struct soap*, const struct ns1__getRequirementIDsForDocument *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getRequirementIDsForDocument(struct soap*, const char*, int, const struct ns1__getRequirementIDsForDocument *, const char*);
SOAP_FMAC3 struct ns1__getRequirementIDsForDocument * SOAP_FMAC4 soap_in_ns1__getRequirementIDsForDocument(struct soap*, const char*, struct ns1__getRequirementIDsForDocument *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getRequirementIDsForDocument(struct soap*, const struct ns1__getRequirementIDsForDocument *, const char*, const char*);

#ifndef soap_write_ns1__getRequirementIDsForDocument
#define soap_write_ns1__getRequirementIDsForDocument(soap, data) ( soap_begin(soap), soap_serialize_ns1__getRequirementIDsForDocument(soap, data), soap_begin_send(soap) || soap_put_ns1__getRequirementIDsForDocument(soap, data, "ns1:getRequirementIDsForDocument", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getRequirementIDsForDocument * SOAP_FMAC4 soap_get_ns1__getRequirementIDsForDocument(struct soap*, struct ns1__getRequirementIDsForDocument *, const char*, const char*);

#ifndef soap_read_ns1__getRequirementIDsForDocument
#define soap_read_ns1__getRequirementIDsForDocument(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getRequirementIDsForDocument(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getRequirementIDsForDocument * SOAP_FMAC2 soap_instantiate_ns1__getRequirementIDsForDocument(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getRequirementIDsForDocument * soap_new_ns1__getRequirementIDsForDocument(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getRequirementIDsForDocument(soap, n, NULL, NULL, NULL); }

inline struct ns1__getRequirementIDsForDocument * soap_new_req_ns1__getRequirementIDsForDocument(struct soap *soap, LONG64 cookie, LONG64 documentID) { struct ns1__getRequirementIDsForDocument *_p = soap_instantiate_ns1__getRequirementIDsForDocument(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getRequirementIDsForDocument(soap, _p); _p->cookie = cookie; _p->documentID = documentID; } return _p; }

inline struct ns1__getRequirementIDsForDocument * soap_new_set_ns1__getRequirementIDsForDocument(struct soap *soap, LONG64 cookie, LONG64 documentID) { struct ns1__getRequirementIDsForDocument *_p = soap_instantiate_ns1__getRequirementIDsForDocument(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getRequirementIDsForDocument(soap, _p); _p->cookie = cookie; _p->documentID = documentID; } return _p; }

inline void soap_delete_ns1__getRequirementIDsForDocument(struct soap *soap, struct ns1__getRequirementIDsForDocument *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getRequirementIDsForDocument(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getRequirementIDsForDocumentResponse
#define SOAP_TYPE_ns1__getRequirementIDsForDocumentResponse (770)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getRequirementIDsForDocumentResponse(struct soap*, struct ns1__getRequirementIDsForDocumentResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getRequirementIDsForDocumentResponse(struct soap*, const struct ns1__getRequirementIDsForDocumentResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getRequirementIDsForDocumentResponse(struct soap*, const char*, int, const struct ns1__getRequirementIDsForDocumentResponse *, const char*);
SOAP_FMAC3 struct ns1__getRequirementIDsForDocumentResponse * SOAP_FMAC4 soap_in_ns1__getRequirementIDsForDocumentResponse(struct soap*, const char*, struct ns1__getRequirementIDsForDocumentResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getRequirementIDsForDocumentResponse(struct soap*, const struct ns1__getRequirementIDsForDocumentResponse *, const char*, const char*);

#ifndef soap_write_ns1__getRequirementIDsForDocumentResponse
#define soap_write_ns1__getRequirementIDsForDocumentResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getRequirementIDsForDocumentResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getRequirementIDsForDocumentResponse(soap, data, "ns1:getRequirementIDsForDocumentResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getRequirementIDsForDocumentResponse * SOAP_FMAC4 soap_get_ns1__getRequirementIDsForDocumentResponse(struct soap*, struct ns1__getRequirementIDsForDocumentResponse *, const char*, const char*);

#ifndef soap_read_ns1__getRequirementIDsForDocumentResponse
#define soap_read_ns1__getRequirementIDsForDocumentResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getRequirementIDsForDocumentResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getRequirementIDsForDocumentResponse * SOAP_FMAC2 soap_instantiate_ns1__getRequirementIDsForDocumentResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getRequirementIDsForDocumentResponse * soap_new_ns1__getRequirementIDsForDocumentResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getRequirementIDsForDocumentResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getRequirementIDsForDocumentResponse * soap_new_req_ns1__getRequirementIDsForDocumentResponse(struct soap *soap) { struct ns1__getRequirementIDsForDocumentResponse *_p = soap_instantiate_ns1__getRequirementIDsForDocumentResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getRequirementIDsForDocumentResponse(soap, _p); } return _p; }

inline struct ns1__getRequirementIDsForDocumentResponse * soap_new_set_ns1__getRequirementIDsForDocumentResponse(struct soap *soap, ArrayOflong *recordIDs) { struct ns1__getRequirementIDsForDocumentResponse *_p = soap_instantiate_ns1__getRequirementIDsForDocumentResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getRequirementIDsForDocumentResponse(soap, _p); _p->recordIDs = recordIDs; } return _p; }

inline void soap_delete_ns1__getRequirementIDsForDocumentResponse(struct soap *soap, struct ns1__getRequirementIDsForDocumentResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getRequirementIDsForDocumentResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__createSnapshot
#define SOAP_TYPE_ns1__createSnapshot (769)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__createSnapshot(struct soap*, struct ns1__createSnapshot *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__createSnapshot(struct soap*, const struct ns1__createSnapshot *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__createSnapshot(struct soap*, const char*, int, const struct ns1__createSnapshot *, const char*);
SOAP_FMAC3 struct ns1__createSnapshot * SOAP_FMAC4 soap_in_ns1__createSnapshot(struct soap*, const char*, struct ns1__createSnapshot *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__createSnapshot(struct soap*, const struct ns1__createSnapshot *, const char*, const char*);

#ifndef soap_write_ns1__createSnapshot
#define soap_write_ns1__createSnapshot(soap, data) ( soap_begin(soap), soap_serialize_ns1__createSnapshot(soap, data), soap_begin_send(soap) || soap_put_ns1__createSnapshot(soap, data, "ns1:createSnapshot", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__createSnapshot * SOAP_FMAC4 soap_get_ns1__createSnapshot(struct soap*, struct ns1__createSnapshot *, const char*, const char*);

#ifndef soap_read_ns1__createSnapshot
#define soap_read_ns1__createSnapshot(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__createSnapshot(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__createSnapshot * SOAP_FMAC2 soap_instantiate_ns1__createSnapshot(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__createSnapshot * soap_new_ns1__createSnapshot(struct soap *soap, int n = -1) { return soap_instantiate_ns1__createSnapshot(soap, n, NULL, NULL, NULL); }

inline struct ns1__createSnapshot * soap_new_req_ns1__createSnapshot(struct soap *soap, LONG64 cookie, LONG64 documentID) { struct ns1__createSnapshot *_p = soap_instantiate_ns1__createSnapshot(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__createSnapshot(soap, _p); _p->cookie = cookie; _p->documentID = documentID; } return _p; }

inline struct ns1__createSnapshot * soap_new_set_ns1__createSnapshot(struct soap *soap, LONG64 cookie, LONG64 documentID, ns1__CSnapshotInfo *snapshot) { struct ns1__createSnapshot *_p = soap_instantiate_ns1__createSnapshot(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__createSnapshot(soap, _p); _p->cookie = cookie; _p->documentID = documentID; _p->snapshot = snapshot; } return _p; }

inline void soap_delete_ns1__createSnapshot(struct soap *soap, struct ns1__createSnapshot *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__createSnapshot(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__createSnapshotResponse
#define SOAP_TYPE_ns1__createSnapshotResponse (768)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__createSnapshotResponse(struct soap*, struct ns1__createSnapshotResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__createSnapshotResponse(struct soap*, const struct ns1__createSnapshotResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__createSnapshotResponse(struct soap*, const char*, int, const struct ns1__createSnapshotResponse *, const char*);
SOAP_FMAC3 struct ns1__createSnapshotResponse * SOAP_FMAC4 soap_in_ns1__createSnapshotResponse(struct soap*, const char*, struct ns1__createSnapshotResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__createSnapshotResponse(struct soap*, const struct ns1__createSnapshotResponse *, const char*, const char*);

#ifndef soap_write_ns1__createSnapshotResponse
#define soap_write_ns1__createSnapshotResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__createSnapshotResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__createSnapshotResponse(soap, data, "ns1:createSnapshotResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__createSnapshotResponse * SOAP_FMAC4 soap_get_ns1__createSnapshotResponse(struct soap*, struct ns1__createSnapshotResponse *, const char*, const char*);

#ifndef soap_read_ns1__createSnapshotResponse
#define soap_read_ns1__createSnapshotResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__createSnapshotResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__createSnapshotResponse * SOAP_FMAC2 soap_instantiate_ns1__createSnapshotResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__createSnapshotResponse * soap_new_ns1__createSnapshotResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__createSnapshotResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__createSnapshotResponse * soap_new_req_ns1__createSnapshotResponse(struct soap *soap, int result) { struct ns1__createSnapshotResponse *_p = soap_instantiate_ns1__createSnapshotResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__createSnapshotResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__createSnapshotResponse * soap_new_set_ns1__createSnapshotResponse(struct soap *soap, int result) { struct ns1__createSnapshotResponse *_p = soap_instantiate_ns1__createSnapshotResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__createSnapshotResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__createSnapshotResponse(struct soap *soap, struct ns1__createSnapshotResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__createSnapshotResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__cancelSaveRequirementDocument
#define SOAP_TYPE_ns1__cancelSaveRequirementDocument (766)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__cancelSaveRequirementDocument(struct soap*, struct ns1__cancelSaveRequirementDocument *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__cancelSaveRequirementDocument(struct soap*, const struct ns1__cancelSaveRequirementDocument *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__cancelSaveRequirementDocument(struct soap*, const char*, int, const struct ns1__cancelSaveRequirementDocument *, const char*);
SOAP_FMAC3 struct ns1__cancelSaveRequirementDocument * SOAP_FMAC4 soap_in_ns1__cancelSaveRequirementDocument(struct soap*, const char*, struct ns1__cancelSaveRequirementDocument *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__cancelSaveRequirementDocument(struct soap*, const struct ns1__cancelSaveRequirementDocument *, const char*, const char*);

#ifndef soap_write_ns1__cancelSaveRequirementDocument
#define soap_write_ns1__cancelSaveRequirementDocument(soap, data) ( soap_begin(soap), soap_serialize_ns1__cancelSaveRequirementDocument(soap, data), soap_begin_send(soap) || soap_put_ns1__cancelSaveRequirementDocument(soap, data, "ns1:cancelSaveRequirementDocument", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__cancelSaveRequirementDocument * SOAP_FMAC4 soap_get_ns1__cancelSaveRequirementDocument(struct soap*, struct ns1__cancelSaveRequirementDocument *, const char*, const char*);

#ifndef soap_read_ns1__cancelSaveRequirementDocument
#define soap_read_ns1__cancelSaveRequirementDocument(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__cancelSaveRequirementDocument(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__cancelSaveRequirementDocument * SOAP_FMAC2 soap_instantiate_ns1__cancelSaveRequirementDocument(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__cancelSaveRequirementDocument * soap_new_ns1__cancelSaveRequirementDocument(struct soap *soap, int n = -1) { return soap_instantiate_ns1__cancelSaveRequirementDocument(soap, n, NULL, NULL, NULL); }

inline struct ns1__cancelSaveRequirementDocument * soap_new_req_ns1__cancelSaveRequirementDocument(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__cancelSaveRequirementDocument *_p = soap_instantiate_ns1__cancelSaveRequirementDocument(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveRequirementDocument(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline struct ns1__cancelSaveRequirementDocument * soap_new_set_ns1__cancelSaveRequirementDocument(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__cancelSaveRequirementDocument *_p = soap_instantiate_ns1__cancelSaveRequirementDocument(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveRequirementDocument(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__cancelSaveRequirementDocument(struct soap *soap, struct ns1__cancelSaveRequirementDocument *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__cancelSaveRequirementDocument(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__cancelSaveRequirementDocumentResponse
#define SOAP_TYPE_ns1__cancelSaveRequirementDocumentResponse (765)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__cancelSaveRequirementDocumentResponse(struct soap*, struct ns1__cancelSaveRequirementDocumentResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__cancelSaveRequirementDocumentResponse(struct soap*, const struct ns1__cancelSaveRequirementDocumentResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__cancelSaveRequirementDocumentResponse(struct soap*, const char*, int, const struct ns1__cancelSaveRequirementDocumentResponse *, const char*);
SOAP_FMAC3 struct ns1__cancelSaveRequirementDocumentResponse * SOAP_FMAC4 soap_in_ns1__cancelSaveRequirementDocumentResponse(struct soap*, const char*, struct ns1__cancelSaveRequirementDocumentResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__cancelSaveRequirementDocumentResponse(struct soap*, const struct ns1__cancelSaveRequirementDocumentResponse *, const char*, const char*);

#ifndef soap_write_ns1__cancelSaveRequirementDocumentResponse
#define soap_write_ns1__cancelSaveRequirementDocumentResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__cancelSaveRequirementDocumentResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__cancelSaveRequirementDocumentResponse(soap, data, "ns1:cancelSaveRequirementDocumentResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__cancelSaveRequirementDocumentResponse * SOAP_FMAC4 soap_get_ns1__cancelSaveRequirementDocumentResponse(struct soap*, struct ns1__cancelSaveRequirementDocumentResponse *, const char*, const char*);

#ifndef soap_read_ns1__cancelSaveRequirementDocumentResponse
#define soap_read_ns1__cancelSaveRequirementDocumentResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__cancelSaveRequirementDocumentResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__cancelSaveRequirementDocumentResponse * SOAP_FMAC2 soap_instantiate_ns1__cancelSaveRequirementDocumentResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__cancelSaveRequirementDocumentResponse * soap_new_ns1__cancelSaveRequirementDocumentResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__cancelSaveRequirementDocumentResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__cancelSaveRequirementDocumentResponse * soap_new_req_ns1__cancelSaveRequirementDocumentResponse(struct soap *soap, int result) { struct ns1__cancelSaveRequirementDocumentResponse *_p = soap_instantiate_ns1__cancelSaveRequirementDocumentResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveRequirementDocumentResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__cancelSaveRequirementDocumentResponse * soap_new_set_ns1__cancelSaveRequirementDocumentResponse(struct soap *soap, int result) { struct ns1__cancelSaveRequirementDocumentResponse *_p = soap_instantiate_ns1__cancelSaveRequirementDocumentResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveRequirementDocumentResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__cancelSaveRequirementDocumentResponse(struct soap *soap, struct ns1__cancelSaveRequirementDocumentResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__cancelSaveRequirementDocumentResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveRequirementDocument
#define SOAP_TYPE_ns1__saveRequirementDocument (763)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveRequirementDocument(struct soap*, struct ns1__saveRequirementDocument *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveRequirementDocument(struct soap*, const struct ns1__saveRequirementDocument *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveRequirementDocument(struct soap*, const char*, int, const struct ns1__saveRequirementDocument *, const char*);
SOAP_FMAC3 struct ns1__saveRequirementDocument * SOAP_FMAC4 soap_in_ns1__saveRequirementDocument(struct soap*, const char*, struct ns1__saveRequirementDocument *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveRequirementDocument(struct soap*, const struct ns1__saveRequirementDocument *, const char*, const char*);

#ifndef soap_write_ns1__saveRequirementDocument
#define soap_write_ns1__saveRequirementDocument(soap, data) ( soap_begin(soap), soap_serialize_ns1__saveRequirementDocument(soap, data), soap_begin_send(soap) || soap_put_ns1__saveRequirementDocument(soap, data, "ns1:saveRequirementDocument", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__saveRequirementDocument * SOAP_FMAC4 soap_get_ns1__saveRequirementDocument(struct soap*, struct ns1__saveRequirementDocument *, const char*, const char*);

#ifndef soap_read_ns1__saveRequirementDocument
#define soap_read_ns1__saveRequirementDocument(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveRequirementDocument(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__saveRequirementDocument * SOAP_FMAC2 soap_instantiate_ns1__saveRequirementDocument(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveRequirementDocument * soap_new_ns1__saveRequirementDocument(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveRequirementDocument(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveRequirementDocument * soap_new_req_ns1__saveRequirementDocument(struct soap *soap, LONG64 cookie) { struct ns1__saveRequirementDocument *_p = soap_instantiate_ns1__saveRequirementDocument(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveRequirementDocument(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__saveRequirementDocument * soap_new_set_ns1__saveRequirementDocument(struct soap *soap, LONG64 cookie, ns1__CRequirementDocument *pRequirementDocument) { struct ns1__saveRequirementDocument *_p = soap_instantiate_ns1__saveRequirementDocument(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveRequirementDocument(soap, _p); _p->cookie = cookie; _p->pRequirementDocument = pRequirementDocument; } return _p; }

inline void soap_delete_ns1__saveRequirementDocument(struct soap *soap, struct ns1__saveRequirementDocument *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveRequirementDocument(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveRequirementDocumentResponse
#define SOAP_TYPE_ns1__saveRequirementDocumentResponse (762)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveRequirementDocumentResponse(struct soap*, struct ns1__saveRequirementDocumentResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveRequirementDocumentResponse(struct soap*, const struct ns1__saveRequirementDocumentResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveRequirementDocumentResponse(struct soap*, const char*, int, const struct ns1__saveRequirementDocumentResponse *, const char*);
SOAP_FMAC3 struct ns1__saveRequirementDocumentResponse * SOAP_FMAC4 soap_in_ns1__saveRequirementDocumentResponse(struct soap*, const char*, struct ns1__saveRequirementDocumentResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveRequirementDocumentResponse(struct soap*, const struct ns1__saveRequirementDocumentResponse *, const char*, const char*);

#ifndef soap_write_ns1__saveRequirementDocumentResponse
#define soap_write_ns1__saveRequirementDocumentResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__saveRequirementDocumentResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__saveRequirementDocumentResponse(soap, data, "ns1:saveRequirementDocumentResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__saveRequirementDocumentResponse * SOAP_FMAC4 soap_get_ns1__saveRequirementDocumentResponse(struct soap*, struct ns1__saveRequirementDocumentResponse *, const char*, const char*);

#ifndef soap_read_ns1__saveRequirementDocumentResponse
#define soap_read_ns1__saveRequirementDocumentResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveRequirementDocumentResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__saveRequirementDocumentResponse * SOAP_FMAC2 soap_instantiate_ns1__saveRequirementDocumentResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveRequirementDocumentResponse * soap_new_ns1__saveRequirementDocumentResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveRequirementDocumentResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveRequirementDocumentResponse * soap_new_req_ns1__saveRequirementDocumentResponse(struct soap *soap, int result) { struct ns1__saveRequirementDocumentResponse *_p = soap_instantiate_ns1__saveRequirementDocumentResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveRequirementDocumentResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__saveRequirementDocumentResponse * soap_new_set_ns1__saveRequirementDocumentResponse(struct soap *soap, int result) { struct ns1__saveRequirementDocumentResponse *_p = soap_instantiate_ns1__saveRequirementDocumentResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveRequirementDocumentResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__saveRequirementDocumentResponse(struct soap *soap, struct ns1__saveRequirementDocumentResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveRequirementDocumentResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editRequirementDocumentByRecordID
#define SOAP_TYPE_ns1__editRequirementDocumentByRecordID (760)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editRequirementDocumentByRecordID(struct soap*, struct ns1__editRequirementDocumentByRecordID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editRequirementDocumentByRecordID(struct soap*, const struct ns1__editRequirementDocumentByRecordID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editRequirementDocumentByRecordID(struct soap*, const char*, int, const struct ns1__editRequirementDocumentByRecordID *, const char*);
SOAP_FMAC3 struct ns1__editRequirementDocumentByRecordID * SOAP_FMAC4 soap_in_ns1__editRequirementDocumentByRecordID(struct soap*, const char*, struct ns1__editRequirementDocumentByRecordID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editRequirementDocumentByRecordID(struct soap*, const struct ns1__editRequirementDocumentByRecordID *, const char*, const char*);

#ifndef soap_write_ns1__editRequirementDocumentByRecordID
#define soap_write_ns1__editRequirementDocumentByRecordID(soap, data) ( soap_begin(soap), soap_serialize_ns1__editRequirementDocumentByRecordID(soap, data), soap_begin_send(soap) || soap_put_ns1__editRequirementDocumentByRecordID(soap, data, "ns1:editRequirementDocumentByRecordID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editRequirementDocumentByRecordID * SOAP_FMAC4 soap_get_ns1__editRequirementDocumentByRecordID(struct soap*, struct ns1__editRequirementDocumentByRecordID *, const char*, const char*);

#ifndef soap_read_ns1__editRequirementDocumentByRecordID
#define soap_read_ns1__editRequirementDocumentByRecordID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editRequirementDocumentByRecordID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editRequirementDocumentByRecordID * SOAP_FMAC2 soap_instantiate_ns1__editRequirementDocumentByRecordID(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editRequirementDocumentByRecordID * soap_new_ns1__editRequirementDocumentByRecordID(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editRequirementDocumentByRecordID(soap, n, NULL, NULL, NULL); }

inline struct ns1__editRequirementDocumentByRecordID * soap_new_req_ns1__editRequirementDocumentByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments) { struct ns1__editRequirementDocumentByRecordID *_p = soap_instantiate_ns1__editRequirementDocumentByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editRequirementDocumentByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline struct ns1__editRequirementDocumentByRecordID * soap_new_set_ns1__editRequirementDocumentByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments) { struct ns1__editRequirementDocumentByRecordID *_p = soap_instantiate_ns1__editRequirementDocumentByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editRequirementDocumentByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline void soap_delete_ns1__editRequirementDocumentByRecordID(struct soap *soap, struct ns1__editRequirementDocumentByRecordID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editRequirementDocumentByRecordID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editRequirementDocumentByRecordIDResponse
#define SOAP_TYPE_ns1__editRequirementDocumentByRecordIDResponse (757)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editRequirementDocumentByRecordIDResponse(struct soap*, struct ns1__editRequirementDocumentByRecordIDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editRequirementDocumentByRecordIDResponse(struct soap*, const struct ns1__editRequirementDocumentByRecordIDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editRequirementDocumentByRecordIDResponse(struct soap*, const char*, int, const struct ns1__editRequirementDocumentByRecordIDResponse *, const char*);
SOAP_FMAC3 struct ns1__editRequirementDocumentByRecordIDResponse * SOAP_FMAC4 soap_in_ns1__editRequirementDocumentByRecordIDResponse(struct soap*, const char*, struct ns1__editRequirementDocumentByRecordIDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editRequirementDocumentByRecordIDResponse(struct soap*, const struct ns1__editRequirementDocumentByRecordIDResponse *, const char*, const char*);

#ifndef soap_write_ns1__editRequirementDocumentByRecordIDResponse
#define soap_write_ns1__editRequirementDocumentByRecordIDResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__editRequirementDocumentByRecordIDResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__editRequirementDocumentByRecordIDResponse(soap, data, "ns1:editRequirementDocumentByRecordIDResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editRequirementDocumentByRecordIDResponse * SOAP_FMAC4 soap_get_ns1__editRequirementDocumentByRecordIDResponse(struct soap*, struct ns1__editRequirementDocumentByRecordIDResponse *, const char*, const char*);

#ifndef soap_read_ns1__editRequirementDocumentByRecordIDResponse
#define soap_read_ns1__editRequirementDocumentByRecordIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editRequirementDocumentByRecordIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editRequirementDocumentByRecordIDResponse * SOAP_FMAC2 soap_instantiate_ns1__editRequirementDocumentByRecordIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editRequirementDocumentByRecordIDResponse * soap_new_ns1__editRequirementDocumentByRecordIDResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editRequirementDocumentByRecordIDResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__editRequirementDocumentByRecordIDResponse * soap_new_req_ns1__editRequirementDocumentByRecordIDResponse(struct soap *soap) { struct ns1__editRequirementDocumentByRecordIDResponse *_p = soap_instantiate_ns1__editRequirementDocumentByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editRequirementDocumentByRecordIDResponse(soap, _p); } return _p; }

inline struct ns1__editRequirementDocumentByRecordIDResponse * soap_new_set_ns1__editRequirementDocumentByRecordIDResponse(struct soap *soap, ns1__CRequirementDocument *pRequirementDocument) { struct ns1__editRequirementDocumentByRecordIDResponse *_p = soap_instantiate_ns1__editRequirementDocumentByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editRequirementDocumentByRecordIDResponse(soap, _p); _p->pRequirementDocument = pRequirementDocument; } return _p; }

inline void soap_delete_ns1__editRequirementDocumentByRecordIDResponse(struct soap *soap, struct ns1__editRequirementDocumentByRecordIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editRequirementDocumentByRecordIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editRequirementDocument
#define SOAP_TYPE_ns1__editRequirementDocument (756)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editRequirementDocument(struct soap*, struct ns1__editRequirementDocument *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editRequirementDocument(struct soap*, const struct ns1__editRequirementDocument *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editRequirementDocument(struct soap*, const char*, int, const struct ns1__editRequirementDocument *, const char*);
SOAP_FMAC3 struct ns1__editRequirementDocument * SOAP_FMAC4 soap_in_ns1__editRequirementDocument(struct soap*, const char*, struct ns1__editRequirementDocument *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editRequirementDocument(struct soap*, const struct ns1__editRequirementDocument *, const char*, const char*);

#ifndef soap_write_ns1__editRequirementDocument
#define soap_write_ns1__editRequirementDocument(soap, data) ( soap_begin(soap), soap_serialize_ns1__editRequirementDocument(soap, data), soap_begin_send(soap) || soap_put_ns1__editRequirementDocument(soap, data, "ns1:editRequirementDocument", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editRequirementDocument * SOAP_FMAC4 soap_get_ns1__editRequirementDocument(struct soap*, struct ns1__editRequirementDocument *, const char*, const char*);

#ifndef soap_read_ns1__editRequirementDocument
#define soap_read_ns1__editRequirementDocument(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editRequirementDocument(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editRequirementDocument * SOAP_FMAC2 soap_instantiate_ns1__editRequirementDocument(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editRequirementDocument * soap_new_ns1__editRequirementDocument(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editRequirementDocument(soap, n, NULL, NULL, NULL); }

inline struct ns1__editRequirementDocument * soap_new_req_ns1__editRequirementDocument(struct soap *soap, LONG64 cookie, LONG64 documentNumber, bool bDownloadAttachments) { struct ns1__editRequirementDocument *_p = soap_instantiate_ns1__editRequirementDocument(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editRequirementDocument(soap, _p); _p->cookie = cookie; _p->documentNumber = documentNumber; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline struct ns1__editRequirementDocument * soap_new_set_ns1__editRequirementDocument(struct soap *soap, LONG64 cookie, LONG64 documentNumber, char *name, bool bDownloadAttachments) { struct ns1__editRequirementDocument *_p = soap_instantiate_ns1__editRequirementDocument(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editRequirementDocument(soap, _p); _p->cookie = cookie; _p->documentNumber = documentNumber; _p->name = name; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline void soap_delete_ns1__editRequirementDocument(struct soap *soap, struct ns1__editRequirementDocument *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editRequirementDocument(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editRequirementDocumentResponse
#define SOAP_TYPE_ns1__editRequirementDocumentResponse (753)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editRequirementDocumentResponse(struct soap*, struct ns1__editRequirementDocumentResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editRequirementDocumentResponse(struct soap*, const struct ns1__editRequirementDocumentResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editRequirementDocumentResponse(struct soap*, const char*, int, const struct ns1__editRequirementDocumentResponse *, const char*);
SOAP_FMAC3 struct ns1__editRequirementDocumentResponse * SOAP_FMAC4 soap_in_ns1__editRequirementDocumentResponse(struct soap*, const char*, struct ns1__editRequirementDocumentResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editRequirementDocumentResponse(struct soap*, const struct ns1__editRequirementDocumentResponse *, const char*, const char*);

#ifndef soap_write_ns1__editRequirementDocumentResponse
#define soap_write_ns1__editRequirementDocumentResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__editRequirementDocumentResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__editRequirementDocumentResponse(soap, data, "ns1:editRequirementDocumentResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editRequirementDocumentResponse * SOAP_FMAC4 soap_get_ns1__editRequirementDocumentResponse(struct soap*, struct ns1__editRequirementDocumentResponse *, const char*, const char*);

#ifndef soap_read_ns1__editRequirementDocumentResponse
#define soap_read_ns1__editRequirementDocumentResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editRequirementDocumentResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editRequirementDocumentResponse * SOAP_FMAC2 soap_instantiate_ns1__editRequirementDocumentResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editRequirementDocumentResponse * soap_new_ns1__editRequirementDocumentResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editRequirementDocumentResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__editRequirementDocumentResponse * soap_new_req_ns1__editRequirementDocumentResponse(struct soap *soap) { struct ns1__editRequirementDocumentResponse *_p = soap_instantiate_ns1__editRequirementDocumentResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editRequirementDocumentResponse(soap, _p); } return _p; }

inline struct ns1__editRequirementDocumentResponse * soap_new_set_ns1__editRequirementDocumentResponse(struct soap *soap, ns1__CRequirementDocument *pRequirementDocument) { struct ns1__editRequirementDocumentResponse *_p = soap_instantiate_ns1__editRequirementDocumentResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editRequirementDocumentResponse(soap, _p); _p->pRequirementDocument = pRequirementDocument; } return _p; }

inline void soap_delete_ns1__editRequirementDocumentResponse(struct soap *soap, struct ns1__editRequirementDocumentResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editRequirementDocumentResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteRequirementDocumentByRecordID
#define SOAP_TYPE_ns1__deleteRequirementDocumentByRecordID (752)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteRequirementDocumentByRecordID(struct soap*, struct ns1__deleteRequirementDocumentByRecordID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteRequirementDocumentByRecordID(struct soap*, const struct ns1__deleteRequirementDocumentByRecordID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteRequirementDocumentByRecordID(struct soap*, const char*, int, const struct ns1__deleteRequirementDocumentByRecordID *, const char*);
SOAP_FMAC3 struct ns1__deleteRequirementDocumentByRecordID * SOAP_FMAC4 soap_in_ns1__deleteRequirementDocumentByRecordID(struct soap*, const char*, struct ns1__deleteRequirementDocumentByRecordID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteRequirementDocumentByRecordID(struct soap*, const struct ns1__deleteRequirementDocumentByRecordID *, const char*, const char*);

#ifndef soap_write_ns1__deleteRequirementDocumentByRecordID
#define soap_write_ns1__deleteRequirementDocumentByRecordID(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteRequirementDocumentByRecordID(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteRequirementDocumentByRecordID(soap, data, "ns1:deleteRequirementDocumentByRecordID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteRequirementDocumentByRecordID * SOAP_FMAC4 soap_get_ns1__deleteRequirementDocumentByRecordID(struct soap*, struct ns1__deleteRequirementDocumentByRecordID *, const char*, const char*);

#ifndef soap_read_ns1__deleteRequirementDocumentByRecordID
#define soap_read_ns1__deleteRequirementDocumentByRecordID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteRequirementDocumentByRecordID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteRequirementDocumentByRecordID * SOAP_FMAC2 soap_instantiate_ns1__deleteRequirementDocumentByRecordID(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteRequirementDocumentByRecordID * soap_new_ns1__deleteRequirementDocumentByRecordID(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteRequirementDocumentByRecordID(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteRequirementDocumentByRecordID * soap_new_req_ns1__deleteRequirementDocumentByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID, bool bDeleteAssociatedRequirements) { struct ns1__deleteRequirementDocumentByRecordID *_p = soap_instantiate_ns1__deleteRequirementDocumentByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteRequirementDocumentByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->bDeleteAssociatedRequirements = bDeleteAssociatedRequirements; } return _p; }

inline struct ns1__deleteRequirementDocumentByRecordID * soap_new_set_ns1__deleteRequirementDocumentByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID, bool bDeleteAssociatedRequirements) { struct ns1__deleteRequirementDocumentByRecordID *_p = soap_instantiate_ns1__deleteRequirementDocumentByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteRequirementDocumentByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->bDeleteAssociatedRequirements = bDeleteAssociatedRequirements; } return _p; }

inline void soap_delete_ns1__deleteRequirementDocumentByRecordID(struct soap *soap, struct ns1__deleteRequirementDocumentByRecordID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteRequirementDocumentByRecordID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteRequirementDocumentByRecordIDResponse
#define SOAP_TYPE_ns1__deleteRequirementDocumentByRecordIDResponse (751)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteRequirementDocumentByRecordIDResponse(struct soap*, struct ns1__deleteRequirementDocumentByRecordIDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteRequirementDocumentByRecordIDResponse(struct soap*, const struct ns1__deleteRequirementDocumentByRecordIDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteRequirementDocumentByRecordIDResponse(struct soap*, const char*, int, const struct ns1__deleteRequirementDocumentByRecordIDResponse *, const char*);
SOAP_FMAC3 struct ns1__deleteRequirementDocumentByRecordIDResponse * SOAP_FMAC4 soap_in_ns1__deleteRequirementDocumentByRecordIDResponse(struct soap*, const char*, struct ns1__deleteRequirementDocumentByRecordIDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteRequirementDocumentByRecordIDResponse(struct soap*, const struct ns1__deleteRequirementDocumentByRecordIDResponse *, const char*, const char*);

#ifndef soap_write_ns1__deleteRequirementDocumentByRecordIDResponse
#define soap_write_ns1__deleteRequirementDocumentByRecordIDResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteRequirementDocumentByRecordIDResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteRequirementDocumentByRecordIDResponse(soap, data, "ns1:deleteRequirementDocumentByRecordIDResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteRequirementDocumentByRecordIDResponse * SOAP_FMAC4 soap_get_ns1__deleteRequirementDocumentByRecordIDResponse(struct soap*, struct ns1__deleteRequirementDocumentByRecordIDResponse *, const char*, const char*);

#ifndef soap_read_ns1__deleteRequirementDocumentByRecordIDResponse
#define soap_read_ns1__deleteRequirementDocumentByRecordIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteRequirementDocumentByRecordIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteRequirementDocumentByRecordIDResponse * SOAP_FMAC2 soap_instantiate_ns1__deleteRequirementDocumentByRecordIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteRequirementDocumentByRecordIDResponse * soap_new_ns1__deleteRequirementDocumentByRecordIDResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteRequirementDocumentByRecordIDResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteRequirementDocumentByRecordIDResponse * soap_new_req_ns1__deleteRequirementDocumentByRecordIDResponse(struct soap *soap, int result) { struct ns1__deleteRequirementDocumentByRecordIDResponse *_p = soap_instantiate_ns1__deleteRequirementDocumentByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteRequirementDocumentByRecordIDResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__deleteRequirementDocumentByRecordIDResponse * soap_new_set_ns1__deleteRequirementDocumentByRecordIDResponse(struct soap *soap, int result) { struct ns1__deleteRequirementDocumentByRecordIDResponse *_p = soap_instantiate_ns1__deleteRequirementDocumentByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteRequirementDocumentByRecordIDResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__deleteRequirementDocumentByRecordIDResponse(struct soap *soap, struct ns1__deleteRequirementDocumentByRecordIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteRequirementDocumentByRecordIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteRequirementDocument
#define SOAP_TYPE_ns1__deleteRequirementDocument (749)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteRequirementDocument(struct soap*, struct ns1__deleteRequirementDocument *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteRequirementDocument(struct soap*, const struct ns1__deleteRequirementDocument *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteRequirementDocument(struct soap*, const char*, int, const struct ns1__deleteRequirementDocument *, const char*);
SOAP_FMAC3 struct ns1__deleteRequirementDocument * SOAP_FMAC4 soap_in_ns1__deleteRequirementDocument(struct soap*, const char*, struct ns1__deleteRequirementDocument *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteRequirementDocument(struct soap*, const struct ns1__deleteRequirementDocument *, const char*, const char*);

#ifndef soap_write_ns1__deleteRequirementDocument
#define soap_write_ns1__deleteRequirementDocument(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteRequirementDocument(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteRequirementDocument(soap, data, "ns1:deleteRequirementDocument", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteRequirementDocument * SOAP_FMAC4 soap_get_ns1__deleteRequirementDocument(struct soap*, struct ns1__deleteRequirementDocument *, const char*, const char*);

#ifndef soap_read_ns1__deleteRequirementDocument
#define soap_read_ns1__deleteRequirementDocument(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteRequirementDocument(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteRequirementDocument * SOAP_FMAC2 soap_instantiate_ns1__deleteRequirementDocument(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteRequirementDocument * soap_new_ns1__deleteRequirementDocument(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteRequirementDocument(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteRequirementDocument * soap_new_req_ns1__deleteRequirementDocument(struct soap *soap, LONG64 cookie, LONG64 documentNumber, bool bDeleteAssociatedRequirements) { struct ns1__deleteRequirementDocument *_p = soap_instantiate_ns1__deleteRequirementDocument(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteRequirementDocument(soap, _p); _p->cookie = cookie; _p->documentNumber = documentNumber; _p->bDeleteAssociatedRequirements = bDeleteAssociatedRequirements; } return _p; }

inline struct ns1__deleteRequirementDocument * soap_new_set_ns1__deleteRequirementDocument(struct soap *soap, LONG64 cookie, LONG64 documentNumber, char *name, bool bDeleteAssociatedRequirements) { struct ns1__deleteRequirementDocument *_p = soap_instantiate_ns1__deleteRequirementDocument(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteRequirementDocument(soap, _p); _p->cookie = cookie; _p->documentNumber = documentNumber; _p->name = name; _p->bDeleteAssociatedRequirements = bDeleteAssociatedRequirements; } return _p; }

inline void soap_delete_ns1__deleteRequirementDocument(struct soap *soap, struct ns1__deleteRequirementDocument *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteRequirementDocument(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteRequirementDocumentResponse
#define SOAP_TYPE_ns1__deleteRequirementDocumentResponse (748)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteRequirementDocumentResponse(struct soap*, struct ns1__deleteRequirementDocumentResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteRequirementDocumentResponse(struct soap*, const struct ns1__deleteRequirementDocumentResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteRequirementDocumentResponse(struct soap*, const char*, int, const struct ns1__deleteRequirementDocumentResponse *, const char*);
SOAP_FMAC3 struct ns1__deleteRequirementDocumentResponse * SOAP_FMAC4 soap_in_ns1__deleteRequirementDocumentResponse(struct soap*, const char*, struct ns1__deleteRequirementDocumentResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteRequirementDocumentResponse(struct soap*, const struct ns1__deleteRequirementDocumentResponse *, const char*, const char*);

#ifndef soap_write_ns1__deleteRequirementDocumentResponse
#define soap_write_ns1__deleteRequirementDocumentResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteRequirementDocumentResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteRequirementDocumentResponse(soap, data, "ns1:deleteRequirementDocumentResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteRequirementDocumentResponse * SOAP_FMAC4 soap_get_ns1__deleteRequirementDocumentResponse(struct soap*, struct ns1__deleteRequirementDocumentResponse *, const char*, const char*);

#ifndef soap_read_ns1__deleteRequirementDocumentResponse
#define soap_read_ns1__deleteRequirementDocumentResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteRequirementDocumentResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteRequirementDocumentResponse * SOAP_FMAC2 soap_instantiate_ns1__deleteRequirementDocumentResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteRequirementDocumentResponse * soap_new_ns1__deleteRequirementDocumentResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteRequirementDocumentResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteRequirementDocumentResponse * soap_new_req_ns1__deleteRequirementDocumentResponse(struct soap *soap, int result) { struct ns1__deleteRequirementDocumentResponse *_p = soap_instantiate_ns1__deleteRequirementDocumentResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteRequirementDocumentResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__deleteRequirementDocumentResponse * soap_new_set_ns1__deleteRequirementDocumentResponse(struct soap *soap, int result) { struct ns1__deleteRequirementDocumentResponse *_p = soap_instantiate_ns1__deleteRequirementDocumentResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteRequirementDocumentResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__deleteRequirementDocumentResponse(struct soap *soap, struct ns1__deleteRequirementDocumentResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteRequirementDocumentResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__addRequirementDocument
#define SOAP_TYPE_ns1__addRequirementDocument (746)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addRequirementDocument(struct soap*, struct ns1__addRequirementDocument *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addRequirementDocument(struct soap*, const struct ns1__addRequirementDocument *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addRequirementDocument(struct soap*, const char*, int, const struct ns1__addRequirementDocument *, const char*);
SOAP_FMAC3 struct ns1__addRequirementDocument * SOAP_FMAC4 soap_in_ns1__addRequirementDocument(struct soap*, const char*, struct ns1__addRequirementDocument *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addRequirementDocument(struct soap*, const struct ns1__addRequirementDocument *, const char*, const char*);

#ifndef soap_write_ns1__addRequirementDocument
#define soap_write_ns1__addRequirementDocument(soap, data) ( soap_begin(soap), soap_serialize_ns1__addRequirementDocument(soap, data), soap_begin_send(soap) || soap_put_ns1__addRequirementDocument(soap, data, "ns1:addRequirementDocument", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__addRequirementDocument * SOAP_FMAC4 soap_get_ns1__addRequirementDocument(struct soap*, struct ns1__addRequirementDocument *, const char*, const char*);

#ifndef soap_read_ns1__addRequirementDocument
#define soap_read_ns1__addRequirementDocument(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__addRequirementDocument(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__addRequirementDocument * SOAP_FMAC2 soap_instantiate_ns1__addRequirementDocument(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__addRequirementDocument * soap_new_ns1__addRequirementDocument(struct soap *soap, int n = -1) { return soap_instantiate_ns1__addRequirementDocument(soap, n, NULL, NULL, NULL); }

inline struct ns1__addRequirementDocument * soap_new_req_ns1__addRequirementDocument(struct soap *soap, LONG64 cookie) { struct ns1__addRequirementDocument *_p = soap_instantiate_ns1__addRequirementDocument(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addRequirementDocument(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__addRequirementDocument * soap_new_set_ns1__addRequirementDocument(struct soap *soap, LONG64 cookie, ns1__CRequirementDocument *pRequirementDocument) { struct ns1__addRequirementDocument *_p = soap_instantiate_ns1__addRequirementDocument(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addRequirementDocument(soap, _p); _p->cookie = cookie; _p->pRequirementDocument = pRequirementDocument; } return _p; }

inline void soap_delete_ns1__addRequirementDocument(struct soap *soap, struct ns1__addRequirementDocument *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__addRequirementDocument(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__addRequirementDocumentResponse
#define SOAP_TYPE_ns1__addRequirementDocumentResponse (745)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addRequirementDocumentResponse(struct soap*, struct ns1__addRequirementDocumentResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addRequirementDocumentResponse(struct soap*, const struct ns1__addRequirementDocumentResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addRequirementDocumentResponse(struct soap*, const char*, int, const struct ns1__addRequirementDocumentResponse *, const char*);
SOAP_FMAC3 struct ns1__addRequirementDocumentResponse * SOAP_FMAC4 soap_in_ns1__addRequirementDocumentResponse(struct soap*, const char*, struct ns1__addRequirementDocumentResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addRequirementDocumentResponse(struct soap*, const struct ns1__addRequirementDocumentResponse *, const char*, const char*);

#ifndef soap_write_ns1__addRequirementDocumentResponse
#define soap_write_ns1__addRequirementDocumentResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__addRequirementDocumentResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__addRequirementDocumentResponse(soap, data, "ns1:addRequirementDocumentResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__addRequirementDocumentResponse * SOAP_FMAC4 soap_get_ns1__addRequirementDocumentResponse(struct soap*, struct ns1__addRequirementDocumentResponse *, const char*, const char*);

#ifndef soap_read_ns1__addRequirementDocumentResponse
#define soap_read_ns1__addRequirementDocumentResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__addRequirementDocumentResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__addRequirementDocumentResponse * SOAP_FMAC2 soap_instantiate_ns1__addRequirementDocumentResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__addRequirementDocumentResponse * soap_new_ns1__addRequirementDocumentResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__addRequirementDocumentResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__addRequirementDocumentResponse * soap_new_req_ns1__addRequirementDocumentResponse(struct soap *soap, LONG64 recordID) { struct ns1__addRequirementDocumentResponse *_p = soap_instantiate_ns1__addRequirementDocumentResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addRequirementDocumentResponse(soap, _p); _p->recordID = recordID; } return _p; }

inline struct ns1__addRequirementDocumentResponse * soap_new_set_ns1__addRequirementDocumentResponse(struct soap *soap, LONG64 recordID) { struct ns1__addRequirementDocumentResponse *_p = soap_instantiate_ns1__addRequirementDocumentResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addRequirementDocumentResponse(soap, _p); _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__addRequirementDocumentResponse(struct soap *soap, struct ns1__addRequirementDocumentResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__addRequirementDocumentResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getRequirementDocumentByRecordID
#define SOAP_TYPE_ns1__getRequirementDocumentByRecordID (743)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getRequirementDocumentByRecordID(struct soap*, struct ns1__getRequirementDocumentByRecordID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getRequirementDocumentByRecordID(struct soap*, const struct ns1__getRequirementDocumentByRecordID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getRequirementDocumentByRecordID(struct soap*, const char*, int, const struct ns1__getRequirementDocumentByRecordID *, const char*);
SOAP_FMAC3 struct ns1__getRequirementDocumentByRecordID * SOAP_FMAC4 soap_in_ns1__getRequirementDocumentByRecordID(struct soap*, const char*, struct ns1__getRequirementDocumentByRecordID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getRequirementDocumentByRecordID(struct soap*, const struct ns1__getRequirementDocumentByRecordID *, const char*, const char*);

#ifndef soap_write_ns1__getRequirementDocumentByRecordID
#define soap_write_ns1__getRequirementDocumentByRecordID(soap, data) ( soap_begin(soap), soap_serialize_ns1__getRequirementDocumentByRecordID(soap, data), soap_begin_send(soap) || soap_put_ns1__getRequirementDocumentByRecordID(soap, data, "ns1:getRequirementDocumentByRecordID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getRequirementDocumentByRecordID * SOAP_FMAC4 soap_get_ns1__getRequirementDocumentByRecordID(struct soap*, struct ns1__getRequirementDocumentByRecordID *, const char*, const char*);

#ifndef soap_read_ns1__getRequirementDocumentByRecordID
#define soap_read_ns1__getRequirementDocumentByRecordID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getRequirementDocumentByRecordID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getRequirementDocumentByRecordID * SOAP_FMAC2 soap_instantiate_ns1__getRequirementDocumentByRecordID(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getRequirementDocumentByRecordID * soap_new_ns1__getRequirementDocumentByRecordID(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getRequirementDocumentByRecordID(soap, n, NULL, NULL, NULL); }

inline struct ns1__getRequirementDocumentByRecordID * soap_new_req_ns1__getRequirementDocumentByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments) { struct ns1__getRequirementDocumentByRecordID *_p = soap_instantiate_ns1__getRequirementDocumentByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getRequirementDocumentByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline struct ns1__getRequirementDocumentByRecordID * soap_new_set_ns1__getRequirementDocumentByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments) { struct ns1__getRequirementDocumentByRecordID *_p = soap_instantiate_ns1__getRequirementDocumentByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getRequirementDocumentByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline void soap_delete_ns1__getRequirementDocumentByRecordID(struct soap *soap, struct ns1__getRequirementDocumentByRecordID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getRequirementDocumentByRecordID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getRequirementDocumentByRecordIDResponse
#define SOAP_TYPE_ns1__getRequirementDocumentByRecordIDResponse (740)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getRequirementDocumentByRecordIDResponse(struct soap*, struct ns1__getRequirementDocumentByRecordIDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getRequirementDocumentByRecordIDResponse(struct soap*, const struct ns1__getRequirementDocumentByRecordIDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getRequirementDocumentByRecordIDResponse(struct soap*, const char*, int, const struct ns1__getRequirementDocumentByRecordIDResponse *, const char*);
SOAP_FMAC3 struct ns1__getRequirementDocumentByRecordIDResponse * SOAP_FMAC4 soap_in_ns1__getRequirementDocumentByRecordIDResponse(struct soap*, const char*, struct ns1__getRequirementDocumentByRecordIDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getRequirementDocumentByRecordIDResponse(struct soap*, const struct ns1__getRequirementDocumentByRecordIDResponse *, const char*, const char*);

#ifndef soap_write_ns1__getRequirementDocumentByRecordIDResponse
#define soap_write_ns1__getRequirementDocumentByRecordIDResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getRequirementDocumentByRecordIDResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getRequirementDocumentByRecordIDResponse(soap, data, "ns1:getRequirementDocumentByRecordIDResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getRequirementDocumentByRecordIDResponse * SOAP_FMAC4 soap_get_ns1__getRequirementDocumentByRecordIDResponse(struct soap*, struct ns1__getRequirementDocumentByRecordIDResponse *, const char*, const char*);

#ifndef soap_read_ns1__getRequirementDocumentByRecordIDResponse
#define soap_read_ns1__getRequirementDocumentByRecordIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getRequirementDocumentByRecordIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getRequirementDocumentByRecordIDResponse * SOAP_FMAC2 soap_instantiate_ns1__getRequirementDocumentByRecordIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getRequirementDocumentByRecordIDResponse * soap_new_ns1__getRequirementDocumentByRecordIDResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getRequirementDocumentByRecordIDResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getRequirementDocumentByRecordIDResponse * soap_new_req_ns1__getRequirementDocumentByRecordIDResponse(struct soap *soap) { struct ns1__getRequirementDocumentByRecordIDResponse *_p = soap_instantiate_ns1__getRequirementDocumentByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getRequirementDocumentByRecordIDResponse(soap, _p); } return _p; }

inline struct ns1__getRequirementDocumentByRecordIDResponse * soap_new_set_ns1__getRequirementDocumentByRecordIDResponse(struct soap *soap, ns1__CRequirementDocument *pRequirementDocument) { struct ns1__getRequirementDocumentByRecordIDResponse *_p = soap_instantiate_ns1__getRequirementDocumentByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getRequirementDocumentByRecordIDResponse(soap, _p); _p->pRequirementDocument = pRequirementDocument; } return _p; }

inline void soap_delete_ns1__getRequirementDocumentByRecordIDResponse(struct soap *soap, struct ns1__getRequirementDocumentByRecordIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getRequirementDocumentByRecordIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getRequirementDocument
#define SOAP_TYPE_ns1__getRequirementDocument (739)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getRequirementDocument(struct soap*, struct ns1__getRequirementDocument *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getRequirementDocument(struct soap*, const struct ns1__getRequirementDocument *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getRequirementDocument(struct soap*, const char*, int, const struct ns1__getRequirementDocument *, const char*);
SOAP_FMAC3 struct ns1__getRequirementDocument * SOAP_FMAC4 soap_in_ns1__getRequirementDocument(struct soap*, const char*, struct ns1__getRequirementDocument *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getRequirementDocument(struct soap*, const struct ns1__getRequirementDocument *, const char*, const char*);

#ifndef soap_write_ns1__getRequirementDocument
#define soap_write_ns1__getRequirementDocument(soap, data) ( soap_begin(soap), soap_serialize_ns1__getRequirementDocument(soap, data), soap_begin_send(soap) || soap_put_ns1__getRequirementDocument(soap, data, "ns1:getRequirementDocument", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getRequirementDocument * SOAP_FMAC4 soap_get_ns1__getRequirementDocument(struct soap*, struct ns1__getRequirementDocument *, const char*, const char*);

#ifndef soap_read_ns1__getRequirementDocument
#define soap_read_ns1__getRequirementDocument(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getRequirementDocument(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getRequirementDocument * SOAP_FMAC2 soap_instantiate_ns1__getRequirementDocument(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getRequirementDocument * soap_new_ns1__getRequirementDocument(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getRequirementDocument(soap, n, NULL, NULL, NULL); }

inline struct ns1__getRequirementDocument * soap_new_req_ns1__getRequirementDocument(struct soap *soap, LONG64 cookie, LONG64 documentNumber, bool bDownloadAttachments) { struct ns1__getRequirementDocument *_p = soap_instantiate_ns1__getRequirementDocument(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getRequirementDocument(soap, _p); _p->cookie = cookie; _p->documentNumber = documentNumber; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline struct ns1__getRequirementDocument * soap_new_set_ns1__getRequirementDocument(struct soap *soap, LONG64 cookie, LONG64 documentNumber, char *name, bool bDownloadAttachments) { struct ns1__getRequirementDocument *_p = soap_instantiate_ns1__getRequirementDocument(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getRequirementDocument(soap, _p); _p->cookie = cookie; _p->documentNumber = documentNumber; _p->name = name; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline void soap_delete_ns1__getRequirementDocument(struct soap *soap, struct ns1__getRequirementDocument *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getRequirementDocument(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getRequirementDocumentResponse
#define SOAP_TYPE_ns1__getRequirementDocumentResponse (735)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getRequirementDocumentResponse(struct soap*, struct ns1__getRequirementDocumentResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getRequirementDocumentResponse(struct soap*, const struct ns1__getRequirementDocumentResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getRequirementDocumentResponse(struct soap*, const char*, int, const struct ns1__getRequirementDocumentResponse *, const char*);
SOAP_FMAC3 struct ns1__getRequirementDocumentResponse * SOAP_FMAC4 soap_in_ns1__getRequirementDocumentResponse(struct soap*, const char*, struct ns1__getRequirementDocumentResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getRequirementDocumentResponse(struct soap*, const struct ns1__getRequirementDocumentResponse *, const char*, const char*);

#ifndef soap_write_ns1__getRequirementDocumentResponse
#define soap_write_ns1__getRequirementDocumentResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getRequirementDocumentResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getRequirementDocumentResponse(soap, data, "ns1:getRequirementDocumentResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getRequirementDocumentResponse * SOAP_FMAC4 soap_get_ns1__getRequirementDocumentResponse(struct soap*, struct ns1__getRequirementDocumentResponse *, const char*, const char*);

#ifndef soap_read_ns1__getRequirementDocumentResponse
#define soap_read_ns1__getRequirementDocumentResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getRequirementDocumentResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getRequirementDocumentResponse * SOAP_FMAC2 soap_instantiate_ns1__getRequirementDocumentResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getRequirementDocumentResponse * soap_new_ns1__getRequirementDocumentResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getRequirementDocumentResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getRequirementDocumentResponse * soap_new_req_ns1__getRequirementDocumentResponse(struct soap *soap) { struct ns1__getRequirementDocumentResponse *_p = soap_instantiate_ns1__getRequirementDocumentResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getRequirementDocumentResponse(soap, _p); } return _p; }

inline struct ns1__getRequirementDocumentResponse * soap_new_set_ns1__getRequirementDocumentResponse(struct soap *soap, ns1__CRequirementDocument *pRequirementDocument) { struct ns1__getRequirementDocumentResponse *_p = soap_instantiate_ns1__getRequirementDocumentResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getRequirementDocumentResponse(soap, _p); _p->pRequirementDocument = pRequirementDocument; } return _p; }

inline void soap_delete_ns1__getRequirementDocumentResponse(struct soap *soap, struct ns1__getRequirementDocumentResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getRequirementDocumentResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__changeRequirementType
#define SOAP_TYPE_ns1__changeRequirementType (734)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__changeRequirementType(struct soap*, struct ns1__changeRequirementType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__changeRequirementType(struct soap*, const struct ns1__changeRequirementType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__changeRequirementType(struct soap*, const char*, int, const struct ns1__changeRequirementType *, const char*);
SOAP_FMAC3 struct ns1__changeRequirementType * SOAP_FMAC4 soap_in_ns1__changeRequirementType(struct soap*, const char*, struct ns1__changeRequirementType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__changeRequirementType(struct soap*, const struct ns1__changeRequirementType *, const char*, const char*);

#ifndef soap_write_ns1__changeRequirementType
#define soap_write_ns1__changeRequirementType(soap, data) ( soap_begin(soap), soap_serialize_ns1__changeRequirementType(soap, data), soap_begin_send(soap) || soap_put_ns1__changeRequirementType(soap, data, "ns1:changeRequirementType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__changeRequirementType * SOAP_FMAC4 soap_get_ns1__changeRequirementType(struct soap*, struct ns1__changeRequirementType *, const char*, const char*);

#ifndef soap_read_ns1__changeRequirementType
#define soap_read_ns1__changeRequirementType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__changeRequirementType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__changeRequirementType * SOAP_FMAC2 soap_instantiate_ns1__changeRequirementType(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__changeRequirementType * soap_new_ns1__changeRequirementType(struct soap *soap, int n = -1) { return soap_instantiate_ns1__changeRequirementType(soap, n, NULL, NULL, NULL); }

inline struct ns1__changeRequirementType * soap_new_req_ns1__changeRequirementType(struct soap *soap, LONG64 cookie, LONG64 requirementID) { struct ns1__changeRequirementType *_p = soap_instantiate_ns1__changeRequirementType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__changeRequirementType(soap, _p); _p->cookie = cookie; _p->requirementID = requirementID; } return _p; }

inline struct ns1__changeRequirementType * soap_new_set_ns1__changeRequirementType(struct soap *soap, LONG64 cookie, LONG64 requirementID, char *newTypeName) { struct ns1__changeRequirementType *_p = soap_instantiate_ns1__changeRequirementType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__changeRequirementType(soap, _p); _p->cookie = cookie; _p->requirementID = requirementID; _p->newTypeName = newTypeName; } return _p; }

inline void soap_delete_ns1__changeRequirementType(struct soap *soap, struct ns1__changeRequirementType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__changeRequirementType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__changeRequirementTypeResponse
#define SOAP_TYPE_ns1__changeRequirementTypeResponse (733)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__changeRequirementTypeResponse(struct soap*, struct ns1__changeRequirementTypeResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__changeRequirementTypeResponse(struct soap*, const struct ns1__changeRequirementTypeResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__changeRequirementTypeResponse(struct soap*, const char*, int, const struct ns1__changeRequirementTypeResponse *, const char*);
SOAP_FMAC3 struct ns1__changeRequirementTypeResponse * SOAP_FMAC4 soap_in_ns1__changeRequirementTypeResponse(struct soap*, const char*, struct ns1__changeRequirementTypeResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__changeRequirementTypeResponse(struct soap*, const struct ns1__changeRequirementTypeResponse *, const char*, const char*);

#ifndef soap_write_ns1__changeRequirementTypeResponse
#define soap_write_ns1__changeRequirementTypeResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__changeRequirementTypeResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__changeRequirementTypeResponse(soap, data, "ns1:changeRequirementTypeResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__changeRequirementTypeResponse * SOAP_FMAC4 soap_get_ns1__changeRequirementTypeResponse(struct soap*, struct ns1__changeRequirementTypeResponse *, const char*, const char*);

#ifndef soap_read_ns1__changeRequirementTypeResponse
#define soap_read_ns1__changeRequirementTypeResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__changeRequirementTypeResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__changeRequirementTypeResponse * SOAP_FMAC2 soap_instantiate_ns1__changeRequirementTypeResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__changeRequirementTypeResponse * soap_new_ns1__changeRequirementTypeResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__changeRequirementTypeResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__changeRequirementTypeResponse * soap_new_req_ns1__changeRequirementTypeResponse(struct soap *soap, int result) { struct ns1__changeRequirementTypeResponse *_p = soap_instantiate_ns1__changeRequirementTypeResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__changeRequirementTypeResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__changeRequirementTypeResponse * soap_new_set_ns1__changeRequirementTypeResponse(struct soap *soap, int result) { struct ns1__changeRequirementTypeResponse *_p = soap_instantiate_ns1__changeRequirementTypeResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__changeRequirementTypeResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__changeRequirementTypeResponse(struct soap *soap, struct ns1__changeRequirementTypeResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__changeRequirementTypeResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getDocumentIDsForRequirement
#define SOAP_TYPE_ns1__getDocumentIDsForRequirement (731)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getDocumentIDsForRequirement(struct soap*, struct ns1__getDocumentIDsForRequirement *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getDocumentIDsForRequirement(struct soap*, const struct ns1__getDocumentIDsForRequirement *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getDocumentIDsForRequirement(struct soap*, const char*, int, const struct ns1__getDocumentIDsForRequirement *, const char*);
SOAP_FMAC3 struct ns1__getDocumentIDsForRequirement * SOAP_FMAC4 soap_in_ns1__getDocumentIDsForRequirement(struct soap*, const char*, struct ns1__getDocumentIDsForRequirement *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getDocumentIDsForRequirement(struct soap*, const struct ns1__getDocumentIDsForRequirement *, const char*, const char*);

#ifndef soap_write_ns1__getDocumentIDsForRequirement
#define soap_write_ns1__getDocumentIDsForRequirement(soap, data) ( soap_begin(soap), soap_serialize_ns1__getDocumentIDsForRequirement(soap, data), soap_begin_send(soap) || soap_put_ns1__getDocumentIDsForRequirement(soap, data, "ns1:getDocumentIDsForRequirement", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getDocumentIDsForRequirement * SOAP_FMAC4 soap_get_ns1__getDocumentIDsForRequirement(struct soap*, struct ns1__getDocumentIDsForRequirement *, const char*, const char*);

#ifndef soap_read_ns1__getDocumentIDsForRequirement
#define soap_read_ns1__getDocumentIDsForRequirement(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getDocumentIDsForRequirement(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getDocumentIDsForRequirement * SOAP_FMAC2 soap_instantiate_ns1__getDocumentIDsForRequirement(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getDocumentIDsForRequirement * soap_new_ns1__getDocumentIDsForRequirement(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getDocumentIDsForRequirement(soap, n, NULL, NULL, NULL); }

inline struct ns1__getDocumentIDsForRequirement * soap_new_req_ns1__getDocumentIDsForRequirement(struct soap *soap, LONG64 cookie, LONG64 requirementID) { struct ns1__getDocumentIDsForRequirement *_p = soap_instantiate_ns1__getDocumentIDsForRequirement(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDocumentIDsForRequirement(soap, _p); _p->cookie = cookie; _p->requirementID = requirementID; } return _p; }

inline struct ns1__getDocumentIDsForRequirement * soap_new_set_ns1__getDocumentIDsForRequirement(struct soap *soap, LONG64 cookie, LONG64 requirementID) { struct ns1__getDocumentIDsForRequirement *_p = soap_instantiate_ns1__getDocumentIDsForRequirement(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDocumentIDsForRequirement(soap, _p); _p->cookie = cookie; _p->requirementID = requirementID; } return _p; }

inline void soap_delete_ns1__getDocumentIDsForRequirement(struct soap *soap, struct ns1__getDocumentIDsForRequirement *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getDocumentIDsForRequirement(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getDocumentIDsForRequirementResponse
#define SOAP_TYPE_ns1__getDocumentIDsForRequirementResponse (727)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getDocumentIDsForRequirementResponse(struct soap*, struct ns1__getDocumentIDsForRequirementResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getDocumentIDsForRequirementResponse(struct soap*, const struct ns1__getDocumentIDsForRequirementResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getDocumentIDsForRequirementResponse(struct soap*, const char*, int, const struct ns1__getDocumentIDsForRequirementResponse *, const char*);
SOAP_FMAC3 struct ns1__getDocumentIDsForRequirementResponse * SOAP_FMAC4 soap_in_ns1__getDocumentIDsForRequirementResponse(struct soap*, const char*, struct ns1__getDocumentIDsForRequirementResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getDocumentIDsForRequirementResponse(struct soap*, const struct ns1__getDocumentIDsForRequirementResponse *, const char*, const char*);

#ifndef soap_write_ns1__getDocumentIDsForRequirementResponse
#define soap_write_ns1__getDocumentIDsForRequirementResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getDocumentIDsForRequirementResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getDocumentIDsForRequirementResponse(soap, data, "ns1:getDocumentIDsForRequirementResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getDocumentIDsForRequirementResponse * SOAP_FMAC4 soap_get_ns1__getDocumentIDsForRequirementResponse(struct soap*, struct ns1__getDocumentIDsForRequirementResponse *, const char*, const char*);

#ifndef soap_read_ns1__getDocumentIDsForRequirementResponse
#define soap_read_ns1__getDocumentIDsForRequirementResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getDocumentIDsForRequirementResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getDocumentIDsForRequirementResponse * SOAP_FMAC2 soap_instantiate_ns1__getDocumentIDsForRequirementResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getDocumentIDsForRequirementResponse * soap_new_ns1__getDocumentIDsForRequirementResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getDocumentIDsForRequirementResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getDocumentIDsForRequirementResponse * soap_new_req_ns1__getDocumentIDsForRequirementResponse(struct soap *soap) { struct ns1__getDocumentIDsForRequirementResponse *_p = soap_instantiate_ns1__getDocumentIDsForRequirementResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDocumentIDsForRequirementResponse(soap, _p); } return _p; }

inline struct ns1__getDocumentIDsForRequirementResponse * soap_new_set_ns1__getDocumentIDsForRequirementResponse(struct soap *soap, ArrayOflong *recordIDs) { struct ns1__getDocumentIDsForRequirementResponse *_p = soap_instantiate_ns1__getDocumentIDsForRequirementResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDocumentIDsForRequirementResponse(soap, _p); _p->recordIDs = recordIDs; } return _p; }

inline void soap_delete_ns1__getDocumentIDsForRequirementResponse(struct soap *soap, struct ns1__getDocumentIDsForRequirementResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getDocumentIDsForRequirementResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__appendToRequirementDocument
#define SOAP_TYPE_ns1__appendToRequirementDocument (726)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__appendToRequirementDocument(struct soap*, struct ns1__appendToRequirementDocument *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__appendToRequirementDocument(struct soap*, const struct ns1__appendToRequirementDocument *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__appendToRequirementDocument(struct soap*, const char*, int, const struct ns1__appendToRequirementDocument *, const char*);
SOAP_FMAC3 struct ns1__appendToRequirementDocument * SOAP_FMAC4 soap_in_ns1__appendToRequirementDocument(struct soap*, const char*, struct ns1__appendToRequirementDocument *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__appendToRequirementDocument(struct soap*, const struct ns1__appendToRequirementDocument *, const char*, const char*);

#ifndef soap_write_ns1__appendToRequirementDocument
#define soap_write_ns1__appendToRequirementDocument(soap, data) ( soap_begin(soap), soap_serialize_ns1__appendToRequirementDocument(soap, data), soap_begin_send(soap) || soap_put_ns1__appendToRequirementDocument(soap, data, "ns1:appendToRequirementDocument", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__appendToRequirementDocument * SOAP_FMAC4 soap_get_ns1__appendToRequirementDocument(struct soap*, struct ns1__appendToRequirementDocument *, const char*, const char*);

#ifndef soap_read_ns1__appendToRequirementDocument
#define soap_read_ns1__appendToRequirementDocument(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__appendToRequirementDocument(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__appendToRequirementDocument * SOAP_FMAC2 soap_instantiate_ns1__appendToRequirementDocument(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__appendToRequirementDocument * soap_new_ns1__appendToRequirementDocument(struct soap *soap, int n = -1) { return soap_instantiate_ns1__appendToRequirementDocument(soap, n, NULL, NULL, NULL); }

inline struct ns1__appendToRequirementDocument * soap_new_req_ns1__appendToRequirementDocument(struct soap *soap, LONG64 cookie, LONG64 requirementID, LONG64 documentID, LONG64 parentRequirementID) { struct ns1__appendToRequirementDocument *_p = soap_instantiate_ns1__appendToRequirementDocument(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__appendToRequirementDocument(soap, _p); _p->cookie = cookie; _p->requirementID = requirementID; _p->documentID = documentID; _p->parentRequirementID = parentRequirementID; } return _p; }

inline struct ns1__appendToRequirementDocument * soap_new_set_ns1__appendToRequirementDocument(struct soap *soap, LONG64 cookie, LONG64 requirementID, LONG64 documentID, LONG64 parentRequirementID) { struct ns1__appendToRequirementDocument *_p = soap_instantiate_ns1__appendToRequirementDocument(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__appendToRequirementDocument(soap, _p); _p->cookie = cookie; _p->requirementID = requirementID; _p->documentID = documentID; _p->parentRequirementID = parentRequirementID; } return _p; }

inline void soap_delete_ns1__appendToRequirementDocument(struct soap *soap, struct ns1__appendToRequirementDocument *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__appendToRequirementDocument(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__appendToRequirementDocumentResponse
#define SOAP_TYPE_ns1__appendToRequirementDocumentResponse (725)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__appendToRequirementDocumentResponse(struct soap*, struct ns1__appendToRequirementDocumentResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__appendToRequirementDocumentResponse(struct soap*, const struct ns1__appendToRequirementDocumentResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__appendToRequirementDocumentResponse(struct soap*, const char*, int, const struct ns1__appendToRequirementDocumentResponse *, const char*);
SOAP_FMAC3 struct ns1__appendToRequirementDocumentResponse * SOAP_FMAC4 soap_in_ns1__appendToRequirementDocumentResponse(struct soap*, const char*, struct ns1__appendToRequirementDocumentResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__appendToRequirementDocumentResponse(struct soap*, const struct ns1__appendToRequirementDocumentResponse *, const char*, const char*);

#ifndef soap_write_ns1__appendToRequirementDocumentResponse
#define soap_write_ns1__appendToRequirementDocumentResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__appendToRequirementDocumentResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__appendToRequirementDocumentResponse(soap, data, "ns1:appendToRequirementDocumentResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__appendToRequirementDocumentResponse * SOAP_FMAC4 soap_get_ns1__appendToRequirementDocumentResponse(struct soap*, struct ns1__appendToRequirementDocumentResponse *, const char*, const char*);

#ifndef soap_read_ns1__appendToRequirementDocumentResponse
#define soap_read_ns1__appendToRequirementDocumentResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__appendToRequirementDocumentResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__appendToRequirementDocumentResponse * SOAP_FMAC2 soap_instantiate_ns1__appendToRequirementDocumentResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__appendToRequirementDocumentResponse * soap_new_ns1__appendToRequirementDocumentResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__appendToRequirementDocumentResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__appendToRequirementDocumentResponse * soap_new_req_ns1__appendToRequirementDocumentResponse(struct soap *soap, int result) { struct ns1__appendToRequirementDocumentResponse *_p = soap_instantiate_ns1__appendToRequirementDocumentResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__appendToRequirementDocumentResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__appendToRequirementDocumentResponse * soap_new_set_ns1__appendToRequirementDocumentResponse(struct soap *soap, int result) { struct ns1__appendToRequirementDocumentResponse *_p = soap_instantiate_ns1__appendToRequirementDocumentResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__appendToRequirementDocumentResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__appendToRequirementDocumentResponse(struct soap *soap, struct ns1__appendToRequirementDocumentResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__appendToRequirementDocumentResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__cancelSaveRequirement
#define SOAP_TYPE_ns1__cancelSaveRequirement (723)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__cancelSaveRequirement(struct soap*, struct ns1__cancelSaveRequirement *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__cancelSaveRequirement(struct soap*, const struct ns1__cancelSaveRequirement *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__cancelSaveRequirement(struct soap*, const char*, int, const struct ns1__cancelSaveRequirement *, const char*);
SOAP_FMAC3 struct ns1__cancelSaveRequirement * SOAP_FMAC4 soap_in_ns1__cancelSaveRequirement(struct soap*, const char*, struct ns1__cancelSaveRequirement *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__cancelSaveRequirement(struct soap*, const struct ns1__cancelSaveRequirement *, const char*, const char*);

#ifndef soap_write_ns1__cancelSaveRequirement
#define soap_write_ns1__cancelSaveRequirement(soap, data) ( soap_begin(soap), soap_serialize_ns1__cancelSaveRequirement(soap, data), soap_begin_send(soap) || soap_put_ns1__cancelSaveRequirement(soap, data, "ns1:cancelSaveRequirement", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__cancelSaveRequirement * SOAP_FMAC4 soap_get_ns1__cancelSaveRequirement(struct soap*, struct ns1__cancelSaveRequirement *, const char*, const char*);

#ifndef soap_read_ns1__cancelSaveRequirement
#define soap_read_ns1__cancelSaveRequirement(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__cancelSaveRequirement(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__cancelSaveRequirement * SOAP_FMAC2 soap_instantiate_ns1__cancelSaveRequirement(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__cancelSaveRequirement * soap_new_ns1__cancelSaveRequirement(struct soap *soap, int n = -1) { return soap_instantiate_ns1__cancelSaveRequirement(soap, n, NULL, NULL, NULL); }

inline struct ns1__cancelSaveRequirement * soap_new_req_ns1__cancelSaveRequirement(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__cancelSaveRequirement *_p = soap_instantiate_ns1__cancelSaveRequirement(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveRequirement(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline struct ns1__cancelSaveRequirement * soap_new_set_ns1__cancelSaveRequirement(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__cancelSaveRequirement *_p = soap_instantiate_ns1__cancelSaveRequirement(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveRequirement(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__cancelSaveRequirement(struct soap *soap, struct ns1__cancelSaveRequirement *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__cancelSaveRequirement(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__cancelSaveRequirementResponse
#define SOAP_TYPE_ns1__cancelSaveRequirementResponse (722)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__cancelSaveRequirementResponse(struct soap*, struct ns1__cancelSaveRequirementResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__cancelSaveRequirementResponse(struct soap*, const struct ns1__cancelSaveRequirementResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__cancelSaveRequirementResponse(struct soap*, const char*, int, const struct ns1__cancelSaveRequirementResponse *, const char*);
SOAP_FMAC3 struct ns1__cancelSaveRequirementResponse * SOAP_FMAC4 soap_in_ns1__cancelSaveRequirementResponse(struct soap*, const char*, struct ns1__cancelSaveRequirementResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__cancelSaveRequirementResponse(struct soap*, const struct ns1__cancelSaveRequirementResponse *, const char*, const char*);

#ifndef soap_write_ns1__cancelSaveRequirementResponse
#define soap_write_ns1__cancelSaveRequirementResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__cancelSaveRequirementResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__cancelSaveRequirementResponse(soap, data, "ns1:cancelSaveRequirementResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__cancelSaveRequirementResponse * SOAP_FMAC4 soap_get_ns1__cancelSaveRequirementResponse(struct soap*, struct ns1__cancelSaveRequirementResponse *, const char*, const char*);

#ifndef soap_read_ns1__cancelSaveRequirementResponse
#define soap_read_ns1__cancelSaveRequirementResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__cancelSaveRequirementResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__cancelSaveRequirementResponse * SOAP_FMAC2 soap_instantiate_ns1__cancelSaveRequirementResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__cancelSaveRequirementResponse * soap_new_ns1__cancelSaveRequirementResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__cancelSaveRequirementResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__cancelSaveRequirementResponse * soap_new_req_ns1__cancelSaveRequirementResponse(struct soap *soap, int result) { struct ns1__cancelSaveRequirementResponse *_p = soap_instantiate_ns1__cancelSaveRequirementResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveRequirementResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__cancelSaveRequirementResponse * soap_new_set_ns1__cancelSaveRequirementResponse(struct soap *soap, int result) { struct ns1__cancelSaveRequirementResponse *_p = soap_instantiate_ns1__cancelSaveRequirementResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveRequirementResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__cancelSaveRequirementResponse(struct soap *soap, struct ns1__cancelSaveRequirementResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__cancelSaveRequirementResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveRequirement
#define SOAP_TYPE_ns1__saveRequirement (720)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveRequirement(struct soap*, struct ns1__saveRequirement *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveRequirement(struct soap*, const struct ns1__saveRequirement *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveRequirement(struct soap*, const char*, int, const struct ns1__saveRequirement *, const char*);
SOAP_FMAC3 struct ns1__saveRequirement * SOAP_FMAC4 soap_in_ns1__saveRequirement(struct soap*, const char*, struct ns1__saveRequirement *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveRequirement(struct soap*, const struct ns1__saveRequirement *, const char*, const char*);

#ifndef soap_write_ns1__saveRequirement
#define soap_write_ns1__saveRequirement(soap, data) ( soap_begin(soap), soap_serialize_ns1__saveRequirement(soap, data), soap_begin_send(soap) || soap_put_ns1__saveRequirement(soap, data, "ns1:saveRequirement", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__saveRequirement * SOAP_FMAC4 soap_get_ns1__saveRequirement(struct soap*, struct ns1__saveRequirement *, const char*, const char*);

#ifndef soap_read_ns1__saveRequirement
#define soap_read_ns1__saveRequirement(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveRequirement(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__saveRequirement * SOAP_FMAC2 soap_instantiate_ns1__saveRequirement(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveRequirement * soap_new_ns1__saveRequirement(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveRequirement(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveRequirement * soap_new_req_ns1__saveRequirement(struct soap *soap, LONG64 cookie) { struct ns1__saveRequirement *_p = soap_instantiate_ns1__saveRequirement(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveRequirement(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__saveRequirement * soap_new_set_ns1__saveRequirement(struct soap *soap, LONG64 cookie, ns1__CRequirement *pRequirement) { struct ns1__saveRequirement *_p = soap_instantiate_ns1__saveRequirement(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveRequirement(soap, _p); _p->cookie = cookie; _p->pRequirement = pRequirement; } return _p; }

inline void soap_delete_ns1__saveRequirement(struct soap *soap, struct ns1__saveRequirement *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveRequirement(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveRequirementResponse
#define SOAP_TYPE_ns1__saveRequirementResponse (719)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveRequirementResponse(struct soap*, struct ns1__saveRequirementResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveRequirementResponse(struct soap*, const struct ns1__saveRequirementResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveRequirementResponse(struct soap*, const char*, int, const struct ns1__saveRequirementResponse *, const char*);
SOAP_FMAC3 struct ns1__saveRequirementResponse * SOAP_FMAC4 soap_in_ns1__saveRequirementResponse(struct soap*, const char*, struct ns1__saveRequirementResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveRequirementResponse(struct soap*, const struct ns1__saveRequirementResponse *, const char*, const char*);

#ifndef soap_write_ns1__saveRequirementResponse
#define soap_write_ns1__saveRequirementResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__saveRequirementResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__saveRequirementResponse(soap, data, "ns1:saveRequirementResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__saveRequirementResponse * SOAP_FMAC4 soap_get_ns1__saveRequirementResponse(struct soap*, struct ns1__saveRequirementResponse *, const char*, const char*);

#ifndef soap_read_ns1__saveRequirementResponse
#define soap_read_ns1__saveRequirementResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveRequirementResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__saveRequirementResponse * SOAP_FMAC2 soap_instantiate_ns1__saveRequirementResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveRequirementResponse * soap_new_ns1__saveRequirementResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveRequirementResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveRequirementResponse * soap_new_req_ns1__saveRequirementResponse(struct soap *soap, int result) { struct ns1__saveRequirementResponse *_p = soap_instantiate_ns1__saveRequirementResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveRequirementResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__saveRequirementResponse * soap_new_set_ns1__saveRequirementResponse(struct soap *soap, int result) { struct ns1__saveRequirementResponse *_p = soap_instantiate_ns1__saveRequirementResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveRequirementResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__saveRequirementResponse(struct soap *soap, struct ns1__saveRequirementResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveRequirementResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editRequirementByRecordID
#define SOAP_TYPE_ns1__editRequirementByRecordID (717)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editRequirementByRecordID(struct soap*, struct ns1__editRequirementByRecordID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editRequirementByRecordID(struct soap*, const struct ns1__editRequirementByRecordID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editRequirementByRecordID(struct soap*, const char*, int, const struct ns1__editRequirementByRecordID *, const char*);
SOAP_FMAC3 struct ns1__editRequirementByRecordID * SOAP_FMAC4 soap_in_ns1__editRequirementByRecordID(struct soap*, const char*, struct ns1__editRequirementByRecordID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editRequirementByRecordID(struct soap*, const struct ns1__editRequirementByRecordID *, const char*, const char*);

#ifndef soap_write_ns1__editRequirementByRecordID
#define soap_write_ns1__editRequirementByRecordID(soap, data) ( soap_begin(soap), soap_serialize_ns1__editRequirementByRecordID(soap, data), soap_begin_send(soap) || soap_put_ns1__editRequirementByRecordID(soap, data, "ns1:editRequirementByRecordID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editRequirementByRecordID * SOAP_FMAC4 soap_get_ns1__editRequirementByRecordID(struct soap*, struct ns1__editRequirementByRecordID *, const char*, const char*);

#ifndef soap_read_ns1__editRequirementByRecordID
#define soap_read_ns1__editRequirementByRecordID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editRequirementByRecordID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editRequirementByRecordID * SOAP_FMAC2 soap_instantiate_ns1__editRequirementByRecordID(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editRequirementByRecordID * soap_new_ns1__editRequirementByRecordID(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editRequirementByRecordID(soap, n, NULL, NULL, NULL); }

inline struct ns1__editRequirementByRecordID * soap_new_req_ns1__editRequirementByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments) { struct ns1__editRequirementByRecordID *_p = soap_instantiate_ns1__editRequirementByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editRequirementByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline struct ns1__editRequirementByRecordID * soap_new_set_ns1__editRequirementByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments) { struct ns1__editRequirementByRecordID *_p = soap_instantiate_ns1__editRequirementByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editRequirementByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline void soap_delete_ns1__editRequirementByRecordID(struct soap *soap, struct ns1__editRequirementByRecordID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editRequirementByRecordID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editRequirementByRecordIDResponse
#define SOAP_TYPE_ns1__editRequirementByRecordIDResponse (714)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editRequirementByRecordIDResponse(struct soap*, struct ns1__editRequirementByRecordIDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editRequirementByRecordIDResponse(struct soap*, const struct ns1__editRequirementByRecordIDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editRequirementByRecordIDResponse(struct soap*, const char*, int, const struct ns1__editRequirementByRecordIDResponse *, const char*);
SOAP_FMAC3 struct ns1__editRequirementByRecordIDResponse * SOAP_FMAC4 soap_in_ns1__editRequirementByRecordIDResponse(struct soap*, const char*, struct ns1__editRequirementByRecordIDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editRequirementByRecordIDResponse(struct soap*, const struct ns1__editRequirementByRecordIDResponse *, const char*, const char*);

#ifndef soap_write_ns1__editRequirementByRecordIDResponse
#define soap_write_ns1__editRequirementByRecordIDResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__editRequirementByRecordIDResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__editRequirementByRecordIDResponse(soap, data, "ns1:editRequirementByRecordIDResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editRequirementByRecordIDResponse * SOAP_FMAC4 soap_get_ns1__editRequirementByRecordIDResponse(struct soap*, struct ns1__editRequirementByRecordIDResponse *, const char*, const char*);

#ifndef soap_read_ns1__editRequirementByRecordIDResponse
#define soap_read_ns1__editRequirementByRecordIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editRequirementByRecordIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editRequirementByRecordIDResponse * SOAP_FMAC2 soap_instantiate_ns1__editRequirementByRecordIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editRequirementByRecordIDResponse * soap_new_ns1__editRequirementByRecordIDResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editRequirementByRecordIDResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__editRequirementByRecordIDResponse * soap_new_req_ns1__editRequirementByRecordIDResponse(struct soap *soap) { struct ns1__editRequirementByRecordIDResponse *_p = soap_instantiate_ns1__editRequirementByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editRequirementByRecordIDResponse(soap, _p); } return _p; }

inline struct ns1__editRequirementByRecordIDResponse * soap_new_set_ns1__editRequirementByRecordIDResponse(struct soap *soap, ns1__CRequirement *pRequirement) { struct ns1__editRequirementByRecordIDResponse *_p = soap_instantiate_ns1__editRequirementByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editRequirementByRecordIDResponse(soap, _p); _p->pRequirement = pRequirement; } return _p; }

inline void soap_delete_ns1__editRequirementByRecordIDResponse(struct soap *soap, struct ns1__editRequirementByRecordIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editRequirementByRecordIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editRequirement
#define SOAP_TYPE_ns1__editRequirement (713)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editRequirement(struct soap*, struct ns1__editRequirement *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editRequirement(struct soap*, const struct ns1__editRequirement *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editRequirement(struct soap*, const char*, int, const struct ns1__editRequirement *, const char*);
SOAP_FMAC3 struct ns1__editRequirement * SOAP_FMAC4 soap_in_ns1__editRequirement(struct soap*, const char*, struct ns1__editRequirement *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editRequirement(struct soap*, const struct ns1__editRequirement *, const char*, const char*);

#ifndef soap_write_ns1__editRequirement
#define soap_write_ns1__editRequirement(soap, data) ( soap_begin(soap), soap_serialize_ns1__editRequirement(soap, data), soap_begin_send(soap) || soap_put_ns1__editRequirement(soap, data, "ns1:editRequirement", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editRequirement * SOAP_FMAC4 soap_get_ns1__editRequirement(struct soap*, struct ns1__editRequirement *, const char*, const char*);

#ifndef soap_read_ns1__editRequirement
#define soap_read_ns1__editRequirement(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editRequirement(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editRequirement * SOAP_FMAC2 soap_instantiate_ns1__editRequirement(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editRequirement * soap_new_ns1__editRequirement(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editRequirement(soap, n, NULL, NULL, NULL); }

inline struct ns1__editRequirement * soap_new_req_ns1__editRequirement(struct soap *soap, LONG64 cookie, LONG64 requirementNumber, bool bDownloadAttachments) { struct ns1__editRequirement *_p = soap_instantiate_ns1__editRequirement(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editRequirement(soap, _p); _p->cookie = cookie; _p->requirementNumber = requirementNumber; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline struct ns1__editRequirement * soap_new_set_ns1__editRequirement(struct soap *soap, LONG64 cookie, LONG64 requirementNumber, char *summary, bool bDownloadAttachments) { struct ns1__editRequirement *_p = soap_instantiate_ns1__editRequirement(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editRequirement(soap, _p); _p->cookie = cookie; _p->requirementNumber = requirementNumber; _p->summary = summary; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline void soap_delete_ns1__editRequirement(struct soap *soap, struct ns1__editRequirement *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editRequirement(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editRequirementResponse
#define SOAP_TYPE_ns1__editRequirementResponse (710)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editRequirementResponse(struct soap*, struct ns1__editRequirementResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editRequirementResponse(struct soap*, const struct ns1__editRequirementResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editRequirementResponse(struct soap*, const char*, int, const struct ns1__editRequirementResponse *, const char*);
SOAP_FMAC3 struct ns1__editRequirementResponse * SOAP_FMAC4 soap_in_ns1__editRequirementResponse(struct soap*, const char*, struct ns1__editRequirementResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editRequirementResponse(struct soap*, const struct ns1__editRequirementResponse *, const char*, const char*);

#ifndef soap_write_ns1__editRequirementResponse
#define soap_write_ns1__editRequirementResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__editRequirementResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__editRequirementResponse(soap, data, "ns1:editRequirementResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editRequirementResponse * SOAP_FMAC4 soap_get_ns1__editRequirementResponse(struct soap*, struct ns1__editRequirementResponse *, const char*, const char*);

#ifndef soap_read_ns1__editRequirementResponse
#define soap_read_ns1__editRequirementResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editRequirementResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editRequirementResponse * SOAP_FMAC2 soap_instantiate_ns1__editRequirementResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editRequirementResponse * soap_new_ns1__editRequirementResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editRequirementResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__editRequirementResponse * soap_new_req_ns1__editRequirementResponse(struct soap *soap) { struct ns1__editRequirementResponse *_p = soap_instantiate_ns1__editRequirementResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editRequirementResponse(soap, _p); } return _p; }

inline struct ns1__editRequirementResponse * soap_new_set_ns1__editRequirementResponse(struct soap *soap, ns1__CRequirement *pRequirement) { struct ns1__editRequirementResponse *_p = soap_instantiate_ns1__editRequirementResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editRequirementResponse(soap, _p); _p->pRequirement = pRequirement; } return _p; }

inline void soap_delete_ns1__editRequirementResponse(struct soap *soap, struct ns1__editRequirementResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editRequirementResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteRequirementByRecordID
#define SOAP_TYPE_ns1__deleteRequirementByRecordID (709)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteRequirementByRecordID(struct soap*, struct ns1__deleteRequirementByRecordID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteRequirementByRecordID(struct soap*, const struct ns1__deleteRequirementByRecordID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteRequirementByRecordID(struct soap*, const char*, int, const struct ns1__deleteRequirementByRecordID *, const char*);
SOAP_FMAC3 struct ns1__deleteRequirementByRecordID * SOAP_FMAC4 soap_in_ns1__deleteRequirementByRecordID(struct soap*, const char*, struct ns1__deleteRequirementByRecordID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteRequirementByRecordID(struct soap*, const struct ns1__deleteRequirementByRecordID *, const char*, const char*);

#ifndef soap_write_ns1__deleteRequirementByRecordID
#define soap_write_ns1__deleteRequirementByRecordID(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteRequirementByRecordID(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteRequirementByRecordID(soap, data, "ns1:deleteRequirementByRecordID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteRequirementByRecordID * SOAP_FMAC4 soap_get_ns1__deleteRequirementByRecordID(struct soap*, struct ns1__deleteRequirementByRecordID *, const char*, const char*);

#ifndef soap_read_ns1__deleteRequirementByRecordID
#define soap_read_ns1__deleteRequirementByRecordID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteRequirementByRecordID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteRequirementByRecordID * SOAP_FMAC2 soap_instantiate_ns1__deleteRequirementByRecordID(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteRequirementByRecordID * soap_new_ns1__deleteRequirementByRecordID(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteRequirementByRecordID(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteRequirementByRecordID * soap_new_req_ns1__deleteRequirementByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__deleteRequirementByRecordID *_p = soap_instantiate_ns1__deleteRequirementByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteRequirementByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline struct ns1__deleteRequirementByRecordID * soap_new_set_ns1__deleteRequirementByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__deleteRequirementByRecordID *_p = soap_instantiate_ns1__deleteRequirementByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteRequirementByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__deleteRequirementByRecordID(struct soap *soap, struct ns1__deleteRequirementByRecordID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteRequirementByRecordID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteRequirementByRecordIDResponse
#define SOAP_TYPE_ns1__deleteRequirementByRecordIDResponse (708)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteRequirementByRecordIDResponse(struct soap*, struct ns1__deleteRequirementByRecordIDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteRequirementByRecordIDResponse(struct soap*, const struct ns1__deleteRequirementByRecordIDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteRequirementByRecordIDResponse(struct soap*, const char*, int, const struct ns1__deleteRequirementByRecordIDResponse *, const char*);
SOAP_FMAC3 struct ns1__deleteRequirementByRecordIDResponse * SOAP_FMAC4 soap_in_ns1__deleteRequirementByRecordIDResponse(struct soap*, const char*, struct ns1__deleteRequirementByRecordIDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteRequirementByRecordIDResponse(struct soap*, const struct ns1__deleteRequirementByRecordIDResponse *, const char*, const char*);

#ifndef soap_write_ns1__deleteRequirementByRecordIDResponse
#define soap_write_ns1__deleteRequirementByRecordIDResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteRequirementByRecordIDResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteRequirementByRecordIDResponse(soap, data, "ns1:deleteRequirementByRecordIDResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteRequirementByRecordIDResponse * SOAP_FMAC4 soap_get_ns1__deleteRequirementByRecordIDResponse(struct soap*, struct ns1__deleteRequirementByRecordIDResponse *, const char*, const char*);

#ifndef soap_read_ns1__deleteRequirementByRecordIDResponse
#define soap_read_ns1__deleteRequirementByRecordIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteRequirementByRecordIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteRequirementByRecordIDResponse * SOAP_FMAC2 soap_instantiate_ns1__deleteRequirementByRecordIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteRequirementByRecordIDResponse * soap_new_ns1__deleteRequirementByRecordIDResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteRequirementByRecordIDResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteRequirementByRecordIDResponse * soap_new_req_ns1__deleteRequirementByRecordIDResponse(struct soap *soap, int result) { struct ns1__deleteRequirementByRecordIDResponse *_p = soap_instantiate_ns1__deleteRequirementByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteRequirementByRecordIDResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__deleteRequirementByRecordIDResponse * soap_new_set_ns1__deleteRequirementByRecordIDResponse(struct soap *soap, int result) { struct ns1__deleteRequirementByRecordIDResponse *_p = soap_instantiate_ns1__deleteRequirementByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteRequirementByRecordIDResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__deleteRequirementByRecordIDResponse(struct soap *soap, struct ns1__deleteRequirementByRecordIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteRequirementByRecordIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteRequirement
#define SOAP_TYPE_ns1__deleteRequirement (706)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteRequirement(struct soap*, struct ns1__deleteRequirement *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteRequirement(struct soap*, const struct ns1__deleteRequirement *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteRequirement(struct soap*, const char*, int, const struct ns1__deleteRequirement *, const char*);
SOAP_FMAC3 struct ns1__deleteRequirement * SOAP_FMAC4 soap_in_ns1__deleteRequirement(struct soap*, const char*, struct ns1__deleteRequirement *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteRequirement(struct soap*, const struct ns1__deleteRequirement *, const char*, const char*);

#ifndef soap_write_ns1__deleteRequirement
#define soap_write_ns1__deleteRequirement(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteRequirement(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteRequirement(soap, data, "ns1:deleteRequirement", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteRequirement * SOAP_FMAC4 soap_get_ns1__deleteRequirement(struct soap*, struct ns1__deleteRequirement *, const char*, const char*);

#ifndef soap_read_ns1__deleteRequirement
#define soap_read_ns1__deleteRequirement(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteRequirement(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteRequirement * SOAP_FMAC2 soap_instantiate_ns1__deleteRequirement(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteRequirement * soap_new_ns1__deleteRequirement(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteRequirement(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteRequirement * soap_new_req_ns1__deleteRequirement(struct soap *soap, LONG64 cookie, LONG64 requirementNumber) { struct ns1__deleteRequirement *_p = soap_instantiate_ns1__deleteRequirement(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteRequirement(soap, _p); _p->cookie = cookie; _p->requirementNumber = requirementNumber; } return _p; }

inline struct ns1__deleteRequirement * soap_new_set_ns1__deleteRequirement(struct soap *soap, LONG64 cookie, LONG64 requirementNumber, char *summary) { struct ns1__deleteRequirement *_p = soap_instantiate_ns1__deleteRequirement(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteRequirement(soap, _p); _p->cookie = cookie; _p->requirementNumber = requirementNumber; _p->summary = summary; } return _p; }

inline void soap_delete_ns1__deleteRequirement(struct soap *soap, struct ns1__deleteRequirement *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteRequirement(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteRequirementResponse
#define SOAP_TYPE_ns1__deleteRequirementResponse (705)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteRequirementResponse(struct soap*, struct ns1__deleteRequirementResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteRequirementResponse(struct soap*, const struct ns1__deleteRequirementResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteRequirementResponse(struct soap*, const char*, int, const struct ns1__deleteRequirementResponse *, const char*);
SOAP_FMAC3 struct ns1__deleteRequirementResponse * SOAP_FMAC4 soap_in_ns1__deleteRequirementResponse(struct soap*, const char*, struct ns1__deleteRequirementResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteRequirementResponse(struct soap*, const struct ns1__deleteRequirementResponse *, const char*, const char*);

#ifndef soap_write_ns1__deleteRequirementResponse
#define soap_write_ns1__deleteRequirementResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteRequirementResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteRequirementResponse(soap, data, "ns1:deleteRequirementResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteRequirementResponse * SOAP_FMAC4 soap_get_ns1__deleteRequirementResponse(struct soap*, struct ns1__deleteRequirementResponse *, const char*, const char*);

#ifndef soap_read_ns1__deleteRequirementResponse
#define soap_read_ns1__deleteRequirementResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteRequirementResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteRequirementResponse * SOAP_FMAC2 soap_instantiate_ns1__deleteRequirementResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteRequirementResponse * soap_new_ns1__deleteRequirementResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteRequirementResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteRequirementResponse * soap_new_req_ns1__deleteRequirementResponse(struct soap *soap, int result) { struct ns1__deleteRequirementResponse *_p = soap_instantiate_ns1__deleteRequirementResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteRequirementResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__deleteRequirementResponse * soap_new_set_ns1__deleteRequirementResponse(struct soap *soap, int result) { struct ns1__deleteRequirementResponse *_p = soap_instantiate_ns1__deleteRequirementResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteRequirementResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__deleteRequirementResponse(struct soap *soap, struct ns1__deleteRequirementResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteRequirementResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__addRequirement
#define SOAP_TYPE_ns1__addRequirement (703)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addRequirement(struct soap*, struct ns1__addRequirement *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addRequirement(struct soap*, const struct ns1__addRequirement *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addRequirement(struct soap*, const char*, int, const struct ns1__addRequirement *, const char*);
SOAP_FMAC3 struct ns1__addRequirement * SOAP_FMAC4 soap_in_ns1__addRequirement(struct soap*, const char*, struct ns1__addRequirement *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addRequirement(struct soap*, const struct ns1__addRequirement *, const char*, const char*);

#ifndef soap_write_ns1__addRequirement
#define soap_write_ns1__addRequirement(soap, data) ( soap_begin(soap), soap_serialize_ns1__addRequirement(soap, data), soap_begin_send(soap) || soap_put_ns1__addRequirement(soap, data, "ns1:addRequirement", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__addRequirement * SOAP_FMAC4 soap_get_ns1__addRequirement(struct soap*, struct ns1__addRequirement *, const char*, const char*);

#ifndef soap_read_ns1__addRequirement
#define soap_read_ns1__addRequirement(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__addRequirement(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__addRequirement * SOAP_FMAC2 soap_instantiate_ns1__addRequirement(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__addRequirement * soap_new_ns1__addRequirement(struct soap *soap, int n = -1) { return soap_instantiate_ns1__addRequirement(soap, n, NULL, NULL, NULL); }

inline struct ns1__addRequirement * soap_new_req_ns1__addRequirement(struct soap *soap, LONG64 cookie) { struct ns1__addRequirement *_p = soap_instantiate_ns1__addRequirement(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addRequirement(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__addRequirement * soap_new_set_ns1__addRequirement(struct soap *soap, LONG64 cookie, ns1__CRequirement *pRequirement) { struct ns1__addRequirement *_p = soap_instantiate_ns1__addRequirement(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addRequirement(soap, _p); _p->cookie = cookie; _p->pRequirement = pRequirement; } return _p; }

inline void soap_delete_ns1__addRequirement(struct soap *soap, struct ns1__addRequirement *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__addRequirement(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__addRequirementResponse
#define SOAP_TYPE_ns1__addRequirementResponse (702)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addRequirementResponse(struct soap*, struct ns1__addRequirementResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addRequirementResponse(struct soap*, const struct ns1__addRequirementResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addRequirementResponse(struct soap*, const char*, int, const struct ns1__addRequirementResponse *, const char*);
SOAP_FMAC3 struct ns1__addRequirementResponse * SOAP_FMAC4 soap_in_ns1__addRequirementResponse(struct soap*, const char*, struct ns1__addRequirementResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addRequirementResponse(struct soap*, const struct ns1__addRequirementResponse *, const char*, const char*);

#ifndef soap_write_ns1__addRequirementResponse
#define soap_write_ns1__addRequirementResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__addRequirementResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__addRequirementResponse(soap, data, "ns1:addRequirementResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__addRequirementResponse * SOAP_FMAC4 soap_get_ns1__addRequirementResponse(struct soap*, struct ns1__addRequirementResponse *, const char*, const char*);

#ifndef soap_read_ns1__addRequirementResponse
#define soap_read_ns1__addRequirementResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__addRequirementResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__addRequirementResponse * SOAP_FMAC2 soap_instantiate_ns1__addRequirementResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__addRequirementResponse * soap_new_ns1__addRequirementResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__addRequirementResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__addRequirementResponse * soap_new_req_ns1__addRequirementResponse(struct soap *soap, LONG64 recordID) { struct ns1__addRequirementResponse *_p = soap_instantiate_ns1__addRequirementResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addRequirementResponse(soap, _p); _p->recordID = recordID; } return _p; }

inline struct ns1__addRequirementResponse * soap_new_set_ns1__addRequirementResponse(struct soap *soap, LONG64 recordID) { struct ns1__addRequirementResponse *_p = soap_instantiate_ns1__addRequirementResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addRequirementResponse(soap, _p); _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__addRequirementResponse(struct soap *soap, struct ns1__addRequirementResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__addRequirementResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getRequirementByRecordID
#define SOAP_TYPE_ns1__getRequirementByRecordID (700)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getRequirementByRecordID(struct soap*, struct ns1__getRequirementByRecordID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getRequirementByRecordID(struct soap*, const struct ns1__getRequirementByRecordID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getRequirementByRecordID(struct soap*, const char*, int, const struct ns1__getRequirementByRecordID *, const char*);
SOAP_FMAC3 struct ns1__getRequirementByRecordID * SOAP_FMAC4 soap_in_ns1__getRequirementByRecordID(struct soap*, const char*, struct ns1__getRequirementByRecordID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getRequirementByRecordID(struct soap*, const struct ns1__getRequirementByRecordID *, const char*, const char*);

#ifndef soap_write_ns1__getRequirementByRecordID
#define soap_write_ns1__getRequirementByRecordID(soap, data) ( soap_begin(soap), soap_serialize_ns1__getRequirementByRecordID(soap, data), soap_begin_send(soap) || soap_put_ns1__getRequirementByRecordID(soap, data, "ns1:getRequirementByRecordID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getRequirementByRecordID * SOAP_FMAC4 soap_get_ns1__getRequirementByRecordID(struct soap*, struct ns1__getRequirementByRecordID *, const char*, const char*);

#ifndef soap_read_ns1__getRequirementByRecordID
#define soap_read_ns1__getRequirementByRecordID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getRequirementByRecordID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getRequirementByRecordID * SOAP_FMAC2 soap_instantiate_ns1__getRequirementByRecordID(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getRequirementByRecordID * soap_new_ns1__getRequirementByRecordID(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getRequirementByRecordID(soap, n, NULL, NULL, NULL); }

inline struct ns1__getRequirementByRecordID * soap_new_req_ns1__getRequirementByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments) { struct ns1__getRequirementByRecordID *_p = soap_instantiate_ns1__getRequirementByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getRequirementByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline struct ns1__getRequirementByRecordID * soap_new_set_ns1__getRequirementByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments) { struct ns1__getRequirementByRecordID *_p = soap_instantiate_ns1__getRequirementByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getRequirementByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline void soap_delete_ns1__getRequirementByRecordID(struct soap *soap, struct ns1__getRequirementByRecordID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getRequirementByRecordID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getRequirementByRecordIDResponse
#define SOAP_TYPE_ns1__getRequirementByRecordIDResponse (697)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getRequirementByRecordIDResponse(struct soap*, struct ns1__getRequirementByRecordIDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getRequirementByRecordIDResponse(struct soap*, const struct ns1__getRequirementByRecordIDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getRequirementByRecordIDResponse(struct soap*, const char*, int, const struct ns1__getRequirementByRecordIDResponse *, const char*);
SOAP_FMAC3 struct ns1__getRequirementByRecordIDResponse * SOAP_FMAC4 soap_in_ns1__getRequirementByRecordIDResponse(struct soap*, const char*, struct ns1__getRequirementByRecordIDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getRequirementByRecordIDResponse(struct soap*, const struct ns1__getRequirementByRecordIDResponse *, const char*, const char*);

#ifndef soap_write_ns1__getRequirementByRecordIDResponse
#define soap_write_ns1__getRequirementByRecordIDResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getRequirementByRecordIDResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getRequirementByRecordIDResponse(soap, data, "ns1:getRequirementByRecordIDResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getRequirementByRecordIDResponse * SOAP_FMAC4 soap_get_ns1__getRequirementByRecordIDResponse(struct soap*, struct ns1__getRequirementByRecordIDResponse *, const char*, const char*);

#ifndef soap_read_ns1__getRequirementByRecordIDResponse
#define soap_read_ns1__getRequirementByRecordIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getRequirementByRecordIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getRequirementByRecordIDResponse * SOAP_FMAC2 soap_instantiate_ns1__getRequirementByRecordIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getRequirementByRecordIDResponse * soap_new_ns1__getRequirementByRecordIDResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getRequirementByRecordIDResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getRequirementByRecordIDResponse * soap_new_req_ns1__getRequirementByRecordIDResponse(struct soap *soap) { struct ns1__getRequirementByRecordIDResponse *_p = soap_instantiate_ns1__getRequirementByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getRequirementByRecordIDResponse(soap, _p); } return _p; }

inline struct ns1__getRequirementByRecordIDResponse * soap_new_set_ns1__getRequirementByRecordIDResponse(struct soap *soap, ns1__CRequirement *pRequirement) { struct ns1__getRequirementByRecordIDResponse *_p = soap_instantiate_ns1__getRequirementByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getRequirementByRecordIDResponse(soap, _p); _p->pRequirement = pRequirement; } return _p; }

inline void soap_delete_ns1__getRequirementByRecordIDResponse(struct soap *soap, struct ns1__getRequirementByRecordIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getRequirementByRecordIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getRequirement
#define SOAP_TYPE_ns1__getRequirement (696)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getRequirement(struct soap*, struct ns1__getRequirement *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getRequirement(struct soap*, const struct ns1__getRequirement *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getRequirement(struct soap*, const char*, int, const struct ns1__getRequirement *, const char*);
SOAP_FMAC3 struct ns1__getRequirement * SOAP_FMAC4 soap_in_ns1__getRequirement(struct soap*, const char*, struct ns1__getRequirement *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getRequirement(struct soap*, const struct ns1__getRequirement *, const char*, const char*);

#ifndef soap_write_ns1__getRequirement
#define soap_write_ns1__getRequirement(soap, data) ( soap_begin(soap), soap_serialize_ns1__getRequirement(soap, data), soap_begin_send(soap) || soap_put_ns1__getRequirement(soap, data, "ns1:getRequirement", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getRequirement * SOAP_FMAC4 soap_get_ns1__getRequirement(struct soap*, struct ns1__getRequirement *, const char*, const char*);

#ifndef soap_read_ns1__getRequirement
#define soap_read_ns1__getRequirement(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getRequirement(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getRequirement * SOAP_FMAC2 soap_instantiate_ns1__getRequirement(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getRequirement * soap_new_ns1__getRequirement(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getRequirement(soap, n, NULL, NULL, NULL); }

inline struct ns1__getRequirement * soap_new_req_ns1__getRequirement(struct soap *soap, LONG64 cookie, LONG64 requirementNumber, bool bDownloadAttachments) { struct ns1__getRequirement *_p = soap_instantiate_ns1__getRequirement(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getRequirement(soap, _p); _p->cookie = cookie; _p->requirementNumber = requirementNumber; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline struct ns1__getRequirement * soap_new_set_ns1__getRequirement(struct soap *soap, LONG64 cookie, LONG64 requirementNumber, char *summary, bool bDownloadAttachments) { struct ns1__getRequirement *_p = soap_instantiate_ns1__getRequirement(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getRequirement(soap, _p); _p->cookie = cookie; _p->requirementNumber = requirementNumber; _p->summary = summary; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline void soap_delete_ns1__getRequirement(struct soap *soap, struct ns1__getRequirement *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getRequirement(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getRequirementResponse
#define SOAP_TYPE_ns1__getRequirementResponse (692)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getRequirementResponse(struct soap*, struct ns1__getRequirementResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getRequirementResponse(struct soap*, const struct ns1__getRequirementResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getRequirementResponse(struct soap*, const char*, int, const struct ns1__getRequirementResponse *, const char*);
SOAP_FMAC3 struct ns1__getRequirementResponse * SOAP_FMAC4 soap_in_ns1__getRequirementResponse(struct soap*, const char*, struct ns1__getRequirementResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getRequirementResponse(struct soap*, const struct ns1__getRequirementResponse *, const char*, const char*);

#ifndef soap_write_ns1__getRequirementResponse
#define soap_write_ns1__getRequirementResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getRequirementResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getRequirementResponse(soap, data, "ns1:getRequirementResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getRequirementResponse * SOAP_FMAC4 soap_get_ns1__getRequirementResponse(struct soap*, struct ns1__getRequirementResponse *, const char*, const char*);

#ifndef soap_read_ns1__getRequirementResponse
#define soap_read_ns1__getRequirementResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getRequirementResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getRequirementResponse * SOAP_FMAC2 soap_instantiate_ns1__getRequirementResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getRequirementResponse * soap_new_ns1__getRequirementResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getRequirementResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getRequirementResponse * soap_new_req_ns1__getRequirementResponse(struct soap *soap) { struct ns1__getRequirementResponse *_p = soap_instantiate_ns1__getRequirementResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getRequirementResponse(soap, _p); } return _p; }

inline struct ns1__getRequirementResponse * soap_new_set_ns1__getRequirementResponse(struct soap *soap, ns1__CRequirement *pRequirement) { struct ns1__getRequirementResponse *_p = soap_instantiate_ns1__getRequirementResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getRequirementResponse(soap, _p); _p->pRequirement = pRequirement; } return _p; }

inline void soap_delete_ns1__getRequirementResponse(struct soap *soap, struct ns1__getRequirementResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getRequirementResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__cancelSaveFolderItemRank
#define SOAP_TYPE_ns1__cancelSaveFolderItemRank (691)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__cancelSaveFolderItemRank(struct soap*, struct ns1__cancelSaveFolderItemRank *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__cancelSaveFolderItemRank(struct soap*, const struct ns1__cancelSaveFolderItemRank *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__cancelSaveFolderItemRank(struct soap*, const char*, int, const struct ns1__cancelSaveFolderItemRank *, const char*);
SOAP_FMAC3 struct ns1__cancelSaveFolderItemRank * SOAP_FMAC4 soap_in_ns1__cancelSaveFolderItemRank(struct soap*, const char*, struct ns1__cancelSaveFolderItemRank *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__cancelSaveFolderItemRank(struct soap*, const struct ns1__cancelSaveFolderItemRank *, const char*, const char*);

#ifndef soap_write_ns1__cancelSaveFolderItemRank
#define soap_write_ns1__cancelSaveFolderItemRank(soap, data) ( soap_begin(soap), soap_serialize_ns1__cancelSaveFolderItemRank(soap, data), soap_begin_send(soap) || soap_put_ns1__cancelSaveFolderItemRank(soap, data, "ns1:cancelSaveFolderItemRank", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__cancelSaveFolderItemRank * SOAP_FMAC4 soap_get_ns1__cancelSaveFolderItemRank(struct soap*, struct ns1__cancelSaveFolderItemRank *, const char*, const char*);

#ifndef soap_read_ns1__cancelSaveFolderItemRank
#define soap_read_ns1__cancelSaveFolderItemRank(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__cancelSaveFolderItemRank(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__cancelSaveFolderItemRank * SOAP_FMAC2 soap_instantiate_ns1__cancelSaveFolderItemRank(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__cancelSaveFolderItemRank * soap_new_ns1__cancelSaveFolderItemRank(struct soap *soap, int n = -1) { return soap_instantiate_ns1__cancelSaveFolderItemRank(soap, n, NULL, NULL, NULL); }

inline struct ns1__cancelSaveFolderItemRank * soap_new_req_ns1__cancelSaveFolderItemRank(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__cancelSaveFolderItemRank *_p = soap_instantiate_ns1__cancelSaveFolderItemRank(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveFolderItemRank(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline struct ns1__cancelSaveFolderItemRank * soap_new_set_ns1__cancelSaveFolderItemRank(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__cancelSaveFolderItemRank *_p = soap_instantiate_ns1__cancelSaveFolderItemRank(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveFolderItemRank(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__cancelSaveFolderItemRank(struct soap *soap, struct ns1__cancelSaveFolderItemRank *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__cancelSaveFolderItemRank(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__cancelSaveFolderItemRankResponse
#define SOAP_TYPE_ns1__cancelSaveFolderItemRankResponse (690)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__cancelSaveFolderItemRankResponse(struct soap*, struct ns1__cancelSaveFolderItemRankResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__cancelSaveFolderItemRankResponse(struct soap*, const struct ns1__cancelSaveFolderItemRankResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__cancelSaveFolderItemRankResponse(struct soap*, const char*, int, const struct ns1__cancelSaveFolderItemRankResponse *, const char*);
SOAP_FMAC3 struct ns1__cancelSaveFolderItemRankResponse * SOAP_FMAC4 soap_in_ns1__cancelSaveFolderItemRankResponse(struct soap*, const char*, struct ns1__cancelSaveFolderItemRankResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__cancelSaveFolderItemRankResponse(struct soap*, const struct ns1__cancelSaveFolderItemRankResponse *, const char*, const char*);

#ifndef soap_write_ns1__cancelSaveFolderItemRankResponse
#define soap_write_ns1__cancelSaveFolderItemRankResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__cancelSaveFolderItemRankResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__cancelSaveFolderItemRankResponse(soap, data, "ns1:cancelSaveFolderItemRankResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__cancelSaveFolderItemRankResponse * SOAP_FMAC4 soap_get_ns1__cancelSaveFolderItemRankResponse(struct soap*, struct ns1__cancelSaveFolderItemRankResponse *, const char*, const char*);

#ifndef soap_read_ns1__cancelSaveFolderItemRankResponse
#define soap_read_ns1__cancelSaveFolderItemRankResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__cancelSaveFolderItemRankResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__cancelSaveFolderItemRankResponse * SOAP_FMAC2 soap_instantiate_ns1__cancelSaveFolderItemRankResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__cancelSaveFolderItemRankResponse * soap_new_ns1__cancelSaveFolderItemRankResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__cancelSaveFolderItemRankResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__cancelSaveFolderItemRankResponse * soap_new_req_ns1__cancelSaveFolderItemRankResponse(struct soap *soap, int result) { struct ns1__cancelSaveFolderItemRankResponse *_p = soap_instantiate_ns1__cancelSaveFolderItemRankResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveFolderItemRankResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__cancelSaveFolderItemRankResponse * soap_new_set_ns1__cancelSaveFolderItemRankResponse(struct soap *soap, int result) { struct ns1__cancelSaveFolderItemRankResponse *_p = soap_instantiate_ns1__cancelSaveFolderItemRankResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveFolderItemRankResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__cancelSaveFolderItemRankResponse(struct soap *soap, struct ns1__cancelSaveFolderItemRankResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__cancelSaveFolderItemRankResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveFolderItemRank
#define SOAP_TYPE_ns1__saveFolderItemRank (688)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveFolderItemRank(struct soap*, struct ns1__saveFolderItemRank *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveFolderItemRank(struct soap*, const struct ns1__saveFolderItemRank *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveFolderItemRank(struct soap*, const char*, int, const struct ns1__saveFolderItemRank *, const char*);
SOAP_FMAC3 struct ns1__saveFolderItemRank * SOAP_FMAC4 soap_in_ns1__saveFolderItemRank(struct soap*, const char*, struct ns1__saveFolderItemRank *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveFolderItemRank(struct soap*, const struct ns1__saveFolderItemRank *, const char*, const char*);

#ifndef soap_write_ns1__saveFolderItemRank
#define soap_write_ns1__saveFolderItemRank(soap, data) ( soap_begin(soap), soap_serialize_ns1__saveFolderItemRank(soap, data), soap_begin_send(soap) || soap_put_ns1__saveFolderItemRank(soap, data, "ns1:saveFolderItemRank", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__saveFolderItemRank * SOAP_FMAC4 soap_get_ns1__saveFolderItemRank(struct soap*, struct ns1__saveFolderItemRank *, const char*, const char*);

#ifndef soap_read_ns1__saveFolderItemRank
#define soap_read_ns1__saveFolderItemRank(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveFolderItemRank(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__saveFolderItemRank * SOAP_FMAC2 soap_instantiate_ns1__saveFolderItemRank(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveFolderItemRank * soap_new_ns1__saveFolderItemRank(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveFolderItemRank(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveFolderItemRank * soap_new_req_ns1__saveFolderItemRank(struct soap *soap, LONG64 cookie, LONG64 recordID, bool publicFolder) { struct ns1__saveFolderItemRank *_p = soap_instantiate_ns1__saveFolderItemRank(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveFolderItemRank(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->publicFolder = publicFolder; } return _p; }

inline struct ns1__saveFolderItemRank * soap_new_set_ns1__saveFolderItemRank(struct soap *soap, LONG64 cookie, LONG64 recordID, bool publicFolder, ArrayOfCFolderItem *folderItemList) { struct ns1__saveFolderItemRank *_p = soap_instantiate_ns1__saveFolderItemRank(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveFolderItemRank(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->publicFolder = publicFolder; _p->folderItemList = folderItemList; } return _p; }

inline void soap_delete_ns1__saveFolderItemRank(struct soap *soap, struct ns1__saveFolderItemRank *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveFolderItemRank(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveFolderItemRankResponse
#define SOAP_TYPE_ns1__saveFolderItemRankResponse (687)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveFolderItemRankResponse(struct soap*, struct ns1__saveFolderItemRankResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveFolderItemRankResponse(struct soap*, const struct ns1__saveFolderItemRankResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveFolderItemRankResponse(struct soap*, const char*, int, const struct ns1__saveFolderItemRankResponse *, const char*);
SOAP_FMAC3 struct ns1__saveFolderItemRankResponse * SOAP_FMAC4 soap_in_ns1__saveFolderItemRankResponse(struct soap*, const char*, struct ns1__saveFolderItemRankResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveFolderItemRankResponse(struct soap*, const struct ns1__saveFolderItemRankResponse *, const char*, const char*);

#ifndef soap_write_ns1__saveFolderItemRankResponse
#define soap_write_ns1__saveFolderItemRankResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__saveFolderItemRankResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__saveFolderItemRankResponse(soap, data, "ns1:saveFolderItemRankResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__saveFolderItemRankResponse * SOAP_FMAC4 soap_get_ns1__saveFolderItemRankResponse(struct soap*, struct ns1__saveFolderItemRankResponse *, const char*, const char*);

#ifndef soap_read_ns1__saveFolderItemRankResponse
#define soap_read_ns1__saveFolderItemRankResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveFolderItemRankResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__saveFolderItemRankResponse * SOAP_FMAC2 soap_instantiate_ns1__saveFolderItemRankResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveFolderItemRankResponse * soap_new_ns1__saveFolderItemRankResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveFolderItemRankResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveFolderItemRankResponse * soap_new_req_ns1__saveFolderItemRankResponse(struct soap *soap, int result) { struct ns1__saveFolderItemRankResponse *_p = soap_instantiate_ns1__saveFolderItemRankResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveFolderItemRankResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__saveFolderItemRankResponse * soap_new_set_ns1__saveFolderItemRankResponse(struct soap *soap, int result) { struct ns1__saveFolderItemRankResponse *_p = soap_instantiate_ns1__saveFolderItemRankResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveFolderItemRankResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__saveFolderItemRankResponse(struct soap *soap, struct ns1__saveFolderItemRankResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveFolderItemRankResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editFolderItemRank
#define SOAP_TYPE_ns1__editFolderItemRank (685)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editFolderItemRank(struct soap*, struct ns1__editFolderItemRank *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editFolderItemRank(struct soap*, const struct ns1__editFolderItemRank *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editFolderItemRank(struct soap*, const char*, int, const struct ns1__editFolderItemRank *, const char*);
SOAP_FMAC3 struct ns1__editFolderItemRank * SOAP_FMAC4 soap_in_ns1__editFolderItemRank(struct soap*, const char*, struct ns1__editFolderItemRank *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editFolderItemRank(struct soap*, const struct ns1__editFolderItemRank *, const char*, const char*);

#ifndef soap_write_ns1__editFolderItemRank
#define soap_write_ns1__editFolderItemRank(soap, data) ( soap_begin(soap), soap_serialize_ns1__editFolderItemRank(soap, data), soap_begin_send(soap) || soap_put_ns1__editFolderItemRank(soap, data, "ns1:editFolderItemRank", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editFolderItemRank * SOAP_FMAC4 soap_get_ns1__editFolderItemRank(struct soap*, struct ns1__editFolderItemRank *, const char*, const char*);

#ifndef soap_read_ns1__editFolderItemRank
#define soap_read_ns1__editFolderItemRank(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editFolderItemRank(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editFolderItemRank * SOAP_FMAC2 soap_instantiate_ns1__editFolderItemRank(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editFolderItemRank * soap_new_ns1__editFolderItemRank(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editFolderItemRank(soap, n, NULL, NULL, NULL); }

inline struct ns1__editFolderItemRank * soap_new_req_ns1__editFolderItemRank(struct soap *soap, LONG64 cookie, LONG64 recordID, bool publicFolder) { struct ns1__editFolderItemRank *_p = soap_instantiate_ns1__editFolderItemRank(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editFolderItemRank(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->publicFolder = publicFolder; } return _p; }

inline struct ns1__editFolderItemRank * soap_new_set_ns1__editFolderItemRank(struct soap *soap, LONG64 cookie, LONG64 recordID, bool publicFolder) { struct ns1__editFolderItemRank *_p = soap_instantiate_ns1__editFolderItemRank(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editFolderItemRank(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->publicFolder = publicFolder; } return _p; }

inline void soap_delete_ns1__editFolderItemRank(struct soap *soap, struct ns1__editFolderItemRank *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editFolderItemRank(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editFolderItemRankResponse
#define SOAP_TYPE_ns1__editFolderItemRankResponse (682)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editFolderItemRankResponse(struct soap*, struct ns1__editFolderItemRankResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editFolderItemRankResponse(struct soap*, const struct ns1__editFolderItemRankResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editFolderItemRankResponse(struct soap*, const char*, int, const struct ns1__editFolderItemRankResponse *, const char*);
SOAP_FMAC3 struct ns1__editFolderItemRankResponse * SOAP_FMAC4 soap_in_ns1__editFolderItemRankResponse(struct soap*, const char*, struct ns1__editFolderItemRankResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editFolderItemRankResponse(struct soap*, const struct ns1__editFolderItemRankResponse *, const char*, const char*);

#ifndef soap_write_ns1__editFolderItemRankResponse
#define soap_write_ns1__editFolderItemRankResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__editFolderItemRankResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__editFolderItemRankResponse(soap, data, "ns1:editFolderItemRankResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editFolderItemRankResponse * SOAP_FMAC4 soap_get_ns1__editFolderItemRankResponse(struct soap*, struct ns1__editFolderItemRankResponse *, const char*, const char*);

#ifndef soap_read_ns1__editFolderItemRankResponse
#define soap_read_ns1__editFolderItemRankResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editFolderItemRankResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editFolderItemRankResponse * SOAP_FMAC2 soap_instantiate_ns1__editFolderItemRankResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editFolderItemRankResponse * soap_new_ns1__editFolderItemRankResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editFolderItemRankResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__editFolderItemRankResponse * soap_new_req_ns1__editFolderItemRankResponse(struct soap *soap) { struct ns1__editFolderItemRankResponse *_p = soap_instantiate_ns1__editFolderItemRankResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editFolderItemRankResponse(soap, _p); } return _p; }

inline struct ns1__editFolderItemRankResponse * soap_new_set_ns1__editFolderItemRankResponse(struct soap *soap, ArrayOfCFolderItem *pEntityList) { struct ns1__editFolderItemRankResponse *_p = soap_instantiate_ns1__editFolderItemRankResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editFolderItemRankResponse(soap, _p); _p->pEntityList = pEntityList; } return _p; }

inline void soap_delete_ns1__editFolderItemRankResponse(struct soap *soap, struct ns1__editFolderItemRankResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editFolderItemRankResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getRootPrivateFolderPath
#define SOAP_TYPE_ns1__getRootPrivateFolderPath (681)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getRootPrivateFolderPath(struct soap*, struct ns1__getRootPrivateFolderPath *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getRootPrivateFolderPath(struct soap*, const struct ns1__getRootPrivateFolderPath *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getRootPrivateFolderPath(struct soap*, const char*, int, const struct ns1__getRootPrivateFolderPath *, const char*);
SOAP_FMAC3 struct ns1__getRootPrivateFolderPath * SOAP_FMAC4 soap_in_ns1__getRootPrivateFolderPath(struct soap*, const char*, struct ns1__getRootPrivateFolderPath *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getRootPrivateFolderPath(struct soap*, const struct ns1__getRootPrivateFolderPath *, const char*, const char*);

#ifndef soap_write_ns1__getRootPrivateFolderPath
#define soap_write_ns1__getRootPrivateFolderPath(soap, data) ( soap_begin(soap), soap_serialize_ns1__getRootPrivateFolderPath(soap, data), soap_begin_send(soap) || soap_put_ns1__getRootPrivateFolderPath(soap, data, "ns1:getRootPrivateFolderPath", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getRootPrivateFolderPath * SOAP_FMAC4 soap_get_ns1__getRootPrivateFolderPath(struct soap*, struct ns1__getRootPrivateFolderPath *, const char*, const char*);

#ifndef soap_read_ns1__getRootPrivateFolderPath
#define soap_read_ns1__getRootPrivateFolderPath(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getRootPrivateFolderPath(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getRootPrivateFolderPath * SOAP_FMAC2 soap_instantiate_ns1__getRootPrivateFolderPath(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getRootPrivateFolderPath * soap_new_ns1__getRootPrivateFolderPath(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getRootPrivateFolderPath(soap, n, NULL, NULL, NULL); }

inline struct ns1__getRootPrivateFolderPath * soap_new_req_ns1__getRootPrivateFolderPath(struct soap *soap, LONG64 cookie) { struct ns1__getRootPrivateFolderPath *_p = soap_instantiate_ns1__getRootPrivateFolderPath(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getRootPrivateFolderPath(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__getRootPrivateFolderPath * soap_new_set_ns1__getRootPrivateFolderPath(struct soap *soap, LONG64 cookie) { struct ns1__getRootPrivateFolderPath *_p = soap_instantiate_ns1__getRootPrivateFolderPath(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getRootPrivateFolderPath(soap, _p); _p->cookie = cookie; } return _p; }

inline void soap_delete_ns1__getRootPrivateFolderPath(struct soap *soap, struct ns1__getRootPrivateFolderPath *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getRootPrivateFolderPath(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getRootPrivateFolderPathResponse
#define SOAP_TYPE_ns1__getRootPrivateFolderPathResponse (680)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getRootPrivateFolderPathResponse(struct soap*, struct ns1__getRootPrivateFolderPathResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getRootPrivateFolderPathResponse(struct soap*, const struct ns1__getRootPrivateFolderPathResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getRootPrivateFolderPathResponse(struct soap*, const char*, int, const struct ns1__getRootPrivateFolderPathResponse *, const char*);
SOAP_FMAC3 struct ns1__getRootPrivateFolderPathResponse * SOAP_FMAC4 soap_in_ns1__getRootPrivateFolderPathResponse(struct soap*, const char*, struct ns1__getRootPrivateFolderPathResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getRootPrivateFolderPathResponse(struct soap*, const struct ns1__getRootPrivateFolderPathResponse *, const char*, const char*);

#ifndef soap_write_ns1__getRootPrivateFolderPathResponse
#define soap_write_ns1__getRootPrivateFolderPathResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getRootPrivateFolderPathResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getRootPrivateFolderPathResponse(soap, data, "ns1:getRootPrivateFolderPathResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getRootPrivateFolderPathResponse * SOAP_FMAC4 soap_get_ns1__getRootPrivateFolderPathResponse(struct soap*, struct ns1__getRootPrivateFolderPathResponse *, const char*, const char*);

#ifndef soap_read_ns1__getRootPrivateFolderPathResponse
#define soap_read_ns1__getRootPrivateFolderPathResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getRootPrivateFolderPathResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getRootPrivateFolderPathResponse * SOAP_FMAC2 soap_instantiate_ns1__getRootPrivateFolderPathResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getRootPrivateFolderPathResponse * soap_new_ns1__getRootPrivateFolderPathResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getRootPrivateFolderPathResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getRootPrivateFolderPathResponse * soap_new_req_ns1__getRootPrivateFolderPathResponse(struct soap *soap, char *strPrivatePath) { struct ns1__getRootPrivateFolderPathResponse *_p = soap_instantiate_ns1__getRootPrivateFolderPathResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getRootPrivateFolderPathResponse(soap, _p); _p->strPrivatePath = strPrivatePath; } return _p; }

inline struct ns1__getRootPrivateFolderPathResponse * soap_new_set_ns1__getRootPrivateFolderPathResponse(struct soap *soap, char *strPrivatePath) { struct ns1__getRootPrivateFolderPathResponse *_p = soap_instantiate_ns1__getRootPrivateFolderPathResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getRootPrivateFolderPathResponse(soap, _p); _p->strPrivatePath = strPrivatePath; } return _p; }

inline void soap_delete_ns1__getRootPrivateFolderPathResponse(struct soap *soap, struct ns1__getRootPrivateFolderPathResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getRootPrivateFolderPathResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getRootPublicFolderPath
#define SOAP_TYPE_ns1__getRootPublicFolderPath (678)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getRootPublicFolderPath(struct soap*, struct ns1__getRootPublicFolderPath *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getRootPublicFolderPath(struct soap*, const struct ns1__getRootPublicFolderPath *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getRootPublicFolderPath(struct soap*, const char*, int, const struct ns1__getRootPublicFolderPath *, const char*);
SOAP_FMAC3 struct ns1__getRootPublicFolderPath * SOAP_FMAC4 soap_in_ns1__getRootPublicFolderPath(struct soap*, const char*, struct ns1__getRootPublicFolderPath *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getRootPublicFolderPath(struct soap*, const struct ns1__getRootPublicFolderPath *, const char*, const char*);

#ifndef soap_write_ns1__getRootPublicFolderPath
#define soap_write_ns1__getRootPublicFolderPath(soap, data) ( soap_begin(soap), soap_serialize_ns1__getRootPublicFolderPath(soap, data), soap_begin_send(soap) || soap_put_ns1__getRootPublicFolderPath(soap, data, "ns1:getRootPublicFolderPath", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getRootPublicFolderPath * SOAP_FMAC4 soap_get_ns1__getRootPublicFolderPath(struct soap*, struct ns1__getRootPublicFolderPath *, const char*, const char*);

#ifndef soap_read_ns1__getRootPublicFolderPath
#define soap_read_ns1__getRootPublicFolderPath(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getRootPublicFolderPath(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getRootPublicFolderPath * SOAP_FMAC2 soap_instantiate_ns1__getRootPublicFolderPath(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getRootPublicFolderPath * soap_new_ns1__getRootPublicFolderPath(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getRootPublicFolderPath(soap, n, NULL, NULL, NULL); }

inline struct ns1__getRootPublicFolderPath * soap_new_req_ns1__getRootPublicFolderPath(struct soap *soap, LONG64 cookie) { struct ns1__getRootPublicFolderPath *_p = soap_instantiate_ns1__getRootPublicFolderPath(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getRootPublicFolderPath(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__getRootPublicFolderPath * soap_new_set_ns1__getRootPublicFolderPath(struct soap *soap, LONG64 cookie) { struct ns1__getRootPublicFolderPath *_p = soap_instantiate_ns1__getRootPublicFolderPath(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getRootPublicFolderPath(soap, _p); _p->cookie = cookie; } return _p; }

inline void soap_delete_ns1__getRootPublicFolderPath(struct soap *soap, struct ns1__getRootPublicFolderPath *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getRootPublicFolderPath(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getRootPublicFolderPathResponse
#define SOAP_TYPE_ns1__getRootPublicFolderPathResponse (677)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getRootPublicFolderPathResponse(struct soap*, struct ns1__getRootPublicFolderPathResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getRootPublicFolderPathResponse(struct soap*, const struct ns1__getRootPublicFolderPathResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getRootPublicFolderPathResponse(struct soap*, const char*, int, const struct ns1__getRootPublicFolderPathResponse *, const char*);
SOAP_FMAC3 struct ns1__getRootPublicFolderPathResponse * SOAP_FMAC4 soap_in_ns1__getRootPublicFolderPathResponse(struct soap*, const char*, struct ns1__getRootPublicFolderPathResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getRootPublicFolderPathResponse(struct soap*, const struct ns1__getRootPublicFolderPathResponse *, const char*, const char*);

#ifndef soap_write_ns1__getRootPublicFolderPathResponse
#define soap_write_ns1__getRootPublicFolderPathResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getRootPublicFolderPathResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getRootPublicFolderPathResponse(soap, data, "ns1:getRootPublicFolderPathResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getRootPublicFolderPathResponse * SOAP_FMAC4 soap_get_ns1__getRootPublicFolderPathResponse(struct soap*, struct ns1__getRootPublicFolderPathResponse *, const char*, const char*);

#ifndef soap_read_ns1__getRootPublicFolderPathResponse
#define soap_read_ns1__getRootPublicFolderPathResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getRootPublicFolderPathResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getRootPublicFolderPathResponse * SOAP_FMAC2 soap_instantiate_ns1__getRootPublicFolderPathResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getRootPublicFolderPathResponse * soap_new_ns1__getRootPublicFolderPathResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getRootPublicFolderPathResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getRootPublicFolderPathResponse * soap_new_req_ns1__getRootPublicFolderPathResponse(struct soap *soap, char *strPublicPath) { struct ns1__getRootPublicFolderPathResponse *_p = soap_instantiate_ns1__getRootPublicFolderPathResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getRootPublicFolderPathResponse(soap, _p); _p->strPublicPath = strPublicPath; } return _p; }

inline struct ns1__getRootPublicFolderPathResponse * soap_new_set_ns1__getRootPublicFolderPathResponse(struct soap *soap, char *strPublicPath) { struct ns1__getRootPublicFolderPathResponse *_p = soap_instantiate_ns1__getRootPublicFolderPathResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getRootPublicFolderPathResponse(soap, _p); _p->strPublicPath = strPublicPath; } return _p; }

inline void soap_delete_ns1__getRootPublicFolderPathResponse(struct soap *soap, struct ns1__getRootPublicFolderPathResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getRootPublicFolderPathResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getFolderPathSeparator
#define SOAP_TYPE_ns1__getFolderPathSeparator (674)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getFolderPathSeparator(struct soap*, struct ns1__getFolderPathSeparator *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getFolderPathSeparator(struct soap*, const struct ns1__getFolderPathSeparator *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getFolderPathSeparator(struct soap*, const char*, int, const struct ns1__getFolderPathSeparator *, const char*);
SOAP_FMAC3 struct ns1__getFolderPathSeparator * SOAP_FMAC4 soap_in_ns1__getFolderPathSeparator(struct soap*, const char*, struct ns1__getFolderPathSeparator *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getFolderPathSeparator(struct soap*, const struct ns1__getFolderPathSeparator *, const char*, const char*);

#ifndef soap_write_ns1__getFolderPathSeparator
#define soap_write_ns1__getFolderPathSeparator(soap, data) ( soap_begin(soap), soap_serialize_ns1__getFolderPathSeparator(soap, data), soap_begin_send(soap) || soap_put_ns1__getFolderPathSeparator(soap, data, "ns1:getFolderPathSeparator", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getFolderPathSeparator * SOAP_FMAC4 soap_get_ns1__getFolderPathSeparator(struct soap*, struct ns1__getFolderPathSeparator *, const char*, const char*);

#ifndef soap_read_ns1__getFolderPathSeparator
#define soap_read_ns1__getFolderPathSeparator(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getFolderPathSeparator(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getFolderPathSeparator * SOAP_FMAC2 soap_instantiate_ns1__getFolderPathSeparator(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getFolderPathSeparator * soap_new_ns1__getFolderPathSeparator(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getFolderPathSeparator(soap, n, NULL, NULL, NULL); }

inline struct ns1__getFolderPathSeparator * soap_new_req_ns1__getFolderPathSeparator(struct soap *soap, LONG64 cookie) { struct ns1__getFolderPathSeparator *_p = soap_instantiate_ns1__getFolderPathSeparator(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFolderPathSeparator(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__getFolderPathSeparator * soap_new_set_ns1__getFolderPathSeparator(struct soap *soap, LONG64 cookie) { struct ns1__getFolderPathSeparator *_p = soap_instantiate_ns1__getFolderPathSeparator(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFolderPathSeparator(soap, _p); _p->cookie = cookie; } return _p; }

inline void soap_delete_ns1__getFolderPathSeparator(struct soap *soap, struct ns1__getFolderPathSeparator *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getFolderPathSeparator(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getFolderPathSeparatorResponse
#define SOAP_TYPE_ns1__getFolderPathSeparatorResponse (673)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getFolderPathSeparatorResponse(struct soap*, struct ns1__getFolderPathSeparatorResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getFolderPathSeparatorResponse(struct soap*, const struct ns1__getFolderPathSeparatorResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getFolderPathSeparatorResponse(struct soap*, const char*, int, const struct ns1__getFolderPathSeparatorResponse *, const char*);
SOAP_FMAC3 struct ns1__getFolderPathSeparatorResponse * SOAP_FMAC4 soap_in_ns1__getFolderPathSeparatorResponse(struct soap*, const char*, struct ns1__getFolderPathSeparatorResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getFolderPathSeparatorResponse(struct soap*, const struct ns1__getFolderPathSeparatorResponse *, const char*, const char*);

#ifndef soap_write_ns1__getFolderPathSeparatorResponse
#define soap_write_ns1__getFolderPathSeparatorResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getFolderPathSeparatorResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getFolderPathSeparatorResponse(soap, data, "ns1:getFolderPathSeparatorResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getFolderPathSeparatorResponse * SOAP_FMAC4 soap_get_ns1__getFolderPathSeparatorResponse(struct soap*, struct ns1__getFolderPathSeparatorResponse *, const char*, const char*);

#ifndef soap_read_ns1__getFolderPathSeparatorResponse
#define soap_read_ns1__getFolderPathSeparatorResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getFolderPathSeparatorResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getFolderPathSeparatorResponse * SOAP_FMAC2 soap_instantiate_ns1__getFolderPathSeparatorResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getFolderPathSeparatorResponse * soap_new_ns1__getFolderPathSeparatorResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getFolderPathSeparatorResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getFolderPathSeparatorResponse * soap_new_req_ns1__getFolderPathSeparatorResponse(struct soap *soap, char separator) { struct ns1__getFolderPathSeparatorResponse *_p = soap_instantiate_ns1__getFolderPathSeparatorResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFolderPathSeparatorResponse(soap, _p); _p->separator = separator; } return _p; }

inline struct ns1__getFolderPathSeparatorResponse * soap_new_set_ns1__getFolderPathSeparatorResponse(struct soap *soap, char separator) { struct ns1__getFolderPathSeparatorResponse *_p = soap_instantiate_ns1__getFolderPathSeparatorResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFolderPathSeparatorResponse(soap, _p); _p->separator = separator; } return _p; }

inline void soap_delete_ns1__getFolderPathSeparatorResponse(struct soap *soap, struct ns1__getFolderPathSeparatorResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getFolderPathSeparatorResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getFolderListForEntityByRecordID
#define SOAP_TYPE_ns1__getFolderListForEntityByRecordID (670)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getFolderListForEntityByRecordID(struct soap*, struct ns1__getFolderListForEntityByRecordID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getFolderListForEntityByRecordID(struct soap*, const struct ns1__getFolderListForEntityByRecordID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getFolderListForEntityByRecordID(struct soap*, const char*, int, const struct ns1__getFolderListForEntityByRecordID *, const char*);
SOAP_FMAC3 struct ns1__getFolderListForEntityByRecordID * SOAP_FMAC4 soap_in_ns1__getFolderListForEntityByRecordID(struct soap*, const char*, struct ns1__getFolderListForEntityByRecordID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getFolderListForEntityByRecordID(struct soap*, const struct ns1__getFolderListForEntityByRecordID *, const char*, const char*);

#ifndef soap_write_ns1__getFolderListForEntityByRecordID
#define soap_write_ns1__getFolderListForEntityByRecordID(soap, data) ( soap_begin(soap), soap_serialize_ns1__getFolderListForEntityByRecordID(soap, data), soap_begin_send(soap) || soap_put_ns1__getFolderListForEntityByRecordID(soap, data, "ns1:getFolderListForEntityByRecordID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getFolderListForEntityByRecordID * SOAP_FMAC4 soap_get_ns1__getFolderListForEntityByRecordID(struct soap*, struct ns1__getFolderListForEntityByRecordID *, const char*, const char*);

#ifndef soap_read_ns1__getFolderListForEntityByRecordID
#define soap_read_ns1__getFolderListForEntityByRecordID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getFolderListForEntityByRecordID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getFolderListForEntityByRecordID * SOAP_FMAC2 soap_instantiate_ns1__getFolderListForEntityByRecordID(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getFolderListForEntityByRecordID * soap_new_ns1__getFolderListForEntityByRecordID(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getFolderListForEntityByRecordID(soap, n, NULL, NULL, NULL); }

inline struct ns1__getFolderListForEntityByRecordID * soap_new_req_ns1__getFolderListForEntityByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__getFolderListForEntityByRecordID *_p = soap_instantiate_ns1__getFolderListForEntityByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFolderListForEntityByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline struct ns1__getFolderListForEntityByRecordID * soap_new_set_ns1__getFolderListForEntityByRecordID(struct soap *soap, LONG64 cookie, char *tablename, LONG64 recordID) { struct ns1__getFolderListForEntityByRecordID *_p = soap_instantiate_ns1__getFolderListForEntityByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFolderListForEntityByRecordID(soap, _p); _p->cookie = cookie; _p->tablename = tablename; _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__getFolderListForEntityByRecordID(struct soap *soap, struct ns1__getFolderListForEntityByRecordID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getFolderListForEntityByRecordID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getFolderListForEntityByRecordIDResponse
#define SOAP_TYPE_ns1__getFolderListForEntityByRecordIDResponse (666)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getFolderListForEntityByRecordIDResponse(struct soap*, struct ns1__getFolderListForEntityByRecordIDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getFolderListForEntityByRecordIDResponse(struct soap*, const struct ns1__getFolderListForEntityByRecordIDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getFolderListForEntityByRecordIDResponse(struct soap*, const char*, int, const struct ns1__getFolderListForEntityByRecordIDResponse *, const char*);
SOAP_FMAC3 struct ns1__getFolderListForEntityByRecordIDResponse * SOAP_FMAC4 soap_in_ns1__getFolderListForEntityByRecordIDResponse(struct soap*, const char*, struct ns1__getFolderListForEntityByRecordIDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getFolderListForEntityByRecordIDResponse(struct soap*, const struct ns1__getFolderListForEntityByRecordIDResponse *, const char*, const char*);

#ifndef soap_write_ns1__getFolderListForEntityByRecordIDResponse
#define soap_write_ns1__getFolderListForEntityByRecordIDResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getFolderListForEntityByRecordIDResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getFolderListForEntityByRecordIDResponse(soap, data, "ns1:getFolderListForEntityByRecordIDResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getFolderListForEntityByRecordIDResponse * SOAP_FMAC4 soap_get_ns1__getFolderListForEntityByRecordIDResponse(struct soap*, struct ns1__getFolderListForEntityByRecordIDResponse *, const char*, const char*);

#ifndef soap_read_ns1__getFolderListForEntityByRecordIDResponse
#define soap_read_ns1__getFolderListForEntityByRecordIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getFolderListForEntityByRecordIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getFolderListForEntityByRecordIDResponse * SOAP_FMAC2 soap_instantiate_ns1__getFolderListForEntityByRecordIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getFolderListForEntityByRecordIDResponse * soap_new_ns1__getFolderListForEntityByRecordIDResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getFolderListForEntityByRecordIDResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getFolderListForEntityByRecordIDResponse * soap_new_req_ns1__getFolderListForEntityByRecordIDResponse(struct soap *soap) { struct ns1__getFolderListForEntityByRecordIDResponse *_p = soap_instantiate_ns1__getFolderListForEntityByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFolderListForEntityByRecordIDResponse(soap, _p); } return _p; }

inline struct ns1__getFolderListForEntityByRecordIDResponse * soap_new_set_ns1__getFolderListForEntityByRecordIDResponse(struct soap *soap, ArrayOfCFolder *pFolderList) { struct ns1__getFolderListForEntityByRecordIDResponse *_p = soap_instantiate_ns1__getFolderListForEntityByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFolderListForEntityByRecordIDResponse(soap, _p); _p->pFolderList = pFolderList; } return _p; }

inline void soap_delete_ns1__getFolderListForEntityByRecordIDResponse(struct soap *soap, struct ns1__getFolderListForEntityByRecordIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getFolderListForEntityByRecordIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getEntityListForFolderByRecordID
#define SOAP_TYPE_ns1__getEntityListForFolderByRecordID (665)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getEntityListForFolderByRecordID(struct soap*, struct ns1__getEntityListForFolderByRecordID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getEntityListForFolderByRecordID(struct soap*, const struct ns1__getEntityListForFolderByRecordID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getEntityListForFolderByRecordID(struct soap*, const char*, int, const struct ns1__getEntityListForFolderByRecordID *, const char*);
SOAP_FMAC3 struct ns1__getEntityListForFolderByRecordID * SOAP_FMAC4 soap_in_ns1__getEntityListForFolderByRecordID(struct soap*, const char*, struct ns1__getEntityListForFolderByRecordID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getEntityListForFolderByRecordID(struct soap*, const struct ns1__getEntityListForFolderByRecordID *, const char*, const char*);

#ifndef soap_write_ns1__getEntityListForFolderByRecordID
#define soap_write_ns1__getEntityListForFolderByRecordID(soap, data) ( soap_begin(soap), soap_serialize_ns1__getEntityListForFolderByRecordID(soap, data), soap_begin_send(soap) || soap_put_ns1__getEntityListForFolderByRecordID(soap, data, "ns1:getEntityListForFolderByRecordID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getEntityListForFolderByRecordID * SOAP_FMAC4 soap_get_ns1__getEntityListForFolderByRecordID(struct soap*, struct ns1__getEntityListForFolderByRecordID *, const char*, const char*);

#ifndef soap_read_ns1__getEntityListForFolderByRecordID
#define soap_read_ns1__getEntityListForFolderByRecordID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getEntityListForFolderByRecordID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getEntityListForFolderByRecordID * SOAP_FMAC2 soap_instantiate_ns1__getEntityListForFolderByRecordID(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getEntityListForFolderByRecordID * soap_new_ns1__getEntityListForFolderByRecordID(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getEntityListForFolderByRecordID(soap, n, NULL, NULL, NULL); }

inline struct ns1__getEntityListForFolderByRecordID * soap_new_req_ns1__getEntityListForFolderByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID, bool publicFolder) { struct ns1__getEntityListForFolderByRecordID *_p = soap_instantiate_ns1__getEntityListForFolderByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getEntityListForFolderByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->publicFolder = publicFolder; } return _p; }

inline struct ns1__getEntityListForFolderByRecordID * soap_new_set_ns1__getEntityListForFolderByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID, bool publicFolder) { struct ns1__getEntityListForFolderByRecordID *_p = soap_instantiate_ns1__getEntityListForFolderByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getEntityListForFolderByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->publicFolder = publicFolder; } return _p; }

inline void soap_delete_ns1__getEntityListForFolderByRecordID(struct soap *soap, struct ns1__getEntityListForFolderByRecordID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getEntityListForFolderByRecordID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getEntityListForFolderByRecordIDResponse
#define SOAP_TYPE_ns1__getEntityListForFolderByRecordIDResponse (661)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getEntityListForFolderByRecordIDResponse(struct soap*, struct ns1__getEntityListForFolderByRecordIDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getEntityListForFolderByRecordIDResponse(struct soap*, const struct ns1__getEntityListForFolderByRecordIDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getEntityListForFolderByRecordIDResponse(struct soap*, const char*, int, const struct ns1__getEntityListForFolderByRecordIDResponse *, const char*);
SOAP_FMAC3 struct ns1__getEntityListForFolderByRecordIDResponse * SOAP_FMAC4 soap_in_ns1__getEntityListForFolderByRecordIDResponse(struct soap*, const char*, struct ns1__getEntityListForFolderByRecordIDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getEntityListForFolderByRecordIDResponse(struct soap*, const struct ns1__getEntityListForFolderByRecordIDResponse *, const char*, const char*);

#ifndef soap_write_ns1__getEntityListForFolderByRecordIDResponse
#define soap_write_ns1__getEntityListForFolderByRecordIDResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getEntityListForFolderByRecordIDResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getEntityListForFolderByRecordIDResponse(soap, data, "ns1:getEntityListForFolderByRecordIDResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getEntityListForFolderByRecordIDResponse * SOAP_FMAC4 soap_get_ns1__getEntityListForFolderByRecordIDResponse(struct soap*, struct ns1__getEntityListForFolderByRecordIDResponse *, const char*, const char*);

#ifndef soap_read_ns1__getEntityListForFolderByRecordIDResponse
#define soap_read_ns1__getEntityListForFolderByRecordIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getEntityListForFolderByRecordIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getEntityListForFolderByRecordIDResponse * SOAP_FMAC2 soap_instantiate_ns1__getEntityListForFolderByRecordIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getEntityListForFolderByRecordIDResponse * soap_new_ns1__getEntityListForFolderByRecordIDResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getEntityListForFolderByRecordIDResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getEntityListForFolderByRecordIDResponse * soap_new_req_ns1__getEntityListForFolderByRecordIDResponse(struct soap *soap) { struct ns1__getEntityListForFolderByRecordIDResponse *_p = soap_instantiate_ns1__getEntityListForFolderByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getEntityListForFolderByRecordIDResponse(soap, _p); } return _p; }

inline struct ns1__getEntityListForFolderByRecordIDResponse * soap_new_set_ns1__getEntityListForFolderByRecordIDResponse(struct soap *soap, ArrayOfCFolderItem *pEntityList) { struct ns1__getEntityListForFolderByRecordIDResponse *_p = soap_instantiate_ns1__getEntityListForFolderByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getEntityListForFolderByRecordIDResponse(soap, _p); _p->pEntityList = pEntityList; } return _p; }

inline void soap_delete_ns1__getEntityListForFolderByRecordIDResponse(struct soap *soap, struct ns1__getEntityListForFolderByRecordIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getEntityListForFolderByRecordIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__removeEntityFromFolderByRecordID
#define SOAP_TYPE_ns1__removeEntityFromFolderByRecordID (660)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__removeEntityFromFolderByRecordID(struct soap*, struct ns1__removeEntityFromFolderByRecordID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__removeEntityFromFolderByRecordID(struct soap*, const struct ns1__removeEntityFromFolderByRecordID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__removeEntityFromFolderByRecordID(struct soap*, const char*, int, const struct ns1__removeEntityFromFolderByRecordID *, const char*);
SOAP_FMAC3 struct ns1__removeEntityFromFolderByRecordID * SOAP_FMAC4 soap_in_ns1__removeEntityFromFolderByRecordID(struct soap*, const char*, struct ns1__removeEntityFromFolderByRecordID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__removeEntityFromFolderByRecordID(struct soap*, const struct ns1__removeEntityFromFolderByRecordID *, const char*, const char*);

#ifndef soap_write_ns1__removeEntityFromFolderByRecordID
#define soap_write_ns1__removeEntityFromFolderByRecordID(soap, data) ( soap_begin(soap), soap_serialize_ns1__removeEntityFromFolderByRecordID(soap, data), soap_begin_send(soap) || soap_put_ns1__removeEntityFromFolderByRecordID(soap, data, "ns1:removeEntityFromFolderByRecordID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__removeEntityFromFolderByRecordID * SOAP_FMAC4 soap_get_ns1__removeEntityFromFolderByRecordID(struct soap*, struct ns1__removeEntityFromFolderByRecordID *, const char*, const char*);

#ifndef soap_read_ns1__removeEntityFromFolderByRecordID
#define soap_read_ns1__removeEntityFromFolderByRecordID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__removeEntityFromFolderByRecordID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__removeEntityFromFolderByRecordID * SOAP_FMAC2 soap_instantiate_ns1__removeEntityFromFolderByRecordID(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__removeEntityFromFolderByRecordID * soap_new_ns1__removeEntityFromFolderByRecordID(struct soap *soap, int n = -1) { return soap_instantiate_ns1__removeEntityFromFolderByRecordID(soap, n, NULL, NULL, NULL); }

inline struct ns1__removeEntityFromFolderByRecordID * soap_new_req_ns1__removeEntityFromFolderByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID, bool publicFolder) { struct ns1__removeEntityFromFolderByRecordID *_p = soap_instantiate_ns1__removeEntityFromFolderByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__removeEntityFromFolderByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->publicFolder = publicFolder; } return _p; }

inline struct ns1__removeEntityFromFolderByRecordID * soap_new_set_ns1__removeEntityFromFolderByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID, bool publicFolder, ns1__CFolderItem *entity) { struct ns1__removeEntityFromFolderByRecordID *_p = soap_instantiate_ns1__removeEntityFromFolderByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__removeEntityFromFolderByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->publicFolder = publicFolder; _p->entity = entity; } return _p; }

inline void soap_delete_ns1__removeEntityFromFolderByRecordID(struct soap *soap, struct ns1__removeEntityFromFolderByRecordID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__removeEntityFromFolderByRecordID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__removeEntityFromFolderByRecordIDResponse
#define SOAP_TYPE_ns1__removeEntityFromFolderByRecordIDResponse (659)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__removeEntityFromFolderByRecordIDResponse(struct soap*, struct ns1__removeEntityFromFolderByRecordIDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__removeEntityFromFolderByRecordIDResponse(struct soap*, const struct ns1__removeEntityFromFolderByRecordIDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__removeEntityFromFolderByRecordIDResponse(struct soap*, const char*, int, const struct ns1__removeEntityFromFolderByRecordIDResponse *, const char*);
SOAP_FMAC3 struct ns1__removeEntityFromFolderByRecordIDResponse * SOAP_FMAC4 soap_in_ns1__removeEntityFromFolderByRecordIDResponse(struct soap*, const char*, struct ns1__removeEntityFromFolderByRecordIDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__removeEntityFromFolderByRecordIDResponse(struct soap*, const struct ns1__removeEntityFromFolderByRecordIDResponse *, const char*, const char*);

#ifndef soap_write_ns1__removeEntityFromFolderByRecordIDResponse
#define soap_write_ns1__removeEntityFromFolderByRecordIDResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__removeEntityFromFolderByRecordIDResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__removeEntityFromFolderByRecordIDResponse(soap, data, "ns1:removeEntityFromFolderByRecordIDResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__removeEntityFromFolderByRecordIDResponse * SOAP_FMAC4 soap_get_ns1__removeEntityFromFolderByRecordIDResponse(struct soap*, struct ns1__removeEntityFromFolderByRecordIDResponse *, const char*, const char*);

#ifndef soap_read_ns1__removeEntityFromFolderByRecordIDResponse
#define soap_read_ns1__removeEntityFromFolderByRecordIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__removeEntityFromFolderByRecordIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__removeEntityFromFolderByRecordIDResponse * SOAP_FMAC2 soap_instantiate_ns1__removeEntityFromFolderByRecordIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__removeEntityFromFolderByRecordIDResponse * soap_new_ns1__removeEntityFromFolderByRecordIDResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__removeEntityFromFolderByRecordIDResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__removeEntityFromFolderByRecordIDResponse * soap_new_req_ns1__removeEntityFromFolderByRecordIDResponse(struct soap *soap, int result) { struct ns1__removeEntityFromFolderByRecordIDResponse *_p = soap_instantiate_ns1__removeEntityFromFolderByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__removeEntityFromFolderByRecordIDResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__removeEntityFromFolderByRecordIDResponse * soap_new_set_ns1__removeEntityFromFolderByRecordIDResponse(struct soap *soap, int result) { struct ns1__removeEntityFromFolderByRecordIDResponse *_p = soap_instantiate_ns1__removeEntityFromFolderByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__removeEntityFromFolderByRecordIDResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__removeEntityFromFolderByRecordIDResponse(struct soap *soap, struct ns1__removeEntityFromFolderByRecordIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__removeEntityFromFolderByRecordIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__addEntityToFolderByRecordID
#define SOAP_TYPE_ns1__addEntityToFolderByRecordID (657)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addEntityToFolderByRecordID(struct soap*, struct ns1__addEntityToFolderByRecordID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addEntityToFolderByRecordID(struct soap*, const struct ns1__addEntityToFolderByRecordID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addEntityToFolderByRecordID(struct soap*, const char*, int, const struct ns1__addEntityToFolderByRecordID *, const char*);
SOAP_FMAC3 struct ns1__addEntityToFolderByRecordID * SOAP_FMAC4 soap_in_ns1__addEntityToFolderByRecordID(struct soap*, const char*, struct ns1__addEntityToFolderByRecordID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addEntityToFolderByRecordID(struct soap*, const struct ns1__addEntityToFolderByRecordID *, const char*, const char*);

#ifndef soap_write_ns1__addEntityToFolderByRecordID
#define soap_write_ns1__addEntityToFolderByRecordID(soap, data) ( soap_begin(soap), soap_serialize_ns1__addEntityToFolderByRecordID(soap, data), soap_begin_send(soap) || soap_put_ns1__addEntityToFolderByRecordID(soap, data, "ns1:addEntityToFolderByRecordID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__addEntityToFolderByRecordID * SOAP_FMAC4 soap_get_ns1__addEntityToFolderByRecordID(struct soap*, struct ns1__addEntityToFolderByRecordID *, const char*, const char*);

#ifndef soap_read_ns1__addEntityToFolderByRecordID
#define soap_read_ns1__addEntityToFolderByRecordID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__addEntityToFolderByRecordID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__addEntityToFolderByRecordID * SOAP_FMAC2 soap_instantiate_ns1__addEntityToFolderByRecordID(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__addEntityToFolderByRecordID * soap_new_ns1__addEntityToFolderByRecordID(struct soap *soap, int n = -1) { return soap_instantiate_ns1__addEntityToFolderByRecordID(soap, n, NULL, NULL, NULL); }

inline struct ns1__addEntityToFolderByRecordID * soap_new_req_ns1__addEntityToFolderByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID, bool publicFolder, LONG64 entityRecordID) { struct ns1__addEntityToFolderByRecordID *_p = soap_instantiate_ns1__addEntityToFolderByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addEntityToFolderByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->publicFolder = publicFolder; _p->entityRecordID = entityRecordID; } return _p; }

inline struct ns1__addEntityToFolderByRecordID * soap_new_set_ns1__addEntityToFolderByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID, bool publicFolder, LONG64 entityRecordID, char *entityTableName) { struct ns1__addEntityToFolderByRecordID *_p = soap_instantiate_ns1__addEntityToFolderByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addEntityToFolderByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->publicFolder = publicFolder; _p->entityRecordID = entityRecordID; _p->entityTableName = entityTableName; } return _p; }

inline void soap_delete_ns1__addEntityToFolderByRecordID(struct soap *soap, struct ns1__addEntityToFolderByRecordID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__addEntityToFolderByRecordID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__addEntityToFolderByRecordIDResponse
#define SOAP_TYPE_ns1__addEntityToFolderByRecordIDResponse (656)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addEntityToFolderByRecordIDResponse(struct soap*, struct ns1__addEntityToFolderByRecordIDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addEntityToFolderByRecordIDResponse(struct soap*, const struct ns1__addEntityToFolderByRecordIDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addEntityToFolderByRecordIDResponse(struct soap*, const char*, int, const struct ns1__addEntityToFolderByRecordIDResponse *, const char*);
SOAP_FMAC3 struct ns1__addEntityToFolderByRecordIDResponse * SOAP_FMAC4 soap_in_ns1__addEntityToFolderByRecordIDResponse(struct soap*, const char*, struct ns1__addEntityToFolderByRecordIDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addEntityToFolderByRecordIDResponse(struct soap*, const struct ns1__addEntityToFolderByRecordIDResponse *, const char*, const char*);

#ifndef soap_write_ns1__addEntityToFolderByRecordIDResponse
#define soap_write_ns1__addEntityToFolderByRecordIDResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__addEntityToFolderByRecordIDResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__addEntityToFolderByRecordIDResponse(soap, data, "ns1:addEntityToFolderByRecordIDResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__addEntityToFolderByRecordIDResponse * SOAP_FMAC4 soap_get_ns1__addEntityToFolderByRecordIDResponse(struct soap*, struct ns1__addEntityToFolderByRecordIDResponse *, const char*, const char*);

#ifndef soap_read_ns1__addEntityToFolderByRecordIDResponse
#define soap_read_ns1__addEntityToFolderByRecordIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__addEntityToFolderByRecordIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__addEntityToFolderByRecordIDResponse * SOAP_FMAC2 soap_instantiate_ns1__addEntityToFolderByRecordIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__addEntityToFolderByRecordIDResponse * soap_new_ns1__addEntityToFolderByRecordIDResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__addEntityToFolderByRecordIDResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__addEntityToFolderByRecordIDResponse * soap_new_req_ns1__addEntityToFolderByRecordIDResponse(struct soap *soap, int itemRecordID) { struct ns1__addEntityToFolderByRecordIDResponse *_p = soap_instantiate_ns1__addEntityToFolderByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addEntityToFolderByRecordIDResponse(soap, _p); _p->itemRecordID = itemRecordID; } return _p; }

inline struct ns1__addEntityToFolderByRecordIDResponse * soap_new_set_ns1__addEntityToFolderByRecordIDResponse(struct soap *soap, int itemRecordID) { struct ns1__addEntityToFolderByRecordIDResponse *_p = soap_instantiate_ns1__addEntityToFolderByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addEntityToFolderByRecordIDResponse(soap, _p); _p->itemRecordID = itemRecordID; } return _p; }

inline void soap_delete_ns1__addEntityToFolderByRecordIDResponse(struct soap *soap, struct ns1__addEntityToFolderByRecordIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__addEntityToFolderByRecordIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteFolderByRecordID
#define SOAP_TYPE_ns1__deleteFolderByRecordID (654)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteFolderByRecordID(struct soap*, struct ns1__deleteFolderByRecordID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteFolderByRecordID(struct soap*, const struct ns1__deleteFolderByRecordID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteFolderByRecordID(struct soap*, const char*, int, const struct ns1__deleteFolderByRecordID *, const char*);
SOAP_FMAC3 struct ns1__deleteFolderByRecordID * SOAP_FMAC4 soap_in_ns1__deleteFolderByRecordID(struct soap*, const char*, struct ns1__deleteFolderByRecordID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteFolderByRecordID(struct soap*, const struct ns1__deleteFolderByRecordID *, const char*, const char*);

#ifndef soap_write_ns1__deleteFolderByRecordID
#define soap_write_ns1__deleteFolderByRecordID(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteFolderByRecordID(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteFolderByRecordID(soap, data, "ns1:deleteFolderByRecordID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteFolderByRecordID * SOAP_FMAC4 soap_get_ns1__deleteFolderByRecordID(struct soap*, struct ns1__deleteFolderByRecordID *, const char*, const char*);

#ifndef soap_read_ns1__deleteFolderByRecordID
#define soap_read_ns1__deleteFolderByRecordID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteFolderByRecordID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteFolderByRecordID * SOAP_FMAC2 soap_instantiate_ns1__deleteFolderByRecordID(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteFolderByRecordID * soap_new_ns1__deleteFolderByRecordID(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteFolderByRecordID(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteFolderByRecordID * soap_new_req_ns1__deleteFolderByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID, bool publicFolder) { struct ns1__deleteFolderByRecordID *_p = soap_instantiate_ns1__deleteFolderByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteFolderByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->publicFolder = publicFolder; } return _p; }

inline struct ns1__deleteFolderByRecordID * soap_new_set_ns1__deleteFolderByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID, bool publicFolder) { struct ns1__deleteFolderByRecordID *_p = soap_instantiate_ns1__deleteFolderByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteFolderByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->publicFolder = publicFolder; } return _p; }

inline void soap_delete_ns1__deleteFolderByRecordID(struct soap *soap, struct ns1__deleteFolderByRecordID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteFolderByRecordID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteFolderByRecordIDResponse
#define SOAP_TYPE_ns1__deleteFolderByRecordIDResponse (653)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteFolderByRecordIDResponse(struct soap*, struct ns1__deleteFolderByRecordIDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteFolderByRecordIDResponse(struct soap*, const struct ns1__deleteFolderByRecordIDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteFolderByRecordIDResponse(struct soap*, const char*, int, const struct ns1__deleteFolderByRecordIDResponse *, const char*);
SOAP_FMAC3 struct ns1__deleteFolderByRecordIDResponse * SOAP_FMAC4 soap_in_ns1__deleteFolderByRecordIDResponse(struct soap*, const char*, struct ns1__deleteFolderByRecordIDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteFolderByRecordIDResponse(struct soap*, const struct ns1__deleteFolderByRecordIDResponse *, const char*, const char*);

#ifndef soap_write_ns1__deleteFolderByRecordIDResponse
#define soap_write_ns1__deleteFolderByRecordIDResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteFolderByRecordIDResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteFolderByRecordIDResponse(soap, data, "ns1:deleteFolderByRecordIDResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteFolderByRecordIDResponse * SOAP_FMAC4 soap_get_ns1__deleteFolderByRecordIDResponse(struct soap*, struct ns1__deleteFolderByRecordIDResponse *, const char*, const char*);

#ifndef soap_read_ns1__deleteFolderByRecordIDResponse
#define soap_read_ns1__deleteFolderByRecordIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteFolderByRecordIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteFolderByRecordIDResponse * SOAP_FMAC2 soap_instantiate_ns1__deleteFolderByRecordIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteFolderByRecordIDResponse * soap_new_ns1__deleteFolderByRecordIDResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteFolderByRecordIDResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteFolderByRecordIDResponse * soap_new_req_ns1__deleteFolderByRecordIDResponse(struct soap *soap, int result) { struct ns1__deleteFolderByRecordIDResponse *_p = soap_instantiate_ns1__deleteFolderByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteFolderByRecordIDResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__deleteFolderByRecordIDResponse * soap_new_set_ns1__deleteFolderByRecordIDResponse(struct soap *soap, int result) { struct ns1__deleteFolderByRecordIDResponse *_p = soap_instantiate_ns1__deleteFolderByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteFolderByRecordIDResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__deleteFolderByRecordIDResponse(struct soap *soap, struct ns1__deleteFolderByRecordIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteFolderByRecordIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteFolder
#define SOAP_TYPE_ns1__deleteFolder (651)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteFolder(struct soap*, struct ns1__deleteFolder *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteFolder(struct soap*, const struct ns1__deleteFolder *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteFolder(struct soap*, const char*, int, const struct ns1__deleteFolder *, const char*);
SOAP_FMAC3 struct ns1__deleteFolder * SOAP_FMAC4 soap_in_ns1__deleteFolder(struct soap*, const char*, struct ns1__deleteFolder *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteFolder(struct soap*, const struct ns1__deleteFolder *, const char*, const char*);

#ifndef soap_write_ns1__deleteFolder
#define soap_write_ns1__deleteFolder(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteFolder(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteFolder(soap, data, "ns1:deleteFolder", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteFolder * SOAP_FMAC4 soap_get_ns1__deleteFolder(struct soap*, struct ns1__deleteFolder *, const char*, const char*);

#ifndef soap_read_ns1__deleteFolder
#define soap_read_ns1__deleteFolder(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteFolder(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteFolder * SOAP_FMAC2 soap_instantiate_ns1__deleteFolder(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteFolder * soap_new_ns1__deleteFolder(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteFolder(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteFolder * soap_new_req_ns1__deleteFolder(struct soap *soap, LONG64 cookie) { struct ns1__deleteFolder *_p = soap_instantiate_ns1__deleteFolder(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteFolder(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__deleteFolder * soap_new_set_ns1__deleteFolder(struct soap *soap, LONG64 cookie, char *folderPath) { struct ns1__deleteFolder *_p = soap_instantiate_ns1__deleteFolder(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteFolder(soap, _p); _p->cookie = cookie; _p->folderPath = folderPath; } return _p; }

inline void soap_delete_ns1__deleteFolder(struct soap *soap, struct ns1__deleteFolder *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteFolder(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteFolderResponse
#define SOAP_TYPE_ns1__deleteFolderResponse (650)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteFolderResponse(struct soap*, struct ns1__deleteFolderResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteFolderResponse(struct soap*, const struct ns1__deleteFolderResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteFolderResponse(struct soap*, const char*, int, const struct ns1__deleteFolderResponse *, const char*);
SOAP_FMAC3 struct ns1__deleteFolderResponse * SOAP_FMAC4 soap_in_ns1__deleteFolderResponse(struct soap*, const char*, struct ns1__deleteFolderResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteFolderResponse(struct soap*, const struct ns1__deleteFolderResponse *, const char*, const char*);

#ifndef soap_write_ns1__deleteFolderResponse
#define soap_write_ns1__deleteFolderResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteFolderResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteFolderResponse(soap, data, "ns1:deleteFolderResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteFolderResponse * SOAP_FMAC4 soap_get_ns1__deleteFolderResponse(struct soap*, struct ns1__deleteFolderResponse *, const char*, const char*);

#ifndef soap_read_ns1__deleteFolderResponse
#define soap_read_ns1__deleteFolderResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteFolderResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteFolderResponse * SOAP_FMAC2 soap_instantiate_ns1__deleteFolderResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteFolderResponse * soap_new_ns1__deleteFolderResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteFolderResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteFolderResponse * soap_new_req_ns1__deleteFolderResponse(struct soap *soap, int result) { struct ns1__deleteFolderResponse *_p = soap_instantiate_ns1__deleteFolderResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteFolderResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__deleteFolderResponse * soap_new_set_ns1__deleteFolderResponse(struct soap *soap, int result) { struct ns1__deleteFolderResponse *_p = soap_instantiate_ns1__deleteFolderResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteFolderResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__deleteFolderResponse(struct soap *soap, struct ns1__deleteFolderResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteFolderResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getFolderByRecordID
#define SOAP_TYPE_ns1__getFolderByRecordID (648)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getFolderByRecordID(struct soap*, struct ns1__getFolderByRecordID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getFolderByRecordID(struct soap*, const struct ns1__getFolderByRecordID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getFolderByRecordID(struct soap*, const char*, int, const struct ns1__getFolderByRecordID *, const char*);
SOAP_FMAC3 struct ns1__getFolderByRecordID * SOAP_FMAC4 soap_in_ns1__getFolderByRecordID(struct soap*, const char*, struct ns1__getFolderByRecordID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getFolderByRecordID(struct soap*, const struct ns1__getFolderByRecordID *, const char*, const char*);

#ifndef soap_write_ns1__getFolderByRecordID
#define soap_write_ns1__getFolderByRecordID(soap, data) ( soap_begin(soap), soap_serialize_ns1__getFolderByRecordID(soap, data), soap_begin_send(soap) || soap_put_ns1__getFolderByRecordID(soap, data, "ns1:getFolderByRecordID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getFolderByRecordID * SOAP_FMAC4 soap_get_ns1__getFolderByRecordID(struct soap*, struct ns1__getFolderByRecordID *, const char*, const char*);

#ifndef soap_read_ns1__getFolderByRecordID
#define soap_read_ns1__getFolderByRecordID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getFolderByRecordID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getFolderByRecordID * SOAP_FMAC2 soap_instantiate_ns1__getFolderByRecordID(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getFolderByRecordID * soap_new_ns1__getFolderByRecordID(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getFolderByRecordID(soap, n, NULL, NULL, NULL); }

inline struct ns1__getFolderByRecordID * soap_new_req_ns1__getFolderByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID, bool publicFolder) { struct ns1__getFolderByRecordID *_p = soap_instantiate_ns1__getFolderByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFolderByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->publicFolder = publicFolder; } return _p; }

inline struct ns1__getFolderByRecordID * soap_new_set_ns1__getFolderByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID, bool publicFolder) { struct ns1__getFolderByRecordID *_p = soap_instantiate_ns1__getFolderByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFolderByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->publicFolder = publicFolder; } return _p; }

inline void soap_delete_ns1__getFolderByRecordID(struct soap *soap, struct ns1__getFolderByRecordID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getFolderByRecordID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getFolderByRecordIDResponse
#define SOAP_TYPE_ns1__getFolderByRecordIDResponse (645)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getFolderByRecordIDResponse(struct soap*, struct ns1__getFolderByRecordIDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getFolderByRecordIDResponse(struct soap*, const struct ns1__getFolderByRecordIDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getFolderByRecordIDResponse(struct soap*, const char*, int, const struct ns1__getFolderByRecordIDResponse *, const char*);
SOAP_FMAC3 struct ns1__getFolderByRecordIDResponse * SOAP_FMAC4 soap_in_ns1__getFolderByRecordIDResponse(struct soap*, const char*, struct ns1__getFolderByRecordIDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getFolderByRecordIDResponse(struct soap*, const struct ns1__getFolderByRecordIDResponse *, const char*, const char*);

#ifndef soap_write_ns1__getFolderByRecordIDResponse
#define soap_write_ns1__getFolderByRecordIDResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getFolderByRecordIDResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getFolderByRecordIDResponse(soap, data, "ns1:getFolderByRecordIDResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getFolderByRecordIDResponse * SOAP_FMAC4 soap_get_ns1__getFolderByRecordIDResponse(struct soap*, struct ns1__getFolderByRecordIDResponse *, const char*, const char*);

#ifndef soap_read_ns1__getFolderByRecordIDResponse
#define soap_read_ns1__getFolderByRecordIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getFolderByRecordIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getFolderByRecordIDResponse * SOAP_FMAC2 soap_instantiate_ns1__getFolderByRecordIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getFolderByRecordIDResponse * soap_new_ns1__getFolderByRecordIDResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getFolderByRecordIDResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getFolderByRecordIDResponse * soap_new_req_ns1__getFolderByRecordIDResponse(struct soap *soap) { struct ns1__getFolderByRecordIDResponse *_p = soap_instantiate_ns1__getFolderByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFolderByRecordIDResponse(soap, _p); } return _p; }

inline struct ns1__getFolderByRecordIDResponse * soap_new_set_ns1__getFolderByRecordIDResponse(struct soap *soap, ns1__CFolder *pFolder) { struct ns1__getFolderByRecordIDResponse *_p = soap_instantiate_ns1__getFolderByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFolderByRecordIDResponse(soap, _p); _p->pFolder = pFolder; } return _p; }

inline void soap_delete_ns1__getFolderByRecordIDResponse(struct soap *soap, struct ns1__getFolderByRecordIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getFolderByRecordIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getFolder
#define SOAP_TYPE_ns1__getFolder (644)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getFolder(struct soap*, struct ns1__getFolder *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getFolder(struct soap*, const struct ns1__getFolder *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getFolder(struct soap*, const char*, int, const struct ns1__getFolder *, const char*);
SOAP_FMAC3 struct ns1__getFolder * SOAP_FMAC4 soap_in_ns1__getFolder(struct soap*, const char*, struct ns1__getFolder *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getFolder(struct soap*, const struct ns1__getFolder *, const char*, const char*);

#ifndef soap_write_ns1__getFolder
#define soap_write_ns1__getFolder(soap, data) ( soap_begin(soap), soap_serialize_ns1__getFolder(soap, data), soap_begin_send(soap) || soap_put_ns1__getFolder(soap, data, "ns1:getFolder", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getFolder * SOAP_FMAC4 soap_get_ns1__getFolder(struct soap*, struct ns1__getFolder *, const char*, const char*);

#ifndef soap_read_ns1__getFolder
#define soap_read_ns1__getFolder(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getFolder(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getFolder * SOAP_FMAC2 soap_instantiate_ns1__getFolder(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getFolder * soap_new_ns1__getFolder(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getFolder(soap, n, NULL, NULL, NULL); }

inline struct ns1__getFolder * soap_new_req_ns1__getFolder(struct soap *soap, LONG64 cookie) { struct ns1__getFolder *_p = soap_instantiate_ns1__getFolder(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFolder(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__getFolder * soap_new_set_ns1__getFolder(struct soap *soap, LONG64 cookie, char *path) { struct ns1__getFolder *_p = soap_instantiate_ns1__getFolder(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFolder(soap, _p); _p->cookie = cookie; _p->path = path; } return _p; }

inline void soap_delete_ns1__getFolder(struct soap *soap, struct ns1__getFolder *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getFolder(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getFolderResponse
#define SOAP_TYPE_ns1__getFolderResponse (641)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getFolderResponse(struct soap*, struct ns1__getFolderResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getFolderResponse(struct soap*, const struct ns1__getFolderResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getFolderResponse(struct soap*, const char*, int, const struct ns1__getFolderResponse *, const char*);
SOAP_FMAC3 struct ns1__getFolderResponse * SOAP_FMAC4 soap_in_ns1__getFolderResponse(struct soap*, const char*, struct ns1__getFolderResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getFolderResponse(struct soap*, const struct ns1__getFolderResponse *, const char*, const char*);

#ifndef soap_write_ns1__getFolderResponse
#define soap_write_ns1__getFolderResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getFolderResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getFolderResponse(soap, data, "ns1:getFolderResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getFolderResponse * SOAP_FMAC4 soap_get_ns1__getFolderResponse(struct soap*, struct ns1__getFolderResponse *, const char*, const char*);

#ifndef soap_read_ns1__getFolderResponse
#define soap_read_ns1__getFolderResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getFolderResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getFolderResponse * SOAP_FMAC2 soap_instantiate_ns1__getFolderResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getFolderResponse * soap_new_ns1__getFolderResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getFolderResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getFolderResponse * soap_new_req_ns1__getFolderResponse(struct soap *soap) { struct ns1__getFolderResponse *_p = soap_instantiate_ns1__getFolderResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFolderResponse(soap, _p); } return _p; }

inline struct ns1__getFolderResponse * soap_new_set_ns1__getFolderResponse(struct soap *soap, ns1__CFolder *pFolder) { struct ns1__getFolderResponse *_p = soap_instantiate_ns1__getFolderResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFolderResponse(soap, _p); _p->pFolder = pFolder; } return _p; }

inline void soap_delete_ns1__getFolderResponse(struct soap *soap, struct ns1__getFolderResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getFolderResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__cancelSaveFolder
#define SOAP_TYPE_ns1__cancelSaveFolder (640)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__cancelSaveFolder(struct soap*, struct ns1__cancelSaveFolder *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__cancelSaveFolder(struct soap*, const struct ns1__cancelSaveFolder *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__cancelSaveFolder(struct soap*, const char*, int, const struct ns1__cancelSaveFolder *, const char*);
SOAP_FMAC3 struct ns1__cancelSaveFolder * SOAP_FMAC4 soap_in_ns1__cancelSaveFolder(struct soap*, const char*, struct ns1__cancelSaveFolder *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__cancelSaveFolder(struct soap*, const struct ns1__cancelSaveFolder *, const char*, const char*);

#ifndef soap_write_ns1__cancelSaveFolder
#define soap_write_ns1__cancelSaveFolder(soap, data) ( soap_begin(soap), soap_serialize_ns1__cancelSaveFolder(soap, data), soap_begin_send(soap) || soap_put_ns1__cancelSaveFolder(soap, data, "ns1:cancelSaveFolder", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__cancelSaveFolder * SOAP_FMAC4 soap_get_ns1__cancelSaveFolder(struct soap*, struct ns1__cancelSaveFolder *, const char*, const char*);

#ifndef soap_read_ns1__cancelSaveFolder
#define soap_read_ns1__cancelSaveFolder(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__cancelSaveFolder(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__cancelSaveFolder * SOAP_FMAC2 soap_instantiate_ns1__cancelSaveFolder(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__cancelSaveFolder * soap_new_ns1__cancelSaveFolder(struct soap *soap, int n = -1) { return soap_instantiate_ns1__cancelSaveFolder(soap, n, NULL, NULL, NULL); }

inline struct ns1__cancelSaveFolder * soap_new_req_ns1__cancelSaveFolder(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__cancelSaveFolder *_p = soap_instantiate_ns1__cancelSaveFolder(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveFolder(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline struct ns1__cancelSaveFolder * soap_new_set_ns1__cancelSaveFolder(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__cancelSaveFolder *_p = soap_instantiate_ns1__cancelSaveFolder(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveFolder(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__cancelSaveFolder(struct soap *soap, struct ns1__cancelSaveFolder *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__cancelSaveFolder(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__cancelSaveFolderResponse
#define SOAP_TYPE_ns1__cancelSaveFolderResponse (639)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__cancelSaveFolderResponse(struct soap*, struct ns1__cancelSaveFolderResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__cancelSaveFolderResponse(struct soap*, const struct ns1__cancelSaveFolderResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__cancelSaveFolderResponse(struct soap*, const char*, int, const struct ns1__cancelSaveFolderResponse *, const char*);
SOAP_FMAC3 struct ns1__cancelSaveFolderResponse * SOAP_FMAC4 soap_in_ns1__cancelSaveFolderResponse(struct soap*, const char*, struct ns1__cancelSaveFolderResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__cancelSaveFolderResponse(struct soap*, const struct ns1__cancelSaveFolderResponse *, const char*, const char*);

#ifndef soap_write_ns1__cancelSaveFolderResponse
#define soap_write_ns1__cancelSaveFolderResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__cancelSaveFolderResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__cancelSaveFolderResponse(soap, data, "ns1:cancelSaveFolderResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__cancelSaveFolderResponse * SOAP_FMAC4 soap_get_ns1__cancelSaveFolderResponse(struct soap*, struct ns1__cancelSaveFolderResponse *, const char*, const char*);

#ifndef soap_read_ns1__cancelSaveFolderResponse
#define soap_read_ns1__cancelSaveFolderResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__cancelSaveFolderResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__cancelSaveFolderResponse * SOAP_FMAC2 soap_instantiate_ns1__cancelSaveFolderResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__cancelSaveFolderResponse * soap_new_ns1__cancelSaveFolderResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__cancelSaveFolderResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__cancelSaveFolderResponse * soap_new_req_ns1__cancelSaveFolderResponse(struct soap *soap, int result) { struct ns1__cancelSaveFolderResponse *_p = soap_instantiate_ns1__cancelSaveFolderResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveFolderResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__cancelSaveFolderResponse * soap_new_set_ns1__cancelSaveFolderResponse(struct soap *soap, int result) { struct ns1__cancelSaveFolderResponse *_p = soap_instantiate_ns1__cancelSaveFolderResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveFolderResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__cancelSaveFolderResponse(struct soap *soap, struct ns1__cancelSaveFolderResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__cancelSaveFolderResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveFolder
#define SOAP_TYPE_ns1__saveFolder (637)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveFolder(struct soap*, struct ns1__saveFolder *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveFolder(struct soap*, const struct ns1__saveFolder *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveFolder(struct soap*, const char*, int, const struct ns1__saveFolder *, const char*);
SOAP_FMAC3 struct ns1__saveFolder * SOAP_FMAC4 soap_in_ns1__saveFolder(struct soap*, const char*, struct ns1__saveFolder *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveFolder(struct soap*, const struct ns1__saveFolder *, const char*, const char*);

#ifndef soap_write_ns1__saveFolder
#define soap_write_ns1__saveFolder(soap, data) ( soap_begin(soap), soap_serialize_ns1__saveFolder(soap, data), soap_begin_send(soap) || soap_put_ns1__saveFolder(soap, data, "ns1:saveFolder", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__saveFolder * SOAP_FMAC4 soap_get_ns1__saveFolder(struct soap*, struct ns1__saveFolder *, const char*, const char*);

#ifndef soap_read_ns1__saveFolder
#define soap_read_ns1__saveFolder(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveFolder(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__saveFolder * SOAP_FMAC2 soap_instantiate_ns1__saveFolder(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveFolder * soap_new_ns1__saveFolder(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveFolder(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveFolder * soap_new_req_ns1__saveFolder(struct soap *soap, LONG64 cookie) { struct ns1__saveFolder *_p = soap_instantiate_ns1__saveFolder(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveFolder(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__saveFolder * soap_new_set_ns1__saveFolder(struct soap *soap, LONG64 cookie, ns1__CFolder *pFolder) { struct ns1__saveFolder *_p = soap_instantiate_ns1__saveFolder(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveFolder(soap, _p); _p->cookie = cookie; _p->pFolder = pFolder; } return _p; }

inline void soap_delete_ns1__saveFolder(struct soap *soap, struct ns1__saveFolder *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveFolder(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveFolderResponse
#define SOAP_TYPE_ns1__saveFolderResponse (636)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveFolderResponse(struct soap*, struct ns1__saveFolderResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveFolderResponse(struct soap*, const struct ns1__saveFolderResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveFolderResponse(struct soap*, const char*, int, const struct ns1__saveFolderResponse *, const char*);
SOAP_FMAC3 struct ns1__saveFolderResponse * SOAP_FMAC4 soap_in_ns1__saveFolderResponse(struct soap*, const char*, struct ns1__saveFolderResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveFolderResponse(struct soap*, const struct ns1__saveFolderResponse *, const char*, const char*);

#ifndef soap_write_ns1__saveFolderResponse
#define soap_write_ns1__saveFolderResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__saveFolderResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__saveFolderResponse(soap, data, "ns1:saveFolderResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__saveFolderResponse * SOAP_FMAC4 soap_get_ns1__saveFolderResponse(struct soap*, struct ns1__saveFolderResponse *, const char*, const char*);

#ifndef soap_read_ns1__saveFolderResponse
#define soap_read_ns1__saveFolderResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveFolderResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__saveFolderResponse * SOAP_FMAC2 soap_instantiate_ns1__saveFolderResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveFolderResponse * soap_new_ns1__saveFolderResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveFolderResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveFolderResponse * soap_new_req_ns1__saveFolderResponse(struct soap *soap, int result) { struct ns1__saveFolderResponse *_p = soap_instantiate_ns1__saveFolderResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveFolderResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__saveFolderResponse * soap_new_set_ns1__saveFolderResponse(struct soap *soap, int result) { struct ns1__saveFolderResponse *_p = soap_instantiate_ns1__saveFolderResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveFolderResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__saveFolderResponse(struct soap *soap, struct ns1__saveFolderResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveFolderResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editFolderByRecordID
#define SOAP_TYPE_ns1__editFolderByRecordID (634)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editFolderByRecordID(struct soap*, struct ns1__editFolderByRecordID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editFolderByRecordID(struct soap*, const struct ns1__editFolderByRecordID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editFolderByRecordID(struct soap*, const char*, int, const struct ns1__editFolderByRecordID *, const char*);
SOAP_FMAC3 struct ns1__editFolderByRecordID * SOAP_FMAC4 soap_in_ns1__editFolderByRecordID(struct soap*, const char*, struct ns1__editFolderByRecordID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editFolderByRecordID(struct soap*, const struct ns1__editFolderByRecordID *, const char*, const char*);

#ifndef soap_write_ns1__editFolderByRecordID
#define soap_write_ns1__editFolderByRecordID(soap, data) ( soap_begin(soap), soap_serialize_ns1__editFolderByRecordID(soap, data), soap_begin_send(soap) || soap_put_ns1__editFolderByRecordID(soap, data, "ns1:editFolderByRecordID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editFolderByRecordID * SOAP_FMAC4 soap_get_ns1__editFolderByRecordID(struct soap*, struct ns1__editFolderByRecordID *, const char*, const char*);

#ifndef soap_read_ns1__editFolderByRecordID
#define soap_read_ns1__editFolderByRecordID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editFolderByRecordID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editFolderByRecordID * SOAP_FMAC2 soap_instantiate_ns1__editFolderByRecordID(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editFolderByRecordID * soap_new_ns1__editFolderByRecordID(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editFolderByRecordID(soap, n, NULL, NULL, NULL); }

inline struct ns1__editFolderByRecordID * soap_new_req_ns1__editFolderByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID, bool publicFolder) { struct ns1__editFolderByRecordID *_p = soap_instantiate_ns1__editFolderByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editFolderByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->publicFolder = publicFolder; } return _p; }

inline struct ns1__editFolderByRecordID * soap_new_set_ns1__editFolderByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID, bool publicFolder) { struct ns1__editFolderByRecordID *_p = soap_instantiate_ns1__editFolderByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editFolderByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->publicFolder = publicFolder; } return _p; }

inline void soap_delete_ns1__editFolderByRecordID(struct soap *soap, struct ns1__editFolderByRecordID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editFolderByRecordID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editFolderByRecordIDResponse
#define SOAP_TYPE_ns1__editFolderByRecordIDResponse (631)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editFolderByRecordIDResponse(struct soap*, struct ns1__editFolderByRecordIDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editFolderByRecordIDResponse(struct soap*, const struct ns1__editFolderByRecordIDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editFolderByRecordIDResponse(struct soap*, const char*, int, const struct ns1__editFolderByRecordIDResponse *, const char*);
SOAP_FMAC3 struct ns1__editFolderByRecordIDResponse * SOAP_FMAC4 soap_in_ns1__editFolderByRecordIDResponse(struct soap*, const char*, struct ns1__editFolderByRecordIDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editFolderByRecordIDResponse(struct soap*, const struct ns1__editFolderByRecordIDResponse *, const char*, const char*);

#ifndef soap_write_ns1__editFolderByRecordIDResponse
#define soap_write_ns1__editFolderByRecordIDResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__editFolderByRecordIDResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__editFolderByRecordIDResponse(soap, data, "ns1:editFolderByRecordIDResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editFolderByRecordIDResponse * SOAP_FMAC4 soap_get_ns1__editFolderByRecordIDResponse(struct soap*, struct ns1__editFolderByRecordIDResponse *, const char*, const char*);

#ifndef soap_read_ns1__editFolderByRecordIDResponse
#define soap_read_ns1__editFolderByRecordIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editFolderByRecordIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editFolderByRecordIDResponse * SOAP_FMAC2 soap_instantiate_ns1__editFolderByRecordIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editFolderByRecordIDResponse * soap_new_ns1__editFolderByRecordIDResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editFolderByRecordIDResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__editFolderByRecordIDResponse * soap_new_req_ns1__editFolderByRecordIDResponse(struct soap *soap) { struct ns1__editFolderByRecordIDResponse *_p = soap_instantiate_ns1__editFolderByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editFolderByRecordIDResponse(soap, _p); } return _p; }

inline struct ns1__editFolderByRecordIDResponse * soap_new_set_ns1__editFolderByRecordIDResponse(struct soap *soap, ns1__CFolder *pFolder) { struct ns1__editFolderByRecordIDResponse *_p = soap_instantiate_ns1__editFolderByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editFolderByRecordIDResponse(soap, _p); _p->pFolder = pFolder; } return _p; }

inline void soap_delete_ns1__editFolderByRecordIDResponse(struct soap *soap, struct ns1__editFolderByRecordIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editFolderByRecordIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editFolder
#define SOAP_TYPE_ns1__editFolder (630)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editFolder(struct soap*, struct ns1__editFolder *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editFolder(struct soap*, const struct ns1__editFolder *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editFolder(struct soap*, const char*, int, const struct ns1__editFolder *, const char*);
SOAP_FMAC3 struct ns1__editFolder * SOAP_FMAC4 soap_in_ns1__editFolder(struct soap*, const char*, struct ns1__editFolder *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editFolder(struct soap*, const struct ns1__editFolder *, const char*, const char*);

#ifndef soap_write_ns1__editFolder
#define soap_write_ns1__editFolder(soap, data) ( soap_begin(soap), soap_serialize_ns1__editFolder(soap, data), soap_begin_send(soap) || soap_put_ns1__editFolder(soap, data, "ns1:editFolder", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editFolder * SOAP_FMAC4 soap_get_ns1__editFolder(struct soap*, struct ns1__editFolder *, const char*, const char*);

#ifndef soap_read_ns1__editFolder
#define soap_read_ns1__editFolder(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editFolder(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editFolder * SOAP_FMAC2 soap_instantiate_ns1__editFolder(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editFolder * soap_new_ns1__editFolder(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editFolder(soap, n, NULL, NULL, NULL); }

inline struct ns1__editFolder * soap_new_req_ns1__editFolder(struct soap *soap, LONG64 cookie) { struct ns1__editFolder *_p = soap_instantiate_ns1__editFolder(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editFolder(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__editFolder * soap_new_set_ns1__editFolder(struct soap *soap, LONG64 cookie, char *folderPath) { struct ns1__editFolder *_p = soap_instantiate_ns1__editFolder(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editFolder(soap, _p); _p->cookie = cookie; _p->folderPath = folderPath; } return _p; }

inline void soap_delete_ns1__editFolder(struct soap *soap, struct ns1__editFolder *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editFolder(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editFolderResponse
#define SOAP_TYPE_ns1__editFolderResponse (627)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editFolderResponse(struct soap*, struct ns1__editFolderResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editFolderResponse(struct soap*, const struct ns1__editFolderResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editFolderResponse(struct soap*, const char*, int, const struct ns1__editFolderResponse *, const char*);
SOAP_FMAC3 struct ns1__editFolderResponse * SOAP_FMAC4 soap_in_ns1__editFolderResponse(struct soap*, const char*, struct ns1__editFolderResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editFolderResponse(struct soap*, const struct ns1__editFolderResponse *, const char*, const char*);

#ifndef soap_write_ns1__editFolderResponse
#define soap_write_ns1__editFolderResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__editFolderResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__editFolderResponse(soap, data, "ns1:editFolderResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editFolderResponse * SOAP_FMAC4 soap_get_ns1__editFolderResponse(struct soap*, struct ns1__editFolderResponse *, const char*, const char*);

#ifndef soap_read_ns1__editFolderResponse
#define soap_read_ns1__editFolderResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editFolderResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editFolderResponse * SOAP_FMAC2 soap_instantiate_ns1__editFolderResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editFolderResponse * soap_new_ns1__editFolderResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editFolderResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__editFolderResponse * soap_new_req_ns1__editFolderResponse(struct soap *soap) { struct ns1__editFolderResponse *_p = soap_instantiate_ns1__editFolderResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editFolderResponse(soap, _p); } return _p; }

inline struct ns1__editFolderResponse * soap_new_set_ns1__editFolderResponse(struct soap *soap, ns1__CFolder *pFolder) { struct ns1__editFolderResponse *_p = soap_instantiate_ns1__editFolderResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editFolderResponse(soap, _p); _p->pFolder = pFolder; } return _p; }

inline void soap_delete_ns1__editFolderResponse(struct soap *soap, struct ns1__editFolderResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editFolderResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__addFolder
#define SOAP_TYPE_ns1__addFolder (626)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addFolder(struct soap*, struct ns1__addFolder *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addFolder(struct soap*, const struct ns1__addFolder *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addFolder(struct soap*, const char*, int, const struct ns1__addFolder *, const char*);
SOAP_FMAC3 struct ns1__addFolder * SOAP_FMAC4 soap_in_ns1__addFolder(struct soap*, const char*, struct ns1__addFolder *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addFolder(struct soap*, const struct ns1__addFolder *, const char*, const char*);

#ifndef soap_write_ns1__addFolder
#define soap_write_ns1__addFolder(soap, data) ( soap_begin(soap), soap_serialize_ns1__addFolder(soap, data), soap_begin_send(soap) || soap_put_ns1__addFolder(soap, data, "ns1:addFolder", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__addFolder * SOAP_FMAC4 soap_get_ns1__addFolder(struct soap*, struct ns1__addFolder *, const char*, const char*);

#ifndef soap_read_ns1__addFolder
#define soap_read_ns1__addFolder(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__addFolder(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__addFolder * SOAP_FMAC2 soap_instantiate_ns1__addFolder(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__addFolder * soap_new_ns1__addFolder(struct soap *soap, int n = -1) { return soap_instantiate_ns1__addFolder(soap, n, NULL, NULL, NULL); }

inline struct ns1__addFolder * soap_new_req_ns1__addFolder(struct soap *soap, LONG64 cookie) { struct ns1__addFolder *_p = soap_instantiate_ns1__addFolder(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addFolder(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__addFolder * soap_new_set_ns1__addFolder(struct soap *soap, LONG64 cookie, ns1__CFolder *pFolder) { struct ns1__addFolder *_p = soap_instantiate_ns1__addFolder(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addFolder(soap, _p); _p->cookie = cookie; _p->pFolder = pFolder; } return _p; }

inline void soap_delete_ns1__addFolder(struct soap *soap, struct ns1__addFolder *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__addFolder(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__addFolderResponse
#define SOAP_TYPE_ns1__addFolderResponse (625)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addFolderResponse(struct soap*, struct ns1__addFolderResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addFolderResponse(struct soap*, const struct ns1__addFolderResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addFolderResponse(struct soap*, const char*, int, const struct ns1__addFolderResponse *, const char*);
SOAP_FMAC3 struct ns1__addFolderResponse * SOAP_FMAC4 soap_in_ns1__addFolderResponse(struct soap*, const char*, struct ns1__addFolderResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addFolderResponse(struct soap*, const struct ns1__addFolderResponse *, const char*, const char*);

#ifndef soap_write_ns1__addFolderResponse
#define soap_write_ns1__addFolderResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__addFolderResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__addFolderResponse(soap, data, "ns1:addFolderResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__addFolderResponse * SOAP_FMAC4 soap_get_ns1__addFolderResponse(struct soap*, struct ns1__addFolderResponse *, const char*, const char*);

#ifndef soap_read_ns1__addFolderResponse
#define soap_read_ns1__addFolderResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__addFolderResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__addFolderResponse * SOAP_FMAC2 soap_instantiate_ns1__addFolderResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__addFolderResponse * soap_new_ns1__addFolderResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__addFolderResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__addFolderResponse * soap_new_req_ns1__addFolderResponse(struct soap *soap, LONG64 recordID) { struct ns1__addFolderResponse *_p = soap_instantiate_ns1__addFolderResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addFolderResponse(soap, _p); _p->recordID = recordID; } return _p; }

inline struct ns1__addFolderResponse * soap_new_set_ns1__addFolderResponse(struct soap *soap, LONG64 recordID) { struct ns1__addFolderResponse *_p = soap_instantiate_ns1__addFolderResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addFolderResponse(soap, _p); _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__addFolderResponse(struct soap *soap, struct ns1__addFolderResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__addFolderResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getFolderTypeList
#define SOAP_TYPE_ns1__getFolderTypeList (623)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getFolderTypeList(struct soap*, struct ns1__getFolderTypeList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getFolderTypeList(struct soap*, const struct ns1__getFolderTypeList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getFolderTypeList(struct soap*, const char*, int, const struct ns1__getFolderTypeList *, const char*);
SOAP_FMAC3 struct ns1__getFolderTypeList * SOAP_FMAC4 soap_in_ns1__getFolderTypeList(struct soap*, const char*, struct ns1__getFolderTypeList *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getFolderTypeList(struct soap*, const struct ns1__getFolderTypeList *, const char*, const char*);

#ifndef soap_write_ns1__getFolderTypeList
#define soap_write_ns1__getFolderTypeList(soap, data) ( soap_begin(soap), soap_serialize_ns1__getFolderTypeList(soap, data), soap_begin_send(soap) || soap_put_ns1__getFolderTypeList(soap, data, "ns1:getFolderTypeList", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getFolderTypeList * SOAP_FMAC4 soap_get_ns1__getFolderTypeList(struct soap*, struct ns1__getFolderTypeList *, const char*, const char*);

#ifndef soap_read_ns1__getFolderTypeList
#define soap_read_ns1__getFolderTypeList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getFolderTypeList(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getFolderTypeList * SOAP_FMAC2 soap_instantiate_ns1__getFolderTypeList(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getFolderTypeList * soap_new_ns1__getFolderTypeList(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getFolderTypeList(soap, n, NULL, NULL, NULL); }

inline struct ns1__getFolderTypeList * soap_new_req_ns1__getFolderTypeList(struct soap *soap, LONG64 cookie) { struct ns1__getFolderTypeList *_p = soap_instantiate_ns1__getFolderTypeList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFolderTypeList(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__getFolderTypeList * soap_new_set_ns1__getFolderTypeList(struct soap *soap, LONG64 cookie) { struct ns1__getFolderTypeList *_p = soap_instantiate_ns1__getFolderTypeList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFolderTypeList(soap, _p); _p->cookie = cookie; } return _p; }

inline void soap_delete_ns1__getFolderTypeList(struct soap *soap, struct ns1__getFolderTypeList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getFolderTypeList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getFolderTypeListResponse
#define SOAP_TYPE_ns1__getFolderTypeListResponse (619)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getFolderTypeListResponse(struct soap*, struct ns1__getFolderTypeListResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getFolderTypeListResponse(struct soap*, const struct ns1__getFolderTypeListResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getFolderTypeListResponse(struct soap*, const char*, int, const struct ns1__getFolderTypeListResponse *, const char*);
SOAP_FMAC3 struct ns1__getFolderTypeListResponse * SOAP_FMAC4 soap_in_ns1__getFolderTypeListResponse(struct soap*, const char*, struct ns1__getFolderTypeListResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getFolderTypeListResponse(struct soap*, const struct ns1__getFolderTypeListResponse *, const char*, const char*);

#ifndef soap_write_ns1__getFolderTypeListResponse
#define soap_write_ns1__getFolderTypeListResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getFolderTypeListResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getFolderTypeListResponse(soap, data, "ns1:getFolderTypeListResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getFolderTypeListResponse * SOAP_FMAC4 soap_get_ns1__getFolderTypeListResponse(struct soap*, struct ns1__getFolderTypeListResponse *, const char*, const char*);

#ifndef soap_read_ns1__getFolderTypeListResponse
#define soap_read_ns1__getFolderTypeListResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getFolderTypeListResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getFolderTypeListResponse * SOAP_FMAC2 soap_instantiate_ns1__getFolderTypeListResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getFolderTypeListResponse * soap_new_ns1__getFolderTypeListResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getFolderTypeListResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getFolderTypeListResponse * soap_new_req_ns1__getFolderTypeListResponse(struct soap *soap) { struct ns1__getFolderTypeListResponse *_p = soap_instantiate_ns1__getFolderTypeListResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFolderTypeListResponse(soap, _p); } return _p; }

inline struct ns1__getFolderTypeListResponse * soap_new_set_ns1__getFolderTypeListResponse(struct soap *soap, ArrayOfCFolderType *pTypeList) { struct ns1__getFolderTypeListResponse *_p = soap_instantiate_ns1__getFolderTypeListResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFolderTypeListResponse(soap, _p); _p->pTypeList = pTypeList; } return _p; }

inline void soap_delete_ns1__getFolderTypeListResponse(struct soap *soap, struct ns1__getFolderTypeListResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getFolderTypeListResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getFolderTypeByName
#define SOAP_TYPE_ns1__getFolderTypeByName (618)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getFolderTypeByName(struct soap*, struct ns1__getFolderTypeByName *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getFolderTypeByName(struct soap*, const struct ns1__getFolderTypeByName *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getFolderTypeByName(struct soap*, const char*, int, const struct ns1__getFolderTypeByName *, const char*);
SOAP_FMAC3 struct ns1__getFolderTypeByName * SOAP_FMAC4 soap_in_ns1__getFolderTypeByName(struct soap*, const char*, struct ns1__getFolderTypeByName *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getFolderTypeByName(struct soap*, const struct ns1__getFolderTypeByName *, const char*, const char*);

#ifndef soap_write_ns1__getFolderTypeByName
#define soap_write_ns1__getFolderTypeByName(soap, data) ( soap_begin(soap), soap_serialize_ns1__getFolderTypeByName(soap, data), soap_begin_send(soap) || soap_put_ns1__getFolderTypeByName(soap, data, "ns1:getFolderTypeByName", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getFolderTypeByName * SOAP_FMAC4 soap_get_ns1__getFolderTypeByName(struct soap*, struct ns1__getFolderTypeByName *, const char*, const char*);

#ifndef soap_read_ns1__getFolderTypeByName
#define soap_read_ns1__getFolderTypeByName(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getFolderTypeByName(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getFolderTypeByName * SOAP_FMAC2 soap_instantiate_ns1__getFolderTypeByName(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getFolderTypeByName * soap_new_ns1__getFolderTypeByName(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getFolderTypeByName(soap, n, NULL, NULL, NULL); }

inline struct ns1__getFolderTypeByName * soap_new_req_ns1__getFolderTypeByName(struct soap *soap, LONG64 cookie) { struct ns1__getFolderTypeByName *_p = soap_instantiate_ns1__getFolderTypeByName(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFolderTypeByName(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__getFolderTypeByName * soap_new_set_ns1__getFolderTypeByName(struct soap *soap, LONG64 cookie, char *name) { struct ns1__getFolderTypeByName *_p = soap_instantiate_ns1__getFolderTypeByName(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFolderTypeByName(soap, _p); _p->cookie = cookie; _p->name = name; } return _p; }

inline void soap_delete_ns1__getFolderTypeByName(struct soap *soap, struct ns1__getFolderTypeByName *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getFolderTypeByName(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getFolderTypeByNameResponse
#define SOAP_TYPE_ns1__getFolderTypeByNameResponse (615)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getFolderTypeByNameResponse(struct soap*, struct ns1__getFolderTypeByNameResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getFolderTypeByNameResponse(struct soap*, const struct ns1__getFolderTypeByNameResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getFolderTypeByNameResponse(struct soap*, const char*, int, const struct ns1__getFolderTypeByNameResponse *, const char*);
SOAP_FMAC3 struct ns1__getFolderTypeByNameResponse * SOAP_FMAC4 soap_in_ns1__getFolderTypeByNameResponse(struct soap*, const char*, struct ns1__getFolderTypeByNameResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getFolderTypeByNameResponse(struct soap*, const struct ns1__getFolderTypeByNameResponse *, const char*, const char*);

#ifndef soap_write_ns1__getFolderTypeByNameResponse
#define soap_write_ns1__getFolderTypeByNameResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getFolderTypeByNameResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getFolderTypeByNameResponse(soap, data, "ns1:getFolderTypeByNameResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getFolderTypeByNameResponse * SOAP_FMAC4 soap_get_ns1__getFolderTypeByNameResponse(struct soap*, struct ns1__getFolderTypeByNameResponse *, const char*, const char*);

#ifndef soap_read_ns1__getFolderTypeByNameResponse
#define soap_read_ns1__getFolderTypeByNameResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getFolderTypeByNameResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getFolderTypeByNameResponse * SOAP_FMAC2 soap_instantiate_ns1__getFolderTypeByNameResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getFolderTypeByNameResponse * soap_new_ns1__getFolderTypeByNameResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getFolderTypeByNameResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getFolderTypeByNameResponse * soap_new_req_ns1__getFolderTypeByNameResponse(struct soap *soap) { struct ns1__getFolderTypeByNameResponse *_p = soap_instantiate_ns1__getFolderTypeByNameResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFolderTypeByNameResponse(soap, _p); } return _p; }

inline struct ns1__getFolderTypeByNameResponse * soap_new_set_ns1__getFolderTypeByNameResponse(struct soap *soap, ns1__CFolderType *pType) { struct ns1__getFolderTypeByNameResponse *_p = soap_instantiate_ns1__getFolderTypeByNameResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFolderTypeByNameResponse(soap, _p); _p->pType = pType; } return _p; }

inline void soap_delete_ns1__getFolderTypeByNameResponse(struct soap *soap, struct ns1__getFolderTypeByNameResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getFolderTypeByNameResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__generateTestRuns
#define SOAP_TYPE_ns1__generateTestRuns (614)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__generateTestRuns(struct soap*, struct ns1__generateTestRuns *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__generateTestRuns(struct soap*, const struct ns1__generateTestRuns *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__generateTestRuns(struct soap*, const char*, int, const struct ns1__generateTestRuns *, const char*);
SOAP_FMAC3 struct ns1__generateTestRuns * SOAP_FMAC4 soap_in_ns1__generateTestRuns(struct soap*, const char*, struct ns1__generateTestRuns *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__generateTestRuns(struct soap*, const struct ns1__generateTestRuns *, const char*, const char*);

#ifndef soap_write_ns1__generateTestRuns
#define soap_write_ns1__generateTestRuns(soap, data) ( soap_begin(soap), soap_serialize_ns1__generateTestRuns(soap, data), soap_begin_send(soap) || soap_put_ns1__generateTestRuns(soap, data, "ns1:generateTestRuns", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__generateTestRuns * SOAP_FMAC4 soap_get_ns1__generateTestRuns(struct soap*, struct ns1__generateTestRuns *, const char*, const char*);

#ifndef soap_read_ns1__generateTestRuns
#define soap_read_ns1__generateTestRuns(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__generateTestRuns(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__generateTestRuns * SOAP_FMAC2 soap_instantiate_ns1__generateTestRuns(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__generateTestRuns * soap_new_ns1__generateTestRuns(struct soap *soap, int n = -1) { return soap_instantiate_ns1__generateTestRuns(soap, n, NULL, NULL, NULL); }

inline struct ns1__generateTestRuns * soap_new_req_ns1__generateTestRuns(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__generateTestRuns *_p = soap_instantiate_ns1__generateTestRuns(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__generateTestRuns(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline struct ns1__generateTestRuns * soap_new_set_ns1__generateTestRuns(struct soap *soap, LONG64 cookie, LONG64 recordID, ArrayOfCTestRunVariantField *testVariants, char *testRunSet) { struct ns1__generateTestRuns *_p = soap_instantiate_ns1__generateTestRuns(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__generateTestRuns(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->testVariants = testVariants; _p->testRunSet = testRunSet; } return _p; }

inline void soap_delete_ns1__generateTestRuns(struct soap *soap, struct ns1__generateTestRuns *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__generateTestRuns(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__generateTestRunsResponse
#define SOAP_TYPE_ns1__generateTestRunsResponse (609)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__generateTestRunsResponse(struct soap*, struct ns1__generateTestRunsResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__generateTestRunsResponse(struct soap*, const struct ns1__generateTestRunsResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__generateTestRunsResponse(struct soap*, const char*, int, const struct ns1__generateTestRunsResponse *, const char*);
SOAP_FMAC3 struct ns1__generateTestRunsResponse * SOAP_FMAC4 soap_in_ns1__generateTestRunsResponse(struct soap*, const char*, struct ns1__generateTestRunsResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__generateTestRunsResponse(struct soap*, const struct ns1__generateTestRunsResponse *, const char*, const char*);

#ifndef soap_write_ns1__generateTestRunsResponse
#define soap_write_ns1__generateTestRunsResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__generateTestRunsResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__generateTestRunsResponse(soap, data, "ns1:generateTestRunsResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__generateTestRunsResponse * SOAP_FMAC4 soap_get_ns1__generateTestRunsResponse(struct soap*, struct ns1__generateTestRunsResponse *, const char*, const char*);

#ifndef soap_read_ns1__generateTestRunsResponse
#define soap_read_ns1__generateTestRunsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__generateTestRunsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__generateTestRunsResponse * SOAP_FMAC2 soap_instantiate_ns1__generateTestRunsResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__generateTestRunsResponse * soap_new_ns1__generateTestRunsResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__generateTestRunsResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__generateTestRunsResponse * soap_new_req_ns1__generateTestRunsResponse(struct soap *soap) { struct ns1__generateTestRunsResponse *_p = soap_instantiate_ns1__generateTestRunsResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__generateTestRunsResponse(soap, _p); } return _p; }

inline struct ns1__generateTestRunsResponse * soap_new_set_ns1__generateTestRunsResponse(struct soap *soap, ArrayOfCItemToTrack *pResults) { struct ns1__generateTestRunsResponse *_p = soap_instantiate_ns1__generateTestRunsResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__generateTestRunsResponse(soap, _p); _p->pResults = pResults; } return _p; }

inline void soap_delete_ns1__generateTestRunsResponse(struct soap *soap, struct ns1__generateTestRunsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__generateTestRunsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__createDefectForTestRun
#define SOAP_TYPE_ns1__createDefectForTestRun (608)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__createDefectForTestRun(struct soap*, struct ns1__createDefectForTestRun *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__createDefectForTestRun(struct soap*, const struct ns1__createDefectForTestRun *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__createDefectForTestRun(struct soap*, const char*, int, const struct ns1__createDefectForTestRun *, const char*);
SOAP_FMAC3 struct ns1__createDefectForTestRun * SOAP_FMAC4 soap_in_ns1__createDefectForTestRun(struct soap*, const char*, struct ns1__createDefectForTestRun *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__createDefectForTestRun(struct soap*, const struct ns1__createDefectForTestRun *, const char*, const char*);

#ifndef soap_write_ns1__createDefectForTestRun
#define soap_write_ns1__createDefectForTestRun(soap, data) ( soap_begin(soap), soap_serialize_ns1__createDefectForTestRun(soap, data), soap_begin_send(soap) || soap_put_ns1__createDefectForTestRun(soap, data, "ns1:createDefectForTestRun", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__createDefectForTestRun * SOAP_FMAC4 soap_get_ns1__createDefectForTestRun(struct soap*, struct ns1__createDefectForTestRun *, const char*, const char*);

#ifndef soap_read_ns1__createDefectForTestRun
#define soap_read_ns1__createDefectForTestRun(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__createDefectForTestRun(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__createDefectForTestRun * SOAP_FMAC2 soap_instantiate_ns1__createDefectForTestRun(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__createDefectForTestRun * soap_new_ns1__createDefectForTestRun(struct soap *soap, int n = -1) { return soap_instantiate_ns1__createDefectForTestRun(soap, n, NULL, NULL, NULL); }

inline struct ns1__createDefectForTestRun * soap_new_req_ns1__createDefectForTestRun(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__createDefectForTestRun *_p = soap_instantiate_ns1__createDefectForTestRun(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__createDefectForTestRun(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline struct ns1__createDefectForTestRun * soap_new_set_ns1__createDefectForTestRun(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__createDefectForTestRun *_p = soap_instantiate_ns1__createDefectForTestRun(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__createDefectForTestRun(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__createDefectForTestRun(struct soap *soap, struct ns1__createDefectForTestRun *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__createDefectForTestRun(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__createDefectForTestRunResponse
#define SOAP_TYPE_ns1__createDefectForTestRunResponse (605)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__createDefectForTestRunResponse(struct soap*, struct ns1__createDefectForTestRunResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__createDefectForTestRunResponse(struct soap*, const struct ns1__createDefectForTestRunResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__createDefectForTestRunResponse(struct soap*, const char*, int, const struct ns1__createDefectForTestRunResponse *, const char*);
SOAP_FMAC3 struct ns1__createDefectForTestRunResponse * SOAP_FMAC4 soap_in_ns1__createDefectForTestRunResponse(struct soap*, const char*, struct ns1__createDefectForTestRunResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__createDefectForTestRunResponse(struct soap*, const struct ns1__createDefectForTestRunResponse *, const char*, const char*);

#ifndef soap_write_ns1__createDefectForTestRunResponse
#define soap_write_ns1__createDefectForTestRunResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__createDefectForTestRunResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__createDefectForTestRunResponse(soap, data, "ns1:createDefectForTestRunResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__createDefectForTestRunResponse * SOAP_FMAC4 soap_get_ns1__createDefectForTestRunResponse(struct soap*, struct ns1__createDefectForTestRunResponse *, const char*, const char*);

#ifndef soap_read_ns1__createDefectForTestRunResponse
#define soap_read_ns1__createDefectForTestRunResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__createDefectForTestRunResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__createDefectForTestRunResponse * SOAP_FMAC2 soap_instantiate_ns1__createDefectForTestRunResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__createDefectForTestRunResponse * soap_new_ns1__createDefectForTestRunResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__createDefectForTestRunResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__createDefectForTestRunResponse * soap_new_req_ns1__createDefectForTestRunResponse(struct soap *soap) { struct ns1__createDefectForTestRunResponse *_p = soap_instantiate_ns1__createDefectForTestRunResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__createDefectForTestRunResponse(soap, _p); } return _p; }

inline struct ns1__createDefectForTestRunResponse * soap_new_set_ns1__createDefectForTestRunResponse(struct soap *soap, ns1__CDefect *pDefect) { struct ns1__createDefectForTestRunResponse *_p = soap_instantiate_ns1__createDefectForTestRunResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__createDefectForTestRunResponse(soap, _p); _p->pDefect = pDefect; } return _p; }

inline void soap_delete_ns1__createDefectForTestRunResponse(struct soap *soap, struct ns1__createDefectForTestRunResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__createDefectForTestRunResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__cancelSaveTestRun
#define SOAP_TYPE_ns1__cancelSaveTestRun (604)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__cancelSaveTestRun(struct soap*, struct ns1__cancelSaveTestRun *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__cancelSaveTestRun(struct soap*, const struct ns1__cancelSaveTestRun *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__cancelSaveTestRun(struct soap*, const char*, int, const struct ns1__cancelSaveTestRun *, const char*);
SOAP_FMAC3 struct ns1__cancelSaveTestRun * SOAP_FMAC4 soap_in_ns1__cancelSaveTestRun(struct soap*, const char*, struct ns1__cancelSaveTestRun *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__cancelSaveTestRun(struct soap*, const struct ns1__cancelSaveTestRun *, const char*, const char*);

#ifndef soap_write_ns1__cancelSaveTestRun
#define soap_write_ns1__cancelSaveTestRun(soap, data) ( soap_begin(soap), soap_serialize_ns1__cancelSaveTestRun(soap, data), soap_begin_send(soap) || soap_put_ns1__cancelSaveTestRun(soap, data, "ns1:cancelSaveTestRun", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__cancelSaveTestRun * SOAP_FMAC4 soap_get_ns1__cancelSaveTestRun(struct soap*, struct ns1__cancelSaveTestRun *, const char*, const char*);

#ifndef soap_read_ns1__cancelSaveTestRun
#define soap_read_ns1__cancelSaveTestRun(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__cancelSaveTestRun(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__cancelSaveTestRun * SOAP_FMAC2 soap_instantiate_ns1__cancelSaveTestRun(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__cancelSaveTestRun * soap_new_ns1__cancelSaveTestRun(struct soap *soap, int n = -1) { return soap_instantiate_ns1__cancelSaveTestRun(soap, n, NULL, NULL, NULL); }

inline struct ns1__cancelSaveTestRun * soap_new_req_ns1__cancelSaveTestRun(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__cancelSaveTestRun *_p = soap_instantiate_ns1__cancelSaveTestRun(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveTestRun(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline struct ns1__cancelSaveTestRun * soap_new_set_ns1__cancelSaveTestRun(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__cancelSaveTestRun *_p = soap_instantiate_ns1__cancelSaveTestRun(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveTestRun(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__cancelSaveTestRun(struct soap *soap, struct ns1__cancelSaveTestRun *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__cancelSaveTestRun(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__cancelSaveTestRunResponse
#define SOAP_TYPE_ns1__cancelSaveTestRunResponse (603)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__cancelSaveTestRunResponse(struct soap*, struct ns1__cancelSaveTestRunResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__cancelSaveTestRunResponse(struct soap*, const struct ns1__cancelSaveTestRunResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__cancelSaveTestRunResponse(struct soap*, const char*, int, const struct ns1__cancelSaveTestRunResponse *, const char*);
SOAP_FMAC3 struct ns1__cancelSaveTestRunResponse * SOAP_FMAC4 soap_in_ns1__cancelSaveTestRunResponse(struct soap*, const char*, struct ns1__cancelSaveTestRunResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__cancelSaveTestRunResponse(struct soap*, const struct ns1__cancelSaveTestRunResponse *, const char*, const char*);

#ifndef soap_write_ns1__cancelSaveTestRunResponse
#define soap_write_ns1__cancelSaveTestRunResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__cancelSaveTestRunResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__cancelSaveTestRunResponse(soap, data, "ns1:cancelSaveTestRunResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__cancelSaveTestRunResponse * SOAP_FMAC4 soap_get_ns1__cancelSaveTestRunResponse(struct soap*, struct ns1__cancelSaveTestRunResponse *, const char*, const char*);

#ifndef soap_read_ns1__cancelSaveTestRunResponse
#define soap_read_ns1__cancelSaveTestRunResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__cancelSaveTestRunResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__cancelSaveTestRunResponse * SOAP_FMAC2 soap_instantiate_ns1__cancelSaveTestRunResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__cancelSaveTestRunResponse * soap_new_ns1__cancelSaveTestRunResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__cancelSaveTestRunResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__cancelSaveTestRunResponse * soap_new_req_ns1__cancelSaveTestRunResponse(struct soap *soap, int result) { struct ns1__cancelSaveTestRunResponse *_p = soap_instantiate_ns1__cancelSaveTestRunResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveTestRunResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__cancelSaveTestRunResponse * soap_new_set_ns1__cancelSaveTestRunResponse(struct soap *soap, int result) { struct ns1__cancelSaveTestRunResponse *_p = soap_instantiate_ns1__cancelSaveTestRunResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveTestRunResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__cancelSaveTestRunResponse(struct soap *soap, struct ns1__cancelSaveTestRunResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__cancelSaveTestRunResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveTestRun
#define SOAP_TYPE_ns1__saveTestRun (601)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveTestRun(struct soap*, struct ns1__saveTestRun *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveTestRun(struct soap*, const struct ns1__saveTestRun *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveTestRun(struct soap*, const char*, int, const struct ns1__saveTestRun *, const char*);
SOAP_FMAC3 struct ns1__saveTestRun * SOAP_FMAC4 soap_in_ns1__saveTestRun(struct soap*, const char*, struct ns1__saveTestRun *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveTestRun(struct soap*, const struct ns1__saveTestRun *, const char*, const char*);

#ifndef soap_write_ns1__saveTestRun
#define soap_write_ns1__saveTestRun(soap, data) ( soap_begin(soap), soap_serialize_ns1__saveTestRun(soap, data), soap_begin_send(soap) || soap_put_ns1__saveTestRun(soap, data, "ns1:saveTestRun", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__saveTestRun * SOAP_FMAC4 soap_get_ns1__saveTestRun(struct soap*, struct ns1__saveTestRun *, const char*, const char*);

#ifndef soap_read_ns1__saveTestRun
#define soap_read_ns1__saveTestRun(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveTestRun(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__saveTestRun * SOAP_FMAC2 soap_instantiate_ns1__saveTestRun(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveTestRun * soap_new_ns1__saveTestRun(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveTestRun(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveTestRun * soap_new_req_ns1__saveTestRun(struct soap *soap, LONG64 cookie) { struct ns1__saveTestRun *_p = soap_instantiate_ns1__saveTestRun(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveTestRun(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__saveTestRun * soap_new_set_ns1__saveTestRun(struct soap *soap, LONG64 cookie, ns1__CTestRun *pTestRun) { struct ns1__saveTestRun *_p = soap_instantiate_ns1__saveTestRun(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveTestRun(soap, _p); _p->cookie = cookie; _p->pTestRun = pTestRun; } return _p; }

inline void soap_delete_ns1__saveTestRun(struct soap *soap, struct ns1__saveTestRun *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveTestRun(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveTestRunResponse
#define SOAP_TYPE_ns1__saveTestRunResponse (600)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveTestRunResponse(struct soap*, struct ns1__saveTestRunResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveTestRunResponse(struct soap*, const struct ns1__saveTestRunResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveTestRunResponse(struct soap*, const char*, int, const struct ns1__saveTestRunResponse *, const char*);
SOAP_FMAC3 struct ns1__saveTestRunResponse * SOAP_FMAC4 soap_in_ns1__saveTestRunResponse(struct soap*, const char*, struct ns1__saveTestRunResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveTestRunResponse(struct soap*, const struct ns1__saveTestRunResponse *, const char*, const char*);

#ifndef soap_write_ns1__saveTestRunResponse
#define soap_write_ns1__saveTestRunResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__saveTestRunResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__saveTestRunResponse(soap, data, "ns1:saveTestRunResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__saveTestRunResponse * SOAP_FMAC4 soap_get_ns1__saveTestRunResponse(struct soap*, struct ns1__saveTestRunResponse *, const char*, const char*);

#ifndef soap_read_ns1__saveTestRunResponse
#define soap_read_ns1__saveTestRunResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveTestRunResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__saveTestRunResponse * SOAP_FMAC2 soap_instantiate_ns1__saveTestRunResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveTestRunResponse * soap_new_ns1__saveTestRunResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveTestRunResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveTestRunResponse * soap_new_req_ns1__saveTestRunResponse(struct soap *soap, int result) { struct ns1__saveTestRunResponse *_p = soap_instantiate_ns1__saveTestRunResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveTestRunResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__saveTestRunResponse * soap_new_set_ns1__saveTestRunResponse(struct soap *soap, int result) { struct ns1__saveTestRunResponse *_p = soap_instantiate_ns1__saveTestRunResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveTestRunResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__saveTestRunResponse(struct soap *soap, struct ns1__saveTestRunResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveTestRunResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editTestRunByRecordID
#define SOAP_TYPE_ns1__editTestRunByRecordID (598)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editTestRunByRecordID(struct soap*, struct ns1__editTestRunByRecordID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editTestRunByRecordID(struct soap*, const struct ns1__editTestRunByRecordID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editTestRunByRecordID(struct soap*, const char*, int, const struct ns1__editTestRunByRecordID *, const char*);
SOAP_FMAC3 struct ns1__editTestRunByRecordID * SOAP_FMAC4 soap_in_ns1__editTestRunByRecordID(struct soap*, const char*, struct ns1__editTestRunByRecordID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editTestRunByRecordID(struct soap*, const struct ns1__editTestRunByRecordID *, const char*, const char*);

#ifndef soap_write_ns1__editTestRunByRecordID
#define soap_write_ns1__editTestRunByRecordID(soap, data) ( soap_begin(soap), soap_serialize_ns1__editTestRunByRecordID(soap, data), soap_begin_send(soap) || soap_put_ns1__editTestRunByRecordID(soap, data, "ns1:editTestRunByRecordID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editTestRunByRecordID * SOAP_FMAC4 soap_get_ns1__editTestRunByRecordID(struct soap*, struct ns1__editTestRunByRecordID *, const char*, const char*);

#ifndef soap_read_ns1__editTestRunByRecordID
#define soap_read_ns1__editTestRunByRecordID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editTestRunByRecordID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editTestRunByRecordID * SOAP_FMAC2 soap_instantiate_ns1__editTestRunByRecordID(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editTestRunByRecordID * soap_new_ns1__editTestRunByRecordID(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editTestRunByRecordID(soap, n, NULL, NULL, NULL); }

inline struct ns1__editTestRunByRecordID * soap_new_req_ns1__editTestRunByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments) { struct ns1__editTestRunByRecordID *_p = soap_instantiate_ns1__editTestRunByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editTestRunByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline struct ns1__editTestRunByRecordID * soap_new_set_ns1__editTestRunByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments) { struct ns1__editTestRunByRecordID *_p = soap_instantiate_ns1__editTestRunByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editTestRunByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline void soap_delete_ns1__editTestRunByRecordID(struct soap *soap, struct ns1__editTestRunByRecordID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editTestRunByRecordID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editTestRunByRecordIDResponse
#define SOAP_TYPE_ns1__editTestRunByRecordIDResponse (595)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editTestRunByRecordIDResponse(struct soap*, struct ns1__editTestRunByRecordIDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editTestRunByRecordIDResponse(struct soap*, const struct ns1__editTestRunByRecordIDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editTestRunByRecordIDResponse(struct soap*, const char*, int, const struct ns1__editTestRunByRecordIDResponse *, const char*);
SOAP_FMAC3 struct ns1__editTestRunByRecordIDResponse * SOAP_FMAC4 soap_in_ns1__editTestRunByRecordIDResponse(struct soap*, const char*, struct ns1__editTestRunByRecordIDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editTestRunByRecordIDResponse(struct soap*, const struct ns1__editTestRunByRecordIDResponse *, const char*, const char*);

#ifndef soap_write_ns1__editTestRunByRecordIDResponse
#define soap_write_ns1__editTestRunByRecordIDResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__editTestRunByRecordIDResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__editTestRunByRecordIDResponse(soap, data, "ns1:editTestRunByRecordIDResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editTestRunByRecordIDResponse * SOAP_FMAC4 soap_get_ns1__editTestRunByRecordIDResponse(struct soap*, struct ns1__editTestRunByRecordIDResponse *, const char*, const char*);

#ifndef soap_read_ns1__editTestRunByRecordIDResponse
#define soap_read_ns1__editTestRunByRecordIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editTestRunByRecordIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editTestRunByRecordIDResponse * SOAP_FMAC2 soap_instantiate_ns1__editTestRunByRecordIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editTestRunByRecordIDResponse * soap_new_ns1__editTestRunByRecordIDResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editTestRunByRecordIDResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__editTestRunByRecordIDResponse * soap_new_req_ns1__editTestRunByRecordIDResponse(struct soap *soap) { struct ns1__editTestRunByRecordIDResponse *_p = soap_instantiate_ns1__editTestRunByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editTestRunByRecordIDResponse(soap, _p); } return _p; }

inline struct ns1__editTestRunByRecordIDResponse * soap_new_set_ns1__editTestRunByRecordIDResponse(struct soap *soap, ns1__CTestRun *pTestRun) { struct ns1__editTestRunByRecordIDResponse *_p = soap_instantiate_ns1__editTestRunByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editTestRunByRecordIDResponse(soap, _p); _p->pTestRun = pTestRun; } return _p; }

inline void soap_delete_ns1__editTestRunByRecordIDResponse(struct soap *soap, struct ns1__editTestRunByRecordIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editTestRunByRecordIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editTestRun
#define SOAP_TYPE_ns1__editTestRun (594)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editTestRun(struct soap*, struct ns1__editTestRun *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editTestRun(struct soap*, const struct ns1__editTestRun *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editTestRun(struct soap*, const char*, int, const struct ns1__editTestRun *, const char*);
SOAP_FMAC3 struct ns1__editTestRun * SOAP_FMAC4 soap_in_ns1__editTestRun(struct soap*, const char*, struct ns1__editTestRun *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editTestRun(struct soap*, const struct ns1__editTestRun *, const char*, const char*);

#ifndef soap_write_ns1__editTestRun
#define soap_write_ns1__editTestRun(soap, data) ( soap_begin(soap), soap_serialize_ns1__editTestRun(soap, data), soap_begin_send(soap) || soap_put_ns1__editTestRun(soap, data, "ns1:editTestRun", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editTestRun * SOAP_FMAC4 soap_get_ns1__editTestRun(struct soap*, struct ns1__editTestRun *, const char*, const char*);

#ifndef soap_read_ns1__editTestRun
#define soap_read_ns1__editTestRun(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editTestRun(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editTestRun * SOAP_FMAC2 soap_instantiate_ns1__editTestRun(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editTestRun * soap_new_ns1__editTestRun(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editTestRun(soap, n, NULL, NULL, NULL); }

inline struct ns1__editTestRun * soap_new_req_ns1__editTestRun(struct soap *soap, LONG64 cookie, LONG64 testRunNumber, bool bDownloadAttachments) { struct ns1__editTestRun *_p = soap_instantiate_ns1__editTestRun(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editTestRun(soap, _p); _p->cookie = cookie; _p->testRunNumber = testRunNumber; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline struct ns1__editTestRun * soap_new_set_ns1__editTestRun(struct soap *soap, LONG64 cookie, LONG64 testRunNumber, char *summary, bool bDownloadAttachments) { struct ns1__editTestRun *_p = soap_instantiate_ns1__editTestRun(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editTestRun(soap, _p); _p->cookie = cookie; _p->testRunNumber = testRunNumber; _p->summary = summary; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline void soap_delete_ns1__editTestRun(struct soap *soap, struct ns1__editTestRun *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editTestRun(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editTestRunResponse
#define SOAP_TYPE_ns1__editTestRunResponse (591)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editTestRunResponse(struct soap*, struct ns1__editTestRunResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editTestRunResponse(struct soap*, const struct ns1__editTestRunResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editTestRunResponse(struct soap*, const char*, int, const struct ns1__editTestRunResponse *, const char*);
SOAP_FMAC3 struct ns1__editTestRunResponse * SOAP_FMAC4 soap_in_ns1__editTestRunResponse(struct soap*, const char*, struct ns1__editTestRunResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editTestRunResponse(struct soap*, const struct ns1__editTestRunResponse *, const char*, const char*);

#ifndef soap_write_ns1__editTestRunResponse
#define soap_write_ns1__editTestRunResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__editTestRunResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__editTestRunResponse(soap, data, "ns1:editTestRunResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editTestRunResponse * SOAP_FMAC4 soap_get_ns1__editTestRunResponse(struct soap*, struct ns1__editTestRunResponse *, const char*, const char*);

#ifndef soap_read_ns1__editTestRunResponse
#define soap_read_ns1__editTestRunResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editTestRunResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editTestRunResponse * SOAP_FMAC2 soap_instantiate_ns1__editTestRunResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editTestRunResponse * soap_new_ns1__editTestRunResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editTestRunResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__editTestRunResponse * soap_new_req_ns1__editTestRunResponse(struct soap *soap) { struct ns1__editTestRunResponse *_p = soap_instantiate_ns1__editTestRunResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editTestRunResponse(soap, _p); } return _p; }

inline struct ns1__editTestRunResponse * soap_new_set_ns1__editTestRunResponse(struct soap *soap, ns1__CTestRun *pTestRun) { struct ns1__editTestRunResponse *_p = soap_instantiate_ns1__editTestRunResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editTestRunResponse(soap, _p); _p->pTestRun = pTestRun; } return _p; }

inline void soap_delete_ns1__editTestRunResponse(struct soap *soap, struct ns1__editTestRunResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editTestRunResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteTestRunByRecordID
#define SOAP_TYPE_ns1__deleteTestRunByRecordID (590)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteTestRunByRecordID(struct soap*, struct ns1__deleteTestRunByRecordID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteTestRunByRecordID(struct soap*, const struct ns1__deleteTestRunByRecordID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteTestRunByRecordID(struct soap*, const char*, int, const struct ns1__deleteTestRunByRecordID *, const char*);
SOAP_FMAC3 struct ns1__deleteTestRunByRecordID * SOAP_FMAC4 soap_in_ns1__deleteTestRunByRecordID(struct soap*, const char*, struct ns1__deleteTestRunByRecordID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteTestRunByRecordID(struct soap*, const struct ns1__deleteTestRunByRecordID *, const char*, const char*);

#ifndef soap_write_ns1__deleteTestRunByRecordID
#define soap_write_ns1__deleteTestRunByRecordID(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteTestRunByRecordID(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteTestRunByRecordID(soap, data, "ns1:deleteTestRunByRecordID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteTestRunByRecordID * SOAP_FMAC4 soap_get_ns1__deleteTestRunByRecordID(struct soap*, struct ns1__deleteTestRunByRecordID *, const char*, const char*);

#ifndef soap_read_ns1__deleteTestRunByRecordID
#define soap_read_ns1__deleteTestRunByRecordID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteTestRunByRecordID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteTestRunByRecordID * SOAP_FMAC2 soap_instantiate_ns1__deleteTestRunByRecordID(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteTestRunByRecordID * soap_new_ns1__deleteTestRunByRecordID(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteTestRunByRecordID(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteTestRunByRecordID * soap_new_req_ns1__deleteTestRunByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__deleteTestRunByRecordID *_p = soap_instantiate_ns1__deleteTestRunByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteTestRunByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline struct ns1__deleteTestRunByRecordID * soap_new_set_ns1__deleteTestRunByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__deleteTestRunByRecordID *_p = soap_instantiate_ns1__deleteTestRunByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteTestRunByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__deleteTestRunByRecordID(struct soap *soap, struct ns1__deleteTestRunByRecordID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteTestRunByRecordID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteTestRunByRecordIDResponse
#define SOAP_TYPE_ns1__deleteTestRunByRecordIDResponse (589)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteTestRunByRecordIDResponse(struct soap*, struct ns1__deleteTestRunByRecordIDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteTestRunByRecordIDResponse(struct soap*, const struct ns1__deleteTestRunByRecordIDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteTestRunByRecordIDResponse(struct soap*, const char*, int, const struct ns1__deleteTestRunByRecordIDResponse *, const char*);
SOAP_FMAC3 struct ns1__deleteTestRunByRecordIDResponse * SOAP_FMAC4 soap_in_ns1__deleteTestRunByRecordIDResponse(struct soap*, const char*, struct ns1__deleteTestRunByRecordIDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteTestRunByRecordIDResponse(struct soap*, const struct ns1__deleteTestRunByRecordIDResponse *, const char*, const char*);

#ifndef soap_write_ns1__deleteTestRunByRecordIDResponse
#define soap_write_ns1__deleteTestRunByRecordIDResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteTestRunByRecordIDResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteTestRunByRecordIDResponse(soap, data, "ns1:deleteTestRunByRecordIDResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteTestRunByRecordIDResponse * SOAP_FMAC4 soap_get_ns1__deleteTestRunByRecordIDResponse(struct soap*, struct ns1__deleteTestRunByRecordIDResponse *, const char*, const char*);

#ifndef soap_read_ns1__deleteTestRunByRecordIDResponse
#define soap_read_ns1__deleteTestRunByRecordIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteTestRunByRecordIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteTestRunByRecordIDResponse * SOAP_FMAC2 soap_instantiate_ns1__deleteTestRunByRecordIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteTestRunByRecordIDResponse * soap_new_ns1__deleteTestRunByRecordIDResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteTestRunByRecordIDResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteTestRunByRecordIDResponse * soap_new_req_ns1__deleteTestRunByRecordIDResponse(struct soap *soap, int result) { struct ns1__deleteTestRunByRecordIDResponse *_p = soap_instantiate_ns1__deleteTestRunByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteTestRunByRecordIDResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__deleteTestRunByRecordIDResponse * soap_new_set_ns1__deleteTestRunByRecordIDResponse(struct soap *soap, int result) { struct ns1__deleteTestRunByRecordIDResponse *_p = soap_instantiate_ns1__deleteTestRunByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteTestRunByRecordIDResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__deleteTestRunByRecordIDResponse(struct soap *soap, struct ns1__deleteTestRunByRecordIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteTestRunByRecordIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteTestRun
#define SOAP_TYPE_ns1__deleteTestRun (587)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteTestRun(struct soap*, struct ns1__deleteTestRun *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteTestRun(struct soap*, const struct ns1__deleteTestRun *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteTestRun(struct soap*, const char*, int, const struct ns1__deleteTestRun *, const char*);
SOAP_FMAC3 struct ns1__deleteTestRun * SOAP_FMAC4 soap_in_ns1__deleteTestRun(struct soap*, const char*, struct ns1__deleteTestRun *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteTestRun(struct soap*, const struct ns1__deleteTestRun *, const char*, const char*);

#ifndef soap_write_ns1__deleteTestRun
#define soap_write_ns1__deleteTestRun(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteTestRun(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteTestRun(soap, data, "ns1:deleteTestRun", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteTestRun * SOAP_FMAC4 soap_get_ns1__deleteTestRun(struct soap*, struct ns1__deleteTestRun *, const char*, const char*);

#ifndef soap_read_ns1__deleteTestRun
#define soap_read_ns1__deleteTestRun(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteTestRun(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteTestRun * SOAP_FMAC2 soap_instantiate_ns1__deleteTestRun(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteTestRun * soap_new_ns1__deleteTestRun(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteTestRun(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteTestRun * soap_new_req_ns1__deleteTestRun(struct soap *soap, LONG64 cookie, LONG64 testRunNumber) { struct ns1__deleteTestRun *_p = soap_instantiate_ns1__deleteTestRun(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteTestRun(soap, _p); _p->cookie = cookie; _p->testRunNumber = testRunNumber; } return _p; }

inline struct ns1__deleteTestRun * soap_new_set_ns1__deleteTestRun(struct soap *soap, LONG64 cookie, LONG64 testRunNumber, char *summary) { struct ns1__deleteTestRun *_p = soap_instantiate_ns1__deleteTestRun(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteTestRun(soap, _p); _p->cookie = cookie; _p->testRunNumber = testRunNumber; _p->summary = summary; } return _p; }

inline void soap_delete_ns1__deleteTestRun(struct soap *soap, struct ns1__deleteTestRun *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteTestRun(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteTestRunResponse
#define SOAP_TYPE_ns1__deleteTestRunResponse (586)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteTestRunResponse(struct soap*, struct ns1__deleteTestRunResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteTestRunResponse(struct soap*, const struct ns1__deleteTestRunResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteTestRunResponse(struct soap*, const char*, int, const struct ns1__deleteTestRunResponse *, const char*);
SOAP_FMAC3 struct ns1__deleteTestRunResponse * SOAP_FMAC4 soap_in_ns1__deleteTestRunResponse(struct soap*, const char*, struct ns1__deleteTestRunResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteTestRunResponse(struct soap*, const struct ns1__deleteTestRunResponse *, const char*, const char*);

#ifndef soap_write_ns1__deleteTestRunResponse
#define soap_write_ns1__deleteTestRunResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteTestRunResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteTestRunResponse(soap, data, "ns1:deleteTestRunResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteTestRunResponse * SOAP_FMAC4 soap_get_ns1__deleteTestRunResponse(struct soap*, struct ns1__deleteTestRunResponse *, const char*, const char*);

#ifndef soap_read_ns1__deleteTestRunResponse
#define soap_read_ns1__deleteTestRunResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteTestRunResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteTestRunResponse * SOAP_FMAC2 soap_instantiate_ns1__deleteTestRunResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteTestRunResponse * soap_new_ns1__deleteTestRunResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteTestRunResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteTestRunResponse * soap_new_req_ns1__deleteTestRunResponse(struct soap *soap, int result) { struct ns1__deleteTestRunResponse *_p = soap_instantiate_ns1__deleteTestRunResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteTestRunResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__deleteTestRunResponse * soap_new_set_ns1__deleteTestRunResponse(struct soap *soap, int result) { struct ns1__deleteTestRunResponse *_p = soap_instantiate_ns1__deleteTestRunResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteTestRunResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__deleteTestRunResponse(struct soap *soap, struct ns1__deleteTestRunResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteTestRunResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getTestRunByRecordID
#define SOAP_TYPE_ns1__getTestRunByRecordID (584)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getTestRunByRecordID(struct soap*, struct ns1__getTestRunByRecordID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getTestRunByRecordID(struct soap*, const struct ns1__getTestRunByRecordID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTestRunByRecordID(struct soap*, const char*, int, const struct ns1__getTestRunByRecordID *, const char*);
SOAP_FMAC3 struct ns1__getTestRunByRecordID * SOAP_FMAC4 soap_in_ns1__getTestRunByRecordID(struct soap*, const char*, struct ns1__getTestRunByRecordID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getTestRunByRecordID(struct soap*, const struct ns1__getTestRunByRecordID *, const char*, const char*);

#ifndef soap_write_ns1__getTestRunByRecordID
#define soap_write_ns1__getTestRunByRecordID(soap, data) ( soap_begin(soap), soap_serialize_ns1__getTestRunByRecordID(soap, data), soap_begin_send(soap) || soap_put_ns1__getTestRunByRecordID(soap, data, "ns1:getTestRunByRecordID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getTestRunByRecordID * SOAP_FMAC4 soap_get_ns1__getTestRunByRecordID(struct soap*, struct ns1__getTestRunByRecordID *, const char*, const char*);

#ifndef soap_read_ns1__getTestRunByRecordID
#define soap_read_ns1__getTestRunByRecordID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getTestRunByRecordID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getTestRunByRecordID * SOAP_FMAC2 soap_instantiate_ns1__getTestRunByRecordID(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getTestRunByRecordID * soap_new_ns1__getTestRunByRecordID(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getTestRunByRecordID(soap, n, NULL, NULL, NULL); }

inline struct ns1__getTestRunByRecordID * soap_new_req_ns1__getTestRunByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments) { struct ns1__getTestRunByRecordID *_p = soap_instantiate_ns1__getTestRunByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTestRunByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline struct ns1__getTestRunByRecordID * soap_new_set_ns1__getTestRunByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments) { struct ns1__getTestRunByRecordID *_p = soap_instantiate_ns1__getTestRunByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTestRunByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline void soap_delete_ns1__getTestRunByRecordID(struct soap *soap, struct ns1__getTestRunByRecordID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getTestRunByRecordID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getTestRunByRecordIDResponse
#define SOAP_TYPE_ns1__getTestRunByRecordIDResponse (581)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getTestRunByRecordIDResponse(struct soap*, struct ns1__getTestRunByRecordIDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getTestRunByRecordIDResponse(struct soap*, const struct ns1__getTestRunByRecordIDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTestRunByRecordIDResponse(struct soap*, const char*, int, const struct ns1__getTestRunByRecordIDResponse *, const char*);
SOAP_FMAC3 struct ns1__getTestRunByRecordIDResponse * SOAP_FMAC4 soap_in_ns1__getTestRunByRecordIDResponse(struct soap*, const char*, struct ns1__getTestRunByRecordIDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getTestRunByRecordIDResponse(struct soap*, const struct ns1__getTestRunByRecordIDResponse *, const char*, const char*);

#ifndef soap_write_ns1__getTestRunByRecordIDResponse
#define soap_write_ns1__getTestRunByRecordIDResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getTestRunByRecordIDResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getTestRunByRecordIDResponse(soap, data, "ns1:getTestRunByRecordIDResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getTestRunByRecordIDResponse * SOAP_FMAC4 soap_get_ns1__getTestRunByRecordIDResponse(struct soap*, struct ns1__getTestRunByRecordIDResponse *, const char*, const char*);

#ifndef soap_read_ns1__getTestRunByRecordIDResponse
#define soap_read_ns1__getTestRunByRecordIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getTestRunByRecordIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getTestRunByRecordIDResponse * SOAP_FMAC2 soap_instantiate_ns1__getTestRunByRecordIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getTestRunByRecordIDResponse * soap_new_ns1__getTestRunByRecordIDResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getTestRunByRecordIDResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getTestRunByRecordIDResponse * soap_new_req_ns1__getTestRunByRecordIDResponse(struct soap *soap) { struct ns1__getTestRunByRecordIDResponse *_p = soap_instantiate_ns1__getTestRunByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTestRunByRecordIDResponse(soap, _p); } return _p; }

inline struct ns1__getTestRunByRecordIDResponse * soap_new_set_ns1__getTestRunByRecordIDResponse(struct soap *soap, ns1__CTestRun *pTestRun) { struct ns1__getTestRunByRecordIDResponse *_p = soap_instantiate_ns1__getTestRunByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTestRunByRecordIDResponse(soap, _p); _p->pTestRun = pTestRun; } return _p; }

inline void soap_delete_ns1__getTestRunByRecordIDResponse(struct soap *soap, struct ns1__getTestRunByRecordIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getTestRunByRecordIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getTestRun
#define SOAP_TYPE_ns1__getTestRun (580)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getTestRun(struct soap*, struct ns1__getTestRun *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getTestRun(struct soap*, const struct ns1__getTestRun *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTestRun(struct soap*, const char*, int, const struct ns1__getTestRun *, const char*);
SOAP_FMAC3 struct ns1__getTestRun * SOAP_FMAC4 soap_in_ns1__getTestRun(struct soap*, const char*, struct ns1__getTestRun *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getTestRun(struct soap*, const struct ns1__getTestRun *, const char*, const char*);

#ifndef soap_write_ns1__getTestRun
#define soap_write_ns1__getTestRun(soap, data) ( soap_begin(soap), soap_serialize_ns1__getTestRun(soap, data), soap_begin_send(soap) || soap_put_ns1__getTestRun(soap, data, "ns1:getTestRun", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getTestRun * SOAP_FMAC4 soap_get_ns1__getTestRun(struct soap*, struct ns1__getTestRun *, const char*, const char*);

#ifndef soap_read_ns1__getTestRun
#define soap_read_ns1__getTestRun(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getTestRun(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getTestRun * SOAP_FMAC2 soap_instantiate_ns1__getTestRun(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getTestRun * soap_new_ns1__getTestRun(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getTestRun(soap, n, NULL, NULL, NULL); }

inline struct ns1__getTestRun * soap_new_req_ns1__getTestRun(struct soap *soap, LONG64 cookie, LONG64 testRunNumber, bool bDownloadAttachments) { struct ns1__getTestRun *_p = soap_instantiate_ns1__getTestRun(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTestRun(soap, _p); _p->cookie = cookie; _p->testRunNumber = testRunNumber; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline struct ns1__getTestRun * soap_new_set_ns1__getTestRun(struct soap *soap, LONG64 cookie, LONG64 testRunNumber, char *summary, bool bDownloadAttachments) { struct ns1__getTestRun *_p = soap_instantiate_ns1__getTestRun(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTestRun(soap, _p); _p->cookie = cookie; _p->testRunNumber = testRunNumber; _p->summary = summary; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline void soap_delete_ns1__getTestRun(struct soap *soap, struct ns1__getTestRun *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getTestRun(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getTestRunResponse
#define SOAP_TYPE_ns1__getTestRunResponse (576)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getTestRunResponse(struct soap*, struct ns1__getTestRunResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getTestRunResponse(struct soap*, const struct ns1__getTestRunResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTestRunResponse(struct soap*, const char*, int, const struct ns1__getTestRunResponse *, const char*);
SOAP_FMAC3 struct ns1__getTestRunResponse * SOAP_FMAC4 soap_in_ns1__getTestRunResponse(struct soap*, const char*, struct ns1__getTestRunResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getTestRunResponse(struct soap*, const struct ns1__getTestRunResponse *, const char*, const char*);

#ifndef soap_write_ns1__getTestRunResponse
#define soap_write_ns1__getTestRunResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getTestRunResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getTestRunResponse(soap, data, "ns1:getTestRunResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getTestRunResponse * SOAP_FMAC4 soap_get_ns1__getTestRunResponse(struct soap*, struct ns1__getTestRunResponse *, const char*, const char*);

#ifndef soap_read_ns1__getTestRunResponse
#define soap_read_ns1__getTestRunResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getTestRunResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getTestRunResponse * SOAP_FMAC2 soap_instantiate_ns1__getTestRunResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getTestRunResponse * soap_new_ns1__getTestRunResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getTestRunResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getTestRunResponse * soap_new_req_ns1__getTestRunResponse(struct soap *soap) { struct ns1__getTestRunResponse *_p = soap_instantiate_ns1__getTestRunResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTestRunResponse(soap, _p); } return _p; }

inline struct ns1__getTestRunResponse * soap_new_set_ns1__getTestRunResponse(struct soap *soap, ns1__CTestRun *pTestRun) { struct ns1__getTestRunResponse *_p = soap_instantiate_ns1__getTestRunResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTestRunResponse(soap, _p); _p->pTestRun = pTestRun; } return _p; }

inline void soap_delete_ns1__getTestRunResponse(struct soap *soap, struct ns1__getTestRunResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getTestRunResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__cancelSaveTestCase
#define SOAP_TYPE_ns1__cancelSaveTestCase (575)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__cancelSaveTestCase(struct soap*, struct ns1__cancelSaveTestCase *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__cancelSaveTestCase(struct soap*, const struct ns1__cancelSaveTestCase *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__cancelSaveTestCase(struct soap*, const char*, int, const struct ns1__cancelSaveTestCase *, const char*);
SOAP_FMAC3 struct ns1__cancelSaveTestCase * SOAP_FMAC4 soap_in_ns1__cancelSaveTestCase(struct soap*, const char*, struct ns1__cancelSaveTestCase *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__cancelSaveTestCase(struct soap*, const struct ns1__cancelSaveTestCase *, const char*, const char*);

#ifndef soap_write_ns1__cancelSaveTestCase
#define soap_write_ns1__cancelSaveTestCase(soap, data) ( soap_begin(soap), soap_serialize_ns1__cancelSaveTestCase(soap, data), soap_begin_send(soap) || soap_put_ns1__cancelSaveTestCase(soap, data, "ns1:cancelSaveTestCase", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__cancelSaveTestCase * SOAP_FMAC4 soap_get_ns1__cancelSaveTestCase(struct soap*, struct ns1__cancelSaveTestCase *, const char*, const char*);

#ifndef soap_read_ns1__cancelSaveTestCase
#define soap_read_ns1__cancelSaveTestCase(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__cancelSaveTestCase(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__cancelSaveTestCase * SOAP_FMAC2 soap_instantiate_ns1__cancelSaveTestCase(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__cancelSaveTestCase * soap_new_ns1__cancelSaveTestCase(struct soap *soap, int n = -1) { return soap_instantiate_ns1__cancelSaveTestCase(soap, n, NULL, NULL, NULL); }

inline struct ns1__cancelSaveTestCase * soap_new_req_ns1__cancelSaveTestCase(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__cancelSaveTestCase *_p = soap_instantiate_ns1__cancelSaveTestCase(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveTestCase(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline struct ns1__cancelSaveTestCase * soap_new_set_ns1__cancelSaveTestCase(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__cancelSaveTestCase *_p = soap_instantiate_ns1__cancelSaveTestCase(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveTestCase(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__cancelSaveTestCase(struct soap *soap, struct ns1__cancelSaveTestCase *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__cancelSaveTestCase(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__cancelSaveTestCaseResponse
#define SOAP_TYPE_ns1__cancelSaveTestCaseResponse (574)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__cancelSaveTestCaseResponse(struct soap*, struct ns1__cancelSaveTestCaseResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__cancelSaveTestCaseResponse(struct soap*, const struct ns1__cancelSaveTestCaseResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__cancelSaveTestCaseResponse(struct soap*, const char*, int, const struct ns1__cancelSaveTestCaseResponse *, const char*);
SOAP_FMAC3 struct ns1__cancelSaveTestCaseResponse * SOAP_FMAC4 soap_in_ns1__cancelSaveTestCaseResponse(struct soap*, const char*, struct ns1__cancelSaveTestCaseResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__cancelSaveTestCaseResponse(struct soap*, const struct ns1__cancelSaveTestCaseResponse *, const char*, const char*);

#ifndef soap_write_ns1__cancelSaveTestCaseResponse
#define soap_write_ns1__cancelSaveTestCaseResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__cancelSaveTestCaseResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__cancelSaveTestCaseResponse(soap, data, "ns1:cancelSaveTestCaseResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__cancelSaveTestCaseResponse * SOAP_FMAC4 soap_get_ns1__cancelSaveTestCaseResponse(struct soap*, struct ns1__cancelSaveTestCaseResponse *, const char*, const char*);

#ifndef soap_read_ns1__cancelSaveTestCaseResponse
#define soap_read_ns1__cancelSaveTestCaseResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__cancelSaveTestCaseResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__cancelSaveTestCaseResponse * SOAP_FMAC2 soap_instantiate_ns1__cancelSaveTestCaseResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__cancelSaveTestCaseResponse * soap_new_ns1__cancelSaveTestCaseResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__cancelSaveTestCaseResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__cancelSaveTestCaseResponse * soap_new_req_ns1__cancelSaveTestCaseResponse(struct soap *soap, int result) { struct ns1__cancelSaveTestCaseResponse *_p = soap_instantiate_ns1__cancelSaveTestCaseResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveTestCaseResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__cancelSaveTestCaseResponse * soap_new_set_ns1__cancelSaveTestCaseResponse(struct soap *soap, int result) { struct ns1__cancelSaveTestCaseResponse *_p = soap_instantiate_ns1__cancelSaveTestCaseResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveTestCaseResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__cancelSaveTestCaseResponse(struct soap *soap, struct ns1__cancelSaveTestCaseResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__cancelSaveTestCaseResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveTestCase
#define SOAP_TYPE_ns1__saveTestCase (572)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveTestCase(struct soap*, struct ns1__saveTestCase *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveTestCase(struct soap*, const struct ns1__saveTestCase *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveTestCase(struct soap*, const char*, int, const struct ns1__saveTestCase *, const char*);
SOAP_FMAC3 struct ns1__saveTestCase * SOAP_FMAC4 soap_in_ns1__saveTestCase(struct soap*, const char*, struct ns1__saveTestCase *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveTestCase(struct soap*, const struct ns1__saveTestCase *, const char*, const char*);

#ifndef soap_write_ns1__saveTestCase
#define soap_write_ns1__saveTestCase(soap, data) ( soap_begin(soap), soap_serialize_ns1__saveTestCase(soap, data), soap_begin_send(soap) || soap_put_ns1__saveTestCase(soap, data, "ns1:saveTestCase", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__saveTestCase * SOAP_FMAC4 soap_get_ns1__saveTestCase(struct soap*, struct ns1__saveTestCase *, const char*, const char*);

#ifndef soap_read_ns1__saveTestCase
#define soap_read_ns1__saveTestCase(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveTestCase(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__saveTestCase * SOAP_FMAC2 soap_instantiate_ns1__saveTestCase(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveTestCase * soap_new_ns1__saveTestCase(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveTestCase(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveTestCase * soap_new_req_ns1__saveTestCase(struct soap *soap, LONG64 cookie) { struct ns1__saveTestCase *_p = soap_instantiate_ns1__saveTestCase(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveTestCase(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__saveTestCase * soap_new_set_ns1__saveTestCase(struct soap *soap, LONG64 cookie, ns1__CTestCase *pTestCase) { struct ns1__saveTestCase *_p = soap_instantiate_ns1__saveTestCase(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveTestCase(soap, _p); _p->cookie = cookie; _p->pTestCase = pTestCase; } return _p; }

inline void soap_delete_ns1__saveTestCase(struct soap *soap, struct ns1__saveTestCase *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveTestCase(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveTestCaseResponse
#define SOAP_TYPE_ns1__saveTestCaseResponse (571)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveTestCaseResponse(struct soap*, struct ns1__saveTestCaseResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveTestCaseResponse(struct soap*, const struct ns1__saveTestCaseResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveTestCaseResponse(struct soap*, const char*, int, const struct ns1__saveTestCaseResponse *, const char*);
SOAP_FMAC3 struct ns1__saveTestCaseResponse * SOAP_FMAC4 soap_in_ns1__saveTestCaseResponse(struct soap*, const char*, struct ns1__saveTestCaseResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveTestCaseResponse(struct soap*, const struct ns1__saveTestCaseResponse *, const char*, const char*);

#ifndef soap_write_ns1__saveTestCaseResponse
#define soap_write_ns1__saveTestCaseResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__saveTestCaseResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__saveTestCaseResponse(soap, data, "ns1:saveTestCaseResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__saveTestCaseResponse * SOAP_FMAC4 soap_get_ns1__saveTestCaseResponse(struct soap*, struct ns1__saveTestCaseResponse *, const char*, const char*);

#ifndef soap_read_ns1__saveTestCaseResponse
#define soap_read_ns1__saveTestCaseResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveTestCaseResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__saveTestCaseResponse * SOAP_FMAC2 soap_instantiate_ns1__saveTestCaseResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveTestCaseResponse * soap_new_ns1__saveTestCaseResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveTestCaseResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveTestCaseResponse * soap_new_req_ns1__saveTestCaseResponse(struct soap *soap, int result) { struct ns1__saveTestCaseResponse *_p = soap_instantiate_ns1__saveTestCaseResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveTestCaseResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__saveTestCaseResponse * soap_new_set_ns1__saveTestCaseResponse(struct soap *soap, int result) { struct ns1__saveTestCaseResponse *_p = soap_instantiate_ns1__saveTestCaseResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveTestCaseResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__saveTestCaseResponse(struct soap *soap, struct ns1__saveTestCaseResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveTestCaseResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editTestCaseByRecordID
#define SOAP_TYPE_ns1__editTestCaseByRecordID (569)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editTestCaseByRecordID(struct soap*, struct ns1__editTestCaseByRecordID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editTestCaseByRecordID(struct soap*, const struct ns1__editTestCaseByRecordID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editTestCaseByRecordID(struct soap*, const char*, int, const struct ns1__editTestCaseByRecordID *, const char*);
SOAP_FMAC3 struct ns1__editTestCaseByRecordID * SOAP_FMAC4 soap_in_ns1__editTestCaseByRecordID(struct soap*, const char*, struct ns1__editTestCaseByRecordID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editTestCaseByRecordID(struct soap*, const struct ns1__editTestCaseByRecordID *, const char*, const char*);

#ifndef soap_write_ns1__editTestCaseByRecordID
#define soap_write_ns1__editTestCaseByRecordID(soap, data) ( soap_begin(soap), soap_serialize_ns1__editTestCaseByRecordID(soap, data), soap_begin_send(soap) || soap_put_ns1__editTestCaseByRecordID(soap, data, "ns1:editTestCaseByRecordID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editTestCaseByRecordID * SOAP_FMAC4 soap_get_ns1__editTestCaseByRecordID(struct soap*, struct ns1__editTestCaseByRecordID *, const char*, const char*);

#ifndef soap_read_ns1__editTestCaseByRecordID
#define soap_read_ns1__editTestCaseByRecordID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editTestCaseByRecordID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editTestCaseByRecordID * SOAP_FMAC2 soap_instantiate_ns1__editTestCaseByRecordID(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editTestCaseByRecordID * soap_new_ns1__editTestCaseByRecordID(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editTestCaseByRecordID(soap, n, NULL, NULL, NULL); }

inline struct ns1__editTestCaseByRecordID * soap_new_req_ns1__editTestCaseByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments) { struct ns1__editTestCaseByRecordID *_p = soap_instantiate_ns1__editTestCaseByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editTestCaseByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline struct ns1__editTestCaseByRecordID * soap_new_set_ns1__editTestCaseByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments) { struct ns1__editTestCaseByRecordID *_p = soap_instantiate_ns1__editTestCaseByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editTestCaseByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline void soap_delete_ns1__editTestCaseByRecordID(struct soap *soap, struct ns1__editTestCaseByRecordID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editTestCaseByRecordID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editTestCaseByRecordIDResponse
#define SOAP_TYPE_ns1__editTestCaseByRecordIDResponse (566)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editTestCaseByRecordIDResponse(struct soap*, struct ns1__editTestCaseByRecordIDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editTestCaseByRecordIDResponse(struct soap*, const struct ns1__editTestCaseByRecordIDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editTestCaseByRecordIDResponse(struct soap*, const char*, int, const struct ns1__editTestCaseByRecordIDResponse *, const char*);
SOAP_FMAC3 struct ns1__editTestCaseByRecordIDResponse * SOAP_FMAC4 soap_in_ns1__editTestCaseByRecordIDResponse(struct soap*, const char*, struct ns1__editTestCaseByRecordIDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editTestCaseByRecordIDResponse(struct soap*, const struct ns1__editTestCaseByRecordIDResponse *, const char*, const char*);

#ifndef soap_write_ns1__editTestCaseByRecordIDResponse
#define soap_write_ns1__editTestCaseByRecordIDResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__editTestCaseByRecordIDResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__editTestCaseByRecordIDResponse(soap, data, "ns1:editTestCaseByRecordIDResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editTestCaseByRecordIDResponse * SOAP_FMAC4 soap_get_ns1__editTestCaseByRecordIDResponse(struct soap*, struct ns1__editTestCaseByRecordIDResponse *, const char*, const char*);

#ifndef soap_read_ns1__editTestCaseByRecordIDResponse
#define soap_read_ns1__editTestCaseByRecordIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editTestCaseByRecordIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editTestCaseByRecordIDResponse * SOAP_FMAC2 soap_instantiate_ns1__editTestCaseByRecordIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editTestCaseByRecordIDResponse * soap_new_ns1__editTestCaseByRecordIDResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editTestCaseByRecordIDResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__editTestCaseByRecordIDResponse * soap_new_req_ns1__editTestCaseByRecordIDResponse(struct soap *soap) { struct ns1__editTestCaseByRecordIDResponse *_p = soap_instantiate_ns1__editTestCaseByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editTestCaseByRecordIDResponse(soap, _p); } return _p; }

inline struct ns1__editTestCaseByRecordIDResponse * soap_new_set_ns1__editTestCaseByRecordIDResponse(struct soap *soap, ns1__CTestCase *pTestCase) { struct ns1__editTestCaseByRecordIDResponse *_p = soap_instantiate_ns1__editTestCaseByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editTestCaseByRecordIDResponse(soap, _p); _p->pTestCase = pTestCase; } return _p; }

inline void soap_delete_ns1__editTestCaseByRecordIDResponse(struct soap *soap, struct ns1__editTestCaseByRecordIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editTestCaseByRecordIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editTestCase
#define SOAP_TYPE_ns1__editTestCase (565)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editTestCase(struct soap*, struct ns1__editTestCase *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editTestCase(struct soap*, const struct ns1__editTestCase *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editTestCase(struct soap*, const char*, int, const struct ns1__editTestCase *, const char*);
SOAP_FMAC3 struct ns1__editTestCase * SOAP_FMAC4 soap_in_ns1__editTestCase(struct soap*, const char*, struct ns1__editTestCase *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editTestCase(struct soap*, const struct ns1__editTestCase *, const char*, const char*);

#ifndef soap_write_ns1__editTestCase
#define soap_write_ns1__editTestCase(soap, data) ( soap_begin(soap), soap_serialize_ns1__editTestCase(soap, data), soap_begin_send(soap) || soap_put_ns1__editTestCase(soap, data, "ns1:editTestCase", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editTestCase * SOAP_FMAC4 soap_get_ns1__editTestCase(struct soap*, struct ns1__editTestCase *, const char*, const char*);

#ifndef soap_read_ns1__editTestCase
#define soap_read_ns1__editTestCase(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editTestCase(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editTestCase * SOAP_FMAC2 soap_instantiate_ns1__editTestCase(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editTestCase * soap_new_ns1__editTestCase(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editTestCase(soap, n, NULL, NULL, NULL); }

inline struct ns1__editTestCase * soap_new_req_ns1__editTestCase(struct soap *soap, LONG64 cookie, LONG64 testCaseNumber, bool bDownloadAttachments) { struct ns1__editTestCase *_p = soap_instantiate_ns1__editTestCase(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editTestCase(soap, _p); _p->cookie = cookie; _p->testCaseNumber = testCaseNumber; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline struct ns1__editTestCase * soap_new_set_ns1__editTestCase(struct soap *soap, LONG64 cookie, LONG64 testCaseNumber, char *summary, bool bDownloadAttachments) { struct ns1__editTestCase *_p = soap_instantiate_ns1__editTestCase(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editTestCase(soap, _p); _p->cookie = cookie; _p->testCaseNumber = testCaseNumber; _p->summary = summary; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline void soap_delete_ns1__editTestCase(struct soap *soap, struct ns1__editTestCase *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editTestCase(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editTestCaseResponse
#define SOAP_TYPE_ns1__editTestCaseResponse (562)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editTestCaseResponse(struct soap*, struct ns1__editTestCaseResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editTestCaseResponse(struct soap*, const struct ns1__editTestCaseResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editTestCaseResponse(struct soap*, const char*, int, const struct ns1__editTestCaseResponse *, const char*);
SOAP_FMAC3 struct ns1__editTestCaseResponse * SOAP_FMAC4 soap_in_ns1__editTestCaseResponse(struct soap*, const char*, struct ns1__editTestCaseResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editTestCaseResponse(struct soap*, const struct ns1__editTestCaseResponse *, const char*, const char*);

#ifndef soap_write_ns1__editTestCaseResponse
#define soap_write_ns1__editTestCaseResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__editTestCaseResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__editTestCaseResponse(soap, data, "ns1:editTestCaseResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editTestCaseResponse * SOAP_FMAC4 soap_get_ns1__editTestCaseResponse(struct soap*, struct ns1__editTestCaseResponse *, const char*, const char*);

#ifndef soap_read_ns1__editTestCaseResponse
#define soap_read_ns1__editTestCaseResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editTestCaseResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editTestCaseResponse * SOAP_FMAC2 soap_instantiate_ns1__editTestCaseResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editTestCaseResponse * soap_new_ns1__editTestCaseResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editTestCaseResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__editTestCaseResponse * soap_new_req_ns1__editTestCaseResponse(struct soap *soap) { struct ns1__editTestCaseResponse *_p = soap_instantiate_ns1__editTestCaseResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editTestCaseResponse(soap, _p); } return _p; }

inline struct ns1__editTestCaseResponse * soap_new_set_ns1__editTestCaseResponse(struct soap *soap, ns1__CTestCase *pTestCase) { struct ns1__editTestCaseResponse *_p = soap_instantiate_ns1__editTestCaseResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editTestCaseResponse(soap, _p); _p->pTestCase = pTestCase; } return _p; }

inline void soap_delete_ns1__editTestCaseResponse(struct soap *soap, struct ns1__editTestCaseResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editTestCaseResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteTestCaseByRecordID
#define SOAP_TYPE_ns1__deleteTestCaseByRecordID (561)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteTestCaseByRecordID(struct soap*, struct ns1__deleteTestCaseByRecordID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteTestCaseByRecordID(struct soap*, const struct ns1__deleteTestCaseByRecordID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteTestCaseByRecordID(struct soap*, const char*, int, const struct ns1__deleteTestCaseByRecordID *, const char*);
SOAP_FMAC3 struct ns1__deleteTestCaseByRecordID * SOAP_FMAC4 soap_in_ns1__deleteTestCaseByRecordID(struct soap*, const char*, struct ns1__deleteTestCaseByRecordID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteTestCaseByRecordID(struct soap*, const struct ns1__deleteTestCaseByRecordID *, const char*, const char*);

#ifndef soap_write_ns1__deleteTestCaseByRecordID
#define soap_write_ns1__deleteTestCaseByRecordID(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteTestCaseByRecordID(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteTestCaseByRecordID(soap, data, "ns1:deleteTestCaseByRecordID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteTestCaseByRecordID * SOAP_FMAC4 soap_get_ns1__deleteTestCaseByRecordID(struct soap*, struct ns1__deleteTestCaseByRecordID *, const char*, const char*);

#ifndef soap_read_ns1__deleteTestCaseByRecordID
#define soap_read_ns1__deleteTestCaseByRecordID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteTestCaseByRecordID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteTestCaseByRecordID * SOAP_FMAC2 soap_instantiate_ns1__deleteTestCaseByRecordID(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteTestCaseByRecordID * soap_new_ns1__deleteTestCaseByRecordID(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteTestCaseByRecordID(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteTestCaseByRecordID * soap_new_req_ns1__deleteTestCaseByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID, bool bDeleteAssociatedTestRun) { struct ns1__deleteTestCaseByRecordID *_p = soap_instantiate_ns1__deleteTestCaseByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteTestCaseByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->bDeleteAssociatedTestRun = bDeleteAssociatedTestRun; } return _p; }

inline struct ns1__deleteTestCaseByRecordID * soap_new_set_ns1__deleteTestCaseByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID, bool bDeleteAssociatedTestRun) { struct ns1__deleteTestCaseByRecordID *_p = soap_instantiate_ns1__deleteTestCaseByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteTestCaseByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->bDeleteAssociatedTestRun = bDeleteAssociatedTestRun; } return _p; }

inline void soap_delete_ns1__deleteTestCaseByRecordID(struct soap *soap, struct ns1__deleteTestCaseByRecordID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteTestCaseByRecordID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteTestCaseByRecordIDResponse
#define SOAP_TYPE_ns1__deleteTestCaseByRecordIDResponse (560)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteTestCaseByRecordIDResponse(struct soap*, struct ns1__deleteTestCaseByRecordIDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteTestCaseByRecordIDResponse(struct soap*, const struct ns1__deleteTestCaseByRecordIDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteTestCaseByRecordIDResponse(struct soap*, const char*, int, const struct ns1__deleteTestCaseByRecordIDResponse *, const char*);
SOAP_FMAC3 struct ns1__deleteTestCaseByRecordIDResponse * SOAP_FMAC4 soap_in_ns1__deleteTestCaseByRecordIDResponse(struct soap*, const char*, struct ns1__deleteTestCaseByRecordIDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteTestCaseByRecordIDResponse(struct soap*, const struct ns1__deleteTestCaseByRecordIDResponse *, const char*, const char*);

#ifndef soap_write_ns1__deleteTestCaseByRecordIDResponse
#define soap_write_ns1__deleteTestCaseByRecordIDResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteTestCaseByRecordIDResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteTestCaseByRecordIDResponse(soap, data, "ns1:deleteTestCaseByRecordIDResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteTestCaseByRecordIDResponse * SOAP_FMAC4 soap_get_ns1__deleteTestCaseByRecordIDResponse(struct soap*, struct ns1__deleteTestCaseByRecordIDResponse *, const char*, const char*);

#ifndef soap_read_ns1__deleteTestCaseByRecordIDResponse
#define soap_read_ns1__deleteTestCaseByRecordIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteTestCaseByRecordIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteTestCaseByRecordIDResponse * SOAP_FMAC2 soap_instantiate_ns1__deleteTestCaseByRecordIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteTestCaseByRecordIDResponse * soap_new_ns1__deleteTestCaseByRecordIDResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteTestCaseByRecordIDResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteTestCaseByRecordIDResponse * soap_new_req_ns1__deleteTestCaseByRecordIDResponse(struct soap *soap, int result) { struct ns1__deleteTestCaseByRecordIDResponse *_p = soap_instantiate_ns1__deleteTestCaseByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteTestCaseByRecordIDResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__deleteTestCaseByRecordIDResponse * soap_new_set_ns1__deleteTestCaseByRecordIDResponse(struct soap *soap, int result) { struct ns1__deleteTestCaseByRecordIDResponse *_p = soap_instantiate_ns1__deleteTestCaseByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteTestCaseByRecordIDResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__deleteTestCaseByRecordIDResponse(struct soap *soap, struct ns1__deleteTestCaseByRecordIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteTestCaseByRecordIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteTestCase
#define SOAP_TYPE_ns1__deleteTestCase (558)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteTestCase(struct soap*, struct ns1__deleteTestCase *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteTestCase(struct soap*, const struct ns1__deleteTestCase *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteTestCase(struct soap*, const char*, int, const struct ns1__deleteTestCase *, const char*);
SOAP_FMAC3 struct ns1__deleteTestCase * SOAP_FMAC4 soap_in_ns1__deleteTestCase(struct soap*, const char*, struct ns1__deleteTestCase *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteTestCase(struct soap*, const struct ns1__deleteTestCase *, const char*, const char*);

#ifndef soap_write_ns1__deleteTestCase
#define soap_write_ns1__deleteTestCase(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteTestCase(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteTestCase(soap, data, "ns1:deleteTestCase", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteTestCase * SOAP_FMAC4 soap_get_ns1__deleteTestCase(struct soap*, struct ns1__deleteTestCase *, const char*, const char*);

#ifndef soap_read_ns1__deleteTestCase
#define soap_read_ns1__deleteTestCase(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteTestCase(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteTestCase * SOAP_FMAC2 soap_instantiate_ns1__deleteTestCase(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteTestCase * soap_new_ns1__deleteTestCase(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteTestCase(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteTestCase * soap_new_req_ns1__deleteTestCase(struct soap *soap, LONG64 cookie, LONG64 testCaseNumber, bool bDeleteAssociatedTestRuns) { struct ns1__deleteTestCase *_p = soap_instantiate_ns1__deleteTestCase(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteTestCase(soap, _p); _p->cookie = cookie; _p->testCaseNumber = testCaseNumber; _p->bDeleteAssociatedTestRuns = bDeleteAssociatedTestRuns; } return _p; }

inline struct ns1__deleteTestCase * soap_new_set_ns1__deleteTestCase(struct soap *soap, LONG64 cookie, LONG64 testCaseNumber, char *summary, bool bDeleteAssociatedTestRuns) { struct ns1__deleteTestCase *_p = soap_instantiate_ns1__deleteTestCase(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteTestCase(soap, _p); _p->cookie = cookie; _p->testCaseNumber = testCaseNumber; _p->summary = summary; _p->bDeleteAssociatedTestRuns = bDeleteAssociatedTestRuns; } return _p; }

inline void soap_delete_ns1__deleteTestCase(struct soap *soap, struct ns1__deleteTestCase *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteTestCase(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteTestCaseResponse
#define SOAP_TYPE_ns1__deleteTestCaseResponse (557)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteTestCaseResponse(struct soap*, struct ns1__deleteTestCaseResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteTestCaseResponse(struct soap*, const struct ns1__deleteTestCaseResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteTestCaseResponse(struct soap*, const char*, int, const struct ns1__deleteTestCaseResponse *, const char*);
SOAP_FMAC3 struct ns1__deleteTestCaseResponse * SOAP_FMAC4 soap_in_ns1__deleteTestCaseResponse(struct soap*, const char*, struct ns1__deleteTestCaseResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteTestCaseResponse(struct soap*, const struct ns1__deleteTestCaseResponse *, const char*, const char*);

#ifndef soap_write_ns1__deleteTestCaseResponse
#define soap_write_ns1__deleteTestCaseResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteTestCaseResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteTestCaseResponse(soap, data, "ns1:deleteTestCaseResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteTestCaseResponse * SOAP_FMAC4 soap_get_ns1__deleteTestCaseResponse(struct soap*, struct ns1__deleteTestCaseResponse *, const char*, const char*);

#ifndef soap_read_ns1__deleteTestCaseResponse
#define soap_read_ns1__deleteTestCaseResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteTestCaseResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteTestCaseResponse * SOAP_FMAC2 soap_instantiate_ns1__deleteTestCaseResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteTestCaseResponse * soap_new_ns1__deleteTestCaseResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteTestCaseResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteTestCaseResponse * soap_new_req_ns1__deleteTestCaseResponse(struct soap *soap, int result) { struct ns1__deleteTestCaseResponse *_p = soap_instantiate_ns1__deleteTestCaseResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteTestCaseResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__deleteTestCaseResponse * soap_new_set_ns1__deleteTestCaseResponse(struct soap *soap, int result) { struct ns1__deleteTestCaseResponse *_p = soap_instantiate_ns1__deleteTestCaseResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteTestCaseResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__deleteTestCaseResponse(struct soap *soap, struct ns1__deleteTestCaseResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteTestCaseResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__addTestCase
#define SOAP_TYPE_ns1__addTestCase (555)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addTestCase(struct soap*, struct ns1__addTestCase *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addTestCase(struct soap*, const struct ns1__addTestCase *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addTestCase(struct soap*, const char*, int, const struct ns1__addTestCase *, const char*);
SOAP_FMAC3 struct ns1__addTestCase * SOAP_FMAC4 soap_in_ns1__addTestCase(struct soap*, const char*, struct ns1__addTestCase *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addTestCase(struct soap*, const struct ns1__addTestCase *, const char*, const char*);

#ifndef soap_write_ns1__addTestCase
#define soap_write_ns1__addTestCase(soap, data) ( soap_begin(soap), soap_serialize_ns1__addTestCase(soap, data), soap_begin_send(soap) || soap_put_ns1__addTestCase(soap, data, "ns1:addTestCase", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__addTestCase * SOAP_FMAC4 soap_get_ns1__addTestCase(struct soap*, struct ns1__addTestCase *, const char*, const char*);

#ifndef soap_read_ns1__addTestCase
#define soap_read_ns1__addTestCase(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__addTestCase(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__addTestCase * SOAP_FMAC2 soap_instantiate_ns1__addTestCase(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__addTestCase * soap_new_ns1__addTestCase(struct soap *soap, int n = -1) { return soap_instantiate_ns1__addTestCase(soap, n, NULL, NULL, NULL); }

inline struct ns1__addTestCase * soap_new_req_ns1__addTestCase(struct soap *soap, LONG64 cookie) { struct ns1__addTestCase *_p = soap_instantiate_ns1__addTestCase(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addTestCase(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__addTestCase * soap_new_set_ns1__addTestCase(struct soap *soap, LONG64 cookie, ns1__CTestCase *pTestCase) { struct ns1__addTestCase *_p = soap_instantiate_ns1__addTestCase(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addTestCase(soap, _p); _p->cookie = cookie; _p->pTestCase = pTestCase; } return _p; }

inline void soap_delete_ns1__addTestCase(struct soap *soap, struct ns1__addTestCase *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__addTestCase(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__addTestCaseResponse
#define SOAP_TYPE_ns1__addTestCaseResponse (554)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addTestCaseResponse(struct soap*, struct ns1__addTestCaseResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addTestCaseResponse(struct soap*, const struct ns1__addTestCaseResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addTestCaseResponse(struct soap*, const char*, int, const struct ns1__addTestCaseResponse *, const char*);
SOAP_FMAC3 struct ns1__addTestCaseResponse * SOAP_FMAC4 soap_in_ns1__addTestCaseResponse(struct soap*, const char*, struct ns1__addTestCaseResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addTestCaseResponse(struct soap*, const struct ns1__addTestCaseResponse *, const char*, const char*);

#ifndef soap_write_ns1__addTestCaseResponse
#define soap_write_ns1__addTestCaseResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__addTestCaseResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__addTestCaseResponse(soap, data, "ns1:addTestCaseResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__addTestCaseResponse * SOAP_FMAC4 soap_get_ns1__addTestCaseResponse(struct soap*, struct ns1__addTestCaseResponse *, const char*, const char*);

#ifndef soap_read_ns1__addTestCaseResponse
#define soap_read_ns1__addTestCaseResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__addTestCaseResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__addTestCaseResponse * SOAP_FMAC2 soap_instantiate_ns1__addTestCaseResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__addTestCaseResponse * soap_new_ns1__addTestCaseResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__addTestCaseResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__addTestCaseResponse * soap_new_req_ns1__addTestCaseResponse(struct soap *soap, LONG64 recordID) { struct ns1__addTestCaseResponse *_p = soap_instantiate_ns1__addTestCaseResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addTestCaseResponse(soap, _p); _p->recordID = recordID; } return _p; }

inline struct ns1__addTestCaseResponse * soap_new_set_ns1__addTestCaseResponse(struct soap *soap, LONG64 recordID) { struct ns1__addTestCaseResponse *_p = soap_instantiate_ns1__addTestCaseResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addTestCaseResponse(soap, _p); _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__addTestCaseResponse(struct soap *soap, struct ns1__addTestCaseResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__addTestCaseResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getTestCaseByRecordID
#define SOAP_TYPE_ns1__getTestCaseByRecordID (552)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getTestCaseByRecordID(struct soap*, struct ns1__getTestCaseByRecordID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getTestCaseByRecordID(struct soap*, const struct ns1__getTestCaseByRecordID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTestCaseByRecordID(struct soap*, const char*, int, const struct ns1__getTestCaseByRecordID *, const char*);
SOAP_FMAC3 struct ns1__getTestCaseByRecordID * SOAP_FMAC4 soap_in_ns1__getTestCaseByRecordID(struct soap*, const char*, struct ns1__getTestCaseByRecordID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getTestCaseByRecordID(struct soap*, const struct ns1__getTestCaseByRecordID *, const char*, const char*);

#ifndef soap_write_ns1__getTestCaseByRecordID
#define soap_write_ns1__getTestCaseByRecordID(soap, data) ( soap_begin(soap), soap_serialize_ns1__getTestCaseByRecordID(soap, data), soap_begin_send(soap) || soap_put_ns1__getTestCaseByRecordID(soap, data, "ns1:getTestCaseByRecordID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getTestCaseByRecordID * SOAP_FMAC4 soap_get_ns1__getTestCaseByRecordID(struct soap*, struct ns1__getTestCaseByRecordID *, const char*, const char*);

#ifndef soap_read_ns1__getTestCaseByRecordID
#define soap_read_ns1__getTestCaseByRecordID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getTestCaseByRecordID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getTestCaseByRecordID * SOAP_FMAC2 soap_instantiate_ns1__getTestCaseByRecordID(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getTestCaseByRecordID * soap_new_ns1__getTestCaseByRecordID(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getTestCaseByRecordID(soap, n, NULL, NULL, NULL); }

inline struct ns1__getTestCaseByRecordID * soap_new_req_ns1__getTestCaseByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments) { struct ns1__getTestCaseByRecordID *_p = soap_instantiate_ns1__getTestCaseByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTestCaseByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline struct ns1__getTestCaseByRecordID * soap_new_set_ns1__getTestCaseByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments) { struct ns1__getTestCaseByRecordID *_p = soap_instantiate_ns1__getTestCaseByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTestCaseByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline void soap_delete_ns1__getTestCaseByRecordID(struct soap *soap, struct ns1__getTestCaseByRecordID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getTestCaseByRecordID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getTestCaseByRecordIDResponse
#define SOAP_TYPE_ns1__getTestCaseByRecordIDResponse (549)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getTestCaseByRecordIDResponse(struct soap*, struct ns1__getTestCaseByRecordIDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getTestCaseByRecordIDResponse(struct soap*, const struct ns1__getTestCaseByRecordIDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTestCaseByRecordIDResponse(struct soap*, const char*, int, const struct ns1__getTestCaseByRecordIDResponse *, const char*);
SOAP_FMAC3 struct ns1__getTestCaseByRecordIDResponse * SOAP_FMAC4 soap_in_ns1__getTestCaseByRecordIDResponse(struct soap*, const char*, struct ns1__getTestCaseByRecordIDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getTestCaseByRecordIDResponse(struct soap*, const struct ns1__getTestCaseByRecordIDResponse *, const char*, const char*);

#ifndef soap_write_ns1__getTestCaseByRecordIDResponse
#define soap_write_ns1__getTestCaseByRecordIDResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getTestCaseByRecordIDResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getTestCaseByRecordIDResponse(soap, data, "ns1:getTestCaseByRecordIDResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getTestCaseByRecordIDResponse * SOAP_FMAC4 soap_get_ns1__getTestCaseByRecordIDResponse(struct soap*, struct ns1__getTestCaseByRecordIDResponse *, const char*, const char*);

#ifndef soap_read_ns1__getTestCaseByRecordIDResponse
#define soap_read_ns1__getTestCaseByRecordIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getTestCaseByRecordIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getTestCaseByRecordIDResponse * SOAP_FMAC2 soap_instantiate_ns1__getTestCaseByRecordIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getTestCaseByRecordIDResponse * soap_new_ns1__getTestCaseByRecordIDResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getTestCaseByRecordIDResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getTestCaseByRecordIDResponse * soap_new_req_ns1__getTestCaseByRecordIDResponse(struct soap *soap) { struct ns1__getTestCaseByRecordIDResponse *_p = soap_instantiate_ns1__getTestCaseByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTestCaseByRecordIDResponse(soap, _p); } return _p; }

inline struct ns1__getTestCaseByRecordIDResponse * soap_new_set_ns1__getTestCaseByRecordIDResponse(struct soap *soap, ns1__CTestCase *pTestCase) { struct ns1__getTestCaseByRecordIDResponse *_p = soap_instantiate_ns1__getTestCaseByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTestCaseByRecordIDResponse(soap, _p); _p->pTestCase = pTestCase; } return _p; }

inline void soap_delete_ns1__getTestCaseByRecordIDResponse(struct soap *soap, struct ns1__getTestCaseByRecordIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getTestCaseByRecordIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getTestCase
#define SOAP_TYPE_ns1__getTestCase (548)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getTestCase(struct soap*, struct ns1__getTestCase *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getTestCase(struct soap*, const struct ns1__getTestCase *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTestCase(struct soap*, const char*, int, const struct ns1__getTestCase *, const char*);
SOAP_FMAC3 struct ns1__getTestCase * SOAP_FMAC4 soap_in_ns1__getTestCase(struct soap*, const char*, struct ns1__getTestCase *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getTestCase(struct soap*, const struct ns1__getTestCase *, const char*, const char*);

#ifndef soap_write_ns1__getTestCase
#define soap_write_ns1__getTestCase(soap, data) ( soap_begin(soap), soap_serialize_ns1__getTestCase(soap, data), soap_begin_send(soap) || soap_put_ns1__getTestCase(soap, data, "ns1:getTestCase", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getTestCase * SOAP_FMAC4 soap_get_ns1__getTestCase(struct soap*, struct ns1__getTestCase *, const char*, const char*);

#ifndef soap_read_ns1__getTestCase
#define soap_read_ns1__getTestCase(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getTestCase(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getTestCase * SOAP_FMAC2 soap_instantiate_ns1__getTestCase(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getTestCase * soap_new_ns1__getTestCase(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getTestCase(soap, n, NULL, NULL, NULL); }

inline struct ns1__getTestCase * soap_new_req_ns1__getTestCase(struct soap *soap, LONG64 cookie, LONG64 testCaseNumber, bool bDownloadAttachments) { struct ns1__getTestCase *_p = soap_instantiate_ns1__getTestCase(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTestCase(soap, _p); _p->cookie = cookie; _p->testCaseNumber = testCaseNumber; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline struct ns1__getTestCase * soap_new_set_ns1__getTestCase(struct soap *soap, LONG64 cookie, LONG64 testCaseNumber, char *summary, bool bDownloadAttachments) { struct ns1__getTestCase *_p = soap_instantiate_ns1__getTestCase(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTestCase(soap, _p); _p->cookie = cookie; _p->testCaseNumber = testCaseNumber; _p->summary = summary; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline void soap_delete_ns1__getTestCase(struct soap *soap, struct ns1__getTestCase *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getTestCase(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getTestCaseResponse
#define SOAP_TYPE_ns1__getTestCaseResponse (544)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getTestCaseResponse(struct soap*, struct ns1__getTestCaseResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getTestCaseResponse(struct soap*, const struct ns1__getTestCaseResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTestCaseResponse(struct soap*, const char*, int, const struct ns1__getTestCaseResponse *, const char*);
SOAP_FMAC3 struct ns1__getTestCaseResponse * SOAP_FMAC4 soap_in_ns1__getTestCaseResponse(struct soap*, const char*, struct ns1__getTestCaseResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getTestCaseResponse(struct soap*, const struct ns1__getTestCaseResponse *, const char*, const char*);

#ifndef soap_write_ns1__getTestCaseResponse
#define soap_write_ns1__getTestCaseResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getTestCaseResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getTestCaseResponse(soap, data, "ns1:getTestCaseResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getTestCaseResponse * SOAP_FMAC4 soap_get_ns1__getTestCaseResponse(struct soap*, struct ns1__getTestCaseResponse *, const char*, const char*);

#ifndef soap_read_ns1__getTestCaseResponse
#define soap_read_ns1__getTestCaseResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getTestCaseResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getTestCaseResponse * SOAP_FMAC2 soap_instantiate_ns1__getTestCaseResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getTestCaseResponse * soap_new_ns1__getTestCaseResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getTestCaseResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getTestCaseResponse * soap_new_req_ns1__getTestCaseResponse(struct soap *soap) { struct ns1__getTestCaseResponse *_p = soap_instantiate_ns1__getTestCaseResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTestCaseResponse(soap, _p); } return _p; }

inline struct ns1__getTestCaseResponse * soap_new_set_ns1__getTestCaseResponse(struct soap *soap, ns1__CTestCase *pTestCase) { struct ns1__getTestCaseResponse *_p = soap_instantiate_ns1__getTestCaseResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTestCaseResponse(soap, _p); _p->pTestCase = pTestCase; } return _p; }

inline void soap_delete_ns1__getTestCaseResponse(struct soap *soap, struct ns1__getTestCaseResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getTestCaseResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getTestRunStepsModes
#define SOAP_TYPE_ns1__getTestRunStepsModes (543)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getTestRunStepsModes(struct soap*, struct ns1__getTestRunStepsModes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getTestRunStepsModes(struct soap*, const struct ns1__getTestRunStepsModes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTestRunStepsModes(struct soap*, const char*, int, const struct ns1__getTestRunStepsModes *, const char*);
SOAP_FMAC3 struct ns1__getTestRunStepsModes * SOAP_FMAC4 soap_in_ns1__getTestRunStepsModes(struct soap*, const char*, struct ns1__getTestRunStepsModes *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getTestRunStepsModes(struct soap*, const struct ns1__getTestRunStepsModes *, const char*, const char*);

#ifndef soap_write_ns1__getTestRunStepsModes
#define soap_write_ns1__getTestRunStepsModes(soap, data) ( soap_begin(soap), soap_serialize_ns1__getTestRunStepsModes(soap, data), soap_begin_send(soap) || soap_put_ns1__getTestRunStepsModes(soap, data, "ns1:getTestRunStepsModes", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getTestRunStepsModes * SOAP_FMAC4 soap_get_ns1__getTestRunStepsModes(struct soap*, struct ns1__getTestRunStepsModes *, const char*, const char*);

#ifndef soap_read_ns1__getTestRunStepsModes
#define soap_read_ns1__getTestRunStepsModes(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getTestRunStepsModes(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getTestRunStepsModes * SOAP_FMAC2 soap_instantiate_ns1__getTestRunStepsModes(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getTestRunStepsModes * soap_new_ns1__getTestRunStepsModes(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getTestRunStepsModes(soap, n, NULL, NULL, NULL); }

inline struct ns1__getTestRunStepsModes * soap_new_req_ns1__getTestRunStepsModes(struct soap *soap, LONG64 cookie) { struct ns1__getTestRunStepsModes *_p = soap_instantiate_ns1__getTestRunStepsModes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTestRunStepsModes(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__getTestRunStepsModes * soap_new_set_ns1__getTestRunStepsModes(struct soap *soap, LONG64 cookie) { struct ns1__getTestRunStepsModes *_p = soap_instantiate_ns1__getTestRunStepsModes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTestRunStepsModes(soap, _p); _p->cookie = cookie; } return _p; }

inline void soap_delete_ns1__getTestRunStepsModes(struct soap *soap, struct ns1__getTestRunStepsModes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getTestRunStepsModes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getTestRunStepsModesResponse
#define SOAP_TYPE_ns1__getTestRunStepsModesResponse (540)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getTestRunStepsModesResponse(struct soap*, struct ns1__getTestRunStepsModesResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getTestRunStepsModesResponse(struct soap*, const struct ns1__getTestRunStepsModesResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTestRunStepsModesResponse(struct soap*, const char*, int, const struct ns1__getTestRunStepsModesResponse *, const char*);
SOAP_FMAC3 struct ns1__getTestRunStepsModesResponse * SOAP_FMAC4 soap_in_ns1__getTestRunStepsModesResponse(struct soap*, const char*, struct ns1__getTestRunStepsModesResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getTestRunStepsModesResponse(struct soap*, const struct ns1__getTestRunStepsModesResponse *, const char*, const char*);

#ifndef soap_write_ns1__getTestRunStepsModesResponse
#define soap_write_ns1__getTestRunStepsModesResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getTestRunStepsModesResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getTestRunStepsModesResponse(soap, data, "ns1:getTestRunStepsModesResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getTestRunStepsModesResponse * SOAP_FMAC4 soap_get_ns1__getTestRunStepsModesResponse(struct soap*, struct ns1__getTestRunStepsModesResponse *, const char*, const char*);

#ifndef soap_read_ns1__getTestRunStepsModesResponse
#define soap_read_ns1__getTestRunStepsModesResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getTestRunStepsModesResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getTestRunStepsModesResponse * SOAP_FMAC2 soap_instantiate_ns1__getTestRunStepsModesResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getTestRunStepsModesResponse * soap_new_ns1__getTestRunStepsModesResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getTestRunStepsModesResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getTestRunStepsModesResponse * soap_new_req_ns1__getTestRunStepsModesResponse(struct soap *soap) { struct ns1__getTestRunStepsModesResponse *_p = soap_instantiate_ns1__getTestRunStepsModesResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTestRunStepsModesResponse(soap, _p); } return _p; }

inline struct ns1__getTestRunStepsModesResponse * soap_new_set_ns1__getTestRunStepsModesResponse(struct soap *soap, ArrayOfstring *pModeList) { struct ns1__getTestRunStepsModesResponse *_p = soap_instantiate_ns1__getTestRunStepsModesResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTestRunStepsModesResponse(soap, _p); _p->pModeList = pModeList; } return _p; }

inline void soap_delete_ns1__getTestRunStepsModesResponse(struct soap *soap, struct ns1__getTestRunStepsModesResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getTestRunStepsModesResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getTestVariantTypes
#define SOAP_TYPE_ns1__getTestVariantTypes (539)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getTestVariantTypes(struct soap*, struct ns1__getTestVariantTypes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getTestVariantTypes(struct soap*, const struct ns1__getTestVariantTypes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTestVariantTypes(struct soap*, const char*, int, const struct ns1__getTestVariantTypes *, const char*);
SOAP_FMAC3 struct ns1__getTestVariantTypes * SOAP_FMAC4 soap_in_ns1__getTestVariantTypes(struct soap*, const char*, struct ns1__getTestVariantTypes *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getTestVariantTypes(struct soap*, const struct ns1__getTestVariantTypes *, const char*, const char*);

#ifndef soap_write_ns1__getTestVariantTypes
#define soap_write_ns1__getTestVariantTypes(soap, data) ( soap_begin(soap), soap_serialize_ns1__getTestVariantTypes(soap, data), soap_begin_send(soap) || soap_put_ns1__getTestVariantTypes(soap, data, "ns1:getTestVariantTypes", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getTestVariantTypes * SOAP_FMAC4 soap_get_ns1__getTestVariantTypes(struct soap*, struct ns1__getTestVariantTypes *, const char*, const char*);

#ifndef soap_read_ns1__getTestVariantTypes
#define soap_read_ns1__getTestVariantTypes(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getTestVariantTypes(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getTestVariantTypes * SOAP_FMAC2 soap_instantiate_ns1__getTestVariantTypes(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getTestVariantTypes * soap_new_ns1__getTestVariantTypes(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getTestVariantTypes(soap, n, NULL, NULL, NULL); }

inline struct ns1__getTestVariantTypes * soap_new_req_ns1__getTestVariantTypes(struct soap *soap, LONG64 cookie) { struct ns1__getTestVariantTypes *_p = soap_instantiate_ns1__getTestVariantTypes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTestVariantTypes(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__getTestVariantTypes * soap_new_set_ns1__getTestVariantTypes(struct soap *soap, LONG64 cookie) { struct ns1__getTestVariantTypes *_p = soap_instantiate_ns1__getTestVariantTypes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTestVariantTypes(soap, _p); _p->cookie = cookie; } return _p; }

inline void soap_delete_ns1__getTestVariantTypes(struct soap *soap, struct ns1__getTestVariantTypes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getTestVariantTypes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getTestVariantTypesResponse
#define SOAP_TYPE_ns1__getTestVariantTypesResponse (536)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getTestVariantTypesResponse(struct soap*, struct ns1__getTestVariantTypesResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getTestVariantTypesResponse(struct soap*, const struct ns1__getTestVariantTypesResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTestVariantTypesResponse(struct soap*, const char*, int, const struct ns1__getTestVariantTypesResponse *, const char*);
SOAP_FMAC3 struct ns1__getTestVariantTypesResponse * SOAP_FMAC4 soap_in_ns1__getTestVariantTypesResponse(struct soap*, const char*, struct ns1__getTestVariantTypesResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getTestVariantTypesResponse(struct soap*, const struct ns1__getTestVariantTypesResponse *, const char*, const char*);

#ifndef soap_write_ns1__getTestVariantTypesResponse
#define soap_write_ns1__getTestVariantTypesResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getTestVariantTypesResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getTestVariantTypesResponse(soap, data, "ns1:getTestVariantTypesResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getTestVariantTypesResponse * SOAP_FMAC4 soap_get_ns1__getTestVariantTypesResponse(struct soap*, struct ns1__getTestVariantTypesResponse *, const char*, const char*);

#ifndef soap_read_ns1__getTestVariantTypesResponse
#define soap_read_ns1__getTestVariantTypesResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getTestVariantTypesResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getTestVariantTypesResponse * SOAP_FMAC2 soap_instantiate_ns1__getTestVariantTypesResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getTestVariantTypesResponse * soap_new_ns1__getTestVariantTypesResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getTestVariantTypesResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getTestVariantTypesResponse * soap_new_req_ns1__getTestVariantTypesResponse(struct soap *soap) { struct ns1__getTestVariantTypesResponse *_p = soap_instantiate_ns1__getTestVariantTypesResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTestVariantTypesResponse(soap, _p); } return _p; }

inline struct ns1__getTestVariantTypesResponse * soap_new_set_ns1__getTestVariantTypesResponse(struct soap *soap, ArrayOfstring *pTypeList) { struct ns1__getTestVariantTypesResponse *_p = soap_instantiate_ns1__getTestVariantTypesResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTestVariantTypesResponse(soap, _p); _p->pTypeList = pTypeList; } return _p; }

inline void soap_delete_ns1__getTestVariantTypesResponse(struct soap *soap, struct ns1__getTestVariantTypesResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getTestVariantTypesResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__cancelSaveLink
#define SOAP_TYPE_ns1__cancelSaveLink (535)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__cancelSaveLink(struct soap*, struct ns1__cancelSaveLink *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__cancelSaveLink(struct soap*, const struct ns1__cancelSaveLink *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__cancelSaveLink(struct soap*, const char*, int, const struct ns1__cancelSaveLink *, const char*);
SOAP_FMAC3 struct ns1__cancelSaveLink * SOAP_FMAC4 soap_in_ns1__cancelSaveLink(struct soap*, const char*, struct ns1__cancelSaveLink *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__cancelSaveLink(struct soap*, const struct ns1__cancelSaveLink *, const char*, const char*);

#ifndef soap_write_ns1__cancelSaveLink
#define soap_write_ns1__cancelSaveLink(soap, data) ( soap_begin(soap), soap_serialize_ns1__cancelSaveLink(soap, data), soap_begin_send(soap) || soap_put_ns1__cancelSaveLink(soap, data, "ns1:cancelSaveLink", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__cancelSaveLink * SOAP_FMAC4 soap_get_ns1__cancelSaveLink(struct soap*, struct ns1__cancelSaveLink *, const char*, const char*);

#ifndef soap_read_ns1__cancelSaveLink
#define soap_read_ns1__cancelSaveLink(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__cancelSaveLink(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__cancelSaveLink * SOAP_FMAC2 soap_instantiate_ns1__cancelSaveLink(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__cancelSaveLink * soap_new_ns1__cancelSaveLink(struct soap *soap, int n = -1) { return soap_instantiate_ns1__cancelSaveLink(soap, n, NULL, NULL, NULL); }

inline struct ns1__cancelSaveLink * soap_new_req_ns1__cancelSaveLink(struct soap *soap, LONG64 cookie, LONG64 linkID) { struct ns1__cancelSaveLink *_p = soap_instantiate_ns1__cancelSaveLink(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveLink(soap, _p); _p->cookie = cookie; _p->linkID = linkID; } return _p; }

inline struct ns1__cancelSaveLink * soap_new_set_ns1__cancelSaveLink(struct soap *soap, LONG64 cookie, LONG64 linkID) { struct ns1__cancelSaveLink *_p = soap_instantiate_ns1__cancelSaveLink(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveLink(soap, _p); _p->cookie = cookie; _p->linkID = linkID; } return _p; }

inline void soap_delete_ns1__cancelSaveLink(struct soap *soap, struct ns1__cancelSaveLink *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__cancelSaveLink(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__cancelSaveLinkResponse
#define SOAP_TYPE_ns1__cancelSaveLinkResponse (534)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__cancelSaveLinkResponse(struct soap*, struct ns1__cancelSaveLinkResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__cancelSaveLinkResponse(struct soap*, const struct ns1__cancelSaveLinkResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__cancelSaveLinkResponse(struct soap*, const char*, int, const struct ns1__cancelSaveLinkResponse *, const char*);
SOAP_FMAC3 struct ns1__cancelSaveLinkResponse * SOAP_FMAC4 soap_in_ns1__cancelSaveLinkResponse(struct soap*, const char*, struct ns1__cancelSaveLinkResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__cancelSaveLinkResponse(struct soap*, const struct ns1__cancelSaveLinkResponse *, const char*, const char*);

#ifndef soap_write_ns1__cancelSaveLinkResponse
#define soap_write_ns1__cancelSaveLinkResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__cancelSaveLinkResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__cancelSaveLinkResponse(soap, data, "ns1:cancelSaveLinkResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__cancelSaveLinkResponse * SOAP_FMAC4 soap_get_ns1__cancelSaveLinkResponse(struct soap*, struct ns1__cancelSaveLinkResponse *, const char*, const char*);

#ifndef soap_read_ns1__cancelSaveLinkResponse
#define soap_read_ns1__cancelSaveLinkResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__cancelSaveLinkResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__cancelSaveLinkResponse * SOAP_FMAC2 soap_instantiate_ns1__cancelSaveLinkResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__cancelSaveLinkResponse * soap_new_ns1__cancelSaveLinkResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__cancelSaveLinkResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__cancelSaveLinkResponse * soap_new_req_ns1__cancelSaveLinkResponse(struct soap *soap, int result) { struct ns1__cancelSaveLinkResponse *_p = soap_instantiate_ns1__cancelSaveLinkResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveLinkResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__cancelSaveLinkResponse * soap_new_set_ns1__cancelSaveLinkResponse(struct soap *soap, int result) { struct ns1__cancelSaveLinkResponse *_p = soap_instantiate_ns1__cancelSaveLinkResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveLinkResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__cancelSaveLinkResponse(struct soap *soap, struct ns1__cancelSaveLinkResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__cancelSaveLinkResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveLink
#define SOAP_TYPE_ns1__saveLink (532)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveLink(struct soap*, struct ns1__saveLink *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveLink(struct soap*, const struct ns1__saveLink *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveLink(struct soap*, const char*, int, const struct ns1__saveLink *, const char*);
SOAP_FMAC3 struct ns1__saveLink * SOAP_FMAC4 soap_in_ns1__saveLink(struct soap*, const char*, struct ns1__saveLink *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveLink(struct soap*, const struct ns1__saveLink *, const char*, const char*);

#ifndef soap_write_ns1__saveLink
#define soap_write_ns1__saveLink(soap, data) ( soap_begin(soap), soap_serialize_ns1__saveLink(soap, data), soap_begin_send(soap) || soap_put_ns1__saveLink(soap, data, "ns1:saveLink", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__saveLink * SOAP_FMAC4 soap_get_ns1__saveLink(struct soap*, struct ns1__saveLink *, const char*, const char*);

#ifndef soap_read_ns1__saveLink
#define soap_read_ns1__saveLink(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveLink(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__saveLink * SOAP_FMAC2 soap_instantiate_ns1__saveLink(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveLink * soap_new_ns1__saveLink(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveLink(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveLink * soap_new_req_ns1__saveLink(struct soap *soap, LONG64 cookie) { struct ns1__saveLink *_p = soap_instantiate_ns1__saveLink(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveLink(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__saveLink * soap_new_set_ns1__saveLink(struct soap *soap, LONG64 cookie, ns1__CLink *pLink) { struct ns1__saveLink *_p = soap_instantiate_ns1__saveLink(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveLink(soap, _p); _p->cookie = cookie; _p->pLink = pLink; } return _p; }

inline void soap_delete_ns1__saveLink(struct soap *soap, struct ns1__saveLink *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveLink(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveLinkResponse
#define SOAP_TYPE_ns1__saveLinkResponse (531)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveLinkResponse(struct soap*, struct ns1__saveLinkResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveLinkResponse(struct soap*, const struct ns1__saveLinkResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveLinkResponse(struct soap*, const char*, int, const struct ns1__saveLinkResponse *, const char*);
SOAP_FMAC3 struct ns1__saveLinkResponse * SOAP_FMAC4 soap_in_ns1__saveLinkResponse(struct soap*, const char*, struct ns1__saveLinkResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveLinkResponse(struct soap*, const struct ns1__saveLinkResponse *, const char*, const char*);

#ifndef soap_write_ns1__saveLinkResponse
#define soap_write_ns1__saveLinkResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__saveLinkResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__saveLinkResponse(soap, data, "ns1:saveLinkResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__saveLinkResponse * SOAP_FMAC4 soap_get_ns1__saveLinkResponse(struct soap*, struct ns1__saveLinkResponse *, const char*, const char*);

#ifndef soap_read_ns1__saveLinkResponse
#define soap_read_ns1__saveLinkResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveLinkResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__saveLinkResponse * SOAP_FMAC2 soap_instantiate_ns1__saveLinkResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveLinkResponse * soap_new_ns1__saveLinkResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveLinkResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveLinkResponse * soap_new_req_ns1__saveLinkResponse(struct soap *soap, int result) { struct ns1__saveLinkResponse *_p = soap_instantiate_ns1__saveLinkResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveLinkResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__saveLinkResponse * soap_new_set_ns1__saveLinkResponse(struct soap *soap, int result) { struct ns1__saveLinkResponse *_p = soap_instantiate_ns1__saveLinkResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveLinkResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__saveLinkResponse(struct soap *soap, struct ns1__saveLinkResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveLinkResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editLink
#define SOAP_TYPE_ns1__editLink (529)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editLink(struct soap*, struct ns1__editLink *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editLink(struct soap*, const struct ns1__editLink *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editLink(struct soap*, const char*, int, const struct ns1__editLink *, const char*);
SOAP_FMAC3 struct ns1__editLink * SOAP_FMAC4 soap_in_ns1__editLink(struct soap*, const char*, struct ns1__editLink *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editLink(struct soap*, const struct ns1__editLink *, const char*, const char*);

#ifndef soap_write_ns1__editLink
#define soap_write_ns1__editLink(soap, data) ( soap_begin(soap), soap_serialize_ns1__editLink(soap, data), soap_begin_send(soap) || soap_put_ns1__editLink(soap, data, "ns1:editLink", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editLink * SOAP_FMAC4 soap_get_ns1__editLink(struct soap*, struct ns1__editLink *, const char*, const char*);

#ifndef soap_read_ns1__editLink
#define soap_read_ns1__editLink(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editLink(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editLink * SOAP_FMAC2 soap_instantiate_ns1__editLink(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editLink * soap_new_ns1__editLink(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editLink(soap, n, NULL, NULL, NULL); }

inline struct ns1__editLink * soap_new_req_ns1__editLink(struct soap *soap, LONG64 cookie, LONG64 linkID) { struct ns1__editLink *_p = soap_instantiate_ns1__editLink(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editLink(soap, _p); _p->cookie = cookie; _p->linkID = linkID; } return _p; }

inline struct ns1__editLink * soap_new_set_ns1__editLink(struct soap *soap, LONG64 cookie, LONG64 linkID) { struct ns1__editLink *_p = soap_instantiate_ns1__editLink(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editLink(soap, _p); _p->cookie = cookie; _p->linkID = linkID; } return _p; }

inline void soap_delete_ns1__editLink(struct soap *soap, struct ns1__editLink *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editLink(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editLinkResponse
#define SOAP_TYPE_ns1__editLinkResponse (526)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editLinkResponse(struct soap*, struct ns1__editLinkResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editLinkResponse(struct soap*, const struct ns1__editLinkResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editLinkResponse(struct soap*, const char*, int, const struct ns1__editLinkResponse *, const char*);
SOAP_FMAC3 struct ns1__editLinkResponse * SOAP_FMAC4 soap_in_ns1__editLinkResponse(struct soap*, const char*, struct ns1__editLinkResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editLinkResponse(struct soap*, const struct ns1__editLinkResponse *, const char*, const char*);

#ifndef soap_write_ns1__editLinkResponse
#define soap_write_ns1__editLinkResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__editLinkResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__editLinkResponse(soap, data, "ns1:editLinkResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editLinkResponse * SOAP_FMAC4 soap_get_ns1__editLinkResponse(struct soap*, struct ns1__editLinkResponse *, const char*, const char*);

#ifndef soap_read_ns1__editLinkResponse
#define soap_read_ns1__editLinkResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editLinkResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editLinkResponse * SOAP_FMAC2 soap_instantiate_ns1__editLinkResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editLinkResponse * soap_new_ns1__editLinkResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editLinkResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__editLinkResponse * soap_new_req_ns1__editLinkResponse(struct soap *soap) { struct ns1__editLinkResponse *_p = soap_instantiate_ns1__editLinkResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editLinkResponse(soap, _p); } return _p; }

inline struct ns1__editLinkResponse * soap_new_set_ns1__editLinkResponse(struct soap *soap, ns1__CLink *pLink) { struct ns1__editLinkResponse *_p = soap_instantiate_ns1__editLinkResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editLinkResponse(soap, _p); _p->pLink = pLink; } return _p; }

inline void soap_delete_ns1__editLinkResponse(struct soap *soap, struct ns1__editLinkResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editLinkResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteLink
#define SOAP_TYPE_ns1__deleteLink (525)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteLink(struct soap*, struct ns1__deleteLink *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteLink(struct soap*, const struct ns1__deleteLink *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteLink(struct soap*, const char*, int, const struct ns1__deleteLink *, const char*);
SOAP_FMAC3 struct ns1__deleteLink * SOAP_FMAC4 soap_in_ns1__deleteLink(struct soap*, const char*, struct ns1__deleteLink *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteLink(struct soap*, const struct ns1__deleteLink *, const char*, const char*);

#ifndef soap_write_ns1__deleteLink
#define soap_write_ns1__deleteLink(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteLink(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteLink(soap, data, "ns1:deleteLink", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteLink * SOAP_FMAC4 soap_get_ns1__deleteLink(struct soap*, struct ns1__deleteLink *, const char*, const char*);

#ifndef soap_read_ns1__deleteLink
#define soap_read_ns1__deleteLink(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteLink(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteLink * SOAP_FMAC2 soap_instantiate_ns1__deleteLink(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteLink * soap_new_ns1__deleteLink(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteLink(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteLink * soap_new_req_ns1__deleteLink(struct soap *soap, LONG64 cookie, LONG64 linkID) { struct ns1__deleteLink *_p = soap_instantiate_ns1__deleteLink(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteLink(soap, _p); _p->cookie = cookie; _p->linkID = linkID; } return _p; }

inline struct ns1__deleteLink * soap_new_set_ns1__deleteLink(struct soap *soap, LONG64 cookie, LONG64 linkID) { struct ns1__deleteLink *_p = soap_instantiate_ns1__deleteLink(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteLink(soap, _p); _p->cookie = cookie; _p->linkID = linkID; } return _p; }

inline void soap_delete_ns1__deleteLink(struct soap *soap, struct ns1__deleteLink *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteLink(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteLinkResponse
#define SOAP_TYPE_ns1__deleteLinkResponse (524)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteLinkResponse(struct soap*, struct ns1__deleteLinkResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteLinkResponse(struct soap*, const struct ns1__deleteLinkResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteLinkResponse(struct soap*, const char*, int, const struct ns1__deleteLinkResponse *, const char*);
SOAP_FMAC3 struct ns1__deleteLinkResponse * SOAP_FMAC4 soap_in_ns1__deleteLinkResponse(struct soap*, const char*, struct ns1__deleteLinkResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteLinkResponse(struct soap*, const struct ns1__deleteLinkResponse *, const char*, const char*);

#ifndef soap_write_ns1__deleteLinkResponse
#define soap_write_ns1__deleteLinkResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteLinkResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteLinkResponse(soap, data, "ns1:deleteLinkResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteLinkResponse * SOAP_FMAC4 soap_get_ns1__deleteLinkResponse(struct soap*, struct ns1__deleteLinkResponse *, const char*, const char*);

#ifndef soap_read_ns1__deleteLinkResponse
#define soap_read_ns1__deleteLinkResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteLinkResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteLinkResponse * SOAP_FMAC2 soap_instantiate_ns1__deleteLinkResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteLinkResponse * soap_new_ns1__deleteLinkResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteLinkResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteLinkResponse * soap_new_req_ns1__deleteLinkResponse(struct soap *soap, int result) { struct ns1__deleteLinkResponse *_p = soap_instantiate_ns1__deleteLinkResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteLinkResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__deleteLinkResponse * soap_new_set_ns1__deleteLinkResponse(struct soap *soap, int result) { struct ns1__deleteLinkResponse *_p = soap_instantiate_ns1__deleteLinkResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteLinkResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__deleteLinkResponse(struct soap *soap, struct ns1__deleteLinkResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteLinkResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__addLink
#define SOAP_TYPE_ns1__addLink (522)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addLink(struct soap*, struct ns1__addLink *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addLink(struct soap*, const struct ns1__addLink *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addLink(struct soap*, const char*, int, const struct ns1__addLink *, const char*);
SOAP_FMAC3 struct ns1__addLink * SOAP_FMAC4 soap_in_ns1__addLink(struct soap*, const char*, struct ns1__addLink *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addLink(struct soap*, const struct ns1__addLink *, const char*, const char*);

#ifndef soap_write_ns1__addLink
#define soap_write_ns1__addLink(soap, data) ( soap_begin(soap), soap_serialize_ns1__addLink(soap, data), soap_begin_send(soap) || soap_put_ns1__addLink(soap, data, "ns1:addLink", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__addLink * SOAP_FMAC4 soap_get_ns1__addLink(struct soap*, struct ns1__addLink *, const char*, const char*);

#ifndef soap_read_ns1__addLink
#define soap_read_ns1__addLink(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__addLink(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__addLink * SOAP_FMAC2 soap_instantiate_ns1__addLink(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__addLink * soap_new_ns1__addLink(struct soap *soap, int n = -1) { return soap_instantiate_ns1__addLink(soap, n, NULL, NULL, NULL); }

inline struct ns1__addLink * soap_new_req_ns1__addLink(struct soap *soap, LONG64 cookie) { struct ns1__addLink *_p = soap_instantiate_ns1__addLink(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addLink(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__addLink * soap_new_set_ns1__addLink(struct soap *soap, LONG64 cookie, ns1__CLink *pLink) { struct ns1__addLink *_p = soap_instantiate_ns1__addLink(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addLink(soap, _p); _p->cookie = cookie; _p->pLink = pLink; } return _p; }

inline void soap_delete_ns1__addLink(struct soap *soap, struct ns1__addLink *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__addLink(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__addLinkResponse
#define SOAP_TYPE_ns1__addLinkResponse (521)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addLinkResponse(struct soap*, struct ns1__addLinkResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addLinkResponse(struct soap*, const struct ns1__addLinkResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addLinkResponse(struct soap*, const char*, int, const struct ns1__addLinkResponse *, const char*);
SOAP_FMAC3 struct ns1__addLinkResponse * SOAP_FMAC4 soap_in_ns1__addLinkResponse(struct soap*, const char*, struct ns1__addLinkResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addLinkResponse(struct soap*, const struct ns1__addLinkResponse *, const char*, const char*);

#ifndef soap_write_ns1__addLinkResponse
#define soap_write_ns1__addLinkResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__addLinkResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__addLinkResponse(soap, data, "ns1:addLinkResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__addLinkResponse * SOAP_FMAC4 soap_get_ns1__addLinkResponse(struct soap*, struct ns1__addLinkResponse *, const char*, const char*);

#ifndef soap_read_ns1__addLinkResponse
#define soap_read_ns1__addLinkResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__addLinkResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__addLinkResponse * SOAP_FMAC2 soap_instantiate_ns1__addLinkResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__addLinkResponse * soap_new_ns1__addLinkResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__addLinkResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__addLinkResponse * soap_new_req_ns1__addLinkResponse(struct soap *soap, LONG64 recordID) { struct ns1__addLinkResponse *_p = soap_instantiate_ns1__addLinkResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addLinkResponse(soap, _p); _p->recordID = recordID; } return _p; }

inline struct ns1__addLinkResponse * soap_new_set_ns1__addLinkResponse(struct soap *soap, LONG64 recordID) { struct ns1__addLinkResponse *_p = soap_instantiate_ns1__addLinkResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addLinkResponse(soap, _p); _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__addLinkResponse(struct soap *soap, struct ns1__addLinkResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__addLinkResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getLink
#define SOAP_TYPE_ns1__getLink (519)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getLink(struct soap*, struct ns1__getLink *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getLink(struct soap*, const struct ns1__getLink *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getLink(struct soap*, const char*, int, const struct ns1__getLink *, const char*);
SOAP_FMAC3 struct ns1__getLink * SOAP_FMAC4 soap_in_ns1__getLink(struct soap*, const char*, struct ns1__getLink *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getLink(struct soap*, const struct ns1__getLink *, const char*, const char*);

#ifndef soap_write_ns1__getLink
#define soap_write_ns1__getLink(soap, data) ( soap_begin(soap), soap_serialize_ns1__getLink(soap, data), soap_begin_send(soap) || soap_put_ns1__getLink(soap, data, "ns1:getLink", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getLink * SOAP_FMAC4 soap_get_ns1__getLink(struct soap*, struct ns1__getLink *, const char*, const char*);

#ifndef soap_read_ns1__getLink
#define soap_read_ns1__getLink(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getLink(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getLink * SOAP_FMAC2 soap_instantiate_ns1__getLink(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getLink * soap_new_ns1__getLink(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getLink(soap, n, NULL, NULL, NULL); }

inline struct ns1__getLink * soap_new_req_ns1__getLink(struct soap *soap, LONG64 cookie, LONG64 linkID) { struct ns1__getLink *_p = soap_instantiate_ns1__getLink(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getLink(soap, _p); _p->cookie = cookie; _p->linkID = linkID; } return _p; }

inline struct ns1__getLink * soap_new_set_ns1__getLink(struct soap *soap, LONG64 cookie, LONG64 linkID) { struct ns1__getLink *_p = soap_instantiate_ns1__getLink(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getLink(soap, _p); _p->cookie = cookie; _p->linkID = linkID; } return _p; }

inline void soap_delete_ns1__getLink(struct soap *soap, struct ns1__getLink *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getLink(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getLinkResponse
#define SOAP_TYPE_ns1__getLinkResponse (516)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getLinkResponse(struct soap*, struct ns1__getLinkResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getLinkResponse(struct soap*, const struct ns1__getLinkResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getLinkResponse(struct soap*, const char*, int, const struct ns1__getLinkResponse *, const char*);
SOAP_FMAC3 struct ns1__getLinkResponse * SOAP_FMAC4 soap_in_ns1__getLinkResponse(struct soap*, const char*, struct ns1__getLinkResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getLinkResponse(struct soap*, const struct ns1__getLinkResponse *, const char*, const char*);

#ifndef soap_write_ns1__getLinkResponse
#define soap_write_ns1__getLinkResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getLinkResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getLinkResponse(soap, data, "ns1:getLinkResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getLinkResponse * SOAP_FMAC4 soap_get_ns1__getLinkResponse(struct soap*, struct ns1__getLinkResponse *, const char*, const char*);

#ifndef soap_read_ns1__getLinkResponse
#define soap_read_ns1__getLinkResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getLinkResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getLinkResponse * SOAP_FMAC2 soap_instantiate_ns1__getLinkResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getLinkResponse * soap_new_ns1__getLinkResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getLinkResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getLinkResponse * soap_new_req_ns1__getLinkResponse(struct soap *soap) { struct ns1__getLinkResponse *_p = soap_instantiate_ns1__getLinkResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getLinkResponse(soap, _p); } return _p; }

inline struct ns1__getLinkResponse * soap_new_set_ns1__getLinkResponse(struct soap *soap, ns1__CLink *pLink) { struct ns1__getLinkResponse *_p = soap_instantiate_ns1__getLinkResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getLinkResponse(soap, _p); _p->pLink = pLink; } return _p; }

inline void soap_delete_ns1__getLinkResponse(struct soap *soap, struct ns1__getLinkResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getLinkResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getLinksForDefect
#define SOAP_TYPE_ns1__getLinksForDefect (515)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getLinksForDefect(struct soap*, struct ns1__getLinksForDefect *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getLinksForDefect(struct soap*, const struct ns1__getLinksForDefect *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getLinksForDefect(struct soap*, const char*, int, const struct ns1__getLinksForDefect *, const char*);
SOAP_FMAC3 struct ns1__getLinksForDefect * SOAP_FMAC4 soap_in_ns1__getLinksForDefect(struct soap*, const char*, struct ns1__getLinksForDefect *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getLinksForDefect(struct soap*, const struct ns1__getLinksForDefect *, const char*, const char*);

#ifndef soap_write_ns1__getLinksForDefect
#define soap_write_ns1__getLinksForDefect(soap, data) ( soap_begin(soap), soap_serialize_ns1__getLinksForDefect(soap, data), soap_begin_send(soap) || soap_put_ns1__getLinksForDefect(soap, data, "ns1:getLinksForDefect", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getLinksForDefect * SOAP_FMAC4 soap_get_ns1__getLinksForDefect(struct soap*, struct ns1__getLinksForDefect *, const char*, const char*);

#ifndef soap_read_ns1__getLinksForDefect
#define soap_read_ns1__getLinksForDefect(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getLinksForDefect(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getLinksForDefect * SOAP_FMAC2 soap_instantiate_ns1__getLinksForDefect(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getLinksForDefect * soap_new_ns1__getLinksForDefect(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getLinksForDefect(soap, n, NULL, NULL, NULL); }

inline struct ns1__getLinksForDefect * soap_new_req_ns1__getLinksForDefect(struct soap *soap, LONG64 cookie, LONG64 defectRecordID) { struct ns1__getLinksForDefect *_p = soap_instantiate_ns1__getLinksForDefect(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getLinksForDefect(soap, _p); _p->cookie = cookie; _p->defectRecordID = defectRecordID; } return _p; }

inline struct ns1__getLinksForDefect * soap_new_set_ns1__getLinksForDefect(struct soap *soap, LONG64 cookie, LONG64 defectRecordID) { struct ns1__getLinksForDefect *_p = soap_instantiate_ns1__getLinksForDefect(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getLinksForDefect(soap, _p); _p->cookie = cookie; _p->defectRecordID = defectRecordID; } return _p; }

inline void soap_delete_ns1__getLinksForDefect(struct soap *soap, struct ns1__getLinksForDefect *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getLinksForDefect(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getLinksForDefectResponse
#define SOAP_TYPE_ns1__getLinksForDefectResponse (512)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getLinksForDefectResponse(struct soap*, struct ns1__getLinksForDefectResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getLinksForDefectResponse(struct soap*, const struct ns1__getLinksForDefectResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getLinksForDefectResponse(struct soap*, const char*, int, const struct ns1__getLinksForDefectResponse *, const char*);
SOAP_FMAC3 struct ns1__getLinksForDefectResponse * SOAP_FMAC4 soap_in_ns1__getLinksForDefectResponse(struct soap*, const char*, struct ns1__getLinksForDefectResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getLinksForDefectResponse(struct soap*, const struct ns1__getLinksForDefectResponse *, const char*, const char*);

#ifndef soap_write_ns1__getLinksForDefectResponse
#define soap_write_ns1__getLinksForDefectResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getLinksForDefectResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getLinksForDefectResponse(soap, data, "ns1:getLinksForDefectResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getLinksForDefectResponse * SOAP_FMAC4 soap_get_ns1__getLinksForDefectResponse(struct soap*, struct ns1__getLinksForDefectResponse *, const char*, const char*);

#ifndef soap_read_ns1__getLinksForDefectResponse
#define soap_read_ns1__getLinksForDefectResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getLinksForDefectResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getLinksForDefectResponse * SOAP_FMAC2 soap_instantiate_ns1__getLinksForDefectResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getLinksForDefectResponse * soap_new_ns1__getLinksForDefectResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getLinksForDefectResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getLinksForDefectResponse * soap_new_req_ns1__getLinksForDefectResponse(struct soap *soap) { struct ns1__getLinksForDefectResponse *_p = soap_instantiate_ns1__getLinksForDefectResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getLinksForDefectResponse(soap, _p); } return _p; }

inline struct ns1__getLinksForDefectResponse * soap_new_set_ns1__getLinksForDefectResponse(struct soap *soap, ArrayOfCLink *pLinkList) { struct ns1__getLinksForDefectResponse *_p = soap_instantiate_ns1__getLinksForDefectResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getLinksForDefectResponse(soap, _p); _p->pLinkList = pLinkList; } return _p; }

inline void soap_delete_ns1__getLinksForDefectResponse(struct soap *soap, struct ns1__getLinksForDefectResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getLinksForDefectResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getLinksForItem
#define SOAP_TYPE_ns1__getLinksForItem (511)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getLinksForItem(struct soap*, struct ns1__getLinksForItem *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getLinksForItem(struct soap*, const struct ns1__getLinksForItem *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getLinksForItem(struct soap*, const char*, int, const struct ns1__getLinksForItem *, const char*);
SOAP_FMAC3 struct ns1__getLinksForItem * SOAP_FMAC4 soap_in_ns1__getLinksForItem(struct soap*, const char*, struct ns1__getLinksForItem *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getLinksForItem(struct soap*, const struct ns1__getLinksForItem *, const char*, const char*);

#ifndef soap_write_ns1__getLinksForItem
#define soap_write_ns1__getLinksForItem(soap, data) ( soap_begin(soap), soap_serialize_ns1__getLinksForItem(soap, data), soap_begin_send(soap) || soap_put_ns1__getLinksForItem(soap, data, "ns1:getLinksForItem", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getLinksForItem * SOAP_FMAC4 soap_get_ns1__getLinksForItem(struct soap*, struct ns1__getLinksForItem *, const char*, const char*);

#ifndef soap_read_ns1__getLinksForItem
#define soap_read_ns1__getLinksForItem(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getLinksForItem(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getLinksForItem * SOAP_FMAC2 soap_instantiate_ns1__getLinksForItem(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getLinksForItem * soap_new_ns1__getLinksForItem(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getLinksForItem(soap, n, NULL, NULL, NULL); }

inline struct ns1__getLinksForItem * soap_new_req_ns1__getLinksForItem(struct soap *soap, LONG64 cookie, LONG64 itemRecordID) { struct ns1__getLinksForItem *_p = soap_instantiate_ns1__getLinksForItem(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getLinksForItem(soap, _p); _p->cookie = cookie; _p->itemRecordID = itemRecordID; } return _p; }

inline struct ns1__getLinksForItem * soap_new_set_ns1__getLinksForItem(struct soap *soap, LONG64 cookie, char *tablename, LONG64 itemRecordID) { struct ns1__getLinksForItem *_p = soap_instantiate_ns1__getLinksForItem(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getLinksForItem(soap, _p); _p->cookie = cookie; _p->tablename = tablename; _p->itemRecordID = itemRecordID; } return _p; }

inline void soap_delete_ns1__getLinksForItem(struct soap *soap, struct ns1__getLinksForItem *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getLinksForItem(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getLinksForItemResponse
#define SOAP_TYPE_ns1__getLinksForItemResponse (507)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getLinksForItemResponse(struct soap*, struct ns1__getLinksForItemResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getLinksForItemResponse(struct soap*, const struct ns1__getLinksForItemResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getLinksForItemResponse(struct soap*, const char*, int, const struct ns1__getLinksForItemResponse *, const char*);
SOAP_FMAC3 struct ns1__getLinksForItemResponse * SOAP_FMAC4 soap_in_ns1__getLinksForItemResponse(struct soap*, const char*, struct ns1__getLinksForItemResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getLinksForItemResponse(struct soap*, const struct ns1__getLinksForItemResponse *, const char*, const char*);

#ifndef soap_write_ns1__getLinksForItemResponse
#define soap_write_ns1__getLinksForItemResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getLinksForItemResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getLinksForItemResponse(soap, data, "ns1:getLinksForItemResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getLinksForItemResponse * SOAP_FMAC4 soap_get_ns1__getLinksForItemResponse(struct soap*, struct ns1__getLinksForItemResponse *, const char*, const char*);

#ifndef soap_read_ns1__getLinksForItemResponse
#define soap_read_ns1__getLinksForItemResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getLinksForItemResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getLinksForItemResponse * SOAP_FMAC2 soap_instantiate_ns1__getLinksForItemResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getLinksForItemResponse * soap_new_ns1__getLinksForItemResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getLinksForItemResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getLinksForItemResponse * soap_new_req_ns1__getLinksForItemResponse(struct soap *soap) { struct ns1__getLinksForItemResponse *_p = soap_instantiate_ns1__getLinksForItemResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getLinksForItemResponse(soap, _p); } return _p; }

inline struct ns1__getLinksForItemResponse * soap_new_set_ns1__getLinksForItemResponse(struct soap *soap, ArrayOfCLink *pLinkList) { struct ns1__getLinksForItemResponse *_p = soap_instantiate_ns1__getLinksForItemResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getLinksForItemResponse(soap, _p); _p->pLinkList = pLinkList; } return _p; }

inline void soap_delete_ns1__getLinksForItemResponse(struct soap *soap, struct ns1__getLinksForItemResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getLinksForItemResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__addGlobalCustomer
#define SOAP_TYPE_ns1__addGlobalCustomer (506)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addGlobalCustomer(struct soap*, struct ns1__addGlobalCustomer *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addGlobalCustomer(struct soap*, const struct ns1__addGlobalCustomer *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addGlobalCustomer(struct soap*, const char*, int, const struct ns1__addGlobalCustomer *, const char*);
SOAP_FMAC3 struct ns1__addGlobalCustomer * SOAP_FMAC4 soap_in_ns1__addGlobalCustomer(struct soap*, const char*, struct ns1__addGlobalCustomer *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addGlobalCustomer(struct soap*, const struct ns1__addGlobalCustomer *, const char*, const char*);

#ifndef soap_write_ns1__addGlobalCustomer
#define soap_write_ns1__addGlobalCustomer(soap, data) ( soap_begin(soap), soap_serialize_ns1__addGlobalCustomer(soap, data), soap_begin_send(soap) || soap_put_ns1__addGlobalCustomer(soap, data, "ns1:addGlobalCustomer", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__addGlobalCustomer * SOAP_FMAC4 soap_get_ns1__addGlobalCustomer(struct soap*, struct ns1__addGlobalCustomer *, const char*, const char*);

#ifndef soap_read_ns1__addGlobalCustomer
#define soap_read_ns1__addGlobalCustomer(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__addGlobalCustomer(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__addGlobalCustomer * SOAP_FMAC2 soap_instantiate_ns1__addGlobalCustomer(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__addGlobalCustomer * soap_new_ns1__addGlobalCustomer(struct soap *soap, int n = -1) { return soap_instantiate_ns1__addGlobalCustomer(soap, n, NULL, NULL, NULL); }

inline struct ns1__addGlobalCustomer * soap_new_req_ns1__addGlobalCustomer(struct soap *soap, LONG64 cookie) { struct ns1__addGlobalCustomer *_p = soap_instantiate_ns1__addGlobalCustomer(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addGlobalCustomer(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__addGlobalCustomer * soap_new_set_ns1__addGlobalCustomer(struct soap *soap, LONG64 cookie, ns1__CGlobalUser *pUser) { struct ns1__addGlobalCustomer *_p = soap_instantiate_ns1__addGlobalCustomer(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addGlobalCustomer(soap, _p); _p->cookie = cookie; _p->pUser = pUser; } return _p; }

inline void soap_delete_ns1__addGlobalCustomer(struct soap *soap, struct ns1__addGlobalCustomer *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__addGlobalCustomer(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__addGlobalCustomerResponse
#define SOAP_TYPE_ns1__addGlobalCustomerResponse (505)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addGlobalCustomerResponse(struct soap*, struct ns1__addGlobalCustomerResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addGlobalCustomerResponse(struct soap*, const struct ns1__addGlobalCustomerResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addGlobalCustomerResponse(struct soap*, const char*, int, const struct ns1__addGlobalCustomerResponse *, const char*);
SOAP_FMAC3 struct ns1__addGlobalCustomerResponse * SOAP_FMAC4 soap_in_ns1__addGlobalCustomerResponse(struct soap*, const char*, struct ns1__addGlobalCustomerResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addGlobalCustomerResponse(struct soap*, const struct ns1__addGlobalCustomerResponse *, const char*, const char*);

#ifndef soap_write_ns1__addGlobalCustomerResponse
#define soap_write_ns1__addGlobalCustomerResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__addGlobalCustomerResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__addGlobalCustomerResponse(soap, data, "ns1:addGlobalCustomerResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__addGlobalCustomerResponse * SOAP_FMAC4 soap_get_ns1__addGlobalCustomerResponse(struct soap*, struct ns1__addGlobalCustomerResponse *, const char*, const char*);

#ifndef soap_read_ns1__addGlobalCustomerResponse
#define soap_read_ns1__addGlobalCustomerResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__addGlobalCustomerResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__addGlobalCustomerResponse * SOAP_FMAC2 soap_instantiate_ns1__addGlobalCustomerResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__addGlobalCustomerResponse * soap_new_ns1__addGlobalCustomerResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__addGlobalCustomerResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__addGlobalCustomerResponse * soap_new_req_ns1__addGlobalCustomerResponse(struct soap *soap, int result) { struct ns1__addGlobalCustomerResponse *_p = soap_instantiate_ns1__addGlobalCustomerResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addGlobalCustomerResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__addGlobalCustomerResponse * soap_new_set_ns1__addGlobalCustomerResponse(struct soap *soap, int result) { struct ns1__addGlobalCustomerResponse *_p = soap_instantiate_ns1__addGlobalCustomerResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addGlobalCustomerResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__addGlobalCustomerResponse(struct soap *soap, struct ns1__addGlobalCustomerResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__addGlobalCustomerResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__promoteCustomer
#define SOAP_TYPE_ns1__promoteCustomer (503)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__promoteCustomer(struct soap*, struct ns1__promoteCustomer *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__promoteCustomer(struct soap*, const struct ns1__promoteCustomer *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__promoteCustomer(struct soap*, const char*, int, const struct ns1__promoteCustomer *, const char*);
SOAP_FMAC3 struct ns1__promoteCustomer * SOAP_FMAC4 soap_in_ns1__promoteCustomer(struct soap*, const char*, struct ns1__promoteCustomer *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__promoteCustomer(struct soap*, const struct ns1__promoteCustomer *, const char*, const char*);

#ifndef soap_write_ns1__promoteCustomer
#define soap_write_ns1__promoteCustomer(soap, data) ( soap_begin(soap), soap_serialize_ns1__promoteCustomer(soap, data), soap_begin_send(soap) || soap_put_ns1__promoteCustomer(soap, data, "ns1:promoteCustomer", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__promoteCustomer * SOAP_FMAC4 soap_get_ns1__promoteCustomer(struct soap*, struct ns1__promoteCustomer *, const char*, const char*);

#ifndef soap_read_ns1__promoteCustomer
#define soap_read_ns1__promoteCustomer(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__promoteCustomer(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__promoteCustomer * SOAP_FMAC2 soap_instantiate_ns1__promoteCustomer(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__promoteCustomer * soap_new_ns1__promoteCustomer(struct soap *soap, int n = -1) { return soap_instantiate_ns1__promoteCustomer(soap, n, NULL, NULL, NULL); }

inline struct ns1__promoteCustomer * soap_new_req_ns1__promoteCustomer(struct soap *soap, LONG64 cookie) { struct ns1__promoteCustomer *_p = soap_instantiate_ns1__promoteCustomer(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__promoteCustomer(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__promoteCustomer * soap_new_set_ns1__promoteCustomer(struct soap *soap, LONG64 cookie, char *localCustomer, char *globalUser, char *loginname) { struct ns1__promoteCustomer *_p = soap_instantiate_ns1__promoteCustomer(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__promoteCustomer(soap, _p); _p->cookie = cookie; _p->localCustomer = localCustomer; _p->globalUser = globalUser; _p->loginname = loginname; } return _p; }

inline void soap_delete_ns1__promoteCustomer(struct soap *soap, struct ns1__promoteCustomer *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__promoteCustomer(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__promoteCustomerResponse
#define SOAP_TYPE_ns1__promoteCustomerResponse (502)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__promoteCustomerResponse(struct soap*, struct ns1__promoteCustomerResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__promoteCustomerResponse(struct soap*, const struct ns1__promoteCustomerResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__promoteCustomerResponse(struct soap*, const char*, int, const struct ns1__promoteCustomerResponse *, const char*);
SOAP_FMAC3 struct ns1__promoteCustomerResponse * SOAP_FMAC4 soap_in_ns1__promoteCustomerResponse(struct soap*, const char*, struct ns1__promoteCustomerResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__promoteCustomerResponse(struct soap*, const struct ns1__promoteCustomerResponse *, const char*, const char*);

#ifndef soap_write_ns1__promoteCustomerResponse
#define soap_write_ns1__promoteCustomerResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__promoteCustomerResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__promoteCustomerResponse(soap, data, "ns1:promoteCustomerResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__promoteCustomerResponse * SOAP_FMAC4 soap_get_ns1__promoteCustomerResponse(struct soap*, struct ns1__promoteCustomerResponse *, const char*, const char*);

#ifndef soap_read_ns1__promoteCustomerResponse
#define soap_read_ns1__promoteCustomerResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__promoteCustomerResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__promoteCustomerResponse * SOAP_FMAC2 soap_instantiate_ns1__promoteCustomerResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__promoteCustomerResponse * soap_new_ns1__promoteCustomerResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__promoteCustomerResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__promoteCustomerResponse * soap_new_req_ns1__promoteCustomerResponse(struct soap *soap, int result) { struct ns1__promoteCustomerResponse *_p = soap_instantiate_ns1__promoteCustomerResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__promoteCustomerResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__promoteCustomerResponse * soap_new_set_ns1__promoteCustomerResponse(struct soap *soap, int result) { struct ns1__promoteCustomerResponse *_p = soap_instantiate_ns1__promoteCustomerResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__promoteCustomerResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__promoteCustomerResponse(struct soap *soap, struct ns1__promoteCustomerResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__promoteCustomerResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__cancelSaveCustomer
#define SOAP_TYPE_ns1__cancelSaveCustomer (500)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__cancelSaveCustomer(struct soap*, struct ns1__cancelSaveCustomer *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__cancelSaveCustomer(struct soap*, const struct ns1__cancelSaveCustomer *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__cancelSaveCustomer(struct soap*, const char*, int, const struct ns1__cancelSaveCustomer *, const char*);
SOAP_FMAC3 struct ns1__cancelSaveCustomer * SOAP_FMAC4 soap_in_ns1__cancelSaveCustomer(struct soap*, const char*, struct ns1__cancelSaveCustomer *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__cancelSaveCustomer(struct soap*, const struct ns1__cancelSaveCustomer *, const char*, const char*);

#ifndef soap_write_ns1__cancelSaveCustomer
#define soap_write_ns1__cancelSaveCustomer(soap, data) ( soap_begin(soap), soap_serialize_ns1__cancelSaveCustomer(soap, data), soap_begin_send(soap) || soap_put_ns1__cancelSaveCustomer(soap, data, "ns1:cancelSaveCustomer", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__cancelSaveCustomer * SOAP_FMAC4 soap_get_ns1__cancelSaveCustomer(struct soap*, struct ns1__cancelSaveCustomer *, const char*, const char*);

#ifndef soap_read_ns1__cancelSaveCustomer
#define soap_read_ns1__cancelSaveCustomer(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__cancelSaveCustomer(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__cancelSaveCustomer * SOAP_FMAC2 soap_instantiate_ns1__cancelSaveCustomer(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__cancelSaveCustomer * soap_new_ns1__cancelSaveCustomer(struct soap *soap, int n = -1) { return soap_instantiate_ns1__cancelSaveCustomer(soap, n, NULL, NULL, NULL); }

inline struct ns1__cancelSaveCustomer * soap_new_req_ns1__cancelSaveCustomer(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__cancelSaveCustomer *_p = soap_instantiate_ns1__cancelSaveCustomer(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveCustomer(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline struct ns1__cancelSaveCustomer * soap_new_set_ns1__cancelSaveCustomer(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__cancelSaveCustomer *_p = soap_instantiate_ns1__cancelSaveCustomer(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveCustomer(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__cancelSaveCustomer(struct soap *soap, struct ns1__cancelSaveCustomer *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__cancelSaveCustomer(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__cancelSaveCustomerResponse
#define SOAP_TYPE_ns1__cancelSaveCustomerResponse (499)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__cancelSaveCustomerResponse(struct soap*, struct ns1__cancelSaveCustomerResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__cancelSaveCustomerResponse(struct soap*, const struct ns1__cancelSaveCustomerResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__cancelSaveCustomerResponse(struct soap*, const char*, int, const struct ns1__cancelSaveCustomerResponse *, const char*);
SOAP_FMAC3 struct ns1__cancelSaveCustomerResponse * SOAP_FMAC4 soap_in_ns1__cancelSaveCustomerResponse(struct soap*, const char*, struct ns1__cancelSaveCustomerResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__cancelSaveCustomerResponse(struct soap*, const struct ns1__cancelSaveCustomerResponse *, const char*, const char*);

#ifndef soap_write_ns1__cancelSaveCustomerResponse
#define soap_write_ns1__cancelSaveCustomerResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__cancelSaveCustomerResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__cancelSaveCustomerResponse(soap, data, "ns1:cancelSaveCustomerResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__cancelSaveCustomerResponse * SOAP_FMAC4 soap_get_ns1__cancelSaveCustomerResponse(struct soap*, struct ns1__cancelSaveCustomerResponse *, const char*, const char*);

#ifndef soap_read_ns1__cancelSaveCustomerResponse
#define soap_read_ns1__cancelSaveCustomerResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__cancelSaveCustomerResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__cancelSaveCustomerResponse * SOAP_FMAC2 soap_instantiate_ns1__cancelSaveCustomerResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__cancelSaveCustomerResponse * soap_new_ns1__cancelSaveCustomerResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__cancelSaveCustomerResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__cancelSaveCustomerResponse * soap_new_req_ns1__cancelSaveCustomerResponse(struct soap *soap, int result) { struct ns1__cancelSaveCustomerResponse *_p = soap_instantiate_ns1__cancelSaveCustomerResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveCustomerResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__cancelSaveCustomerResponse * soap_new_set_ns1__cancelSaveCustomerResponse(struct soap *soap, int result) { struct ns1__cancelSaveCustomerResponse *_p = soap_instantiate_ns1__cancelSaveCustomerResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveCustomerResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__cancelSaveCustomerResponse(struct soap *soap, struct ns1__cancelSaveCustomerResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__cancelSaveCustomerResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteCustomerByRecordID
#define SOAP_TYPE_ns1__deleteCustomerByRecordID (497)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteCustomerByRecordID(struct soap*, struct ns1__deleteCustomerByRecordID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteCustomerByRecordID(struct soap*, const struct ns1__deleteCustomerByRecordID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteCustomerByRecordID(struct soap*, const char*, int, const struct ns1__deleteCustomerByRecordID *, const char*);
SOAP_FMAC3 struct ns1__deleteCustomerByRecordID * SOAP_FMAC4 soap_in_ns1__deleteCustomerByRecordID(struct soap*, const char*, struct ns1__deleteCustomerByRecordID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteCustomerByRecordID(struct soap*, const struct ns1__deleteCustomerByRecordID *, const char*, const char*);

#ifndef soap_write_ns1__deleteCustomerByRecordID
#define soap_write_ns1__deleteCustomerByRecordID(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteCustomerByRecordID(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteCustomerByRecordID(soap, data, "ns1:deleteCustomerByRecordID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteCustomerByRecordID * SOAP_FMAC4 soap_get_ns1__deleteCustomerByRecordID(struct soap*, struct ns1__deleteCustomerByRecordID *, const char*, const char*);

#ifndef soap_read_ns1__deleteCustomerByRecordID
#define soap_read_ns1__deleteCustomerByRecordID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteCustomerByRecordID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteCustomerByRecordID * SOAP_FMAC2 soap_instantiate_ns1__deleteCustomerByRecordID(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteCustomerByRecordID * soap_new_ns1__deleteCustomerByRecordID(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteCustomerByRecordID(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteCustomerByRecordID * soap_new_req_ns1__deleteCustomerByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__deleteCustomerByRecordID *_p = soap_instantiate_ns1__deleteCustomerByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteCustomerByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline struct ns1__deleteCustomerByRecordID * soap_new_set_ns1__deleteCustomerByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__deleteCustomerByRecordID *_p = soap_instantiate_ns1__deleteCustomerByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteCustomerByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__deleteCustomerByRecordID(struct soap *soap, struct ns1__deleteCustomerByRecordID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteCustomerByRecordID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteCustomerByRecordIDResponse
#define SOAP_TYPE_ns1__deleteCustomerByRecordIDResponse (496)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteCustomerByRecordIDResponse(struct soap*, struct ns1__deleteCustomerByRecordIDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteCustomerByRecordIDResponse(struct soap*, const struct ns1__deleteCustomerByRecordIDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteCustomerByRecordIDResponse(struct soap*, const char*, int, const struct ns1__deleteCustomerByRecordIDResponse *, const char*);
SOAP_FMAC3 struct ns1__deleteCustomerByRecordIDResponse * SOAP_FMAC4 soap_in_ns1__deleteCustomerByRecordIDResponse(struct soap*, const char*, struct ns1__deleteCustomerByRecordIDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteCustomerByRecordIDResponse(struct soap*, const struct ns1__deleteCustomerByRecordIDResponse *, const char*, const char*);

#ifndef soap_write_ns1__deleteCustomerByRecordIDResponse
#define soap_write_ns1__deleteCustomerByRecordIDResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteCustomerByRecordIDResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteCustomerByRecordIDResponse(soap, data, "ns1:deleteCustomerByRecordIDResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteCustomerByRecordIDResponse * SOAP_FMAC4 soap_get_ns1__deleteCustomerByRecordIDResponse(struct soap*, struct ns1__deleteCustomerByRecordIDResponse *, const char*, const char*);

#ifndef soap_read_ns1__deleteCustomerByRecordIDResponse
#define soap_read_ns1__deleteCustomerByRecordIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteCustomerByRecordIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteCustomerByRecordIDResponse * SOAP_FMAC2 soap_instantiate_ns1__deleteCustomerByRecordIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteCustomerByRecordIDResponse * soap_new_ns1__deleteCustomerByRecordIDResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteCustomerByRecordIDResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteCustomerByRecordIDResponse * soap_new_req_ns1__deleteCustomerByRecordIDResponse(struct soap *soap, int result) { struct ns1__deleteCustomerByRecordIDResponse *_p = soap_instantiate_ns1__deleteCustomerByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteCustomerByRecordIDResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__deleteCustomerByRecordIDResponse * soap_new_set_ns1__deleteCustomerByRecordIDResponse(struct soap *soap, int result) { struct ns1__deleteCustomerByRecordIDResponse *_p = soap_instantiate_ns1__deleteCustomerByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteCustomerByRecordIDResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__deleteCustomerByRecordIDResponse(struct soap *soap, struct ns1__deleteCustomerByRecordIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteCustomerByRecordIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteCustomer
#define SOAP_TYPE_ns1__deleteCustomer (494)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteCustomer(struct soap*, struct ns1__deleteCustomer *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteCustomer(struct soap*, const struct ns1__deleteCustomer *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteCustomer(struct soap*, const char*, int, const struct ns1__deleteCustomer *, const char*);
SOAP_FMAC3 struct ns1__deleteCustomer * SOAP_FMAC4 soap_in_ns1__deleteCustomer(struct soap*, const char*, struct ns1__deleteCustomer *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteCustomer(struct soap*, const struct ns1__deleteCustomer *, const char*, const char*);

#ifndef soap_write_ns1__deleteCustomer
#define soap_write_ns1__deleteCustomer(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteCustomer(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteCustomer(soap, data, "ns1:deleteCustomer", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteCustomer * SOAP_FMAC4 soap_get_ns1__deleteCustomer(struct soap*, struct ns1__deleteCustomer *, const char*, const char*);

#ifndef soap_read_ns1__deleteCustomer
#define soap_read_ns1__deleteCustomer(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteCustomer(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteCustomer * SOAP_FMAC2 soap_instantiate_ns1__deleteCustomer(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteCustomer * soap_new_ns1__deleteCustomer(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteCustomer(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteCustomer * soap_new_req_ns1__deleteCustomer(struct soap *soap, LONG64 cookie) { struct ns1__deleteCustomer *_p = soap_instantiate_ns1__deleteCustomer(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteCustomer(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__deleteCustomer * soap_new_set_ns1__deleteCustomer(struct soap *soap, LONG64 cookie, char *firstName, char *middleInitials, char *lastName) { struct ns1__deleteCustomer *_p = soap_instantiate_ns1__deleteCustomer(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteCustomer(soap, _p); _p->cookie = cookie; _p->firstName = firstName; _p->middleInitials = middleInitials; _p->lastName = lastName; } return _p; }

inline void soap_delete_ns1__deleteCustomer(struct soap *soap, struct ns1__deleteCustomer *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteCustomer(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteCustomerResponse
#define SOAP_TYPE_ns1__deleteCustomerResponse (493)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteCustomerResponse(struct soap*, struct ns1__deleteCustomerResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteCustomerResponse(struct soap*, const struct ns1__deleteCustomerResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteCustomerResponse(struct soap*, const char*, int, const struct ns1__deleteCustomerResponse *, const char*);
SOAP_FMAC3 struct ns1__deleteCustomerResponse * SOAP_FMAC4 soap_in_ns1__deleteCustomerResponse(struct soap*, const char*, struct ns1__deleteCustomerResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteCustomerResponse(struct soap*, const struct ns1__deleteCustomerResponse *, const char*, const char*);

#ifndef soap_write_ns1__deleteCustomerResponse
#define soap_write_ns1__deleteCustomerResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteCustomerResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteCustomerResponse(soap, data, "ns1:deleteCustomerResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteCustomerResponse * SOAP_FMAC4 soap_get_ns1__deleteCustomerResponse(struct soap*, struct ns1__deleteCustomerResponse *, const char*, const char*);

#ifndef soap_read_ns1__deleteCustomerResponse
#define soap_read_ns1__deleteCustomerResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteCustomerResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteCustomerResponse * SOAP_FMAC2 soap_instantiate_ns1__deleteCustomerResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteCustomerResponse * soap_new_ns1__deleteCustomerResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteCustomerResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteCustomerResponse * soap_new_req_ns1__deleteCustomerResponse(struct soap *soap, int result) { struct ns1__deleteCustomerResponse *_p = soap_instantiate_ns1__deleteCustomerResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteCustomerResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__deleteCustomerResponse * soap_new_set_ns1__deleteCustomerResponse(struct soap *soap, int result) { struct ns1__deleteCustomerResponse *_p = soap_instantiate_ns1__deleteCustomerResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteCustomerResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__deleteCustomerResponse(struct soap *soap, struct ns1__deleteCustomerResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteCustomerResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveCustomer
#define SOAP_TYPE_ns1__saveCustomer (491)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveCustomer(struct soap*, struct ns1__saveCustomer *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveCustomer(struct soap*, const struct ns1__saveCustomer *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveCustomer(struct soap*, const char*, int, const struct ns1__saveCustomer *, const char*);
SOAP_FMAC3 struct ns1__saveCustomer * SOAP_FMAC4 soap_in_ns1__saveCustomer(struct soap*, const char*, struct ns1__saveCustomer *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveCustomer(struct soap*, const struct ns1__saveCustomer *, const char*, const char*);

#ifndef soap_write_ns1__saveCustomer
#define soap_write_ns1__saveCustomer(soap, data) ( soap_begin(soap), soap_serialize_ns1__saveCustomer(soap, data), soap_begin_send(soap) || soap_put_ns1__saveCustomer(soap, data, "ns1:saveCustomer", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__saveCustomer * SOAP_FMAC4 soap_get_ns1__saveCustomer(struct soap*, struct ns1__saveCustomer *, const char*, const char*);

#ifndef soap_read_ns1__saveCustomer
#define soap_read_ns1__saveCustomer(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveCustomer(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__saveCustomer * SOAP_FMAC2 soap_instantiate_ns1__saveCustomer(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveCustomer * soap_new_ns1__saveCustomer(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveCustomer(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveCustomer * soap_new_req_ns1__saveCustomer(struct soap *soap, LONG64 cookie) { struct ns1__saveCustomer *_p = soap_instantiate_ns1__saveCustomer(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveCustomer(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__saveCustomer * soap_new_set_ns1__saveCustomer(struct soap *soap, LONG64 cookie, char *firstName, char *middleInitials, char *lastName, ns1__CUser *pCustomer) { struct ns1__saveCustomer *_p = soap_instantiate_ns1__saveCustomer(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveCustomer(soap, _p); _p->cookie = cookie; _p->firstName = firstName; _p->middleInitials = middleInitials; _p->lastName = lastName; _p->pCustomer = pCustomer; } return _p; }

inline void soap_delete_ns1__saveCustomer(struct soap *soap, struct ns1__saveCustomer *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveCustomer(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveCustomerResponse
#define SOAP_TYPE_ns1__saveCustomerResponse (490)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveCustomerResponse(struct soap*, struct ns1__saveCustomerResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveCustomerResponse(struct soap*, const struct ns1__saveCustomerResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveCustomerResponse(struct soap*, const char*, int, const struct ns1__saveCustomerResponse *, const char*);
SOAP_FMAC3 struct ns1__saveCustomerResponse * SOAP_FMAC4 soap_in_ns1__saveCustomerResponse(struct soap*, const char*, struct ns1__saveCustomerResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveCustomerResponse(struct soap*, const struct ns1__saveCustomerResponse *, const char*, const char*);

#ifndef soap_write_ns1__saveCustomerResponse
#define soap_write_ns1__saveCustomerResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__saveCustomerResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__saveCustomerResponse(soap, data, "ns1:saveCustomerResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__saveCustomerResponse * SOAP_FMAC4 soap_get_ns1__saveCustomerResponse(struct soap*, struct ns1__saveCustomerResponse *, const char*, const char*);

#ifndef soap_read_ns1__saveCustomerResponse
#define soap_read_ns1__saveCustomerResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveCustomerResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__saveCustomerResponse * SOAP_FMAC2 soap_instantiate_ns1__saveCustomerResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveCustomerResponse * soap_new_ns1__saveCustomerResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveCustomerResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveCustomerResponse * soap_new_req_ns1__saveCustomerResponse(struct soap *soap, int result) { struct ns1__saveCustomerResponse *_p = soap_instantiate_ns1__saveCustomerResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveCustomerResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__saveCustomerResponse * soap_new_set_ns1__saveCustomerResponse(struct soap *soap, int result) { struct ns1__saveCustomerResponse *_p = soap_instantiate_ns1__saveCustomerResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveCustomerResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__saveCustomerResponse(struct soap *soap, struct ns1__saveCustomerResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveCustomerResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editCustomerByRecordID
#define SOAP_TYPE_ns1__editCustomerByRecordID (488)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editCustomerByRecordID(struct soap*, struct ns1__editCustomerByRecordID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editCustomerByRecordID(struct soap*, const struct ns1__editCustomerByRecordID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editCustomerByRecordID(struct soap*, const char*, int, const struct ns1__editCustomerByRecordID *, const char*);
SOAP_FMAC3 struct ns1__editCustomerByRecordID * SOAP_FMAC4 soap_in_ns1__editCustomerByRecordID(struct soap*, const char*, struct ns1__editCustomerByRecordID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editCustomerByRecordID(struct soap*, const struct ns1__editCustomerByRecordID *, const char*, const char*);

#ifndef soap_write_ns1__editCustomerByRecordID
#define soap_write_ns1__editCustomerByRecordID(soap, data) ( soap_begin(soap), soap_serialize_ns1__editCustomerByRecordID(soap, data), soap_begin_send(soap) || soap_put_ns1__editCustomerByRecordID(soap, data, "ns1:editCustomerByRecordID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editCustomerByRecordID * SOAP_FMAC4 soap_get_ns1__editCustomerByRecordID(struct soap*, struct ns1__editCustomerByRecordID *, const char*, const char*);

#ifndef soap_read_ns1__editCustomerByRecordID
#define soap_read_ns1__editCustomerByRecordID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editCustomerByRecordID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editCustomerByRecordID * SOAP_FMAC2 soap_instantiate_ns1__editCustomerByRecordID(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editCustomerByRecordID * soap_new_ns1__editCustomerByRecordID(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editCustomerByRecordID(soap, n, NULL, NULL, NULL); }

inline struct ns1__editCustomerByRecordID * soap_new_req_ns1__editCustomerByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__editCustomerByRecordID *_p = soap_instantiate_ns1__editCustomerByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editCustomerByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline struct ns1__editCustomerByRecordID * soap_new_set_ns1__editCustomerByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__editCustomerByRecordID *_p = soap_instantiate_ns1__editCustomerByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editCustomerByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__editCustomerByRecordID(struct soap *soap, struct ns1__editCustomerByRecordID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editCustomerByRecordID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editCustomerByRecordIDResponse
#define SOAP_TYPE_ns1__editCustomerByRecordIDResponse (485)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editCustomerByRecordIDResponse(struct soap*, struct ns1__editCustomerByRecordIDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editCustomerByRecordIDResponse(struct soap*, const struct ns1__editCustomerByRecordIDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editCustomerByRecordIDResponse(struct soap*, const char*, int, const struct ns1__editCustomerByRecordIDResponse *, const char*);
SOAP_FMAC3 struct ns1__editCustomerByRecordIDResponse * SOAP_FMAC4 soap_in_ns1__editCustomerByRecordIDResponse(struct soap*, const char*, struct ns1__editCustomerByRecordIDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editCustomerByRecordIDResponse(struct soap*, const struct ns1__editCustomerByRecordIDResponse *, const char*, const char*);

#ifndef soap_write_ns1__editCustomerByRecordIDResponse
#define soap_write_ns1__editCustomerByRecordIDResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__editCustomerByRecordIDResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__editCustomerByRecordIDResponse(soap, data, "ns1:editCustomerByRecordIDResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editCustomerByRecordIDResponse * SOAP_FMAC4 soap_get_ns1__editCustomerByRecordIDResponse(struct soap*, struct ns1__editCustomerByRecordIDResponse *, const char*, const char*);

#ifndef soap_read_ns1__editCustomerByRecordIDResponse
#define soap_read_ns1__editCustomerByRecordIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editCustomerByRecordIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editCustomerByRecordIDResponse * SOAP_FMAC2 soap_instantiate_ns1__editCustomerByRecordIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editCustomerByRecordIDResponse * soap_new_ns1__editCustomerByRecordIDResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editCustomerByRecordIDResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__editCustomerByRecordIDResponse * soap_new_req_ns1__editCustomerByRecordIDResponse(struct soap *soap) { struct ns1__editCustomerByRecordIDResponse *_p = soap_instantiate_ns1__editCustomerByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editCustomerByRecordIDResponse(soap, _p); } return _p; }

inline struct ns1__editCustomerByRecordIDResponse * soap_new_set_ns1__editCustomerByRecordIDResponse(struct soap *soap, ns1__CUser *pCustomer) { struct ns1__editCustomerByRecordIDResponse *_p = soap_instantiate_ns1__editCustomerByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editCustomerByRecordIDResponse(soap, _p); _p->pCustomer = pCustomer; } return _p; }

inline void soap_delete_ns1__editCustomerByRecordIDResponse(struct soap *soap, struct ns1__editCustomerByRecordIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editCustomerByRecordIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editCustomer
#define SOAP_TYPE_ns1__editCustomer (484)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editCustomer(struct soap*, struct ns1__editCustomer *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editCustomer(struct soap*, const struct ns1__editCustomer *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editCustomer(struct soap*, const char*, int, const struct ns1__editCustomer *, const char*);
SOAP_FMAC3 struct ns1__editCustomer * SOAP_FMAC4 soap_in_ns1__editCustomer(struct soap*, const char*, struct ns1__editCustomer *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editCustomer(struct soap*, const struct ns1__editCustomer *, const char*, const char*);

#ifndef soap_write_ns1__editCustomer
#define soap_write_ns1__editCustomer(soap, data) ( soap_begin(soap), soap_serialize_ns1__editCustomer(soap, data), soap_begin_send(soap) || soap_put_ns1__editCustomer(soap, data, "ns1:editCustomer", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editCustomer * SOAP_FMAC4 soap_get_ns1__editCustomer(struct soap*, struct ns1__editCustomer *, const char*, const char*);

#ifndef soap_read_ns1__editCustomer
#define soap_read_ns1__editCustomer(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editCustomer(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editCustomer * SOAP_FMAC2 soap_instantiate_ns1__editCustomer(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editCustomer * soap_new_ns1__editCustomer(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editCustomer(soap, n, NULL, NULL, NULL); }

inline struct ns1__editCustomer * soap_new_req_ns1__editCustomer(struct soap *soap, LONG64 cookie) { struct ns1__editCustomer *_p = soap_instantiate_ns1__editCustomer(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editCustomer(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__editCustomer * soap_new_set_ns1__editCustomer(struct soap *soap, LONG64 cookie, char *firstName, char *middleInitials, char *lastName) { struct ns1__editCustomer *_p = soap_instantiate_ns1__editCustomer(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editCustomer(soap, _p); _p->cookie = cookie; _p->firstName = firstName; _p->middleInitials = middleInitials; _p->lastName = lastName; } return _p; }

inline void soap_delete_ns1__editCustomer(struct soap *soap, struct ns1__editCustomer *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editCustomer(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editCustomerResponse
#define SOAP_TYPE_ns1__editCustomerResponse (481)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editCustomerResponse(struct soap*, struct ns1__editCustomerResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editCustomerResponse(struct soap*, const struct ns1__editCustomerResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editCustomerResponse(struct soap*, const char*, int, const struct ns1__editCustomerResponse *, const char*);
SOAP_FMAC3 struct ns1__editCustomerResponse * SOAP_FMAC4 soap_in_ns1__editCustomerResponse(struct soap*, const char*, struct ns1__editCustomerResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editCustomerResponse(struct soap*, const struct ns1__editCustomerResponse *, const char*, const char*);

#ifndef soap_write_ns1__editCustomerResponse
#define soap_write_ns1__editCustomerResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__editCustomerResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__editCustomerResponse(soap, data, "ns1:editCustomerResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editCustomerResponse * SOAP_FMAC4 soap_get_ns1__editCustomerResponse(struct soap*, struct ns1__editCustomerResponse *, const char*, const char*);

#ifndef soap_read_ns1__editCustomerResponse
#define soap_read_ns1__editCustomerResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editCustomerResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editCustomerResponse * SOAP_FMAC2 soap_instantiate_ns1__editCustomerResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editCustomerResponse * soap_new_ns1__editCustomerResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editCustomerResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__editCustomerResponse * soap_new_req_ns1__editCustomerResponse(struct soap *soap) { struct ns1__editCustomerResponse *_p = soap_instantiate_ns1__editCustomerResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editCustomerResponse(soap, _p); } return _p; }

inline struct ns1__editCustomerResponse * soap_new_set_ns1__editCustomerResponse(struct soap *soap, ns1__CUser *pCustomer) { struct ns1__editCustomerResponse *_p = soap_instantiate_ns1__editCustomerResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editCustomerResponse(soap, _p); _p->pCustomer = pCustomer; } return _p; }

inline void soap_delete_ns1__editCustomerResponse(struct soap *soap, struct ns1__editCustomerResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editCustomerResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__addCustomer
#define SOAP_TYPE_ns1__addCustomer (480)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addCustomer(struct soap*, struct ns1__addCustomer *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addCustomer(struct soap*, const struct ns1__addCustomer *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addCustomer(struct soap*, const char*, int, const struct ns1__addCustomer *, const char*);
SOAP_FMAC3 struct ns1__addCustomer * SOAP_FMAC4 soap_in_ns1__addCustomer(struct soap*, const char*, struct ns1__addCustomer *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addCustomer(struct soap*, const struct ns1__addCustomer *, const char*, const char*);

#ifndef soap_write_ns1__addCustomer
#define soap_write_ns1__addCustomer(soap, data) ( soap_begin(soap), soap_serialize_ns1__addCustomer(soap, data), soap_begin_send(soap) || soap_put_ns1__addCustomer(soap, data, "ns1:addCustomer", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__addCustomer * SOAP_FMAC4 soap_get_ns1__addCustomer(struct soap*, struct ns1__addCustomer *, const char*, const char*);

#ifndef soap_read_ns1__addCustomer
#define soap_read_ns1__addCustomer(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__addCustomer(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__addCustomer * SOAP_FMAC2 soap_instantiate_ns1__addCustomer(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__addCustomer * soap_new_ns1__addCustomer(struct soap *soap, int n = -1) { return soap_instantiate_ns1__addCustomer(soap, n, NULL, NULL, NULL); }

inline struct ns1__addCustomer * soap_new_req_ns1__addCustomer(struct soap *soap, LONG64 cookie) { struct ns1__addCustomer *_p = soap_instantiate_ns1__addCustomer(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addCustomer(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__addCustomer * soap_new_set_ns1__addCustomer(struct soap *soap, LONG64 cookie, ns1__CUser *pCustomer) { struct ns1__addCustomer *_p = soap_instantiate_ns1__addCustomer(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addCustomer(soap, _p); _p->cookie = cookie; _p->pCustomer = pCustomer; } return _p; }

inline void soap_delete_ns1__addCustomer(struct soap *soap, struct ns1__addCustomer *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__addCustomer(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__addCustomerResponse
#define SOAP_TYPE_ns1__addCustomerResponse (479)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addCustomerResponse(struct soap*, struct ns1__addCustomerResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addCustomerResponse(struct soap*, const struct ns1__addCustomerResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addCustomerResponse(struct soap*, const char*, int, const struct ns1__addCustomerResponse *, const char*);
SOAP_FMAC3 struct ns1__addCustomerResponse * SOAP_FMAC4 soap_in_ns1__addCustomerResponse(struct soap*, const char*, struct ns1__addCustomerResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addCustomerResponse(struct soap*, const struct ns1__addCustomerResponse *, const char*, const char*);

#ifndef soap_write_ns1__addCustomerResponse
#define soap_write_ns1__addCustomerResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__addCustomerResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__addCustomerResponse(soap, data, "ns1:addCustomerResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__addCustomerResponse * SOAP_FMAC4 soap_get_ns1__addCustomerResponse(struct soap*, struct ns1__addCustomerResponse *, const char*, const char*);

#ifndef soap_read_ns1__addCustomerResponse
#define soap_read_ns1__addCustomerResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__addCustomerResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__addCustomerResponse * SOAP_FMAC2 soap_instantiate_ns1__addCustomerResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__addCustomerResponse * soap_new_ns1__addCustomerResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__addCustomerResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__addCustomerResponse * soap_new_req_ns1__addCustomerResponse(struct soap *soap, LONG64 recordID) { struct ns1__addCustomerResponse *_p = soap_instantiate_ns1__addCustomerResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addCustomerResponse(soap, _p); _p->recordID = recordID; } return _p; }

inline struct ns1__addCustomerResponse * soap_new_set_ns1__addCustomerResponse(struct soap *soap, LONG64 recordID) { struct ns1__addCustomerResponse *_p = soap_instantiate_ns1__addCustomerResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addCustomerResponse(soap, _p); _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__addCustomerResponse(struct soap *soap, struct ns1__addCustomerResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__addCustomerResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getCustomerByRecordID
#define SOAP_TYPE_ns1__getCustomerByRecordID (477)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getCustomerByRecordID(struct soap*, struct ns1__getCustomerByRecordID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getCustomerByRecordID(struct soap*, const struct ns1__getCustomerByRecordID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getCustomerByRecordID(struct soap*, const char*, int, const struct ns1__getCustomerByRecordID *, const char*);
SOAP_FMAC3 struct ns1__getCustomerByRecordID * SOAP_FMAC4 soap_in_ns1__getCustomerByRecordID(struct soap*, const char*, struct ns1__getCustomerByRecordID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getCustomerByRecordID(struct soap*, const struct ns1__getCustomerByRecordID *, const char*, const char*);

#ifndef soap_write_ns1__getCustomerByRecordID
#define soap_write_ns1__getCustomerByRecordID(soap, data) ( soap_begin(soap), soap_serialize_ns1__getCustomerByRecordID(soap, data), soap_begin_send(soap) || soap_put_ns1__getCustomerByRecordID(soap, data, "ns1:getCustomerByRecordID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getCustomerByRecordID * SOAP_FMAC4 soap_get_ns1__getCustomerByRecordID(struct soap*, struct ns1__getCustomerByRecordID *, const char*, const char*);

#ifndef soap_read_ns1__getCustomerByRecordID
#define soap_read_ns1__getCustomerByRecordID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getCustomerByRecordID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getCustomerByRecordID * SOAP_FMAC2 soap_instantiate_ns1__getCustomerByRecordID(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getCustomerByRecordID * soap_new_ns1__getCustomerByRecordID(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getCustomerByRecordID(soap, n, NULL, NULL, NULL); }

inline struct ns1__getCustomerByRecordID * soap_new_req_ns1__getCustomerByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__getCustomerByRecordID *_p = soap_instantiate_ns1__getCustomerByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getCustomerByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline struct ns1__getCustomerByRecordID * soap_new_set_ns1__getCustomerByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__getCustomerByRecordID *_p = soap_instantiate_ns1__getCustomerByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getCustomerByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__getCustomerByRecordID(struct soap *soap, struct ns1__getCustomerByRecordID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getCustomerByRecordID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getCustomerByRecordIDResponse
#define SOAP_TYPE_ns1__getCustomerByRecordIDResponse (474)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getCustomerByRecordIDResponse(struct soap*, struct ns1__getCustomerByRecordIDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getCustomerByRecordIDResponse(struct soap*, const struct ns1__getCustomerByRecordIDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getCustomerByRecordIDResponse(struct soap*, const char*, int, const struct ns1__getCustomerByRecordIDResponse *, const char*);
SOAP_FMAC3 struct ns1__getCustomerByRecordIDResponse * SOAP_FMAC4 soap_in_ns1__getCustomerByRecordIDResponse(struct soap*, const char*, struct ns1__getCustomerByRecordIDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getCustomerByRecordIDResponse(struct soap*, const struct ns1__getCustomerByRecordIDResponse *, const char*, const char*);

#ifndef soap_write_ns1__getCustomerByRecordIDResponse
#define soap_write_ns1__getCustomerByRecordIDResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getCustomerByRecordIDResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getCustomerByRecordIDResponse(soap, data, "ns1:getCustomerByRecordIDResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getCustomerByRecordIDResponse * SOAP_FMAC4 soap_get_ns1__getCustomerByRecordIDResponse(struct soap*, struct ns1__getCustomerByRecordIDResponse *, const char*, const char*);

#ifndef soap_read_ns1__getCustomerByRecordIDResponse
#define soap_read_ns1__getCustomerByRecordIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getCustomerByRecordIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getCustomerByRecordIDResponse * SOAP_FMAC2 soap_instantiate_ns1__getCustomerByRecordIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getCustomerByRecordIDResponse * soap_new_ns1__getCustomerByRecordIDResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getCustomerByRecordIDResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getCustomerByRecordIDResponse * soap_new_req_ns1__getCustomerByRecordIDResponse(struct soap *soap) { struct ns1__getCustomerByRecordIDResponse *_p = soap_instantiate_ns1__getCustomerByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getCustomerByRecordIDResponse(soap, _p); } return _p; }

inline struct ns1__getCustomerByRecordIDResponse * soap_new_set_ns1__getCustomerByRecordIDResponse(struct soap *soap, ns1__CUser *pCustomer) { struct ns1__getCustomerByRecordIDResponse *_p = soap_instantiate_ns1__getCustomerByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getCustomerByRecordIDResponse(soap, _p); _p->pCustomer = pCustomer; } return _p; }

inline void soap_delete_ns1__getCustomerByRecordIDResponse(struct soap *soap, struct ns1__getCustomerByRecordIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getCustomerByRecordIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getCustomer
#define SOAP_TYPE_ns1__getCustomer (473)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getCustomer(struct soap*, struct ns1__getCustomer *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getCustomer(struct soap*, const struct ns1__getCustomer *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getCustomer(struct soap*, const char*, int, const struct ns1__getCustomer *, const char*);
SOAP_FMAC3 struct ns1__getCustomer * SOAP_FMAC4 soap_in_ns1__getCustomer(struct soap*, const char*, struct ns1__getCustomer *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getCustomer(struct soap*, const struct ns1__getCustomer *, const char*, const char*);

#ifndef soap_write_ns1__getCustomer
#define soap_write_ns1__getCustomer(soap, data) ( soap_begin(soap), soap_serialize_ns1__getCustomer(soap, data), soap_begin_send(soap) || soap_put_ns1__getCustomer(soap, data, "ns1:getCustomer", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getCustomer * SOAP_FMAC4 soap_get_ns1__getCustomer(struct soap*, struct ns1__getCustomer *, const char*, const char*);

#ifndef soap_read_ns1__getCustomer
#define soap_read_ns1__getCustomer(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getCustomer(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getCustomer * SOAP_FMAC2 soap_instantiate_ns1__getCustomer(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getCustomer * soap_new_ns1__getCustomer(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getCustomer(soap, n, NULL, NULL, NULL); }

inline struct ns1__getCustomer * soap_new_req_ns1__getCustomer(struct soap *soap, LONG64 cookie) { struct ns1__getCustomer *_p = soap_instantiate_ns1__getCustomer(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getCustomer(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__getCustomer * soap_new_set_ns1__getCustomer(struct soap *soap, LONG64 cookie, char *firstName, char *middleInitials, char *lastName) { struct ns1__getCustomer *_p = soap_instantiate_ns1__getCustomer(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getCustomer(soap, _p); _p->cookie = cookie; _p->firstName = firstName; _p->middleInitials = middleInitials; _p->lastName = lastName; } return _p; }

inline void soap_delete_ns1__getCustomer(struct soap *soap, struct ns1__getCustomer *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getCustomer(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getCustomerResponse
#define SOAP_TYPE_ns1__getCustomerResponse (470)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getCustomerResponse(struct soap*, struct ns1__getCustomerResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getCustomerResponse(struct soap*, const struct ns1__getCustomerResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getCustomerResponse(struct soap*, const char*, int, const struct ns1__getCustomerResponse *, const char*);
SOAP_FMAC3 struct ns1__getCustomerResponse * SOAP_FMAC4 soap_in_ns1__getCustomerResponse(struct soap*, const char*, struct ns1__getCustomerResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getCustomerResponse(struct soap*, const struct ns1__getCustomerResponse *, const char*, const char*);

#ifndef soap_write_ns1__getCustomerResponse
#define soap_write_ns1__getCustomerResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getCustomerResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getCustomerResponse(soap, data, "ns1:getCustomerResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getCustomerResponse * SOAP_FMAC4 soap_get_ns1__getCustomerResponse(struct soap*, struct ns1__getCustomerResponse *, const char*, const char*);

#ifndef soap_read_ns1__getCustomerResponse
#define soap_read_ns1__getCustomerResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getCustomerResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getCustomerResponse * SOAP_FMAC2 soap_instantiate_ns1__getCustomerResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getCustomerResponse * soap_new_ns1__getCustomerResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getCustomerResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getCustomerResponse * soap_new_req_ns1__getCustomerResponse(struct soap *soap) { struct ns1__getCustomerResponse *_p = soap_instantiate_ns1__getCustomerResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getCustomerResponse(soap, _p); } return _p; }

inline struct ns1__getCustomerResponse * soap_new_set_ns1__getCustomerResponse(struct soap *soap, ns1__CUser *pCustomer) { struct ns1__getCustomerResponse *_p = soap_instantiate_ns1__getCustomerResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getCustomerResponse(soap, _p); _p->pCustomer = pCustomer; } return _p; }

inline void soap_delete_ns1__getCustomerResponse(struct soap *soap, struct ns1__getCustomerResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getCustomerResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__addGlobalUser
#define SOAP_TYPE_ns1__addGlobalUser (469)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addGlobalUser(struct soap*, struct ns1__addGlobalUser *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addGlobalUser(struct soap*, const struct ns1__addGlobalUser *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addGlobalUser(struct soap*, const char*, int, const struct ns1__addGlobalUser *, const char*);
SOAP_FMAC3 struct ns1__addGlobalUser * SOAP_FMAC4 soap_in_ns1__addGlobalUser(struct soap*, const char*, struct ns1__addGlobalUser *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addGlobalUser(struct soap*, const struct ns1__addGlobalUser *, const char*, const char*);

#ifndef soap_write_ns1__addGlobalUser
#define soap_write_ns1__addGlobalUser(soap, data) ( soap_begin(soap), soap_serialize_ns1__addGlobalUser(soap, data), soap_begin_send(soap) || soap_put_ns1__addGlobalUser(soap, data, "ns1:addGlobalUser", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__addGlobalUser * SOAP_FMAC4 soap_get_ns1__addGlobalUser(struct soap*, struct ns1__addGlobalUser *, const char*, const char*);

#ifndef soap_read_ns1__addGlobalUser
#define soap_read_ns1__addGlobalUser(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__addGlobalUser(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__addGlobalUser * SOAP_FMAC2 soap_instantiate_ns1__addGlobalUser(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__addGlobalUser * soap_new_ns1__addGlobalUser(struct soap *soap, int n = -1) { return soap_instantiate_ns1__addGlobalUser(soap, n, NULL, NULL, NULL); }

inline struct ns1__addGlobalUser * soap_new_req_ns1__addGlobalUser(struct soap *soap, LONG64 cookie) { struct ns1__addGlobalUser *_p = soap_instantiate_ns1__addGlobalUser(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addGlobalUser(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__addGlobalUser * soap_new_set_ns1__addGlobalUser(struct soap *soap, LONG64 cookie, ns1__CGlobalUser *pUser) { struct ns1__addGlobalUser *_p = soap_instantiate_ns1__addGlobalUser(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addGlobalUser(soap, _p); _p->cookie = cookie; _p->pUser = pUser; } return _p; }

inline void soap_delete_ns1__addGlobalUser(struct soap *soap, struct ns1__addGlobalUser *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__addGlobalUser(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__addGlobalUserResponse
#define SOAP_TYPE_ns1__addGlobalUserResponse (468)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addGlobalUserResponse(struct soap*, struct ns1__addGlobalUserResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addGlobalUserResponse(struct soap*, const struct ns1__addGlobalUserResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addGlobalUserResponse(struct soap*, const char*, int, const struct ns1__addGlobalUserResponse *, const char*);
SOAP_FMAC3 struct ns1__addGlobalUserResponse * SOAP_FMAC4 soap_in_ns1__addGlobalUserResponse(struct soap*, const char*, struct ns1__addGlobalUserResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addGlobalUserResponse(struct soap*, const struct ns1__addGlobalUserResponse *, const char*, const char*);

#ifndef soap_write_ns1__addGlobalUserResponse
#define soap_write_ns1__addGlobalUserResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__addGlobalUserResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__addGlobalUserResponse(soap, data, "ns1:addGlobalUserResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__addGlobalUserResponse * SOAP_FMAC4 soap_get_ns1__addGlobalUserResponse(struct soap*, struct ns1__addGlobalUserResponse *, const char*, const char*);

#ifndef soap_read_ns1__addGlobalUserResponse
#define soap_read_ns1__addGlobalUserResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__addGlobalUserResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__addGlobalUserResponse * SOAP_FMAC2 soap_instantiate_ns1__addGlobalUserResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__addGlobalUserResponse * soap_new_ns1__addGlobalUserResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__addGlobalUserResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__addGlobalUserResponse * soap_new_req_ns1__addGlobalUserResponse(struct soap *soap, int result) { struct ns1__addGlobalUserResponse *_p = soap_instantiate_ns1__addGlobalUserResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addGlobalUserResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__addGlobalUserResponse * soap_new_set_ns1__addGlobalUserResponse(struct soap *soap, int result) { struct ns1__addGlobalUserResponse *_p = soap_instantiate_ns1__addGlobalUserResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addGlobalUserResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__addGlobalUserResponse(struct soap *soap, struct ns1__addGlobalUserResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__addGlobalUserResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__promoteUser
#define SOAP_TYPE_ns1__promoteUser (466)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__promoteUser(struct soap*, struct ns1__promoteUser *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__promoteUser(struct soap*, const struct ns1__promoteUser *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__promoteUser(struct soap*, const char*, int, const struct ns1__promoteUser *, const char*);
SOAP_FMAC3 struct ns1__promoteUser * SOAP_FMAC4 soap_in_ns1__promoteUser(struct soap*, const char*, struct ns1__promoteUser *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__promoteUser(struct soap*, const struct ns1__promoteUser *, const char*, const char*);

#ifndef soap_write_ns1__promoteUser
#define soap_write_ns1__promoteUser(soap, data) ( soap_begin(soap), soap_serialize_ns1__promoteUser(soap, data), soap_begin_send(soap) || soap_put_ns1__promoteUser(soap, data, "ns1:promoteUser", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__promoteUser * SOAP_FMAC4 soap_get_ns1__promoteUser(struct soap*, struct ns1__promoteUser *, const char*, const char*);

#ifndef soap_read_ns1__promoteUser
#define soap_read_ns1__promoteUser(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__promoteUser(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__promoteUser * SOAP_FMAC2 soap_instantiate_ns1__promoteUser(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__promoteUser * soap_new_ns1__promoteUser(struct soap *soap, int n = -1) { return soap_instantiate_ns1__promoteUser(soap, n, NULL, NULL, NULL); }

inline struct ns1__promoteUser * soap_new_req_ns1__promoteUser(struct soap *soap, LONG64 cookie) { struct ns1__promoteUser *_p = soap_instantiate_ns1__promoteUser(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__promoteUser(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__promoteUser * soap_new_set_ns1__promoteUser(struct soap *soap, LONG64 cookie, char *localUser, char *globalUser, char *loginname) { struct ns1__promoteUser *_p = soap_instantiate_ns1__promoteUser(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__promoteUser(soap, _p); _p->cookie = cookie; _p->localUser = localUser; _p->globalUser = globalUser; _p->loginname = loginname; } return _p; }

inline void soap_delete_ns1__promoteUser(struct soap *soap, struct ns1__promoteUser *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__promoteUser(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__promoteUserResponse
#define SOAP_TYPE_ns1__promoteUserResponse (465)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__promoteUserResponse(struct soap*, struct ns1__promoteUserResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__promoteUserResponse(struct soap*, const struct ns1__promoteUserResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__promoteUserResponse(struct soap*, const char*, int, const struct ns1__promoteUserResponse *, const char*);
SOAP_FMAC3 struct ns1__promoteUserResponse * SOAP_FMAC4 soap_in_ns1__promoteUserResponse(struct soap*, const char*, struct ns1__promoteUserResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__promoteUserResponse(struct soap*, const struct ns1__promoteUserResponse *, const char*, const char*);

#ifndef soap_write_ns1__promoteUserResponse
#define soap_write_ns1__promoteUserResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__promoteUserResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__promoteUserResponse(soap, data, "ns1:promoteUserResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__promoteUserResponse * SOAP_FMAC4 soap_get_ns1__promoteUserResponse(struct soap*, struct ns1__promoteUserResponse *, const char*, const char*);

#ifndef soap_read_ns1__promoteUserResponse
#define soap_read_ns1__promoteUserResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__promoteUserResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__promoteUserResponse * SOAP_FMAC2 soap_instantiate_ns1__promoteUserResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__promoteUserResponse * soap_new_ns1__promoteUserResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__promoteUserResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__promoteUserResponse * soap_new_req_ns1__promoteUserResponse(struct soap *soap, int result) { struct ns1__promoteUserResponse *_p = soap_instantiate_ns1__promoteUserResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__promoteUserResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__promoteUserResponse * soap_new_set_ns1__promoteUserResponse(struct soap *soap, int result) { struct ns1__promoteUserResponse *_p = soap_instantiate_ns1__promoteUserResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__promoteUserResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__promoteUserResponse(struct soap *soap, struct ns1__promoteUserResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__promoteUserResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__cancelSaveUser
#define SOAP_TYPE_ns1__cancelSaveUser (463)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__cancelSaveUser(struct soap*, struct ns1__cancelSaveUser *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__cancelSaveUser(struct soap*, const struct ns1__cancelSaveUser *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__cancelSaveUser(struct soap*, const char*, int, const struct ns1__cancelSaveUser *, const char*);
SOAP_FMAC3 struct ns1__cancelSaveUser * SOAP_FMAC4 soap_in_ns1__cancelSaveUser(struct soap*, const char*, struct ns1__cancelSaveUser *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__cancelSaveUser(struct soap*, const struct ns1__cancelSaveUser *, const char*, const char*);

#ifndef soap_write_ns1__cancelSaveUser
#define soap_write_ns1__cancelSaveUser(soap, data) ( soap_begin(soap), soap_serialize_ns1__cancelSaveUser(soap, data), soap_begin_send(soap) || soap_put_ns1__cancelSaveUser(soap, data, "ns1:cancelSaveUser", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__cancelSaveUser * SOAP_FMAC4 soap_get_ns1__cancelSaveUser(struct soap*, struct ns1__cancelSaveUser *, const char*, const char*);

#ifndef soap_read_ns1__cancelSaveUser
#define soap_read_ns1__cancelSaveUser(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__cancelSaveUser(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__cancelSaveUser * SOAP_FMAC2 soap_instantiate_ns1__cancelSaveUser(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__cancelSaveUser * soap_new_ns1__cancelSaveUser(struct soap *soap, int n = -1) { return soap_instantiate_ns1__cancelSaveUser(soap, n, NULL, NULL, NULL); }

inline struct ns1__cancelSaveUser * soap_new_req_ns1__cancelSaveUser(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__cancelSaveUser *_p = soap_instantiate_ns1__cancelSaveUser(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveUser(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline struct ns1__cancelSaveUser * soap_new_set_ns1__cancelSaveUser(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__cancelSaveUser *_p = soap_instantiate_ns1__cancelSaveUser(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveUser(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__cancelSaveUser(struct soap *soap, struct ns1__cancelSaveUser *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__cancelSaveUser(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__cancelSaveUserResponse
#define SOAP_TYPE_ns1__cancelSaveUserResponse (462)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__cancelSaveUserResponse(struct soap*, struct ns1__cancelSaveUserResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__cancelSaveUserResponse(struct soap*, const struct ns1__cancelSaveUserResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__cancelSaveUserResponse(struct soap*, const char*, int, const struct ns1__cancelSaveUserResponse *, const char*);
SOAP_FMAC3 struct ns1__cancelSaveUserResponse * SOAP_FMAC4 soap_in_ns1__cancelSaveUserResponse(struct soap*, const char*, struct ns1__cancelSaveUserResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__cancelSaveUserResponse(struct soap*, const struct ns1__cancelSaveUserResponse *, const char*, const char*);

#ifndef soap_write_ns1__cancelSaveUserResponse
#define soap_write_ns1__cancelSaveUserResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__cancelSaveUserResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__cancelSaveUserResponse(soap, data, "ns1:cancelSaveUserResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__cancelSaveUserResponse * SOAP_FMAC4 soap_get_ns1__cancelSaveUserResponse(struct soap*, struct ns1__cancelSaveUserResponse *, const char*, const char*);

#ifndef soap_read_ns1__cancelSaveUserResponse
#define soap_read_ns1__cancelSaveUserResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__cancelSaveUserResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__cancelSaveUserResponse * SOAP_FMAC2 soap_instantiate_ns1__cancelSaveUserResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__cancelSaveUserResponse * soap_new_ns1__cancelSaveUserResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__cancelSaveUserResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__cancelSaveUserResponse * soap_new_req_ns1__cancelSaveUserResponse(struct soap *soap, int result) { struct ns1__cancelSaveUserResponse *_p = soap_instantiate_ns1__cancelSaveUserResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveUserResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__cancelSaveUserResponse * soap_new_set_ns1__cancelSaveUserResponse(struct soap *soap, int result) { struct ns1__cancelSaveUserResponse *_p = soap_instantiate_ns1__cancelSaveUserResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveUserResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__cancelSaveUserResponse(struct soap *soap, struct ns1__cancelSaveUserResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__cancelSaveUserResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteUserByRecordID
#define SOAP_TYPE_ns1__deleteUserByRecordID (460)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteUserByRecordID(struct soap*, struct ns1__deleteUserByRecordID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteUserByRecordID(struct soap*, const struct ns1__deleteUserByRecordID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteUserByRecordID(struct soap*, const char*, int, const struct ns1__deleteUserByRecordID *, const char*);
SOAP_FMAC3 struct ns1__deleteUserByRecordID * SOAP_FMAC4 soap_in_ns1__deleteUserByRecordID(struct soap*, const char*, struct ns1__deleteUserByRecordID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteUserByRecordID(struct soap*, const struct ns1__deleteUserByRecordID *, const char*, const char*);

#ifndef soap_write_ns1__deleteUserByRecordID
#define soap_write_ns1__deleteUserByRecordID(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteUserByRecordID(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteUserByRecordID(soap, data, "ns1:deleteUserByRecordID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteUserByRecordID * SOAP_FMAC4 soap_get_ns1__deleteUserByRecordID(struct soap*, struct ns1__deleteUserByRecordID *, const char*, const char*);

#ifndef soap_read_ns1__deleteUserByRecordID
#define soap_read_ns1__deleteUserByRecordID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteUserByRecordID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteUserByRecordID * SOAP_FMAC2 soap_instantiate_ns1__deleteUserByRecordID(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteUserByRecordID * soap_new_ns1__deleteUserByRecordID(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteUserByRecordID(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteUserByRecordID * soap_new_req_ns1__deleteUserByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__deleteUserByRecordID *_p = soap_instantiate_ns1__deleteUserByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteUserByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline struct ns1__deleteUserByRecordID * soap_new_set_ns1__deleteUserByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__deleteUserByRecordID *_p = soap_instantiate_ns1__deleteUserByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteUserByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__deleteUserByRecordID(struct soap *soap, struct ns1__deleteUserByRecordID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteUserByRecordID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteUserByRecordIDResponse
#define SOAP_TYPE_ns1__deleteUserByRecordIDResponse (459)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteUserByRecordIDResponse(struct soap*, struct ns1__deleteUserByRecordIDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteUserByRecordIDResponse(struct soap*, const struct ns1__deleteUserByRecordIDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteUserByRecordIDResponse(struct soap*, const char*, int, const struct ns1__deleteUserByRecordIDResponse *, const char*);
SOAP_FMAC3 struct ns1__deleteUserByRecordIDResponse * SOAP_FMAC4 soap_in_ns1__deleteUserByRecordIDResponse(struct soap*, const char*, struct ns1__deleteUserByRecordIDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteUserByRecordIDResponse(struct soap*, const struct ns1__deleteUserByRecordIDResponse *, const char*, const char*);

#ifndef soap_write_ns1__deleteUserByRecordIDResponse
#define soap_write_ns1__deleteUserByRecordIDResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteUserByRecordIDResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteUserByRecordIDResponse(soap, data, "ns1:deleteUserByRecordIDResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteUserByRecordIDResponse * SOAP_FMAC4 soap_get_ns1__deleteUserByRecordIDResponse(struct soap*, struct ns1__deleteUserByRecordIDResponse *, const char*, const char*);

#ifndef soap_read_ns1__deleteUserByRecordIDResponse
#define soap_read_ns1__deleteUserByRecordIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteUserByRecordIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteUserByRecordIDResponse * SOAP_FMAC2 soap_instantiate_ns1__deleteUserByRecordIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteUserByRecordIDResponse * soap_new_ns1__deleteUserByRecordIDResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteUserByRecordIDResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteUserByRecordIDResponse * soap_new_req_ns1__deleteUserByRecordIDResponse(struct soap *soap, int result) { struct ns1__deleteUserByRecordIDResponse *_p = soap_instantiate_ns1__deleteUserByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteUserByRecordIDResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__deleteUserByRecordIDResponse * soap_new_set_ns1__deleteUserByRecordIDResponse(struct soap *soap, int result) { struct ns1__deleteUserByRecordIDResponse *_p = soap_instantiate_ns1__deleteUserByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteUserByRecordIDResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__deleteUserByRecordIDResponse(struct soap *soap, struct ns1__deleteUserByRecordIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteUserByRecordIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteUser
#define SOAP_TYPE_ns1__deleteUser (457)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteUser(struct soap*, struct ns1__deleteUser *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteUser(struct soap*, const struct ns1__deleteUser *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteUser(struct soap*, const char*, int, const struct ns1__deleteUser *, const char*);
SOAP_FMAC3 struct ns1__deleteUser * SOAP_FMAC4 soap_in_ns1__deleteUser(struct soap*, const char*, struct ns1__deleteUser *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteUser(struct soap*, const struct ns1__deleteUser *, const char*, const char*);

#ifndef soap_write_ns1__deleteUser
#define soap_write_ns1__deleteUser(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteUser(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteUser(soap, data, "ns1:deleteUser", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteUser * SOAP_FMAC4 soap_get_ns1__deleteUser(struct soap*, struct ns1__deleteUser *, const char*, const char*);

#ifndef soap_read_ns1__deleteUser
#define soap_read_ns1__deleteUser(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteUser(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteUser * SOAP_FMAC2 soap_instantiate_ns1__deleteUser(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteUser * soap_new_ns1__deleteUser(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteUser(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteUser * soap_new_req_ns1__deleteUser(struct soap *soap, LONG64 cookie) { struct ns1__deleteUser *_p = soap_instantiate_ns1__deleteUser(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteUser(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__deleteUser * soap_new_set_ns1__deleteUser(struct soap *soap, LONG64 cookie, char *firstName, char *middleInitials, char *lastName) { struct ns1__deleteUser *_p = soap_instantiate_ns1__deleteUser(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteUser(soap, _p); _p->cookie = cookie; _p->firstName = firstName; _p->middleInitials = middleInitials; _p->lastName = lastName; } return _p; }

inline void soap_delete_ns1__deleteUser(struct soap *soap, struct ns1__deleteUser *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteUser(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteUserResponse
#define SOAP_TYPE_ns1__deleteUserResponse (456)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteUserResponse(struct soap*, struct ns1__deleteUserResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteUserResponse(struct soap*, const struct ns1__deleteUserResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteUserResponse(struct soap*, const char*, int, const struct ns1__deleteUserResponse *, const char*);
SOAP_FMAC3 struct ns1__deleteUserResponse * SOAP_FMAC4 soap_in_ns1__deleteUserResponse(struct soap*, const char*, struct ns1__deleteUserResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteUserResponse(struct soap*, const struct ns1__deleteUserResponse *, const char*, const char*);

#ifndef soap_write_ns1__deleteUserResponse
#define soap_write_ns1__deleteUserResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteUserResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteUserResponse(soap, data, "ns1:deleteUserResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteUserResponse * SOAP_FMAC4 soap_get_ns1__deleteUserResponse(struct soap*, struct ns1__deleteUserResponse *, const char*, const char*);

#ifndef soap_read_ns1__deleteUserResponse
#define soap_read_ns1__deleteUserResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteUserResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteUserResponse * SOAP_FMAC2 soap_instantiate_ns1__deleteUserResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteUserResponse * soap_new_ns1__deleteUserResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteUserResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteUserResponse * soap_new_req_ns1__deleteUserResponse(struct soap *soap, int result) { struct ns1__deleteUserResponse *_p = soap_instantiate_ns1__deleteUserResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteUserResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__deleteUserResponse * soap_new_set_ns1__deleteUserResponse(struct soap *soap, int result) { struct ns1__deleteUserResponse *_p = soap_instantiate_ns1__deleteUserResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteUserResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__deleteUserResponse(struct soap *soap, struct ns1__deleteUserResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteUserResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveUser
#define SOAP_TYPE_ns1__saveUser (454)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveUser(struct soap*, struct ns1__saveUser *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveUser(struct soap*, const struct ns1__saveUser *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveUser(struct soap*, const char*, int, const struct ns1__saveUser *, const char*);
SOAP_FMAC3 struct ns1__saveUser * SOAP_FMAC4 soap_in_ns1__saveUser(struct soap*, const char*, struct ns1__saveUser *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveUser(struct soap*, const struct ns1__saveUser *, const char*, const char*);

#ifndef soap_write_ns1__saveUser
#define soap_write_ns1__saveUser(soap, data) ( soap_begin(soap), soap_serialize_ns1__saveUser(soap, data), soap_begin_send(soap) || soap_put_ns1__saveUser(soap, data, "ns1:saveUser", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__saveUser * SOAP_FMAC4 soap_get_ns1__saveUser(struct soap*, struct ns1__saveUser *, const char*, const char*);

#ifndef soap_read_ns1__saveUser
#define soap_read_ns1__saveUser(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveUser(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__saveUser * SOAP_FMAC2 soap_instantiate_ns1__saveUser(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveUser * soap_new_ns1__saveUser(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveUser(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveUser * soap_new_req_ns1__saveUser(struct soap *soap, LONG64 cookie) { struct ns1__saveUser *_p = soap_instantiate_ns1__saveUser(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveUser(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__saveUser * soap_new_set_ns1__saveUser(struct soap *soap, LONG64 cookie, char *firstName, char *middleInitials, char *lastName, ns1__CUser *pUser) { struct ns1__saveUser *_p = soap_instantiate_ns1__saveUser(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveUser(soap, _p); _p->cookie = cookie; _p->firstName = firstName; _p->middleInitials = middleInitials; _p->lastName = lastName; _p->pUser = pUser; } return _p; }

inline void soap_delete_ns1__saveUser(struct soap *soap, struct ns1__saveUser *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveUser(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveUserResponse
#define SOAP_TYPE_ns1__saveUserResponse (453)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveUserResponse(struct soap*, struct ns1__saveUserResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveUserResponse(struct soap*, const struct ns1__saveUserResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveUserResponse(struct soap*, const char*, int, const struct ns1__saveUserResponse *, const char*);
SOAP_FMAC3 struct ns1__saveUserResponse * SOAP_FMAC4 soap_in_ns1__saveUserResponse(struct soap*, const char*, struct ns1__saveUserResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveUserResponse(struct soap*, const struct ns1__saveUserResponse *, const char*, const char*);

#ifndef soap_write_ns1__saveUserResponse
#define soap_write_ns1__saveUserResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__saveUserResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__saveUserResponse(soap, data, "ns1:saveUserResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__saveUserResponse * SOAP_FMAC4 soap_get_ns1__saveUserResponse(struct soap*, struct ns1__saveUserResponse *, const char*, const char*);

#ifndef soap_read_ns1__saveUserResponse
#define soap_read_ns1__saveUserResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveUserResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__saveUserResponse * SOAP_FMAC2 soap_instantiate_ns1__saveUserResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveUserResponse * soap_new_ns1__saveUserResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveUserResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveUserResponse * soap_new_req_ns1__saveUserResponse(struct soap *soap, int result) { struct ns1__saveUserResponse *_p = soap_instantiate_ns1__saveUserResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveUserResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__saveUserResponse * soap_new_set_ns1__saveUserResponse(struct soap *soap, int result) { struct ns1__saveUserResponse *_p = soap_instantiate_ns1__saveUserResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveUserResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__saveUserResponse(struct soap *soap, struct ns1__saveUserResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveUserResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editUserByRecordID
#define SOAP_TYPE_ns1__editUserByRecordID (451)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editUserByRecordID(struct soap*, struct ns1__editUserByRecordID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editUserByRecordID(struct soap*, const struct ns1__editUserByRecordID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editUserByRecordID(struct soap*, const char*, int, const struct ns1__editUserByRecordID *, const char*);
SOAP_FMAC3 struct ns1__editUserByRecordID * SOAP_FMAC4 soap_in_ns1__editUserByRecordID(struct soap*, const char*, struct ns1__editUserByRecordID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editUserByRecordID(struct soap*, const struct ns1__editUserByRecordID *, const char*, const char*);

#ifndef soap_write_ns1__editUserByRecordID
#define soap_write_ns1__editUserByRecordID(soap, data) ( soap_begin(soap), soap_serialize_ns1__editUserByRecordID(soap, data), soap_begin_send(soap) || soap_put_ns1__editUserByRecordID(soap, data, "ns1:editUserByRecordID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editUserByRecordID * SOAP_FMAC4 soap_get_ns1__editUserByRecordID(struct soap*, struct ns1__editUserByRecordID *, const char*, const char*);

#ifndef soap_read_ns1__editUserByRecordID
#define soap_read_ns1__editUserByRecordID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editUserByRecordID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editUserByRecordID * SOAP_FMAC2 soap_instantiate_ns1__editUserByRecordID(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editUserByRecordID * soap_new_ns1__editUserByRecordID(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editUserByRecordID(soap, n, NULL, NULL, NULL); }

inline struct ns1__editUserByRecordID * soap_new_req_ns1__editUserByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__editUserByRecordID *_p = soap_instantiate_ns1__editUserByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editUserByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline struct ns1__editUserByRecordID * soap_new_set_ns1__editUserByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__editUserByRecordID *_p = soap_instantiate_ns1__editUserByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editUserByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__editUserByRecordID(struct soap *soap, struct ns1__editUserByRecordID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editUserByRecordID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editUserByRecordIDResponse
#define SOAP_TYPE_ns1__editUserByRecordIDResponse (448)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editUserByRecordIDResponse(struct soap*, struct ns1__editUserByRecordIDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editUserByRecordIDResponse(struct soap*, const struct ns1__editUserByRecordIDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editUserByRecordIDResponse(struct soap*, const char*, int, const struct ns1__editUserByRecordIDResponse *, const char*);
SOAP_FMAC3 struct ns1__editUserByRecordIDResponse * SOAP_FMAC4 soap_in_ns1__editUserByRecordIDResponse(struct soap*, const char*, struct ns1__editUserByRecordIDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editUserByRecordIDResponse(struct soap*, const struct ns1__editUserByRecordIDResponse *, const char*, const char*);

#ifndef soap_write_ns1__editUserByRecordIDResponse
#define soap_write_ns1__editUserByRecordIDResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__editUserByRecordIDResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__editUserByRecordIDResponse(soap, data, "ns1:editUserByRecordIDResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editUserByRecordIDResponse * SOAP_FMAC4 soap_get_ns1__editUserByRecordIDResponse(struct soap*, struct ns1__editUserByRecordIDResponse *, const char*, const char*);

#ifndef soap_read_ns1__editUserByRecordIDResponse
#define soap_read_ns1__editUserByRecordIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editUserByRecordIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editUserByRecordIDResponse * SOAP_FMAC2 soap_instantiate_ns1__editUserByRecordIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editUserByRecordIDResponse * soap_new_ns1__editUserByRecordIDResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editUserByRecordIDResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__editUserByRecordIDResponse * soap_new_req_ns1__editUserByRecordIDResponse(struct soap *soap) { struct ns1__editUserByRecordIDResponse *_p = soap_instantiate_ns1__editUserByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editUserByRecordIDResponse(soap, _p); } return _p; }

inline struct ns1__editUserByRecordIDResponse * soap_new_set_ns1__editUserByRecordIDResponse(struct soap *soap, ns1__CUser *pUser) { struct ns1__editUserByRecordIDResponse *_p = soap_instantiate_ns1__editUserByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editUserByRecordIDResponse(soap, _p); _p->pUser = pUser; } return _p; }

inline void soap_delete_ns1__editUserByRecordIDResponse(struct soap *soap, struct ns1__editUserByRecordIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editUserByRecordIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editUser
#define SOAP_TYPE_ns1__editUser (447)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editUser(struct soap*, struct ns1__editUser *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editUser(struct soap*, const struct ns1__editUser *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editUser(struct soap*, const char*, int, const struct ns1__editUser *, const char*);
SOAP_FMAC3 struct ns1__editUser * SOAP_FMAC4 soap_in_ns1__editUser(struct soap*, const char*, struct ns1__editUser *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editUser(struct soap*, const struct ns1__editUser *, const char*, const char*);

#ifndef soap_write_ns1__editUser
#define soap_write_ns1__editUser(soap, data) ( soap_begin(soap), soap_serialize_ns1__editUser(soap, data), soap_begin_send(soap) || soap_put_ns1__editUser(soap, data, "ns1:editUser", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editUser * SOAP_FMAC4 soap_get_ns1__editUser(struct soap*, struct ns1__editUser *, const char*, const char*);

#ifndef soap_read_ns1__editUser
#define soap_read_ns1__editUser(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editUser(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editUser * SOAP_FMAC2 soap_instantiate_ns1__editUser(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editUser * soap_new_ns1__editUser(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editUser(soap, n, NULL, NULL, NULL); }

inline struct ns1__editUser * soap_new_req_ns1__editUser(struct soap *soap, LONG64 cookie) { struct ns1__editUser *_p = soap_instantiate_ns1__editUser(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editUser(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__editUser * soap_new_set_ns1__editUser(struct soap *soap, LONG64 cookie, char *firstName, char *middleInitials, char *lastName) { struct ns1__editUser *_p = soap_instantiate_ns1__editUser(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editUser(soap, _p); _p->cookie = cookie; _p->firstName = firstName; _p->middleInitials = middleInitials; _p->lastName = lastName; } return _p; }

inline void soap_delete_ns1__editUser(struct soap *soap, struct ns1__editUser *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editUser(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editUserResponse
#define SOAP_TYPE_ns1__editUserResponse (444)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editUserResponse(struct soap*, struct ns1__editUserResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editUserResponse(struct soap*, const struct ns1__editUserResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editUserResponse(struct soap*, const char*, int, const struct ns1__editUserResponse *, const char*);
SOAP_FMAC3 struct ns1__editUserResponse * SOAP_FMAC4 soap_in_ns1__editUserResponse(struct soap*, const char*, struct ns1__editUserResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editUserResponse(struct soap*, const struct ns1__editUserResponse *, const char*, const char*);

#ifndef soap_write_ns1__editUserResponse
#define soap_write_ns1__editUserResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__editUserResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__editUserResponse(soap, data, "ns1:editUserResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editUserResponse * SOAP_FMAC4 soap_get_ns1__editUserResponse(struct soap*, struct ns1__editUserResponse *, const char*, const char*);

#ifndef soap_read_ns1__editUserResponse
#define soap_read_ns1__editUserResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editUserResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editUserResponse * SOAP_FMAC2 soap_instantiate_ns1__editUserResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editUserResponse * soap_new_ns1__editUserResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editUserResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__editUserResponse * soap_new_req_ns1__editUserResponse(struct soap *soap) { struct ns1__editUserResponse *_p = soap_instantiate_ns1__editUserResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editUserResponse(soap, _p); } return _p; }

inline struct ns1__editUserResponse * soap_new_set_ns1__editUserResponse(struct soap *soap, ns1__CUser *pUser) { struct ns1__editUserResponse *_p = soap_instantiate_ns1__editUserResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editUserResponse(soap, _p); _p->pUser = pUser; } return _p; }

inline void soap_delete_ns1__editUserResponse(struct soap *soap, struct ns1__editUserResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editUserResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__addUser
#define SOAP_TYPE_ns1__addUser (443)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addUser(struct soap*, struct ns1__addUser *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addUser(struct soap*, const struct ns1__addUser *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addUser(struct soap*, const char*, int, const struct ns1__addUser *, const char*);
SOAP_FMAC3 struct ns1__addUser * SOAP_FMAC4 soap_in_ns1__addUser(struct soap*, const char*, struct ns1__addUser *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addUser(struct soap*, const struct ns1__addUser *, const char*, const char*);

#ifndef soap_write_ns1__addUser
#define soap_write_ns1__addUser(soap, data) ( soap_begin(soap), soap_serialize_ns1__addUser(soap, data), soap_begin_send(soap) || soap_put_ns1__addUser(soap, data, "ns1:addUser", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__addUser * SOAP_FMAC4 soap_get_ns1__addUser(struct soap*, struct ns1__addUser *, const char*, const char*);

#ifndef soap_read_ns1__addUser
#define soap_read_ns1__addUser(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__addUser(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__addUser * SOAP_FMAC2 soap_instantiate_ns1__addUser(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__addUser * soap_new_ns1__addUser(struct soap *soap, int n = -1) { return soap_instantiate_ns1__addUser(soap, n, NULL, NULL, NULL); }

inline struct ns1__addUser * soap_new_req_ns1__addUser(struct soap *soap, LONG64 cookie) { struct ns1__addUser *_p = soap_instantiate_ns1__addUser(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addUser(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__addUser * soap_new_set_ns1__addUser(struct soap *soap, LONG64 cookie, ns1__CUser *pUser) { struct ns1__addUser *_p = soap_instantiate_ns1__addUser(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addUser(soap, _p); _p->cookie = cookie; _p->pUser = pUser; } return _p; }

inline void soap_delete_ns1__addUser(struct soap *soap, struct ns1__addUser *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__addUser(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__addUserResponse
#define SOAP_TYPE_ns1__addUserResponse (442)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addUserResponse(struct soap*, struct ns1__addUserResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addUserResponse(struct soap*, const struct ns1__addUserResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addUserResponse(struct soap*, const char*, int, const struct ns1__addUserResponse *, const char*);
SOAP_FMAC3 struct ns1__addUserResponse * SOAP_FMAC4 soap_in_ns1__addUserResponse(struct soap*, const char*, struct ns1__addUserResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addUserResponse(struct soap*, const struct ns1__addUserResponse *, const char*, const char*);

#ifndef soap_write_ns1__addUserResponse
#define soap_write_ns1__addUserResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__addUserResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__addUserResponse(soap, data, "ns1:addUserResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__addUserResponse * SOAP_FMAC4 soap_get_ns1__addUserResponse(struct soap*, struct ns1__addUserResponse *, const char*, const char*);

#ifndef soap_read_ns1__addUserResponse
#define soap_read_ns1__addUserResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__addUserResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__addUserResponse * SOAP_FMAC2 soap_instantiate_ns1__addUserResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__addUserResponse * soap_new_ns1__addUserResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__addUserResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__addUserResponse * soap_new_req_ns1__addUserResponse(struct soap *soap, LONG64 recordID) { struct ns1__addUserResponse *_p = soap_instantiate_ns1__addUserResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addUserResponse(soap, _p); _p->recordID = recordID; } return _p; }

inline struct ns1__addUserResponse * soap_new_set_ns1__addUserResponse(struct soap *soap, LONG64 recordID) { struct ns1__addUserResponse *_p = soap_instantiate_ns1__addUserResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addUserResponse(soap, _p); _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__addUserResponse(struct soap *soap, struct ns1__addUserResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__addUserResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getUserForCurrentSession
#define SOAP_TYPE_ns1__getUserForCurrentSession (440)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getUserForCurrentSession(struct soap*, struct ns1__getUserForCurrentSession *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getUserForCurrentSession(struct soap*, const struct ns1__getUserForCurrentSession *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getUserForCurrentSession(struct soap*, const char*, int, const struct ns1__getUserForCurrentSession *, const char*);
SOAP_FMAC3 struct ns1__getUserForCurrentSession * SOAP_FMAC4 soap_in_ns1__getUserForCurrentSession(struct soap*, const char*, struct ns1__getUserForCurrentSession *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getUserForCurrentSession(struct soap*, const struct ns1__getUserForCurrentSession *, const char*, const char*);

#ifndef soap_write_ns1__getUserForCurrentSession
#define soap_write_ns1__getUserForCurrentSession(soap, data) ( soap_begin(soap), soap_serialize_ns1__getUserForCurrentSession(soap, data), soap_begin_send(soap) || soap_put_ns1__getUserForCurrentSession(soap, data, "ns1:getUserForCurrentSession", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getUserForCurrentSession * SOAP_FMAC4 soap_get_ns1__getUserForCurrentSession(struct soap*, struct ns1__getUserForCurrentSession *, const char*, const char*);

#ifndef soap_read_ns1__getUserForCurrentSession
#define soap_read_ns1__getUserForCurrentSession(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getUserForCurrentSession(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getUserForCurrentSession * SOAP_FMAC2 soap_instantiate_ns1__getUserForCurrentSession(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getUserForCurrentSession * soap_new_ns1__getUserForCurrentSession(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getUserForCurrentSession(soap, n, NULL, NULL, NULL); }

inline struct ns1__getUserForCurrentSession * soap_new_req_ns1__getUserForCurrentSession(struct soap *soap, LONG64 cookie) { struct ns1__getUserForCurrentSession *_p = soap_instantiate_ns1__getUserForCurrentSession(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getUserForCurrentSession(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__getUserForCurrentSession * soap_new_set_ns1__getUserForCurrentSession(struct soap *soap, LONG64 cookie) { struct ns1__getUserForCurrentSession *_p = soap_instantiate_ns1__getUserForCurrentSession(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getUserForCurrentSession(soap, _p); _p->cookie = cookie; } return _p; }

inline void soap_delete_ns1__getUserForCurrentSession(struct soap *soap, struct ns1__getUserForCurrentSession *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getUserForCurrentSession(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getUserForCurrentSessionResponse
#define SOAP_TYPE_ns1__getUserForCurrentSessionResponse (437)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getUserForCurrentSessionResponse(struct soap*, struct ns1__getUserForCurrentSessionResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getUserForCurrentSessionResponse(struct soap*, const struct ns1__getUserForCurrentSessionResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getUserForCurrentSessionResponse(struct soap*, const char*, int, const struct ns1__getUserForCurrentSessionResponse *, const char*);
SOAP_FMAC3 struct ns1__getUserForCurrentSessionResponse * SOAP_FMAC4 soap_in_ns1__getUserForCurrentSessionResponse(struct soap*, const char*, struct ns1__getUserForCurrentSessionResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getUserForCurrentSessionResponse(struct soap*, const struct ns1__getUserForCurrentSessionResponse *, const char*, const char*);

#ifndef soap_write_ns1__getUserForCurrentSessionResponse
#define soap_write_ns1__getUserForCurrentSessionResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getUserForCurrentSessionResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getUserForCurrentSessionResponse(soap, data, "ns1:getUserForCurrentSessionResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getUserForCurrentSessionResponse * SOAP_FMAC4 soap_get_ns1__getUserForCurrentSessionResponse(struct soap*, struct ns1__getUserForCurrentSessionResponse *, const char*, const char*);

#ifndef soap_read_ns1__getUserForCurrentSessionResponse
#define soap_read_ns1__getUserForCurrentSessionResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getUserForCurrentSessionResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getUserForCurrentSessionResponse * SOAP_FMAC2 soap_instantiate_ns1__getUserForCurrentSessionResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getUserForCurrentSessionResponse * soap_new_ns1__getUserForCurrentSessionResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getUserForCurrentSessionResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getUserForCurrentSessionResponse * soap_new_req_ns1__getUserForCurrentSessionResponse(struct soap *soap) { struct ns1__getUserForCurrentSessionResponse *_p = soap_instantiate_ns1__getUserForCurrentSessionResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getUserForCurrentSessionResponse(soap, _p); } return _p; }

inline struct ns1__getUserForCurrentSessionResponse * soap_new_set_ns1__getUserForCurrentSessionResponse(struct soap *soap, ns1__CUser *pUser) { struct ns1__getUserForCurrentSessionResponse *_p = soap_instantiate_ns1__getUserForCurrentSessionResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getUserForCurrentSessionResponse(soap, _p); _p->pUser = pUser; } return _p; }

inline void soap_delete_ns1__getUserForCurrentSessionResponse(struct soap *soap, struct ns1__getUserForCurrentSessionResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getUserForCurrentSessionResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getUserByRecordID
#define SOAP_TYPE_ns1__getUserByRecordID (436)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getUserByRecordID(struct soap*, struct ns1__getUserByRecordID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getUserByRecordID(struct soap*, const struct ns1__getUserByRecordID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getUserByRecordID(struct soap*, const char*, int, const struct ns1__getUserByRecordID *, const char*);
SOAP_FMAC3 struct ns1__getUserByRecordID * SOAP_FMAC4 soap_in_ns1__getUserByRecordID(struct soap*, const char*, struct ns1__getUserByRecordID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getUserByRecordID(struct soap*, const struct ns1__getUserByRecordID *, const char*, const char*);

#ifndef soap_write_ns1__getUserByRecordID
#define soap_write_ns1__getUserByRecordID(soap, data) ( soap_begin(soap), soap_serialize_ns1__getUserByRecordID(soap, data), soap_begin_send(soap) || soap_put_ns1__getUserByRecordID(soap, data, "ns1:getUserByRecordID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getUserByRecordID * SOAP_FMAC4 soap_get_ns1__getUserByRecordID(struct soap*, struct ns1__getUserByRecordID *, const char*, const char*);

#ifndef soap_read_ns1__getUserByRecordID
#define soap_read_ns1__getUserByRecordID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getUserByRecordID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getUserByRecordID * SOAP_FMAC2 soap_instantiate_ns1__getUserByRecordID(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getUserByRecordID * soap_new_ns1__getUserByRecordID(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getUserByRecordID(soap, n, NULL, NULL, NULL); }

inline struct ns1__getUserByRecordID * soap_new_req_ns1__getUserByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__getUserByRecordID *_p = soap_instantiate_ns1__getUserByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getUserByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline struct ns1__getUserByRecordID * soap_new_set_ns1__getUserByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__getUserByRecordID *_p = soap_instantiate_ns1__getUserByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getUserByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__getUserByRecordID(struct soap *soap, struct ns1__getUserByRecordID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getUserByRecordID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getUserByRecordIDResponse
#define SOAP_TYPE_ns1__getUserByRecordIDResponse (433)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getUserByRecordIDResponse(struct soap*, struct ns1__getUserByRecordIDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getUserByRecordIDResponse(struct soap*, const struct ns1__getUserByRecordIDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getUserByRecordIDResponse(struct soap*, const char*, int, const struct ns1__getUserByRecordIDResponse *, const char*);
SOAP_FMAC3 struct ns1__getUserByRecordIDResponse * SOAP_FMAC4 soap_in_ns1__getUserByRecordIDResponse(struct soap*, const char*, struct ns1__getUserByRecordIDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getUserByRecordIDResponse(struct soap*, const struct ns1__getUserByRecordIDResponse *, const char*, const char*);

#ifndef soap_write_ns1__getUserByRecordIDResponse
#define soap_write_ns1__getUserByRecordIDResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getUserByRecordIDResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getUserByRecordIDResponse(soap, data, "ns1:getUserByRecordIDResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getUserByRecordIDResponse * SOAP_FMAC4 soap_get_ns1__getUserByRecordIDResponse(struct soap*, struct ns1__getUserByRecordIDResponse *, const char*, const char*);

#ifndef soap_read_ns1__getUserByRecordIDResponse
#define soap_read_ns1__getUserByRecordIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getUserByRecordIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getUserByRecordIDResponse * SOAP_FMAC2 soap_instantiate_ns1__getUserByRecordIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getUserByRecordIDResponse * soap_new_ns1__getUserByRecordIDResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getUserByRecordIDResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getUserByRecordIDResponse * soap_new_req_ns1__getUserByRecordIDResponse(struct soap *soap) { struct ns1__getUserByRecordIDResponse *_p = soap_instantiate_ns1__getUserByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getUserByRecordIDResponse(soap, _p); } return _p; }

inline struct ns1__getUserByRecordIDResponse * soap_new_set_ns1__getUserByRecordIDResponse(struct soap *soap, ns1__CUser *pUser) { struct ns1__getUserByRecordIDResponse *_p = soap_instantiate_ns1__getUserByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getUserByRecordIDResponse(soap, _p); _p->pUser = pUser; } return _p; }

inline void soap_delete_ns1__getUserByRecordIDResponse(struct soap *soap, struct ns1__getUserByRecordIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getUserByRecordIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getUser
#define SOAP_TYPE_ns1__getUser (432)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getUser(struct soap*, struct ns1__getUser *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getUser(struct soap*, const struct ns1__getUser *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getUser(struct soap*, const char*, int, const struct ns1__getUser *, const char*);
SOAP_FMAC3 struct ns1__getUser * SOAP_FMAC4 soap_in_ns1__getUser(struct soap*, const char*, struct ns1__getUser *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getUser(struct soap*, const struct ns1__getUser *, const char*, const char*);

#ifndef soap_write_ns1__getUser
#define soap_write_ns1__getUser(soap, data) ( soap_begin(soap), soap_serialize_ns1__getUser(soap, data), soap_begin_send(soap) || soap_put_ns1__getUser(soap, data, "ns1:getUser", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getUser * SOAP_FMAC4 soap_get_ns1__getUser(struct soap*, struct ns1__getUser *, const char*, const char*);

#ifndef soap_read_ns1__getUser
#define soap_read_ns1__getUser(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getUser(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getUser * SOAP_FMAC2 soap_instantiate_ns1__getUser(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getUser * soap_new_ns1__getUser(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getUser(soap, n, NULL, NULL, NULL); }

inline struct ns1__getUser * soap_new_req_ns1__getUser(struct soap *soap, LONG64 cookie) { struct ns1__getUser *_p = soap_instantiate_ns1__getUser(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getUser(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__getUser * soap_new_set_ns1__getUser(struct soap *soap, LONG64 cookie, char *firstName, char *middleInitials, char *lastName) { struct ns1__getUser *_p = soap_instantiate_ns1__getUser(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getUser(soap, _p); _p->cookie = cookie; _p->firstName = firstName; _p->middleInitials = middleInitials; _p->lastName = lastName; } return _p; }

inline void soap_delete_ns1__getUser(struct soap *soap, struct ns1__getUser *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getUser(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getUserResponse
#define SOAP_TYPE_ns1__getUserResponse (428)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getUserResponse(struct soap*, struct ns1__getUserResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getUserResponse(struct soap*, const struct ns1__getUserResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getUserResponse(struct soap*, const char*, int, const struct ns1__getUserResponse *, const char*);
SOAP_FMAC3 struct ns1__getUserResponse * SOAP_FMAC4 soap_in_ns1__getUserResponse(struct soap*, const char*, struct ns1__getUserResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getUserResponse(struct soap*, const struct ns1__getUserResponse *, const char*, const char*);

#ifndef soap_write_ns1__getUserResponse
#define soap_write_ns1__getUserResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getUserResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getUserResponse(soap, data, "ns1:getUserResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getUserResponse * SOAP_FMAC4 soap_get_ns1__getUserResponse(struct soap*, struct ns1__getUserResponse *, const char*, const char*);

#ifndef soap_read_ns1__getUserResponse
#define soap_read_ns1__getUserResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getUserResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getUserResponse * SOAP_FMAC2 soap_instantiate_ns1__getUserResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getUserResponse * soap_new_ns1__getUserResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getUserResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getUserResponse * soap_new_req_ns1__getUserResponse(struct soap *soap) { struct ns1__getUserResponse *_p = soap_instantiate_ns1__getUserResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getUserResponse(soap, _p); } return _p; }

inline struct ns1__getUserResponse * soap_new_set_ns1__getUserResponse(struct soap *soap, ns1__CUser *pUser) { struct ns1__getUserResponse *_p = soap_instantiate_ns1__getUserResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getUserResponse(soap, _p); _p->pUser = pUser; } return _p; }

inline void soap_delete_ns1__getUserResponse(struct soap *soap, struct ns1__getUserResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getUserResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getUserLicenseList
#define SOAP_TYPE_ns1__getUserLicenseList (427)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getUserLicenseList(struct soap*, struct ns1__getUserLicenseList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getUserLicenseList(struct soap*, const struct ns1__getUserLicenseList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getUserLicenseList(struct soap*, const char*, int, const struct ns1__getUserLicenseList *, const char*);
SOAP_FMAC3 struct ns1__getUserLicenseList * SOAP_FMAC4 soap_in_ns1__getUserLicenseList(struct soap*, const char*, struct ns1__getUserLicenseList *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getUserLicenseList(struct soap*, const struct ns1__getUserLicenseList *, const char*, const char*);

#ifndef soap_write_ns1__getUserLicenseList
#define soap_write_ns1__getUserLicenseList(soap, data) ( soap_begin(soap), soap_serialize_ns1__getUserLicenseList(soap, data), soap_begin_send(soap) || soap_put_ns1__getUserLicenseList(soap, data, "ns1:getUserLicenseList", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getUserLicenseList * SOAP_FMAC4 soap_get_ns1__getUserLicenseList(struct soap*, struct ns1__getUserLicenseList *, const char*, const char*);

#ifndef soap_read_ns1__getUserLicenseList
#define soap_read_ns1__getUserLicenseList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getUserLicenseList(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getUserLicenseList * SOAP_FMAC2 soap_instantiate_ns1__getUserLicenseList(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getUserLicenseList * soap_new_ns1__getUserLicenseList(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getUserLicenseList(soap, n, NULL, NULL, NULL); }

inline struct ns1__getUserLicenseList * soap_new_req_ns1__getUserLicenseList(struct soap *soap, LONG64 cookie) { struct ns1__getUserLicenseList *_p = soap_instantiate_ns1__getUserLicenseList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getUserLicenseList(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__getUserLicenseList * soap_new_set_ns1__getUserLicenseList(struct soap *soap, LONG64 cookie) { struct ns1__getUserLicenseList *_p = soap_instantiate_ns1__getUserLicenseList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getUserLicenseList(soap, _p); _p->cookie = cookie; } return _p; }

inline void soap_delete_ns1__getUserLicenseList(struct soap *soap, struct ns1__getUserLicenseList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getUserLicenseList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getUserLicenseListResponse
#define SOAP_TYPE_ns1__getUserLicenseListResponse (423)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getUserLicenseListResponse(struct soap*, struct ns1__getUserLicenseListResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getUserLicenseListResponse(struct soap*, const struct ns1__getUserLicenseListResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getUserLicenseListResponse(struct soap*, const char*, int, const struct ns1__getUserLicenseListResponse *, const char*);
SOAP_FMAC3 struct ns1__getUserLicenseListResponse * SOAP_FMAC4 soap_in_ns1__getUserLicenseListResponse(struct soap*, const char*, struct ns1__getUserLicenseListResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getUserLicenseListResponse(struct soap*, const struct ns1__getUserLicenseListResponse *, const char*, const char*);

#ifndef soap_write_ns1__getUserLicenseListResponse
#define soap_write_ns1__getUserLicenseListResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getUserLicenseListResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getUserLicenseListResponse(soap, data, "ns1:getUserLicenseListResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getUserLicenseListResponse * SOAP_FMAC4 soap_get_ns1__getUserLicenseListResponse(struct soap*, struct ns1__getUserLicenseListResponse *, const char*, const char*);

#ifndef soap_read_ns1__getUserLicenseListResponse
#define soap_read_ns1__getUserLicenseListResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getUserLicenseListResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getUserLicenseListResponse * SOAP_FMAC2 soap_instantiate_ns1__getUserLicenseListResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getUserLicenseListResponse * soap_new_ns1__getUserLicenseListResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getUserLicenseListResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getUserLicenseListResponse * soap_new_req_ns1__getUserLicenseListResponse(struct soap *soap) { struct ns1__getUserLicenseListResponse *_p = soap_instantiate_ns1__getUserLicenseListResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getUserLicenseListResponse(soap, _p); } return _p; }

inline struct ns1__getUserLicenseListResponse * soap_new_set_ns1__getUserLicenseListResponse(struct soap *soap, ArrayOfCUserLicense *UserLicenseList) { struct ns1__getUserLicenseListResponse *_p = soap_instantiate_ns1__getUserLicenseListResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getUserLicenseListResponse(soap, _p); _p->UserLicenseList = UserLicenseList; } return _p; }

inline void soap_delete_ns1__getUserLicenseListResponse(struct soap *soap, struct ns1__getUserLicenseListResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getUserLicenseListResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getGlobalCustomerList
#define SOAP_TYPE_ns1__getGlobalCustomerList (422)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getGlobalCustomerList(struct soap*, struct ns1__getGlobalCustomerList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getGlobalCustomerList(struct soap*, const struct ns1__getGlobalCustomerList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getGlobalCustomerList(struct soap*, const char*, int, const struct ns1__getGlobalCustomerList *, const char*);
SOAP_FMAC3 struct ns1__getGlobalCustomerList * SOAP_FMAC4 soap_in_ns1__getGlobalCustomerList(struct soap*, const char*, struct ns1__getGlobalCustomerList *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getGlobalCustomerList(struct soap*, const struct ns1__getGlobalCustomerList *, const char*, const char*);

#ifndef soap_write_ns1__getGlobalCustomerList
#define soap_write_ns1__getGlobalCustomerList(soap, data) ( soap_begin(soap), soap_serialize_ns1__getGlobalCustomerList(soap, data), soap_begin_send(soap) || soap_put_ns1__getGlobalCustomerList(soap, data, "ns1:getGlobalCustomerList", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getGlobalCustomerList * SOAP_FMAC4 soap_get_ns1__getGlobalCustomerList(struct soap*, struct ns1__getGlobalCustomerList *, const char*, const char*);

#ifndef soap_read_ns1__getGlobalCustomerList
#define soap_read_ns1__getGlobalCustomerList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getGlobalCustomerList(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getGlobalCustomerList * SOAP_FMAC2 soap_instantiate_ns1__getGlobalCustomerList(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getGlobalCustomerList * soap_new_ns1__getGlobalCustomerList(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getGlobalCustomerList(soap, n, NULL, NULL, NULL); }

inline struct ns1__getGlobalCustomerList * soap_new_req_ns1__getGlobalCustomerList(struct soap *soap, LONG64 cookie) { struct ns1__getGlobalCustomerList *_p = soap_instantiate_ns1__getGlobalCustomerList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getGlobalCustomerList(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__getGlobalCustomerList * soap_new_set_ns1__getGlobalCustomerList(struct soap *soap, LONG64 cookie) { struct ns1__getGlobalCustomerList *_p = soap_instantiate_ns1__getGlobalCustomerList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getGlobalCustomerList(soap, _p); _p->cookie = cookie; } return _p; }

inline void soap_delete_ns1__getGlobalCustomerList(struct soap *soap, struct ns1__getGlobalCustomerList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getGlobalCustomerList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getGlobalCustomerListResponse
#define SOAP_TYPE_ns1__getGlobalCustomerListResponse (419)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getGlobalCustomerListResponse(struct soap*, struct ns1__getGlobalCustomerListResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getGlobalCustomerListResponse(struct soap*, const struct ns1__getGlobalCustomerListResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getGlobalCustomerListResponse(struct soap*, const char*, int, const struct ns1__getGlobalCustomerListResponse *, const char*);
SOAP_FMAC3 struct ns1__getGlobalCustomerListResponse * SOAP_FMAC4 soap_in_ns1__getGlobalCustomerListResponse(struct soap*, const char*, struct ns1__getGlobalCustomerListResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getGlobalCustomerListResponse(struct soap*, const struct ns1__getGlobalCustomerListResponse *, const char*, const char*);

#ifndef soap_write_ns1__getGlobalCustomerListResponse
#define soap_write_ns1__getGlobalCustomerListResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getGlobalCustomerListResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getGlobalCustomerListResponse(soap, data, "ns1:getGlobalCustomerListResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getGlobalCustomerListResponse * SOAP_FMAC4 soap_get_ns1__getGlobalCustomerListResponse(struct soap*, struct ns1__getGlobalCustomerListResponse *, const char*, const char*);

#ifndef soap_read_ns1__getGlobalCustomerListResponse
#define soap_read_ns1__getGlobalCustomerListResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getGlobalCustomerListResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getGlobalCustomerListResponse * SOAP_FMAC2 soap_instantiate_ns1__getGlobalCustomerListResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getGlobalCustomerListResponse * soap_new_ns1__getGlobalCustomerListResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getGlobalCustomerListResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getGlobalCustomerListResponse * soap_new_req_ns1__getGlobalCustomerListResponse(struct soap *soap) { struct ns1__getGlobalCustomerListResponse *_p = soap_instantiate_ns1__getGlobalCustomerListResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getGlobalCustomerListResponse(soap, _p); } return _p; }

inline struct ns1__getGlobalCustomerListResponse * soap_new_set_ns1__getGlobalCustomerListResponse(struct soap *soap, ArrayOfCGlobalUser *GlobalCustomerList) { struct ns1__getGlobalCustomerListResponse *_p = soap_instantiate_ns1__getGlobalCustomerListResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getGlobalCustomerListResponse(soap, _p); _p->GlobalCustomerList = GlobalCustomerList; } return _p; }

inline void soap_delete_ns1__getGlobalCustomerListResponse(struct soap *soap, struct ns1__getGlobalCustomerListResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getGlobalCustomerListResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getGlobalUserList
#define SOAP_TYPE_ns1__getGlobalUserList (418)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getGlobalUserList(struct soap*, struct ns1__getGlobalUserList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getGlobalUserList(struct soap*, const struct ns1__getGlobalUserList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getGlobalUserList(struct soap*, const char*, int, const struct ns1__getGlobalUserList *, const char*);
SOAP_FMAC3 struct ns1__getGlobalUserList * SOAP_FMAC4 soap_in_ns1__getGlobalUserList(struct soap*, const char*, struct ns1__getGlobalUserList *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getGlobalUserList(struct soap*, const struct ns1__getGlobalUserList *, const char*, const char*);

#ifndef soap_write_ns1__getGlobalUserList
#define soap_write_ns1__getGlobalUserList(soap, data) ( soap_begin(soap), soap_serialize_ns1__getGlobalUserList(soap, data), soap_begin_send(soap) || soap_put_ns1__getGlobalUserList(soap, data, "ns1:getGlobalUserList", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getGlobalUserList * SOAP_FMAC4 soap_get_ns1__getGlobalUserList(struct soap*, struct ns1__getGlobalUserList *, const char*, const char*);

#ifndef soap_read_ns1__getGlobalUserList
#define soap_read_ns1__getGlobalUserList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getGlobalUserList(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getGlobalUserList * SOAP_FMAC2 soap_instantiate_ns1__getGlobalUserList(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getGlobalUserList * soap_new_ns1__getGlobalUserList(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getGlobalUserList(soap, n, NULL, NULL, NULL); }

inline struct ns1__getGlobalUserList * soap_new_req_ns1__getGlobalUserList(struct soap *soap, LONG64 cookie) { struct ns1__getGlobalUserList *_p = soap_instantiate_ns1__getGlobalUserList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getGlobalUserList(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__getGlobalUserList * soap_new_set_ns1__getGlobalUserList(struct soap *soap, LONG64 cookie) { struct ns1__getGlobalUserList *_p = soap_instantiate_ns1__getGlobalUserList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getGlobalUserList(soap, _p); _p->cookie = cookie; } return _p; }

inline void soap_delete_ns1__getGlobalUserList(struct soap *soap, struct ns1__getGlobalUserList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getGlobalUserList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getGlobalUserListResponse
#define SOAP_TYPE_ns1__getGlobalUserListResponse (414)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getGlobalUserListResponse(struct soap*, struct ns1__getGlobalUserListResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getGlobalUserListResponse(struct soap*, const struct ns1__getGlobalUserListResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getGlobalUserListResponse(struct soap*, const char*, int, const struct ns1__getGlobalUserListResponse *, const char*);
SOAP_FMAC3 struct ns1__getGlobalUserListResponse * SOAP_FMAC4 soap_in_ns1__getGlobalUserListResponse(struct soap*, const char*, struct ns1__getGlobalUserListResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getGlobalUserListResponse(struct soap*, const struct ns1__getGlobalUserListResponse *, const char*, const char*);

#ifndef soap_write_ns1__getGlobalUserListResponse
#define soap_write_ns1__getGlobalUserListResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getGlobalUserListResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getGlobalUserListResponse(soap, data, "ns1:getGlobalUserListResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getGlobalUserListResponse * SOAP_FMAC4 soap_get_ns1__getGlobalUserListResponse(struct soap*, struct ns1__getGlobalUserListResponse *, const char*, const char*);

#ifndef soap_read_ns1__getGlobalUserListResponse
#define soap_read_ns1__getGlobalUserListResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getGlobalUserListResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getGlobalUserListResponse * SOAP_FMAC2 soap_instantiate_ns1__getGlobalUserListResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getGlobalUserListResponse * soap_new_ns1__getGlobalUserListResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getGlobalUserListResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getGlobalUserListResponse * soap_new_req_ns1__getGlobalUserListResponse(struct soap *soap) { struct ns1__getGlobalUserListResponse *_p = soap_instantiate_ns1__getGlobalUserListResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getGlobalUserListResponse(soap, _p); } return _p; }

inline struct ns1__getGlobalUserListResponse * soap_new_set_ns1__getGlobalUserListResponse(struct soap *soap, ArrayOfCGlobalUser *GlobalUserList) { struct ns1__getGlobalUserListResponse *_p = soap_instantiate_ns1__getGlobalUserListResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getGlobalUserListResponse(soap, _p); _p->GlobalUserList = GlobalUserList; } return _p; }

inline void soap_delete_ns1__getGlobalUserListResponse(struct soap *soap, struct ns1__getGlobalUserListResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getGlobalUserListResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__cancelSaveTask
#define SOAP_TYPE_ns1__cancelSaveTask (413)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__cancelSaveTask(struct soap*, struct ns1__cancelSaveTask *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__cancelSaveTask(struct soap*, const struct ns1__cancelSaveTask *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__cancelSaveTask(struct soap*, const char*, int, const struct ns1__cancelSaveTask *, const char*);
SOAP_FMAC3 struct ns1__cancelSaveTask * SOAP_FMAC4 soap_in_ns1__cancelSaveTask(struct soap*, const char*, struct ns1__cancelSaveTask *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__cancelSaveTask(struct soap*, const struct ns1__cancelSaveTask *, const char*, const char*);

#ifndef soap_write_ns1__cancelSaveTask
#define soap_write_ns1__cancelSaveTask(soap, data) ( soap_begin(soap), soap_serialize_ns1__cancelSaveTask(soap, data), soap_begin_send(soap) || soap_put_ns1__cancelSaveTask(soap, data, "ns1:cancelSaveTask", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__cancelSaveTask * SOAP_FMAC4 soap_get_ns1__cancelSaveTask(struct soap*, struct ns1__cancelSaveTask *, const char*, const char*);

#ifndef soap_read_ns1__cancelSaveTask
#define soap_read_ns1__cancelSaveTask(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__cancelSaveTask(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__cancelSaveTask * SOAP_FMAC2 soap_instantiate_ns1__cancelSaveTask(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__cancelSaveTask * soap_new_ns1__cancelSaveTask(struct soap *soap, int n = -1) { return soap_instantiate_ns1__cancelSaveTask(soap, n, NULL, NULL, NULL); }

inline struct ns1__cancelSaveTask * soap_new_req_ns1__cancelSaveTask(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__cancelSaveTask *_p = soap_instantiate_ns1__cancelSaveTask(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveTask(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline struct ns1__cancelSaveTask * soap_new_set_ns1__cancelSaveTask(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__cancelSaveTask *_p = soap_instantiate_ns1__cancelSaveTask(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveTask(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__cancelSaveTask(struct soap *soap, struct ns1__cancelSaveTask *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__cancelSaveTask(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__cancelSaveTaskResponse
#define SOAP_TYPE_ns1__cancelSaveTaskResponse (412)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__cancelSaveTaskResponse(struct soap*, struct ns1__cancelSaveTaskResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__cancelSaveTaskResponse(struct soap*, const struct ns1__cancelSaveTaskResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__cancelSaveTaskResponse(struct soap*, const char*, int, const struct ns1__cancelSaveTaskResponse *, const char*);
SOAP_FMAC3 struct ns1__cancelSaveTaskResponse * SOAP_FMAC4 soap_in_ns1__cancelSaveTaskResponse(struct soap*, const char*, struct ns1__cancelSaveTaskResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__cancelSaveTaskResponse(struct soap*, const struct ns1__cancelSaveTaskResponse *, const char*, const char*);

#ifndef soap_write_ns1__cancelSaveTaskResponse
#define soap_write_ns1__cancelSaveTaskResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__cancelSaveTaskResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__cancelSaveTaskResponse(soap, data, "ns1:cancelSaveTaskResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__cancelSaveTaskResponse * SOAP_FMAC4 soap_get_ns1__cancelSaveTaskResponse(struct soap*, struct ns1__cancelSaveTaskResponse *, const char*, const char*);

#ifndef soap_read_ns1__cancelSaveTaskResponse
#define soap_read_ns1__cancelSaveTaskResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__cancelSaveTaskResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__cancelSaveTaskResponse * SOAP_FMAC2 soap_instantiate_ns1__cancelSaveTaskResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__cancelSaveTaskResponse * soap_new_ns1__cancelSaveTaskResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__cancelSaveTaskResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__cancelSaveTaskResponse * soap_new_req_ns1__cancelSaveTaskResponse(struct soap *soap, int result) { struct ns1__cancelSaveTaskResponse *_p = soap_instantiate_ns1__cancelSaveTaskResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveTaskResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__cancelSaveTaskResponse * soap_new_set_ns1__cancelSaveTaskResponse(struct soap *soap, int result) { struct ns1__cancelSaveTaskResponse *_p = soap_instantiate_ns1__cancelSaveTaskResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveTaskResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__cancelSaveTaskResponse(struct soap *soap, struct ns1__cancelSaveTaskResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__cancelSaveTaskResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveTask
#define SOAP_TYPE_ns1__saveTask (410)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveTask(struct soap*, struct ns1__saveTask *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveTask(struct soap*, const struct ns1__saveTask *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveTask(struct soap*, const char*, int, const struct ns1__saveTask *, const char*);
SOAP_FMAC3 struct ns1__saveTask * SOAP_FMAC4 soap_in_ns1__saveTask(struct soap*, const char*, struct ns1__saveTask *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveTask(struct soap*, const struct ns1__saveTask *, const char*, const char*);

#ifndef soap_write_ns1__saveTask
#define soap_write_ns1__saveTask(soap, data) ( soap_begin(soap), soap_serialize_ns1__saveTask(soap, data), soap_begin_send(soap) || soap_put_ns1__saveTask(soap, data, "ns1:saveTask", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__saveTask * SOAP_FMAC4 soap_get_ns1__saveTask(struct soap*, struct ns1__saveTask *, const char*, const char*);

#ifndef soap_read_ns1__saveTask
#define soap_read_ns1__saveTask(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveTask(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__saveTask * SOAP_FMAC2 soap_instantiate_ns1__saveTask(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveTask * soap_new_ns1__saveTask(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveTask(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveTask * soap_new_req_ns1__saveTask(struct soap *soap, LONG64 cookie) { struct ns1__saveTask *_p = soap_instantiate_ns1__saveTask(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveTask(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__saveTask * soap_new_set_ns1__saveTask(struct soap *soap, LONG64 cookie, ns1__CTask *pTask) { struct ns1__saveTask *_p = soap_instantiate_ns1__saveTask(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveTask(soap, _p); _p->cookie = cookie; _p->pTask = pTask; } return _p; }

inline void soap_delete_ns1__saveTask(struct soap *soap, struct ns1__saveTask *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveTask(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveTaskResponse
#define SOAP_TYPE_ns1__saveTaskResponse (409)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveTaskResponse(struct soap*, struct ns1__saveTaskResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveTaskResponse(struct soap*, const struct ns1__saveTaskResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveTaskResponse(struct soap*, const char*, int, const struct ns1__saveTaskResponse *, const char*);
SOAP_FMAC3 struct ns1__saveTaskResponse * SOAP_FMAC4 soap_in_ns1__saveTaskResponse(struct soap*, const char*, struct ns1__saveTaskResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveTaskResponse(struct soap*, const struct ns1__saveTaskResponse *, const char*, const char*);

#ifndef soap_write_ns1__saveTaskResponse
#define soap_write_ns1__saveTaskResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__saveTaskResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__saveTaskResponse(soap, data, "ns1:saveTaskResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__saveTaskResponse * SOAP_FMAC4 soap_get_ns1__saveTaskResponse(struct soap*, struct ns1__saveTaskResponse *, const char*, const char*);

#ifndef soap_read_ns1__saveTaskResponse
#define soap_read_ns1__saveTaskResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveTaskResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__saveTaskResponse * SOAP_FMAC2 soap_instantiate_ns1__saveTaskResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveTaskResponse * soap_new_ns1__saveTaskResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveTaskResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveTaskResponse * soap_new_req_ns1__saveTaskResponse(struct soap *soap, int result) { struct ns1__saveTaskResponse *_p = soap_instantiate_ns1__saveTaskResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveTaskResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__saveTaskResponse * soap_new_set_ns1__saveTaskResponse(struct soap *soap, int result) { struct ns1__saveTaskResponse *_p = soap_instantiate_ns1__saveTaskResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveTaskResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__saveTaskResponse(struct soap *soap, struct ns1__saveTaskResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveTaskResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editTaskByRecordID
#define SOAP_TYPE_ns1__editTaskByRecordID (407)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editTaskByRecordID(struct soap*, struct ns1__editTaskByRecordID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editTaskByRecordID(struct soap*, const struct ns1__editTaskByRecordID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editTaskByRecordID(struct soap*, const char*, int, const struct ns1__editTaskByRecordID *, const char*);
SOAP_FMAC3 struct ns1__editTaskByRecordID * SOAP_FMAC4 soap_in_ns1__editTaskByRecordID(struct soap*, const char*, struct ns1__editTaskByRecordID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editTaskByRecordID(struct soap*, const struct ns1__editTaskByRecordID *, const char*, const char*);

#ifndef soap_write_ns1__editTaskByRecordID
#define soap_write_ns1__editTaskByRecordID(soap, data) ( soap_begin(soap), soap_serialize_ns1__editTaskByRecordID(soap, data), soap_begin_send(soap) || soap_put_ns1__editTaskByRecordID(soap, data, "ns1:editTaskByRecordID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editTaskByRecordID * SOAP_FMAC4 soap_get_ns1__editTaskByRecordID(struct soap*, struct ns1__editTaskByRecordID *, const char*, const char*);

#ifndef soap_read_ns1__editTaskByRecordID
#define soap_read_ns1__editTaskByRecordID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editTaskByRecordID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editTaskByRecordID * SOAP_FMAC2 soap_instantiate_ns1__editTaskByRecordID(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editTaskByRecordID * soap_new_ns1__editTaskByRecordID(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editTaskByRecordID(soap, n, NULL, NULL, NULL); }

inline struct ns1__editTaskByRecordID * soap_new_req_ns1__editTaskByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__editTaskByRecordID *_p = soap_instantiate_ns1__editTaskByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editTaskByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline struct ns1__editTaskByRecordID * soap_new_set_ns1__editTaskByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__editTaskByRecordID *_p = soap_instantiate_ns1__editTaskByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editTaskByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__editTaskByRecordID(struct soap *soap, struct ns1__editTaskByRecordID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editTaskByRecordID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editTaskByRecordIDResponse
#define SOAP_TYPE_ns1__editTaskByRecordIDResponse (404)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editTaskByRecordIDResponse(struct soap*, struct ns1__editTaskByRecordIDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editTaskByRecordIDResponse(struct soap*, const struct ns1__editTaskByRecordIDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editTaskByRecordIDResponse(struct soap*, const char*, int, const struct ns1__editTaskByRecordIDResponse *, const char*);
SOAP_FMAC3 struct ns1__editTaskByRecordIDResponse * SOAP_FMAC4 soap_in_ns1__editTaskByRecordIDResponse(struct soap*, const char*, struct ns1__editTaskByRecordIDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editTaskByRecordIDResponse(struct soap*, const struct ns1__editTaskByRecordIDResponse *, const char*, const char*);

#ifndef soap_write_ns1__editTaskByRecordIDResponse
#define soap_write_ns1__editTaskByRecordIDResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__editTaskByRecordIDResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__editTaskByRecordIDResponse(soap, data, "ns1:editTaskByRecordIDResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editTaskByRecordIDResponse * SOAP_FMAC4 soap_get_ns1__editTaskByRecordIDResponse(struct soap*, struct ns1__editTaskByRecordIDResponse *, const char*, const char*);

#ifndef soap_read_ns1__editTaskByRecordIDResponse
#define soap_read_ns1__editTaskByRecordIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editTaskByRecordIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editTaskByRecordIDResponse * SOAP_FMAC2 soap_instantiate_ns1__editTaskByRecordIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editTaskByRecordIDResponse * soap_new_ns1__editTaskByRecordIDResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editTaskByRecordIDResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__editTaskByRecordIDResponse * soap_new_req_ns1__editTaskByRecordIDResponse(struct soap *soap) { struct ns1__editTaskByRecordIDResponse *_p = soap_instantiate_ns1__editTaskByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editTaskByRecordIDResponse(soap, _p); } return _p; }

inline struct ns1__editTaskByRecordIDResponse * soap_new_set_ns1__editTaskByRecordIDResponse(struct soap *soap, ns1__CTask *pTask) { struct ns1__editTaskByRecordIDResponse *_p = soap_instantiate_ns1__editTaskByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editTaskByRecordIDResponse(soap, _p); _p->pTask = pTask; } return _p; }

inline void soap_delete_ns1__editTaskByRecordIDResponse(struct soap *soap, struct ns1__editTaskByRecordIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editTaskByRecordIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editTask
#define SOAP_TYPE_ns1__editTask (403)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editTask(struct soap*, struct ns1__editTask *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editTask(struct soap*, const struct ns1__editTask *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editTask(struct soap*, const char*, int, const struct ns1__editTask *, const char*);
SOAP_FMAC3 struct ns1__editTask * SOAP_FMAC4 soap_in_ns1__editTask(struct soap*, const char*, struct ns1__editTask *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editTask(struct soap*, const struct ns1__editTask *, const char*, const char*);

#ifndef soap_write_ns1__editTask
#define soap_write_ns1__editTask(soap, data) ( soap_begin(soap), soap_serialize_ns1__editTask(soap, data), soap_begin_send(soap) || soap_put_ns1__editTask(soap, data, "ns1:editTask", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editTask * SOAP_FMAC4 soap_get_ns1__editTask(struct soap*, struct ns1__editTask *, const char*, const char*);

#ifndef soap_read_ns1__editTask
#define soap_read_ns1__editTask(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editTask(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editTask * SOAP_FMAC2 soap_instantiate_ns1__editTask(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editTask * soap_new_ns1__editTask(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editTask(soap, n, NULL, NULL, NULL); }

inline struct ns1__editTask * soap_new_req_ns1__editTask(struct soap *soap, LONG64 cookie) { struct ns1__editTask *_p = soap_instantiate_ns1__editTask(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editTask(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__editTask * soap_new_set_ns1__editTask(struct soap *soap, LONG64 cookie, char *summary) { struct ns1__editTask *_p = soap_instantiate_ns1__editTask(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editTask(soap, _p); _p->cookie = cookie; _p->summary = summary; } return _p; }

inline void soap_delete_ns1__editTask(struct soap *soap, struct ns1__editTask *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editTask(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editTaskResponse
#define SOAP_TYPE_ns1__editTaskResponse (400)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editTaskResponse(struct soap*, struct ns1__editTaskResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editTaskResponse(struct soap*, const struct ns1__editTaskResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editTaskResponse(struct soap*, const char*, int, const struct ns1__editTaskResponse *, const char*);
SOAP_FMAC3 struct ns1__editTaskResponse * SOAP_FMAC4 soap_in_ns1__editTaskResponse(struct soap*, const char*, struct ns1__editTaskResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editTaskResponse(struct soap*, const struct ns1__editTaskResponse *, const char*, const char*);

#ifndef soap_write_ns1__editTaskResponse
#define soap_write_ns1__editTaskResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__editTaskResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__editTaskResponse(soap, data, "ns1:editTaskResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editTaskResponse * SOAP_FMAC4 soap_get_ns1__editTaskResponse(struct soap*, struct ns1__editTaskResponse *, const char*, const char*);

#ifndef soap_read_ns1__editTaskResponse
#define soap_read_ns1__editTaskResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editTaskResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editTaskResponse * SOAP_FMAC2 soap_instantiate_ns1__editTaskResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editTaskResponse * soap_new_ns1__editTaskResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editTaskResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__editTaskResponse * soap_new_req_ns1__editTaskResponse(struct soap *soap) { struct ns1__editTaskResponse *_p = soap_instantiate_ns1__editTaskResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editTaskResponse(soap, _p); } return _p; }

inline struct ns1__editTaskResponse * soap_new_set_ns1__editTaskResponse(struct soap *soap, ns1__CTask *pTask) { struct ns1__editTaskResponse *_p = soap_instantiate_ns1__editTaskResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editTaskResponse(soap, _p); _p->pTask = pTask; } return _p; }

inline void soap_delete_ns1__editTaskResponse(struct soap *soap, struct ns1__editTaskResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editTaskResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteTaskByRecordID
#define SOAP_TYPE_ns1__deleteTaskByRecordID (399)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteTaskByRecordID(struct soap*, struct ns1__deleteTaskByRecordID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteTaskByRecordID(struct soap*, const struct ns1__deleteTaskByRecordID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteTaskByRecordID(struct soap*, const char*, int, const struct ns1__deleteTaskByRecordID *, const char*);
SOAP_FMAC3 struct ns1__deleteTaskByRecordID * SOAP_FMAC4 soap_in_ns1__deleteTaskByRecordID(struct soap*, const char*, struct ns1__deleteTaskByRecordID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteTaskByRecordID(struct soap*, const struct ns1__deleteTaskByRecordID *, const char*, const char*);

#ifndef soap_write_ns1__deleteTaskByRecordID
#define soap_write_ns1__deleteTaskByRecordID(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteTaskByRecordID(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteTaskByRecordID(soap, data, "ns1:deleteTaskByRecordID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteTaskByRecordID * SOAP_FMAC4 soap_get_ns1__deleteTaskByRecordID(struct soap*, struct ns1__deleteTaskByRecordID *, const char*, const char*);

#ifndef soap_read_ns1__deleteTaskByRecordID
#define soap_read_ns1__deleteTaskByRecordID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteTaskByRecordID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteTaskByRecordID * SOAP_FMAC2 soap_instantiate_ns1__deleteTaskByRecordID(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteTaskByRecordID * soap_new_ns1__deleteTaskByRecordID(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteTaskByRecordID(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteTaskByRecordID * soap_new_req_ns1__deleteTaskByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__deleteTaskByRecordID *_p = soap_instantiate_ns1__deleteTaskByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteTaskByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline struct ns1__deleteTaskByRecordID * soap_new_set_ns1__deleteTaskByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__deleteTaskByRecordID *_p = soap_instantiate_ns1__deleteTaskByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteTaskByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__deleteTaskByRecordID(struct soap *soap, struct ns1__deleteTaskByRecordID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteTaskByRecordID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteTaskByRecordIDResponse
#define SOAP_TYPE_ns1__deleteTaskByRecordIDResponse (398)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteTaskByRecordIDResponse(struct soap*, struct ns1__deleteTaskByRecordIDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteTaskByRecordIDResponse(struct soap*, const struct ns1__deleteTaskByRecordIDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteTaskByRecordIDResponse(struct soap*, const char*, int, const struct ns1__deleteTaskByRecordIDResponse *, const char*);
SOAP_FMAC3 struct ns1__deleteTaskByRecordIDResponse * SOAP_FMAC4 soap_in_ns1__deleteTaskByRecordIDResponse(struct soap*, const char*, struct ns1__deleteTaskByRecordIDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteTaskByRecordIDResponse(struct soap*, const struct ns1__deleteTaskByRecordIDResponse *, const char*, const char*);

#ifndef soap_write_ns1__deleteTaskByRecordIDResponse
#define soap_write_ns1__deleteTaskByRecordIDResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteTaskByRecordIDResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteTaskByRecordIDResponse(soap, data, "ns1:deleteTaskByRecordIDResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteTaskByRecordIDResponse * SOAP_FMAC4 soap_get_ns1__deleteTaskByRecordIDResponse(struct soap*, struct ns1__deleteTaskByRecordIDResponse *, const char*, const char*);

#ifndef soap_read_ns1__deleteTaskByRecordIDResponse
#define soap_read_ns1__deleteTaskByRecordIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteTaskByRecordIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteTaskByRecordIDResponse * SOAP_FMAC2 soap_instantiate_ns1__deleteTaskByRecordIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteTaskByRecordIDResponse * soap_new_ns1__deleteTaskByRecordIDResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteTaskByRecordIDResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteTaskByRecordIDResponse * soap_new_req_ns1__deleteTaskByRecordIDResponse(struct soap *soap, int result) { struct ns1__deleteTaskByRecordIDResponse *_p = soap_instantiate_ns1__deleteTaskByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteTaskByRecordIDResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__deleteTaskByRecordIDResponse * soap_new_set_ns1__deleteTaskByRecordIDResponse(struct soap *soap, int result) { struct ns1__deleteTaskByRecordIDResponse *_p = soap_instantiate_ns1__deleteTaskByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteTaskByRecordIDResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__deleteTaskByRecordIDResponse(struct soap *soap, struct ns1__deleteTaskByRecordIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteTaskByRecordIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteTask
#define SOAP_TYPE_ns1__deleteTask (396)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteTask(struct soap*, struct ns1__deleteTask *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteTask(struct soap*, const struct ns1__deleteTask *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteTask(struct soap*, const char*, int, const struct ns1__deleteTask *, const char*);
SOAP_FMAC3 struct ns1__deleteTask * SOAP_FMAC4 soap_in_ns1__deleteTask(struct soap*, const char*, struct ns1__deleteTask *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteTask(struct soap*, const struct ns1__deleteTask *, const char*, const char*);

#ifndef soap_write_ns1__deleteTask
#define soap_write_ns1__deleteTask(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteTask(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteTask(soap, data, "ns1:deleteTask", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteTask * SOAP_FMAC4 soap_get_ns1__deleteTask(struct soap*, struct ns1__deleteTask *, const char*, const char*);

#ifndef soap_read_ns1__deleteTask
#define soap_read_ns1__deleteTask(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteTask(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteTask * SOAP_FMAC2 soap_instantiate_ns1__deleteTask(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteTask * soap_new_ns1__deleteTask(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteTask(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteTask * soap_new_req_ns1__deleteTask(struct soap *soap, LONG64 cookie) { struct ns1__deleteTask *_p = soap_instantiate_ns1__deleteTask(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteTask(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__deleteTask * soap_new_set_ns1__deleteTask(struct soap *soap, LONG64 cookie, char *summary) { struct ns1__deleteTask *_p = soap_instantiate_ns1__deleteTask(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteTask(soap, _p); _p->cookie = cookie; _p->summary = summary; } return _p; }

inline void soap_delete_ns1__deleteTask(struct soap *soap, struct ns1__deleteTask *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteTask(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteTaskResponse
#define SOAP_TYPE_ns1__deleteTaskResponse (395)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteTaskResponse(struct soap*, struct ns1__deleteTaskResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteTaskResponse(struct soap*, const struct ns1__deleteTaskResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteTaskResponse(struct soap*, const char*, int, const struct ns1__deleteTaskResponse *, const char*);
SOAP_FMAC3 struct ns1__deleteTaskResponse * SOAP_FMAC4 soap_in_ns1__deleteTaskResponse(struct soap*, const char*, struct ns1__deleteTaskResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteTaskResponse(struct soap*, const struct ns1__deleteTaskResponse *, const char*, const char*);

#ifndef soap_write_ns1__deleteTaskResponse
#define soap_write_ns1__deleteTaskResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteTaskResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteTaskResponse(soap, data, "ns1:deleteTaskResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteTaskResponse * SOAP_FMAC4 soap_get_ns1__deleteTaskResponse(struct soap*, struct ns1__deleteTaskResponse *, const char*, const char*);

#ifndef soap_read_ns1__deleteTaskResponse
#define soap_read_ns1__deleteTaskResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteTaskResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteTaskResponse * SOAP_FMAC2 soap_instantiate_ns1__deleteTaskResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteTaskResponse * soap_new_ns1__deleteTaskResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteTaskResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteTaskResponse * soap_new_req_ns1__deleteTaskResponse(struct soap *soap, int result) { struct ns1__deleteTaskResponse *_p = soap_instantiate_ns1__deleteTaskResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteTaskResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__deleteTaskResponse * soap_new_set_ns1__deleteTaskResponse(struct soap *soap, int result) { struct ns1__deleteTaskResponse *_p = soap_instantiate_ns1__deleteTaskResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteTaskResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__deleteTaskResponse(struct soap *soap, struct ns1__deleteTaskResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteTaskResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__addTask
#define SOAP_TYPE_ns1__addTask (393)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addTask(struct soap*, struct ns1__addTask *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addTask(struct soap*, const struct ns1__addTask *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addTask(struct soap*, const char*, int, const struct ns1__addTask *, const char*);
SOAP_FMAC3 struct ns1__addTask * SOAP_FMAC4 soap_in_ns1__addTask(struct soap*, const char*, struct ns1__addTask *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addTask(struct soap*, const struct ns1__addTask *, const char*, const char*);

#ifndef soap_write_ns1__addTask
#define soap_write_ns1__addTask(soap, data) ( soap_begin(soap), soap_serialize_ns1__addTask(soap, data), soap_begin_send(soap) || soap_put_ns1__addTask(soap, data, "ns1:addTask", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__addTask * SOAP_FMAC4 soap_get_ns1__addTask(struct soap*, struct ns1__addTask *, const char*, const char*);

#ifndef soap_read_ns1__addTask
#define soap_read_ns1__addTask(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__addTask(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__addTask * SOAP_FMAC2 soap_instantiate_ns1__addTask(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__addTask * soap_new_ns1__addTask(struct soap *soap, int n = -1) { return soap_instantiate_ns1__addTask(soap, n, NULL, NULL, NULL); }

inline struct ns1__addTask * soap_new_req_ns1__addTask(struct soap *soap, LONG64 cookie) { struct ns1__addTask *_p = soap_instantiate_ns1__addTask(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addTask(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__addTask * soap_new_set_ns1__addTask(struct soap *soap, LONG64 cookie, ns1__CTask *pTask) { struct ns1__addTask *_p = soap_instantiate_ns1__addTask(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addTask(soap, _p); _p->cookie = cookie; _p->pTask = pTask; } return _p; }

inline void soap_delete_ns1__addTask(struct soap *soap, struct ns1__addTask *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__addTask(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__addTaskResponse
#define SOAP_TYPE_ns1__addTaskResponse (392)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addTaskResponse(struct soap*, struct ns1__addTaskResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addTaskResponse(struct soap*, const struct ns1__addTaskResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addTaskResponse(struct soap*, const char*, int, const struct ns1__addTaskResponse *, const char*);
SOAP_FMAC3 struct ns1__addTaskResponse * SOAP_FMAC4 soap_in_ns1__addTaskResponse(struct soap*, const char*, struct ns1__addTaskResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addTaskResponse(struct soap*, const struct ns1__addTaskResponse *, const char*, const char*);

#ifndef soap_write_ns1__addTaskResponse
#define soap_write_ns1__addTaskResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__addTaskResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__addTaskResponse(soap, data, "ns1:addTaskResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__addTaskResponse * SOAP_FMAC4 soap_get_ns1__addTaskResponse(struct soap*, struct ns1__addTaskResponse *, const char*, const char*);

#ifndef soap_read_ns1__addTaskResponse
#define soap_read_ns1__addTaskResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__addTaskResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__addTaskResponse * SOAP_FMAC2 soap_instantiate_ns1__addTaskResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__addTaskResponse * soap_new_ns1__addTaskResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__addTaskResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__addTaskResponse * soap_new_req_ns1__addTaskResponse(struct soap *soap, LONG64 recordID) { struct ns1__addTaskResponse *_p = soap_instantiate_ns1__addTaskResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addTaskResponse(soap, _p); _p->recordID = recordID; } return _p; }

inline struct ns1__addTaskResponse * soap_new_set_ns1__addTaskResponse(struct soap *soap, LONG64 recordID) { struct ns1__addTaskResponse *_p = soap_instantiate_ns1__addTaskResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addTaskResponse(soap, _p); _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__addTaskResponse(struct soap *soap, struct ns1__addTaskResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__addTaskResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getTaskByRecordID
#define SOAP_TYPE_ns1__getTaskByRecordID (390)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getTaskByRecordID(struct soap*, struct ns1__getTaskByRecordID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getTaskByRecordID(struct soap*, const struct ns1__getTaskByRecordID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTaskByRecordID(struct soap*, const char*, int, const struct ns1__getTaskByRecordID *, const char*);
SOAP_FMAC3 struct ns1__getTaskByRecordID * SOAP_FMAC4 soap_in_ns1__getTaskByRecordID(struct soap*, const char*, struct ns1__getTaskByRecordID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getTaskByRecordID(struct soap*, const struct ns1__getTaskByRecordID *, const char*, const char*);

#ifndef soap_write_ns1__getTaskByRecordID
#define soap_write_ns1__getTaskByRecordID(soap, data) ( soap_begin(soap), soap_serialize_ns1__getTaskByRecordID(soap, data), soap_begin_send(soap) || soap_put_ns1__getTaskByRecordID(soap, data, "ns1:getTaskByRecordID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getTaskByRecordID * SOAP_FMAC4 soap_get_ns1__getTaskByRecordID(struct soap*, struct ns1__getTaskByRecordID *, const char*, const char*);

#ifndef soap_read_ns1__getTaskByRecordID
#define soap_read_ns1__getTaskByRecordID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getTaskByRecordID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getTaskByRecordID * SOAP_FMAC2 soap_instantiate_ns1__getTaskByRecordID(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getTaskByRecordID * soap_new_ns1__getTaskByRecordID(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getTaskByRecordID(soap, n, NULL, NULL, NULL); }

inline struct ns1__getTaskByRecordID * soap_new_req_ns1__getTaskByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__getTaskByRecordID *_p = soap_instantiate_ns1__getTaskByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTaskByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline struct ns1__getTaskByRecordID * soap_new_set_ns1__getTaskByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__getTaskByRecordID *_p = soap_instantiate_ns1__getTaskByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTaskByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__getTaskByRecordID(struct soap *soap, struct ns1__getTaskByRecordID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getTaskByRecordID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getTaskByRecordIDResponse
#define SOAP_TYPE_ns1__getTaskByRecordIDResponse (387)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getTaskByRecordIDResponse(struct soap*, struct ns1__getTaskByRecordIDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getTaskByRecordIDResponse(struct soap*, const struct ns1__getTaskByRecordIDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTaskByRecordIDResponse(struct soap*, const char*, int, const struct ns1__getTaskByRecordIDResponse *, const char*);
SOAP_FMAC3 struct ns1__getTaskByRecordIDResponse * SOAP_FMAC4 soap_in_ns1__getTaskByRecordIDResponse(struct soap*, const char*, struct ns1__getTaskByRecordIDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getTaskByRecordIDResponse(struct soap*, const struct ns1__getTaskByRecordIDResponse *, const char*, const char*);

#ifndef soap_write_ns1__getTaskByRecordIDResponse
#define soap_write_ns1__getTaskByRecordIDResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getTaskByRecordIDResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getTaskByRecordIDResponse(soap, data, "ns1:getTaskByRecordIDResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getTaskByRecordIDResponse * SOAP_FMAC4 soap_get_ns1__getTaskByRecordIDResponse(struct soap*, struct ns1__getTaskByRecordIDResponse *, const char*, const char*);

#ifndef soap_read_ns1__getTaskByRecordIDResponse
#define soap_read_ns1__getTaskByRecordIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getTaskByRecordIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getTaskByRecordIDResponse * SOAP_FMAC2 soap_instantiate_ns1__getTaskByRecordIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getTaskByRecordIDResponse * soap_new_ns1__getTaskByRecordIDResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getTaskByRecordIDResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getTaskByRecordIDResponse * soap_new_req_ns1__getTaskByRecordIDResponse(struct soap *soap) { struct ns1__getTaskByRecordIDResponse *_p = soap_instantiate_ns1__getTaskByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTaskByRecordIDResponse(soap, _p); } return _p; }

inline struct ns1__getTaskByRecordIDResponse * soap_new_set_ns1__getTaskByRecordIDResponse(struct soap *soap, ns1__CTask *pTask) { struct ns1__getTaskByRecordIDResponse *_p = soap_instantiate_ns1__getTaskByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTaskByRecordIDResponse(soap, _p); _p->pTask = pTask; } return _p; }

inline void soap_delete_ns1__getTaskByRecordIDResponse(struct soap *soap, struct ns1__getTaskByRecordIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getTaskByRecordIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getTask
#define SOAP_TYPE_ns1__getTask (386)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getTask(struct soap*, struct ns1__getTask *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getTask(struct soap*, const struct ns1__getTask *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTask(struct soap*, const char*, int, const struct ns1__getTask *, const char*);
SOAP_FMAC3 struct ns1__getTask * SOAP_FMAC4 soap_in_ns1__getTask(struct soap*, const char*, struct ns1__getTask *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getTask(struct soap*, const struct ns1__getTask *, const char*, const char*);

#ifndef soap_write_ns1__getTask
#define soap_write_ns1__getTask(soap, data) ( soap_begin(soap), soap_serialize_ns1__getTask(soap, data), soap_begin_send(soap) || soap_put_ns1__getTask(soap, data, "ns1:getTask", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getTask * SOAP_FMAC4 soap_get_ns1__getTask(struct soap*, struct ns1__getTask *, const char*, const char*);

#ifndef soap_read_ns1__getTask
#define soap_read_ns1__getTask(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getTask(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getTask * SOAP_FMAC2 soap_instantiate_ns1__getTask(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getTask * soap_new_ns1__getTask(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getTask(soap, n, NULL, NULL, NULL); }

inline struct ns1__getTask * soap_new_req_ns1__getTask(struct soap *soap, LONG64 cookie) { struct ns1__getTask *_p = soap_instantiate_ns1__getTask(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTask(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__getTask * soap_new_set_ns1__getTask(struct soap *soap, LONG64 cookie, char *summary) { struct ns1__getTask *_p = soap_instantiate_ns1__getTask(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTask(soap, _p); _p->cookie = cookie; _p->summary = summary; } return _p; }

inline void soap_delete_ns1__getTask(struct soap *soap, struct ns1__getTask *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getTask(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getTaskResponse
#define SOAP_TYPE_ns1__getTaskResponse (382)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getTaskResponse(struct soap*, struct ns1__getTaskResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getTaskResponse(struct soap*, const struct ns1__getTaskResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTaskResponse(struct soap*, const char*, int, const struct ns1__getTaskResponse *, const char*);
SOAP_FMAC3 struct ns1__getTaskResponse * SOAP_FMAC4 soap_in_ns1__getTaskResponse(struct soap*, const char*, struct ns1__getTaskResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getTaskResponse(struct soap*, const struct ns1__getTaskResponse *, const char*, const char*);

#ifndef soap_write_ns1__getTaskResponse
#define soap_write_ns1__getTaskResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getTaskResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getTaskResponse(soap, data, "ns1:getTaskResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getTaskResponse * SOAP_FMAC4 soap_get_ns1__getTaskResponse(struct soap*, struct ns1__getTaskResponse *, const char*, const char*);

#ifndef soap_read_ns1__getTaskResponse
#define soap_read_ns1__getTaskResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getTaskResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getTaskResponse * SOAP_FMAC2 soap_instantiate_ns1__getTaskResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getTaskResponse * soap_new_ns1__getTaskResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getTaskResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getTaskResponse * soap_new_req_ns1__getTaskResponse(struct soap *soap) { struct ns1__getTaskResponse *_p = soap_instantiate_ns1__getTaskResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTaskResponse(soap, _p); } return _p; }

inline struct ns1__getTaskResponse * soap_new_set_ns1__getTaskResponse(struct soap *soap, ns1__CTask *pTask) { struct ns1__getTaskResponse *_p = soap_instantiate_ns1__getTaskResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTaskResponse(soap, _p); _p->pTask = pTask; } return _p; }

inline void soap_delete_ns1__getTaskResponse(struct soap *soap, struct ns1__getTaskResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getTaskResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getDefectAttachment
#define SOAP_TYPE_ns1__getDefectAttachment (381)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getDefectAttachment(struct soap*, struct ns1__getDefectAttachment *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getDefectAttachment(struct soap*, const struct ns1__getDefectAttachment *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getDefectAttachment(struct soap*, const char*, int, const struct ns1__getDefectAttachment *, const char*);
SOAP_FMAC3 struct ns1__getDefectAttachment * SOAP_FMAC4 soap_in_ns1__getDefectAttachment(struct soap*, const char*, struct ns1__getDefectAttachment *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getDefectAttachment(struct soap*, const struct ns1__getDefectAttachment *, const char*, const char*);

#ifndef soap_write_ns1__getDefectAttachment
#define soap_write_ns1__getDefectAttachment(soap, data) ( soap_begin(soap), soap_serialize_ns1__getDefectAttachment(soap, data), soap_begin_send(soap) || soap_put_ns1__getDefectAttachment(soap, data, "ns1:getDefectAttachment", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getDefectAttachment * SOAP_FMAC4 soap_get_ns1__getDefectAttachment(struct soap*, struct ns1__getDefectAttachment *, const char*, const char*);

#ifndef soap_read_ns1__getDefectAttachment
#define soap_read_ns1__getDefectAttachment(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getDefectAttachment(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getDefectAttachment * SOAP_FMAC2 soap_instantiate_ns1__getDefectAttachment(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getDefectAttachment * soap_new_ns1__getDefectAttachment(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getDefectAttachment(soap, n, NULL, NULL, NULL); }

inline struct ns1__getDefectAttachment * soap_new_req_ns1__getDefectAttachment(struct soap *soap, LONG64 cookie) { struct ns1__getDefectAttachment *_p = soap_instantiate_ns1__getDefectAttachment(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDefectAttachment(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__getDefectAttachment * soap_new_set_ns1__getDefectAttachment(struct soap *soap, LONG64 cookie, char *pszArchiveName) { struct ns1__getDefectAttachment *_p = soap_instantiate_ns1__getDefectAttachment(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDefectAttachment(soap, _p); _p->cookie = cookie; _p->pszArchiveName = pszArchiveName; } return _p; }

inline void soap_delete_ns1__getDefectAttachment(struct soap *soap, struct ns1__getDefectAttachment *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getDefectAttachment(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getDefectAttachmentResponse
#define SOAP_TYPE_ns1__getDefectAttachmentResponse (378)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getDefectAttachmentResponse(struct soap*, struct ns1__getDefectAttachmentResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getDefectAttachmentResponse(struct soap*, const struct ns1__getDefectAttachmentResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getDefectAttachmentResponse(struct soap*, const char*, int, const struct ns1__getDefectAttachmentResponse *, const char*);
SOAP_FMAC3 struct ns1__getDefectAttachmentResponse * SOAP_FMAC4 soap_in_ns1__getDefectAttachmentResponse(struct soap*, const char*, struct ns1__getDefectAttachmentResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getDefectAttachmentResponse(struct soap*, const struct ns1__getDefectAttachmentResponse *, const char*, const char*);

#ifndef soap_write_ns1__getDefectAttachmentResponse
#define soap_write_ns1__getDefectAttachmentResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getDefectAttachmentResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getDefectAttachmentResponse(soap, data, "ns1:getDefectAttachmentResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getDefectAttachmentResponse * SOAP_FMAC4 soap_get_ns1__getDefectAttachmentResponse(struct soap*, struct ns1__getDefectAttachmentResponse *, const char*, const char*);

#ifndef soap_read_ns1__getDefectAttachmentResponse
#define soap_read_ns1__getDefectAttachmentResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getDefectAttachmentResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getDefectAttachmentResponse * SOAP_FMAC2 soap_instantiate_ns1__getDefectAttachmentResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getDefectAttachmentResponse * soap_new_ns1__getDefectAttachmentResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getDefectAttachmentResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getDefectAttachmentResponse * soap_new_req_ns1__getDefectAttachmentResponse(struct soap *soap) { struct ns1__getDefectAttachmentResponse *_p = soap_instantiate_ns1__getDefectAttachmentResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDefectAttachmentResponse(soap, _p); } return _p; }

inline struct ns1__getDefectAttachmentResponse * soap_new_set_ns1__getDefectAttachmentResponse(struct soap *soap, ns1__CFileAttachment *pAttachment) { struct ns1__getDefectAttachmentResponse *_p = soap_instantiate_ns1__getDefectAttachmentResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDefectAttachmentResponse(soap, _p); _p->pAttachment = pAttachment; } return _p; }

inline void soap_delete_ns1__getDefectAttachmentResponse(struct soap *soap, struct ns1__getDefectAttachmentResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getDefectAttachmentResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getAttachment
#define SOAP_TYPE_ns1__getAttachment (377)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getAttachment(struct soap*, struct ns1__getAttachment *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getAttachment(struct soap*, const struct ns1__getAttachment *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getAttachment(struct soap*, const char*, int, const struct ns1__getAttachment *, const char*);
SOAP_FMAC3 struct ns1__getAttachment * SOAP_FMAC4 soap_in_ns1__getAttachment(struct soap*, const char*, struct ns1__getAttachment *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getAttachment(struct soap*, const struct ns1__getAttachment *, const char*, const char*);

#ifndef soap_write_ns1__getAttachment
#define soap_write_ns1__getAttachment(soap, data) ( soap_begin(soap), soap_serialize_ns1__getAttachment(soap, data), soap_begin_send(soap) || soap_put_ns1__getAttachment(soap, data, "ns1:getAttachment", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getAttachment * SOAP_FMAC4 soap_get_ns1__getAttachment(struct soap*, struct ns1__getAttachment *, const char*, const char*);

#ifndef soap_read_ns1__getAttachment
#define soap_read_ns1__getAttachment(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getAttachment(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getAttachment * SOAP_FMAC2 soap_instantiate_ns1__getAttachment(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getAttachment * soap_new_ns1__getAttachment(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getAttachment(soap, n, NULL, NULL, NULL); }

inline struct ns1__getAttachment * soap_new_req_ns1__getAttachment(struct soap *soap, LONG64 cookie, LONG64 recordID, LONG64 eventID) { struct ns1__getAttachment *_p = soap_instantiate_ns1__getAttachment(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getAttachment(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->eventID = eventID; } return _p; }

inline struct ns1__getAttachment * soap_new_set_ns1__getAttachment(struct soap *soap, LONG64 cookie, char *tablename, LONG64 recordID, LONG64 eventID, char *pszArchiveName) { struct ns1__getAttachment *_p = soap_instantiate_ns1__getAttachment(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getAttachment(soap, _p); _p->cookie = cookie; _p->tablename = tablename; _p->recordID = recordID; _p->eventID = eventID; _p->pszArchiveName = pszArchiveName; } return _p; }

inline void soap_delete_ns1__getAttachment(struct soap *soap, struct ns1__getAttachment *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getAttachment(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getAttachmentResponse
#define SOAP_TYPE_ns1__getAttachmentResponse (374)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getAttachmentResponse(struct soap*, struct ns1__getAttachmentResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getAttachmentResponse(struct soap*, const struct ns1__getAttachmentResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getAttachmentResponse(struct soap*, const char*, int, const struct ns1__getAttachmentResponse *, const char*);
SOAP_FMAC3 struct ns1__getAttachmentResponse * SOAP_FMAC4 soap_in_ns1__getAttachmentResponse(struct soap*, const char*, struct ns1__getAttachmentResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getAttachmentResponse(struct soap*, const struct ns1__getAttachmentResponse *, const char*, const char*);

#ifndef soap_write_ns1__getAttachmentResponse
#define soap_write_ns1__getAttachmentResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getAttachmentResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getAttachmentResponse(soap, data, "ns1:getAttachmentResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getAttachmentResponse * SOAP_FMAC4 soap_get_ns1__getAttachmentResponse(struct soap*, struct ns1__getAttachmentResponse *, const char*, const char*);

#ifndef soap_read_ns1__getAttachmentResponse
#define soap_read_ns1__getAttachmentResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getAttachmentResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getAttachmentResponse * SOAP_FMAC2 soap_instantiate_ns1__getAttachmentResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getAttachmentResponse * soap_new_ns1__getAttachmentResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getAttachmentResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getAttachmentResponse * soap_new_req_ns1__getAttachmentResponse(struct soap *soap) { struct ns1__getAttachmentResponse *_p = soap_instantiate_ns1__getAttachmentResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getAttachmentResponse(soap, _p); } return _p; }

inline struct ns1__getAttachmentResponse * soap_new_set_ns1__getAttachmentResponse(struct soap *soap, ns1__CFileAttachment *pAttachment) { struct ns1__getAttachmentResponse *_p = soap_instantiate_ns1__getAttachmentResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getAttachmentResponse(soap, _p); _p->pAttachment = pAttachment; } return _p; }

inline void soap_delete_ns1__getAttachmentResponse(struct soap *soap, struct ns1__getAttachmentResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getAttachmentResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__cancelSaveDefect
#define SOAP_TYPE_ns1__cancelSaveDefect (373)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__cancelSaveDefect(struct soap*, struct ns1__cancelSaveDefect *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__cancelSaveDefect(struct soap*, const struct ns1__cancelSaveDefect *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__cancelSaveDefect(struct soap*, const char*, int, const struct ns1__cancelSaveDefect *, const char*);
SOAP_FMAC3 struct ns1__cancelSaveDefect * SOAP_FMAC4 soap_in_ns1__cancelSaveDefect(struct soap*, const char*, struct ns1__cancelSaveDefect *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__cancelSaveDefect(struct soap*, const struct ns1__cancelSaveDefect *, const char*, const char*);

#ifndef soap_write_ns1__cancelSaveDefect
#define soap_write_ns1__cancelSaveDefect(soap, data) ( soap_begin(soap), soap_serialize_ns1__cancelSaveDefect(soap, data), soap_begin_send(soap) || soap_put_ns1__cancelSaveDefect(soap, data, "ns1:cancelSaveDefect", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__cancelSaveDefect * SOAP_FMAC4 soap_get_ns1__cancelSaveDefect(struct soap*, struct ns1__cancelSaveDefect *, const char*, const char*);

#ifndef soap_read_ns1__cancelSaveDefect
#define soap_read_ns1__cancelSaveDefect(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__cancelSaveDefect(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__cancelSaveDefect * SOAP_FMAC2 soap_instantiate_ns1__cancelSaveDefect(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__cancelSaveDefect * soap_new_ns1__cancelSaveDefect(struct soap *soap, int n = -1) { return soap_instantiate_ns1__cancelSaveDefect(soap, n, NULL, NULL, NULL); }

inline struct ns1__cancelSaveDefect * soap_new_req_ns1__cancelSaveDefect(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__cancelSaveDefect *_p = soap_instantiate_ns1__cancelSaveDefect(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveDefect(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline struct ns1__cancelSaveDefect * soap_new_set_ns1__cancelSaveDefect(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__cancelSaveDefect *_p = soap_instantiate_ns1__cancelSaveDefect(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveDefect(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__cancelSaveDefect(struct soap *soap, struct ns1__cancelSaveDefect *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__cancelSaveDefect(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__cancelSaveDefectResponse
#define SOAP_TYPE_ns1__cancelSaveDefectResponse (372)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__cancelSaveDefectResponse(struct soap*, struct ns1__cancelSaveDefectResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__cancelSaveDefectResponse(struct soap*, const struct ns1__cancelSaveDefectResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__cancelSaveDefectResponse(struct soap*, const char*, int, const struct ns1__cancelSaveDefectResponse *, const char*);
SOAP_FMAC3 struct ns1__cancelSaveDefectResponse * SOAP_FMAC4 soap_in_ns1__cancelSaveDefectResponse(struct soap*, const char*, struct ns1__cancelSaveDefectResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__cancelSaveDefectResponse(struct soap*, const struct ns1__cancelSaveDefectResponse *, const char*, const char*);

#ifndef soap_write_ns1__cancelSaveDefectResponse
#define soap_write_ns1__cancelSaveDefectResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__cancelSaveDefectResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__cancelSaveDefectResponse(soap, data, "ns1:cancelSaveDefectResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__cancelSaveDefectResponse * SOAP_FMAC4 soap_get_ns1__cancelSaveDefectResponse(struct soap*, struct ns1__cancelSaveDefectResponse *, const char*, const char*);

#ifndef soap_read_ns1__cancelSaveDefectResponse
#define soap_read_ns1__cancelSaveDefectResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__cancelSaveDefectResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__cancelSaveDefectResponse * SOAP_FMAC2 soap_instantiate_ns1__cancelSaveDefectResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__cancelSaveDefectResponse * soap_new_ns1__cancelSaveDefectResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__cancelSaveDefectResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__cancelSaveDefectResponse * soap_new_req_ns1__cancelSaveDefectResponse(struct soap *soap, int result) { struct ns1__cancelSaveDefectResponse *_p = soap_instantiate_ns1__cancelSaveDefectResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveDefectResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__cancelSaveDefectResponse * soap_new_set_ns1__cancelSaveDefectResponse(struct soap *soap, int result) { struct ns1__cancelSaveDefectResponse *_p = soap_instantiate_ns1__cancelSaveDefectResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveDefectResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__cancelSaveDefectResponse(struct soap *soap, struct ns1__cancelSaveDefectResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__cancelSaveDefectResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveDefect
#define SOAP_TYPE_ns1__saveDefect (370)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveDefect(struct soap*, struct ns1__saveDefect *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveDefect(struct soap*, const struct ns1__saveDefect *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveDefect(struct soap*, const char*, int, const struct ns1__saveDefect *, const char*);
SOAP_FMAC3 struct ns1__saveDefect * SOAP_FMAC4 soap_in_ns1__saveDefect(struct soap*, const char*, struct ns1__saveDefect *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveDefect(struct soap*, const struct ns1__saveDefect *, const char*, const char*);

#ifndef soap_write_ns1__saveDefect
#define soap_write_ns1__saveDefect(soap, data) ( soap_begin(soap), soap_serialize_ns1__saveDefect(soap, data), soap_begin_send(soap) || soap_put_ns1__saveDefect(soap, data, "ns1:saveDefect", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__saveDefect * SOAP_FMAC4 soap_get_ns1__saveDefect(struct soap*, struct ns1__saveDefect *, const char*, const char*);

#ifndef soap_read_ns1__saveDefect
#define soap_read_ns1__saveDefect(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveDefect(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__saveDefect * SOAP_FMAC2 soap_instantiate_ns1__saveDefect(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveDefect * soap_new_ns1__saveDefect(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveDefect(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveDefect * soap_new_req_ns1__saveDefect(struct soap *soap, LONG64 cookie) { struct ns1__saveDefect *_p = soap_instantiate_ns1__saveDefect(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveDefect(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__saveDefect * soap_new_set_ns1__saveDefect(struct soap *soap, LONG64 cookie, ns1__CDefect *pDefect) { struct ns1__saveDefect *_p = soap_instantiate_ns1__saveDefect(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveDefect(soap, _p); _p->cookie = cookie; _p->pDefect = pDefect; } return _p; }

inline void soap_delete_ns1__saveDefect(struct soap *soap, struct ns1__saveDefect *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveDefect(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveDefectResponse
#define SOAP_TYPE_ns1__saveDefectResponse (369)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveDefectResponse(struct soap*, struct ns1__saveDefectResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveDefectResponse(struct soap*, const struct ns1__saveDefectResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveDefectResponse(struct soap*, const char*, int, const struct ns1__saveDefectResponse *, const char*);
SOAP_FMAC3 struct ns1__saveDefectResponse * SOAP_FMAC4 soap_in_ns1__saveDefectResponse(struct soap*, const char*, struct ns1__saveDefectResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveDefectResponse(struct soap*, const struct ns1__saveDefectResponse *, const char*, const char*);

#ifndef soap_write_ns1__saveDefectResponse
#define soap_write_ns1__saveDefectResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__saveDefectResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__saveDefectResponse(soap, data, "ns1:saveDefectResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__saveDefectResponse * SOAP_FMAC4 soap_get_ns1__saveDefectResponse(struct soap*, struct ns1__saveDefectResponse *, const char*, const char*);

#ifndef soap_read_ns1__saveDefectResponse
#define soap_read_ns1__saveDefectResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveDefectResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__saveDefectResponse * SOAP_FMAC2 soap_instantiate_ns1__saveDefectResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveDefectResponse * soap_new_ns1__saveDefectResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveDefectResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveDefectResponse * soap_new_req_ns1__saveDefectResponse(struct soap *soap, int result) { struct ns1__saveDefectResponse *_p = soap_instantiate_ns1__saveDefectResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveDefectResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__saveDefectResponse * soap_new_set_ns1__saveDefectResponse(struct soap *soap, int result) { struct ns1__saveDefectResponse *_p = soap_instantiate_ns1__saveDefectResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveDefectResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__saveDefectResponse(struct soap *soap, struct ns1__saveDefectResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveDefectResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editDefectByRecordID
#define SOAP_TYPE_ns1__editDefectByRecordID (367)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editDefectByRecordID(struct soap*, struct ns1__editDefectByRecordID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editDefectByRecordID(struct soap*, const struct ns1__editDefectByRecordID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editDefectByRecordID(struct soap*, const char*, int, const struct ns1__editDefectByRecordID *, const char*);
SOAP_FMAC3 struct ns1__editDefectByRecordID * SOAP_FMAC4 soap_in_ns1__editDefectByRecordID(struct soap*, const char*, struct ns1__editDefectByRecordID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editDefectByRecordID(struct soap*, const struct ns1__editDefectByRecordID *, const char*, const char*);

#ifndef soap_write_ns1__editDefectByRecordID
#define soap_write_ns1__editDefectByRecordID(soap, data) ( soap_begin(soap), soap_serialize_ns1__editDefectByRecordID(soap, data), soap_begin_send(soap) || soap_put_ns1__editDefectByRecordID(soap, data, "ns1:editDefectByRecordID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editDefectByRecordID * SOAP_FMAC4 soap_get_ns1__editDefectByRecordID(struct soap*, struct ns1__editDefectByRecordID *, const char*, const char*);

#ifndef soap_read_ns1__editDefectByRecordID
#define soap_read_ns1__editDefectByRecordID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editDefectByRecordID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editDefectByRecordID * SOAP_FMAC2 soap_instantiate_ns1__editDefectByRecordID(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editDefectByRecordID * soap_new_ns1__editDefectByRecordID(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editDefectByRecordID(soap, n, NULL, NULL, NULL); }

inline struct ns1__editDefectByRecordID * soap_new_req_ns1__editDefectByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments) { struct ns1__editDefectByRecordID *_p = soap_instantiate_ns1__editDefectByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editDefectByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline struct ns1__editDefectByRecordID * soap_new_set_ns1__editDefectByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments) { struct ns1__editDefectByRecordID *_p = soap_instantiate_ns1__editDefectByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editDefectByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline void soap_delete_ns1__editDefectByRecordID(struct soap *soap, struct ns1__editDefectByRecordID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editDefectByRecordID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editDefectByRecordIDResponse
#define SOAP_TYPE_ns1__editDefectByRecordIDResponse (364)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editDefectByRecordIDResponse(struct soap*, struct ns1__editDefectByRecordIDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editDefectByRecordIDResponse(struct soap*, const struct ns1__editDefectByRecordIDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editDefectByRecordIDResponse(struct soap*, const char*, int, const struct ns1__editDefectByRecordIDResponse *, const char*);
SOAP_FMAC3 struct ns1__editDefectByRecordIDResponse * SOAP_FMAC4 soap_in_ns1__editDefectByRecordIDResponse(struct soap*, const char*, struct ns1__editDefectByRecordIDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editDefectByRecordIDResponse(struct soap*, const struct ns1__editDefectByRecordIDResponse *, const char*, const char*);

#ifndef soap_write_ns1__editDefectByRecordIDResponse
#define soap_write_ns1__editDefectByRecordIDResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__editDefectByRecordIDResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__editDefectByRecordIDResponse(soap, data, "ns1:editDefectByRecordIDResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editDefectByRecordIDResponse * SOAP_FMAC4 soap_get_ns1__editDefectByRecordIDResponse(struct soap*, struct ns1__editDefectByRecordIDResponse *, const char*, const char*);

#ifndef soap_read_ns1__editDefectByRecordIDResponse
#define soap_read_ns1__editDefectByRecordIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editDefectByRecordIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editDefectByRecordIDResponse * SOAP_FMAC2 soap_instantiate_ns1__editDefectByRecordIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editDefectByRecordIDResponse * soap_new_ns1__editDefectByRecordIDResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editDefectByRecordIDResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__editDefectByRecordIDResponse * soap_new_req_ns1__editDefectByRecordIDResponse(struct soap *soap) { struct ns1__editDefectByRecordIDResponse *_p = soap_instantiate_ns1__editDefectByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editDefectByRecordIDResponse(soap, _p); } return _p; }

inline struct ns1__editDefectByRecordIDResponse * soap_new_set_ns1__editDefectByRecordIDResponse(struct soap *soap, ns1__CDefect *pDefect) { struct ns1__editDefectByRecordIDResponse *_p = soap_instantiate_ns1__editDefectByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editDefectByRecordIDResponse(soap, _p); _p->pDefect = pDefect; } return _p; }

inline void soap_delete_ns1__editDefectByRecordIDResponse(struct soap *soap, struct ns1__editDefectByRecordIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editDefectByRecordIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editDefect
#define SOAP_TYPE_ns1__editDefect (363)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editDefect(struct soap*, struct ns1__editDefect *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editDefect(struct soap*, const struct ns1__editDefect *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editDefect(struct soap*, const char*, int, const struct ns1__editDefect *, const char*);
SOAP_FMAC3 struct ns1__editDefect * SOAP_FMAC4 soap_in_ns1__editDefect(struct soap*, const char*, struct ns1__editDefect *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editDefect(struct soap*, const struct ns1__editDefect *, const char*, const char*);

#ifndef soap_write_ns1__editDefect
#define soap_write_ns1__editDefect(soap, data) ( soap_begin(soap), soap_serialize_ns1__editDefect(soap, data), soap_begin_send(soap) || soap_put_ns1__editDefect(soap, data, "ns1:editDefect", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editDefect * SOAP_FMAC4 soap_get_ns1__editDefect(struct soap*, struct ns1__editDefect *, const char*, const char*);

#ifndef soap_read_ns1__editDefect
#define soap_read_ns1__editDefect(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editDefect(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editDefect * SOAP_FMAC2 soap_instantiate_ns1__editDefect(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editDefect * soap_new_ns1__editDefect(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editDefect(soap, n, NULL, NULL, NULL); }

inline struct ns1__editDefect * soap_new_req_ns1__editDefect(struct soap *soap, LONG64 cookie, LONG64 defectNumber, bool bDownloadAttachments) { struct ns1__editDefect *_p = soap_instantiate_ns1__editDefect(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editDefect(soap, _p); _p->cookie = cookie; _p->defectNumber = defectNumber; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline struct ns1__editDefect * soap_new_set_ns1__editDefect(struct soap *soap, LONG64 cookie, LONG64 defectNumber, char *summary, bool bDownloadAttachments) { struct ns1__editDefect *_p = soap_instantiate_ns1__editDefect(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editDefect(soap, _p); _p->cookie = cookie; _p->defectNumber = defectNumber; _p->summary = summary; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline void soap_delete_ns1__editDefect(struct soap *soap, struct ns1__editDefect *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editDefect(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editDefectResponse
#define SOAP_TYPE_ns1__editDefectResponse (360)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editDefectResponse(struct soap*, struct ns1__editDefectResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editDefectResponse(struct soap*, const struct ns1__editDefectResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editDefectResponse(struct soap*, const char*, int, const struct ns1__editDefectResponse *, const char*);
SOAP_FMAC3 struct ns1__editDefectResponse * SOAP_FMAC4 soap_in_ns1__editDefectResponse(struct soap*, const char*, struct ns1__editDefectResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editDefectResponse(struct soap*, const struct ns1__editDefectResponse *, const char*, const char*);

#ifndef soap_write_ns1__editDefectResponse
#define soap_write_ns1__editDefectResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__editDefectResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__editDefectResponse(soap, data, "ns1:editDefectResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editDefectResponse * SOAP_FMAC4 soap_get_ns1__editDefectResponse(struct soap*, struct ns1__editDefectResponse *, const char*, const char*);

#ifndef soap_read_ns1__editDefectResponse
#define soap_read_ns1__editDefectResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editDefectResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editDefectResponse * SOAP_FMAC2 soap_instantiate_ns1__editDefectResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editDefectResponse * soap_new_ns1__editDefectResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editDefectResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__editDefectResponse * soap_new_req_ns1__editDefectResponse(struct soap *soap) { struct ns1__editDefectResponse *_p = soap_instantiate_ns1__editDefectResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editDefectResponse(soap, _p); } return _p; }

inline struct ns1__editDefectResponse * soap_new_set_ns1__editDefectResponse(struct soap *soap, ns1__CDefect *pDefect) { struct ns1__editDefectResponse *_p = soap_instantiate_ns1__editDefectResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editDefectResponse(soap, _p); _p->pDefect = pDefect; } return _p; }

inline void soap_delete_ns1__editDefectResponse(struct soap *soap, struct ns1__editDefectResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editDefectResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteDefectByRecordID
#define SOAP_TYPE_ns1__deleteDefectByRecordID (359)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteDefectByRecordID(struct soap*, struct ns1__deleteDefectByRecordID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteDefectByRecordID(struct soap*, const struct ns1__deleteDefectByRecordID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteDefectByRecordID(struct soap*, const char*, int, const struct ns1__deleteDefectByRecordID *, const char*);
SOAP_FMAC3 struct ns1__deleteDefectByRecordID * SOAP_FMAC4 soap_in_ns1__deleteDefectByRecordID(struct soap*, const char*, struct ns1__deleteDefectByRecordID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteDefectByRecordID(struct soap*, const struct ns1__deleteDefectByRecordID *, const char*, const char*);

#ifndef soap_write_ns1__deleteDefectByRecordID
#define soap_write_ns1__deleteDefectByRecordID(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteDefectByRecordID(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteDefectByRecordID(soap, data, "ns1:deleteDefectByRecordID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteDefectByRecordID * SOAP_FMAC4 soap_get_ns1__deleteDefectByRecordID(struct soap*, struct ns1__deleteDefectByRecordID *, const char*, const char*);

#ifndef soap_read_ns1__deleteDefectByRecordID
#define soap_read_ns1__deleteDefectByRecordID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteDefectByRecordID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteDefectByRecordID * SOAP_FMAC2 soap_instantiate_ns1__deleteDefectByRecordID(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteDefectByRecordID * soap_new_ns1__deleteDefectByRecordID(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteDefectByRecordID(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteDefectByRecordID * soap_new_req_ns1__deleteDefectByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__deleteDefectByRecordID *_p = soap_instantiate_ns1__deleteDefectByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteDefectByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline struct ns1__deleteDefectByRecordID * soap_new_set_ns1__deleteDefectByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__deleteDefectByRecordID *_p = soap_instantiate_ns1__deleteDefectByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteDefectByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__deleteDefectByRecordID(struct soap *soap, struct ns1__deleteDefectByRecordID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteDefectByRecordID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteDefectByRecordIDResponse
#define SOAP_TYPE_ns1__deleteDefectByRecordIDResponse (358)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteDefectByRecordIDResponse(struct soap*, struct ns1__deleteDefectByRecordIDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteDefectByRecordIDResponse(struct soap*, const struct ns1__deleteDefectByRecordIDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteDefectByRecordIDResponse(struct soap*, const char*, int, const struct ns1__deleteDefectByRecordIDResponse *, const char*);
SOAP_FMAC3 struct ns1__deleteDefectByRecordIDResponse * SOAP_FMAC4 soap_in_ns1__deleteDefectByRecordIDResponse(struct soap*, const char*, struct ns1__deleteDefectByRecordIDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteDefectByRecordIDResponse(struct soap*, const struct ns1__deleteDefectByRecordIDResponse *, const char*, const char*);

#ifndef soap_write_ns1__deleteDefectByRecordIDResponse
#define soap_write_ns1__deleteDefectByRecordIDResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteDefectByRecordIDResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteDefectByRecordIDResponse(soap, data, "ns1:deleteDefectByRecordIDResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteDefectByRecordIDResponse * SOAP_FMAC4 soap_get_ns1__deleteDefectByRecordIDResponse(struct soap*, struct ns1__deleteDefectByRecordIDResponse *, const char*, const char*);

#ifndef soap_read_ns1__deleteDefectByRecordIDResponse
#define soap_read_ns1__deleteDefectByRecordIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteDefectByRecordIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteDefectByRecordIDResponse * SOAP_FMAC2 soap_instantiate_ns1__deleteDefectByRecordIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteDefectByRecordIDResponse * soap_new_ns1__deleteDefectByRecordIDResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteDefectByRecordIDResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteDefectByRecordIDResponse * soap_new_req_ns1__deleteDefectByRecordIDResponse(struct soap *soap, int result) { struct ns1__deleteDefectByRecordIDResponse *_p = soap_instantiate_ns1__deleteDefectByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteDefectByRecordIDResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__deleteDefectByRecordIDResponse * soap_new_set_ns1__deleteDefectByRecordIDResponse(struct soap *soap, int result) { struct ns1__deleteDefectByRecordIDResponse *_p = soap_instantiate_ns1__deleteDefectByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteDefectByRecordIDResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__deleteDefectByRecordIDResponse(struct soap *soap, struct ns1__deleteDefectByRecordIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteDefectByRecordIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteDefect
#define SOAP_TYPE_ns1__deleteDefect (356)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteDefect(struct soap*, struct ns1__deleteDefect *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteDefect(struct soap*, const struct ns1__deleteDefect *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteDefect(struct soap*, const char*, int, const struct ns1__deleteDefect *, const char*);
SOAP_FMAC3 struct ns1__deleteDefect * SOAP_FMAC4 soap_in_ns1__deleteDefect(struct soap*, const char*, struct ns1__deleteDefect *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteDefect(struct soap*, const struct ns1__deleteDefect *, const char*, const char*);

#ifndef soap_write_ns1__deleteDefect
#define soap_write_ns1__deleteDefect(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteDefect(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteDefect(soap, data, "ns1:deleteDefect", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteDefect * SOAP_FMAC4 soap_get_ns1__deleteDefect(struct soap*, struct ns1__deleteDefect *, const char*, const char*);

#ifndef soap_read_ns1__deleteDefect
#define soap_read_ns1__deleteDefect(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteDefect(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteDefect * SOAP_FMAC2 soap_instantiate_ns1__deleteDefect(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteDefect * soap_new_ns1__deleteDefect(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteDefect(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteDefect * soap_new_req_ns1__deleteDefect(struct soap *soap, LONG64 cookie, LONG64 defectNumber) { struct ns1__deleteDefect *_p = soap_instantiate_ns1__deleteDefect(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteDefect(soap, _p); _p->cookie = cookie; _p->defectNumber = defectNumber; } return _p; }

inline struct ns1__deleteDefect * soap_new_set_ns1__deleteDefect(struct soap *soap, LONG64 cookie, LONG64 defectNumber, char *summary) { struct ns1__deleteDefect *_p = soap_instantiate_ns1__deleteDefect(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteDefect(soap, _p); _p->cookie = cookie; _p->defectNumber = defectNumber; _p->summary = summary; } return _p; }

inline void soap_delete_ns1__deleteDefect(struct soap *soap, struct ns1__deleteDefect *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteDefect(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteDefectResponse
#define SOAP_TYPE_ns1__deleteDefectResponse (355)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteDefectResponse(struct soap*, struct ns1__deleteDefectResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteDefectResponse(struct soap*, const struct ns1__deleteDefectResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteDefectResponse(struct soap*, const char*, int, const struct ns1__deleteDefectResponse *, const char*);
SOAP_FMAC3 struct ns1__deleteDefectResponse * SOAP_FMAC4 soap_in_ns1__deleteDefectResponse(struct soap*, const char*, struct ns1__deleteDefectResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteDefectResponse(struct soap*, const struct ns1__deleteDefectResponse *, const char*, const char*);

#ifndef soap_write_ns1__deleteDefectResponse
#define soap_write_ns1__deleteDefectResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteDefectResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteDefectResponse(soap, data, "ns1:deleteDefectResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteDefectResponse * SOAP_FMAC4 soap_get_ns1__deleteDefectResponse(struct soap*, struct ns1__deleteDefectResponse *, const char*, const char*);

#ifndef soap_read_ns1__deleteDefectResponse
#define soap_read_ns1__deleteDefectResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteDefectResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteDefectResponse * SOAP_FMAC2 soap_instantiate_ns1__deleteDefectResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteDefectResponse * soap_new_ns1__deleteDefectResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteDefectResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteDefectResponse * soap_new_req_ns1__deleteDefectResponse(struct soap *soap, int result) { struct ns1__deleteDefectResponse *_p = soap_instantiate_ns1__deleteDefectResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteDefectResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__deleteDefectResponse * soap_new_set_ns1__deleteDefectResponse(struct soap *soap, int result) { struct ns1__deleteDefectResponse *_p = soap_instantiate_ns1__deleteDefectResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteDefectResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__deleteDefectResponse(struct soap *soap, struct ns1__deleteDefectResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteDefectResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__addDefectWithLink
#define SOAP_TYPE_ns1__addDefectWithLink (353)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addDefectWithLink(struct soap*, struct ns1__addDefectWithLink *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addDefectWithLink(struct soap*, const struct ns1__addDefectWithLink *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addDefectWithLink(struct soap*, const char*, int, const struct ns1__addDefectWithLink *, const char*);
SOAP_FMAC3 struct ns1__addDefectWithLink * SOAP_FMAC4 soap_in_ns1__addDefectWithLink(struct soap*, const char*, struct ns1__addDefectWithLink *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addDefectWithLink(struct soap*, const struct ns1__addDefectWithLink *, const char*, const char*);

#ifndef soap_write_ns1__addDefectWithLink
#define soap_write_ns1__addDefectWithLink(soap, data) ( soap_begin(soap), soap_serialize_ns1__addDefectWithLink(soap, data), soap_begin_send(soap) || soap_put_ns1__addDefectWithLink(soap, data, "ns1:addDefectWithLink", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__addDefectWithLink * SOAP_FMAC4 soap_get_ns1__addDefectWithLink(struct soap*, struct ns1__addDefectWithLink *, const char*, const char*);

#ifndef soap_read_ns1__addDefectWithLink
#define soap_read_ns1__addDefectWithLink(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__addDefectWithLink(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__addDefectWithLink * SOAP_FMAC2 soap_instantiate_ns1__addDefectWithLink(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__addDefectWithLink * soap_new_ns1__addDefectWithLink(struct soap *soap, int n = -1) { return soap_instantiate_ns1__addDefectWithLink(soap, n, NULL, NULL, NULL); }

inline struct ns1__addDefectWithLink * soap_new_req_ns1__addDefectWithLink(struct soap *soap, LONG64 cookie, LONG64 testRunRecordID) { struct ns1__addDefectWithLink *_p = soap_instantiate_ns1__addDefectWithLink(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addDefectWithLink(soap, _p); _p->cookie = cookie; _p->testRunRecordID = testRunRecordID; } return _p; }

inline struct ns1__addDefectWithLink * soap_new_set_ns1__addDefectWithLink(struct soap *soap, LONG64 cookie, ns1__CDefect *pDefect, LONG64 testRunRecordID) { struct ns1__addDefectWithLink *_p = soap_instantiate_ns1__addDefectWithLink(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addDefectWithLink(soap, _p); _p->cookie = cookie; _p->pDefect = pDefect; _p->testRunRecordID = testRunRecordID; } return _p; }

inline void soap_delete_ns1__addDefectWithLink(struct soap *soap, struct ns1__addDefectWithLink *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__addDefectWithLink(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__addDefectWithLinkResponse
#define SOAP_TYPE_ns1__addDefectWithLinkResponse (352)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addDefectWithLinkResponse(struct soap*, struct ns1__addDefectWithLinkResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addDefectWithLinkResponse(struct soap*, const struct ns1__addDefectWithLinkResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addDefectWithLinkResponse(struct soap*, const char*, int, const struct ns1__addDefectWithLinkResponse *, const char*);
SOAP_FMAC3 struct ns1__addDefectWithLinkResponse * SOAP_FMAC4 soap_in_ns1__addDefectWithLinkResponse(struct soap*, const char*, struct ns1__addDefectWithLinkResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addDefectWithLinkResponse(struct soap*, const struct ns1__addDefectWithLinkResponse *, const char*, const char*);

#ifndef soap_write_ns1__addDefectWithLinkResponse
#define soap_write_ns1__addDefectWithLinkResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__addDefectWithLinkResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__addDefectWithLinkResponse(soap, data, "ns1:addDefectWithLinkResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__addDefectWithLinkResponse * SOAP_FMAC4 soap_get_ns1__addDefectWithLinkResponse(struct soap*, struct ns1__addDefectWithLinkResponse *, const char*, const char*);

#ifndef soap_read_ns1__addDefectWithLinkResponse
#define soap_read_ns1__addDefectWithLinkResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__addDefectWithLinkResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__addDefectWithLinkResponse * SOAP_FMAC2 soap_instantiate_ns1__addDefectWithLinkResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__addDefectWithLinkResponse * soap_new_ns1__addDefectWithLinkResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__addDefectWithLinkResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__addDefectWithLinkResponse * soap_new_req_ns1__addDefectWithLinkResponse(struct soap *soap, LONG64 recordID) { struct ns1__addDefectWithLinkResponse *_p = soap_instantiate_ns1__addDefectWithLinkResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addDefectWithLinkResponse(soap, _p); _p->recordID = recordID; } return _p; }

inline struct ns1__addDefectWithLinkResponse * soap_new_set_ns1__addDefectWithLinkResponse(struct soap *soap, LONG64 recordID) { struct ns1__addDefectWithLinkResponse *_p = soap_instantiate_ns1__addDefectWithLinkResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addDefectWithLinkResponse(soap, _p); _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__addDefectWithLinkResponse(struct soap *soap, struct ns1__addDefectWithLinkResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__addDefectWithLinkResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__addDefect
#define SOAP_TYPE_ns1__addDefect (350)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addDefect(struct soap*, struct ns1__addDefect *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addDefect(struct soap*, const struct ns1__addDefect *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addDefect(struct soap*, const char*, int, const struct ns1__addDefect *, const char*);
SOAP_FMAC3 struct ns1__addDefect * SOAP_FMAC4 soap_in_ns1__addDefect(struct soap*, const char*, struct ns1__addDefect *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addDefect(struct soap*, const struct ns1__addDefect *, const char*, const char*);

#ifndef soap_write_ns1__addDefect
#define soap_write_ns1__addDefect(soap, data) ( soap_begin(soap), soap_serialize_ns1__addDefect(soap, data), soap_begin_send(soap) || soap_put_ns1__addDefect(soap, data, "ns1:addDefect", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__addDefect * SOAP_FMAC4 soap_get_ns1__addDefect(struct soap*, struct ns1__addDefect *, const char*, const char*);

#ifndef soap_read_ns1__addDefect
#define soap_read_ns1__addDefect(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__addDefect(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__addDefect * SOAP_FMAC2 soap_instantiate_ns1__addDefect(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__addDefect * soap_new_ns1__addDefect(struct soap *soap, int n = -1) { return soap_instantiate_ns1__addDefect(soap, n, NULL, NULL, NULL); }

inline struct ns1__addDefect * soap_new_req_ns1__addDefect(struct soap *soap, LONG64 cookie) { struct ns1__addDefect *_p = soap_instantiate_ns1__addDefect(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addDefect(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__addDefect * soap_new_set_ns1__addDefect(struct soap *soap, LONG64 cookie, ns1__CDefect *pDefect) { struct ns1__addDefect *_p = soap_instantiate_ns1__addDefect(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addDefect(soap, _p); _p->cookie = cookie; _p->pDefect = pDefect; } return _p; }

inline void soap_delete_ns1__addDefect(struct soap *soap, struct ns1__addDefect *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__addDefect(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__addDefectResponse
#define SOAP_TYPE_ns1__addDefectResponse (349)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addDefectResponse(struct soap*, struct ns1__addDefectResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addDefectResponse(struct soap*, const struct ns1__addDefectResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addDefectResponse(struct soap*, const char*, int, const struct ns1__addDefectResponse *, const char*);
SOAP_FMAC3 struct ns1__addDefectResponse * SOAP_FMAC4 soap_in_ns1__addDefectResponse(struct soap*, const char*, struct ns1__addDefectResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addDefectResponse(struct soap*, const struct ns1__addDefectResponse *, const char*, const char*);

#ifndef soap_write_ns1__addDefectResponse
#define soap_write_ns1__addDefectResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__addDefectResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__addDefectResponse(soap, data, "ns1:addDefectResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__addDefectResponse * SOAP_FMAC4 soap_get_ns1__addDefectResponse(struct soap*, struct ns1__addDefectResponse *, const char*, const char*);

#ifndef soap_read_ns1__addDefectResponse
#define soap_read_ns1__addDefectResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__addDefectResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__addDefectResponse * SOAP_FMAC2 soap_instantiate_ns1__addDefectResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__addDefectResponse * soap_new_ns1__addDefectResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__addDefectResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__addDefectResponse * soap_new_req_ns1__addDefectResponse(struct soap *soap, LONG64 recordID) { struct ns1__addDefectResponse *_p = soap_instantiate_ns1__addDefectResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addDefectResponse(soap, _p); _p->recordID = recordID; } return _p; }

inline struct ns1__addDefectResponse * soap_new_set_ns1__addDefectResponse(struct soap *soap, LONG64 recordID) { struct ns1__addDefectResponse *_p = soap_instantiate_ns1__addDefectResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addDefectResponse(soap, _p); _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__addDefectResponse(struct soap *soap, struct ns1__addDefectResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__addDefectResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getDefectByRecordID
#define SOAP_TYPE_ns1__getDefectByRecordID (347)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getDefectByRecordID(struct soap*, struct ns1__getDefectByRecordID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getDefectByRecordID(struct soap*, const struct ns1__getDefectByRecordID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getDefectByRecordID(struct soap*, const char*, int, const struct ns1__getDefectByRecordID *, const char*);
SOAP_FMAC3 struct ns1__getDefectByRecordID * SOAP_FMAC4 soap_in_ns1__getDefectByRecordID(struct soap*, const char*, struct ns1__getDefectByRecordID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getDefectByRecordID(struct soap*, const struct ns1__getDefectByRecordID *, const char*, const char*);

#ifndef soap_write_ns1__getDefectByRecordID
#define soap_write_ns1__getDefectByRecordID(soap, data) ( soap_begin(soap), soap_serialize_ns1__getDefectByRecordID(soap, data), soap_begin_send(soap) || soap_put_ns1__getDefectByRecordID(soap, data, "ns1:getDefectByRecordID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getDefectByRecordID * SOAP_FMAC4 soap_get_ns1__getDefectByRecordID(struct soap*, struct ns1__getDefectByRecordID *, const char*, const char*);

#ifndef soap_read_ns1__getDefectByRecordID
#define soap_read_ns1__getDefectByRecordID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getDefectByRecordID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getDefectByRecordID * SOAP_FMAC2 soap_instantiate_ns1__getDefectByRecordID(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getDefectByRecordID * soap_new_ns1__getDefectByRecordID(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getDefectByRecordID(soap, n, NULL, NULL, NULL); }

inline struct ns1__getDefectByRecordID * soap_new_req_ns1__getDefectByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments) { struct ns1__getDefectByRecordID *_p = soap_instantiate_ns1__getDefectByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDefectByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline struct ns1__getDefectByRecordID * soap_new_set_ns1__getDefectByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments) { struct ns1__getDefectByRecordID *_p = soap_instantiate_ns1__getDefectByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDefectByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline void soap_delete_ns1__getDefectByRecordID(struct soap *soap, struct ns1__getDefectByRecordID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getDefectByRecordID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getDefectByRecordIDResponse
#define SOAP_TYPE_ns1__getDefectByRecordIDResponse (344)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getDefectByRecordIDResponse(struct soap*, struct ns1__getDefectByRecordIDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getDefectByRecordIDResponse(struct soap*, const struct ns1__getDefectByRecordIDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getDefectByRecordIDResponse(struct soap*, const char*, int, const struct ns1__getDefectByRecordIDResponse *, const char*);
SOAP_FMAC3 struct ns1__getDefectByRecordIDResponse * SOAP_FMAC4 soap_in_ns1__getDefectByRecordIDResponse(struct soap*, const char*, struct ns1__getDefectByRecordIDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getDefectByRecordIDResponse(struct soap*, const struct ns1__getDefectByRecordIDResponse *, const char*, const char*);

#ifndef soap_write_ns1__getDefectByRecordIDResponse
#define soap_write_ns1__getDefectByRecordIDResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getDefectByRecordIDResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getDefectByRecordIDResponse(soap, data, "ns1:getDefectByRecordIDResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getDefectByRecordIDResponse * SOAP_FMAC4 soap_get_ns1__getDefectByRecordIDResponse(struct soap*, struct ns1__getDefectByRecordIDResponse *, const char*, const char*);

#ifndef soap_read_ns1__getDefectByRecordIDResponse
#define soap_read_ns1__getDefectByRecordIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getDefectByRecordIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getDefectByRecordIDResponse * SOAP_FMAC2 soap_instantiate_ns1__getDefectByRecordIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getDefectByRecordIDResponse * soap_new_ns1__getDefectByRecordIDResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getDefectByRecordIDResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getDefectByRecordIDResponse * soap_new_req_ns1__getDefectByRecordIDResponse(struct soap *soap) { struct ns1__getDefectByRecordIDResponse *_p = soap_instantiate_ns1__getDefectByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDefectByRecordIDResponse(soap, _p); } return _p; }

inline struct ns1__getDefectByRecordIDResponse * soap_new_set_ns1__getDefectByRecordIDResponse(struct soap *soap, ns1__CDefect *pDefect) { struct ns1__getDefectByRecordIDResponse *_p = soap_instantiate_ns1__getDefectByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDefectByRecordIDResponse(soap, _p); _p->pDefect = pDefect; } return _p; }

inline void soap_delete_ns1__getDefectByRecordIDResponse(struct soap *soap, struct ns1__getDefectByRecordIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getDefectByRecordIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getDefect
#define SOAP_TYPE_ns1__getDefect (343)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getDefect(struct soap*, struct ns1__getDefect *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getDefect(struct soap*, const struct ns1__getDefect *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getDefect(struct soap*, const char*, int, const struct ns1__getDefect *, const char*);
SOAP_FMAC3 struct ns1__getDefect * SOAP_FMAC4 soap_in_ns1__getDefect(struct soap*, const char*, struct ns1__getDefect *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getDefect(struct soap*, const struct ns1__getDefect *, const char*, const char*);

#ifndef soap_write_ns1__getDefect
#define soap_write_ns1__getDefect(soap, data) ( soap_begin(soap), soap_serialize_ns1__getDefect(soap, data), soap_begin_send(soap) || soap_put_ns1__getDefect(soap, data, "ns1:getDefect", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getDefect * SOAP_FMAC4 soap_get_ns1__getDefect(struct soap*, struct ns1__getDefect *, const char*, const char*);

#ifndef soap_read_ns1__getDefect
#define soap_read_ns1__getDefect(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getDefect(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getDefect * SOAP_FMAC2 soap_instantiate_ns1__getDefect(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getDefect * soap_new_ns1__getDefect(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getDefect(soap, n, NULL, NULL, NULL); }

inline struct ns1__getDefect * soap_new_req_ns1__getDefect(struct soap *soap, LONG64 cookie, LONG64 defectNumber, bool bDownloadAttachments) { struct ns1__getDefect *_p = soap_instantiate_ns1__getDefect(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDefect(soap, _p); _p->cookie = cookie; _p->defectNumber = defectNumber; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline struct ns1__getDefect * soap_new_set_ns1__getDefect(struct soap *soap, LONG64 cookie, LONG64 defectNumber, char *summary, bool bDownloadAttachments) { struct ns1__getDefect *_p = soap_instantiate_ns1__getDefect(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDefect(soap, _p); _p->cookie = cookie; _p->defectNumber = defectNumber; _p->summary = summary; _p->bDownloadAttachments = bDownloadAttachments; } return _p; }

inline void soap_delete_ns1__getDefect(struct soap *soap, struct ns1__getDefect *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getDefect(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getDefectResponse
#define SOAP_TYPE_ns1__getDefectResponse (339)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getDefectResponse(struct soap*, struct ns1__getDefectResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getDefectResponse(struct soap*, const struct ns1__getDefectResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getDefectResponse(struct soap*, const char*, int, const struct ns1__getDefectResponse *, const char*);
SOAP_FMAC3 struct ns1__getDefectResponse * SOAP_FMAC4 soap_in_ns1__getDefectResponse(struct soap*, const char*, struct ns1__getDefectResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getDefectResponse(struct soap*, const struct ns1__getDefectResponse *, const char*, const char*);

#ifndef soap_write_ns1__getDefectResponse
#define soap_write_ns1__getDefectResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getDefectResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getDefectResponse(soap, data, "ns1:getDefectResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getDefectResponse * SOAP_FMAC4 soap_get_ns1__getDefectResponse(struct soap*, struct ns1__getDefectResponse *, const char*, const char*);

#ifndef soap_read_ns1__getDefectResponse
#define soap_read_ns1__getDefectResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getDefectResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getDefectResponse * SOAP_FMAC2 soap_instantiate_ns1__getDefectResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getDefectResponse * soap_new_ns1__getDefectResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getDefectResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getDefectResponse * soap_new_req_ns1__getDefectResponse(struct soap *soap) { struct ns1__getDefectResponse *_p = soap_instantiate_ns1__getDefectResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDefectResponse(soap, _p); } return _p; }

inline struct ns1__getDefectResponse * soap_new_set_ns1__getDefectResponse(struct soap *soap, ns1__CDefect *pDefect) { struct ns1__getDefectResponse *_p = soap_instantiate_ns1__getDefectResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDefectResponse(soap, _p); _p->pDefect = pDefect; } return _p; }

inline void soap_delete_ns1__getDefectResponse(struct soap *soap, struct ns1__getDefectResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getDefectResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getDefectCustomFieldsDefinitionList
#define SOAP_TYPE_ns1__getDefectCustomFieldsDefinitionList (338)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getDefectCustomFieldsDefinitionList(struct soap*, struct ns1__getDefectCustomFieldsDefinitionList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getDefectCustomFieldsDefinitionList(struct soap*, const struct ns1__getDefectCustomFieldsDefinitionList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getDefectCustomFieldsDefinitionList(struct soap*, const char*, int, const struct ns1__getDefectCustomFieldsDefinitionList *, const char*);
SOAP_FMAC3 struct ns1__getDefectCustomFieldsDefinitionList * SOAP_FMAC4 soap_in_ns1__getDefectCustomFieldsDefinitionList(struct soap*, const char*, struct ns1__getDefectCustomFieldsDefinitionList *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getDefectCustomFieldsDefinitionList(struct soap*, const struct ns1__getDefectCustomFieldsDefinitionList *, const char*, const char*);

#ifndef soap_write_ns1__getDefectCustomFieldsDefinitionList
#define soap_write_ns1__getDefectCustomFieldsDefinitionList(soap, data) ( soap_begin(soap), soap_serialize_ns1__getDefectCustomFieldsDefinitionList(soap, data), soap_begin_send(soap) || soap_put_ns1__getDefectCustomFieldsDefinitionList(soap, data, "ns1:getDefectCustomFieldsDefinitionList", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getDefectCustomFieldsDefinitionList * SOAP_FMAC4 soap_get_ns1__getDefectCustomFieldsDefinitionList(struct soap*, struct ns1__getDefectCustomFieldsDefinitionList *, const char*, const char*);

#ifndef soap_read_ns1__getDefectCustomFieldsDefinitionList
#define soap_read_ns1__getDefectCustomFieldsDefinitionList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getDefectCustomFieldsDefinitionList(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getDefectCustomFieldsDefinitionList * SOAP_FMAC2 soap_instantiate_ns1__getDefectCustomFieldsDefinitionList(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getDefectCustomFieldsDefinitionList * soap_new_ns1__getDefectCustomFieldsDefinitionList(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getDefectCustomFieldsDefinitionList(soap, n, NULL, NULL, NULL); }

inline struct ns1__getDefectCustomFieldsDefinitionList * soap_new_req_ns1__getDefectCustomFieldsDefinitionList(struct soap *soap, LONG64 cookie) { struct ns1__getDefectCustomFieldsDefinitionList *_p = soap_instantiate_ns1__getDefectCustomFieldsDefinitionList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDefectCustomFieldsDefinitionList(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__getDefectCustomFieldsDefinitionList * soap_new_set_ns1__getDefectCustomFieldsDefinitionList(struct soap *soap, LONG64 cookie) { struct ns1__getDefectCustomFieldsDefinitionList *_p = soap_instantiate_ns1__getDefectCustomFieldsDefinitionList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDefectCustomFieldsDefinitionList(soap, _p); _p->cookie = cookie; } return _p; }

inline void soap_delete_ns1__getDefectCustomFieldsDefinitionList(struct soap *soap, struct ns1__getDefectCustomFieldsDefinitionList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getDefectCustomFieldsDefinitionList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getDefectCustomFieldsDefinitionListResponse
#define SOAP_TYPE_ns1__getDefectCustomFieldsDefinitionListResponse (335)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getDefectCustomFieldsDefinitionListResponse(struct soap*, struct ns1__getDefectCustomFieldsDefinitionListResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getDefectCustomFieldsDefinitionListResponse(struct soap*, const struct ns1__getDefectCustomFieldsDefinitionListResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getDefectCustomFieldsDefinitionListResponse(struct soap*, const char*, int, const struct ns1__getDefectCustomFieldsDefinitionListResponse *, const char*);
SOAP_FMAC3 struct ns1__getDefectCustomFieldsDefinitionListResponse * SOAP_FMAC4 soap_in_ns1__getDefectCustomFieldsDefinitionListResponse(struct soap*, const char*, struct ns1__getDefectCustomFieldsDefinitionListResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getDefectCustomFieldsDefinitionListResponse(struct soap*, const struct ns1__getDefectCustomFieldsDefinitionListResponse *, const char*, const char*);

#ifndef soap_write_ns1__getDefectCustomFieldsDefinitionListResponse
#define soap_write_ns1__getDefectCustomFieldsDefinitionListResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getDefectCustomFieldsDefinitionListResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getDefectCustomFieldsDefinitionListResponse(soap, data, "ns1:getDefectCustomFieldsDefinitionListResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getDefectCustomFieldsDefinitionListResponse * SOAP_FMAC4 soap_get_ns1__getDefectCustomFieldsDefinitionListResponse(struct soap*, struct ns1__getDefectCustomFieldsDefinitionListResponse *, const char*, const char*);

#ifndef soap_read_ns1__getDefectCustomFieldsDefinitionListResponse
#define soap_read_ns1__getDefectCustomFieldsDefinitionListResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getDefectCustomFieldsDefinitionListResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getDefectCustomFieldsDefinitionListResponse * SOAP_FMAC2 soap_instantiate_ns1__getDefectCustomFieldsDefinitionListResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getDefectCustomFieldsDefinitionListResponse * soap_new_ns1__getDefectCustomFieldsDefinitionListResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getDefectCustomFieldsDefinitionListResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getDefectCustomFieldsDefinitionListResponse * soap_new_req_ns1__getDefectCustomFieldsDefinitionListResponse(struct soap *soap) { struct ns1__getDefectCustomFieldsDefinitionListResponse *_p = soap_instantiate_ns1__getDefectCustomFieldsDefinitionListResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDefectCustomFieldsDefinitionListResponse(soap, _p); } return _p; }

inline struct ns1__getDefectCustomFieldsDefinitionListResponse * soap_new_set_ns1__getDefectCustomFieldsDefinitionListResponse(struct soap *soap, ArrayOfCField *customFields) { struct ns1__getDefectCustomFieldsDefinitionListResponse *_p = soap_instantiate_ns1__getDefectCustomFieldsDefinitionListResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDefectCustomFieldsDefinitionListResponse(soap, _p); _p->customFields = customFields; } return _p; }

inline void soap_delete_ns1__getDefectCustomFieldsDefinitionListResponse(struct soap *soap, struct ns1__getDefectCustomFieldsDefinitionListResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getDefectCustomFieldsDefinitionListResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getCustomFieldsDefinitionList
#define SOAP_TYPE_ns1__getCustomFieldsDefinitionList (334)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getCustomFieldsDefinitionList(struct soap*, struct ns1__getCustomFieldsDefinitionList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getCustomFieldsDefinitionList(struct soap*, const struct ns1__getCustomFieldsDefinitionList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getCustomFieldsDefinitionList(struct soap*, const char*, int, const struct ns1__getCustomFieldsDefinitionList *, const char*);
SOAP_FMAC3 struct ns1__getCustomFieldsDefinitionList * SOAP_FMAC4 soap_in_ns1__getCustomFieldsDefinitionList(struct soap*, const char*, struct ns1__getCustomFieldsDefinitionList *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getCustomFieldsDefinitionList(struct soap*, const struct ns1__getCustomFieldsDefinitionList *, const char*, const char*);

#ifndef soap_write_ns1__getCustomFieldsDefinitionList
#define soap_write_ns1__getCustomFieldsDefinitionList(soap, data) ( soap_begin(soap), soap_serialize_ns1__getCustomFieldsDefinitionList(soap, data), soap_begin_send(soap) || soap_put_ns1__getCustomFieldsDefinitionList(soap, data, "ns1:getCustomFieldsDefinitionList", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getCustomFieldsDefinitionList * SOAP_FMAC4 soap_get_ns1__getCustomFieldsDefinitionList(struct soap*, struct ns1__getCustomFieldsDefinitionList *, const char*, const char*);

#ifndef soap_read_ns1__getCustomFieldsDefinitionList
#define soap_read_ns1__getCustomFieldsDefinitionList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getCustomFieldsDefinitionList(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getCustomFieldsDefinitionList * SOAP_FMAC2 soap_instantiate_ns1__getCustomFieldsDefinitionList(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getCustomFieldsDefinitionList * soap_new_ns1__getCustomFieldsDefinitionList(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getCustomFieldsDefinitionList(soap, n, NULL, NULL, NULL); }

inline struct ns1__getCustomFieldsDefinitionList * soap_new_req_ns1__getCustomFieldsDefinitionList(struct soap *soap, LONG64 cookie) { struct ns1__getCustomFieldsDefinitionList *_p = soap_instantiate_ns1__getCustomFieldsDefinitionList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getCustomFieldsDefinitionList(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__getCustomFieldsDefinitionList * soap_new_set_ns1__getCustomFieldsDefinitionList(struct soap *soap, LONG64 cookie, char *tablename) { struct ns1__getCustomFieldsDefinitionList *_p = soap_instantiate_ns1__getCustomFieldsDefinitionList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getCustomFieldsDefinitionList(soap, _p); _p->cookie = cookie; _p->tablename = tablename; } return _p; }

inline void soap_delete_ns1__getCustomFieldsDefinitionList(struct soap *soap, struct ns1__getCustomFieldsDefinitionList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getCustomFieldsDefinitionList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getCustomFieldsDefinitionListResponse
#define SOAP_TYPE_ns1__getCustomFieldsDefinitionListResponse (331)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getCustomFieldsDefinitionListResponse(struct soap*, struct ns1__getCustomFieldsDefinitionListResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getCustomFieldsDefinitionListResponse(struct soap*, const struct ns1__getCustomFieldsDefinitionListResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getCustomFieldsDefinitionListResponse(struct soap*, const char*, int, const struct ns1__getCustomFieldsDefinitionListResponse *, const char*);
SOAP_FMAC3 struct ns1__getCustomFieldsDefinitionListResponse * SOAP_FMAC4 soap_in_ns1__getCustomFieldsDefinitionListResponse(struct soap*, const char*, struct ns1__getCustomFieldsDefinitionListResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getCustomFieldsDefinitionListResponse(struct soap*, const struct ns1__getCustomFieldsDefinitionListResponse *, const char*, const char*);

#ifndef soap_write_ns1__getCustomFieldsDefinitionListResponse
#define soap_write_ns1__getCustomFieldsDefinitionListResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getCustomFieldsDefinitionListResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getCustomFieldsDefinitionListResponse(soap, data, "ns1:getCustomFieldsDefinitionListResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getCustomFieldsDefinitionListResponse * SOAP_FMAC4 soap_get_ns1__getCustomFieldsDefinitionListResponse(struct soap*, struct ns1__getCustomFieldsDefinitionListResponse *, const char*, const char*);

#ifndef soap_read_ns1__getCustomFieldsDefinitionListResponse
#define soap_read_ns1__getCustomFieldsDefinitionListResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getCustomFieldsDefinitionListResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getCustomFieldsDefinitionListResponse * SOAP_FMAC2 soap_instantiate_ns1__getCustomFieldsDefinitionListResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getCustomFieldsDefinitionListResponse * soap_new_ns1__getCustomFieldsDefinitionListResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getCustomFieldsDefinitionListResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getCustomFieldsDefinitionListResponse * soap_new_req_ns1__getCustomFieldsDefinitionListResponse(struct soap *soap) { struct ns1__getCustomFieldsDefinitionListResponse *_p = soap_instantiate_ns1__getCustomFieldsDefinitionListResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getCustomFieldsDefinitionListResponse(soap, _p); } return _p; }

inline struct ns1__getCustomFieldsDefinitionListResponse * soap_new_set_ns1__getCustomFieldsDefinitionListResponse(struct soap *soap, ArrayOfCField *customFields) { struct ns1__getCustomFieldsDefinitionListResponse *_p = soap_instantiate_ns1__getCustomFieldsDefinitionListResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getCustomFieldsDefinitionListResponse(soap, _p); _p->customFields = customFields; } return _p; }

inline void soap_delete_ns1__getCustomFieldsDefinitionListResponse(struct soap *soap, struct ns1__getCustomFieldsDefinitionListResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getCustomFieldsDefinitionListResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getDefectEventDefinitionList
#define SOAP_TYPE_ns1__getDefectEventDefinitionList (330)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getDefectEventDefinitionList(struct soap*, struct ns1__getDefectEventDefinitionList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getDefectEventDefinitionList(struct soap*, const struct ns1__getDefectEventDefinitionList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getDefectEventDefinitionList(struct soap*, const char*, int, const struct ns1__getDefectEventDefinitionList *, const char*);
SOAP_FMAC3 struct ns1__getDefectEventDefinitionList * SOAP_FMAC4 soap_in_ns1__getDefectEventDefinitionList(struct soap*, const char*, struct ns1__getDefectEventDefinitionList *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getDefectEventDefinitionList(struct soap*, const struct ns1__getDefectEventDefinitionList *, const char*, const char*);

#ifndef soap_write_ns1__getDefectEventDefinitionList
#define soap_write_ns1__getDefectEventDefinitionList(soap, data) ( soap_begin(soap), soap_serialize_ns1__getDefectEventDefinitionList(soap, data), soap_begin_send(soap) || soap_put_ns1__getDefectEventDefinitionList(soap, data, "ns1:getDefectEventDefinitionList", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getDefectEventDefinitionList * SOAP_FMAC4 soap_get_ns1__getDefectEventDefinitionList(struct soap*, struct ns1__getDefectEventDefinitionList *, const char*, const char*);

#ifndef soap_read_ns1__getDefectEventDefinitionList
#define soap_read_ns1__getDefectEventDefinitionList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getDefectEventDefinitionList(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getDefectEventDefinitionList * SOAP_FMAC2 soap_instantiate_ns1__getDefectEventDefinitionList(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getDefectEventDefinitionList * soap_new_ns1__getDefectEventDefinitionList(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getDefectEventDefinitionList(soap, n, NULL, NULL, NULL); }

inline struct ns1__getDefectEventDefinitionList * soap_new_req_ns1__getDefectEventDefinitionList(struct soap *soap, LONG64 cookie) { struct ns1__getDefectEventDefinitionList *_p = soap_instantiate_ns1__getDefectEventDefinitionList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDefectEventDefinitionList(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__getDefectEventDefinitionList * soap_new_set_ns1__getDefectEventDefinitionList(struct soap *soap, LONG64 cookie) { struct ns1__getDefectEventDefinitionList *_p = soap_instantiate_ns1__getDefectEventDefinitionList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDefectEventDefinitionList(soap, _p); _p->cookie = cookie; } return _p; }

inline void soap_delete_ns1__getDefectEventDefinitionList(struct soap *soap, struct ns1__getDefectEventDefinitionList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getDefectEventDefinitionList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getDefectEventDefinitionListResponse
#define SOAP_TYPE_ns1__getDefectEventDefinitionListResponse (326)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getDefectEventDefinitionListResponse(struct soap*, struct ns1__getDefectEventDefinitionListResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getDefectEventDefinitionListResponse(struct soap*, const struct ns1__getDefectEventDefinitionListResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getDefectEventDefinitionListResponse(struct soap*, const char*, int, const struct ns1__getDefectEventDefinitionListResponse *, const char*);
SOAP_FMAC3 struct ns1__getDefectEventDefinitionListResponse * SOAP_FMAC4 soap_in_ns1__getDefectEventDefinitionListResponse(struct soap*, const char*, struct ns1__getDefectEventDefinitionListResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getDefectEventDefinitionListResponse(struct soap*, const struct ns1__getDefectEventDefinitionListResponse *, const char*, const char*);

#ifndef soap_write_ns1__getDefectEventDefinitionListResponse
#define soap_write_ns1__getDefectEventDefinitionListResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getDefectEventDefinitionListResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getDefectEventDefinitionListResponse(soap, data, "ns1:getDefectEventDefinitionListResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getDefectEventDefinitionListResponse * SOAP_FMAC4 soap_get_ns1__getDefectEventDefinitionListResponse(struct soap*, struct ns1__getDefectEventDefinitionListResponse *, const char*, const char*);

#ifndef soap_read_ns1__getDefectEventDefinitionListResponse
#define soap_read_ns1__getDefectEventDefinitionListResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getDefectEventDefinitionListResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getDefectEventDefinitionListResponse * SOAP_FMAC2 soap_instantiate_ns1__getDefectEventDefinitionListResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getDefectEventDefinitionListResponse * soap_new_ns1__getDefectEventDefinitionListResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getDefectEventDefinitionListResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getDefectEventDefinitionListResponse * soap_new_req_ns1__getDefectEventDefinitionListResponse(struct soap *soap) { struct ns1__getDefectEventDefinitionListResponse *_p = soap_instantiate_ns1__getDefectEventDefinitionListResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDefectEventDefinitionListResponse(soap, _p); } return _p; }

inline struct ns1__getDefectEventDefinitionListResponse * soap_new_set_ns1__getDefectEventDefinitionListResponse(struct soap *soap, ArrayOfCDefectEventDefinition *EventDefinitionList) { struct ns1__getDefectEventDefinitionListResponse *_p = soap_instantiate_ns1__getDefectEventDefinitionListResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDefectEventDefinitionListResponse(soap, _p); _p->EventDefinitionList = EventDefinitionList; } return _p; }

inline void soap_delete_ns1__getDefectEventDefinitionListResponse(struct soap *soap, struct ns1__getDefectEventDefinitionListResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getDefectEventDefinitionListResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getEventDefinitionList
#define SOAP_TYPE_ns1__getEventDefinitionList (325)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getEventDefinitionList(struct soap*, struct ns1__getEventDefinitionList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getEventDefinitionList(struct soap*, const struct ns1__getEventDefinitionList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getEventDefinitionList(struct soap*, const char*, int, const struct ns1__getEventDefinitionList *, const char*);
SOAP_FMAC3 struct ns1__getEventDefinitionList * SOAP_FMAC4 soap_in_ns1__getEventDefinitionList(struct soap*, const char*, struct ns1__getEventDefinitionList *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getEventDefinitionList(struct soap*, const struct ns1__getEventDefinitionList *, const char*, const char*);

#ifndef soap_write_ns1__getEventDefinitionList
#define soap_write_ns1__getEventDefinitionList(soap, data) ( soap_begin(soap), soap_serialize_ns1__getEventDefinitionList(soap, data), soap_begin_send(soap) || soap_put_ns1__getEventDefinitionList(soap, data, "ns1:getEventDefinitionList", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getEventDefinitionList * SOAP_FMAC4 soap_get_ns1__getEventDefinitionList(struct soap*, struct ns1__getEventDefinitionList *, const char*, const char*);

#ifndef soap_read_ns1__getEventDefinitionList
#define soap_read_ns1__getEventDefinitionList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getEventDefinitionList(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getEventDefinitionList * SOAP_FMAC2 soap_instantiate_ns1__getEventDefinitionList(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getEventDefinitionList * soap_new_ns1__getEventDefinitionList(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getEventDefinitionList(soap, n, NULL, NULL, NULL); }

inline struct ns1__getEventDefinitionList * soap_new_req_ns1__getEventDefinitionList(struct soap *soap, LONG64 cookie) { struct ns1__getEventDefinitionList *_p = soap_instantiate_ns1__getEventDefinitionList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getEventDefinitionList(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__getEventDefinitionList * soap_new_set_ns1__getEventDefinitionList(struct soap *soap, LONG64 cookie, char *tablename) { struct ns1__getEventDefinitionList *_p = soap_instantiate_ns1__getEventDefinitionList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getEventDefinitionList(soap, _p); _p->cookie = cookie; _p->tablename = tablename; } return _p; }

inline void soap_delete_ns1__getEventDefinitionList(struct soap *soap, struct ns1__getEventDefinitionList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getEventDefinitionList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getEventDefinitionListResponse
#define SOAP_TYPE_ns1__getEventDefinitionListResponse (321)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getEventDefinitionListResponse(struct soap*, struct ns1__getEventDefinitionListResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getEventDefinitionListResponse(struct soap*, const struct ns1__getEventDefinitionListResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getEventDefinitionListResponse(struct soap*, const char*, int, const struct ns1__getEventDefinitionListResponse *, const char*);
SOAP_FMAC3 struct ns1__getEventDefinitionListResponse * SOAP_FMAC4 soap_in_ns1__getEventDefinitionListResponse(struct soap*, const char*, struct ns1__getEventDefinitionListResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getEventDefinitionListResponse(struct soap*, const struct ns1__getEventDefinitionListResponse *, const char*, const char*);

#ifndef soap_write_ns1__getEventDefinitionListResponse
#define soap_write_ns1__getEventDefinitionListResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getEventDefinitionListResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getEventDefinitionListResponse(soap, data, "ns1:getEventDefinitionListResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getEventDefinitionListResponse * SOAP_FMAC4 soap_get_ns1__getEventDefinitionListResponse(struct soap*, struct ns1__getEventDefinitionListResponse *, const char*, const char*);

#ifndef soap_read_ns1__getEventDefinitionListResponse
#define soap_read_ns1__getEventDefinitionListResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getEventDefinitionListResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getEventDefinitionListResponse * SOAP_FMAC2 soap_instantiate_ns1__getEventDefinitionListResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getEventDefinitionListResponse * soap_new_ns1__getEventDefinitionListResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getEventDefinitionListResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getEventDefinitionListResponse * soap_new_req_ns1__getEventDefinitionListResponse(struct soap *soap) { struct ns1__getEventDefinitionListResponse *_p = soap_instantiate_ns1__getEventDefinitionListResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getEventDefinitionListResponse(soap, _p); } return _p; }

inline struct ns1__getEventDefinitionListResponse * soap_new_set_ns1__getEventDefinitionListResponse(struct soap *soap, ArrayOfCEventDefinition *EventDefinitionList) { struct ns1__getEventDefinitionListResponse *_p = soap_instantiate_ns1__getEventDefinitionListResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getEventDefinitionListResponse(soap, _p); _p->EventDefinitionList = EventDefinitionList; } return _p; }

inline void soap_delete_ns1__getEventDefinitionListResponse(struct soap *soap, struct ns1__getEventDefinitionListResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getEventDefinitionListResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getReportRunResultsByRecordID
#define SOAP_TYPE_ns1__getReportRunResultsByRecordID (320)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getReportRunResultsByRecordID(struct soap*, struct ns1__getReportRunResultsByRecordID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getReportRunResultsByRecordID(struct soap*, const struct ns1__getReportRunResultsByRecordID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getReportRunResultsByRecordID(struct soap*, const char*, int, const struct ns1__getReportRunResultsByRecordID *, const char*);
SOAP_FMAC3 struct ns1__getReportRunResultsByRecordID * SOAP_FMAC4 soap_in_ns1__getReportRunResultsByRecordID(struct soap*, const char*, struct ns1__getReportRunResultsByRecordID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getReportRunResultsByRecordID(struct soap*, const struct ns1__getReportRunResultsByRecordID *, const char*, const char*);

#ifndef soap_write_ns1__getReportRunResultsByRecordID
#define soap_write_ns1__getReportRunResultsByRecordID(soap, data) ( soap_begin(soap), soap_serialize_ns1__getReportRunResultsByRecordID(soap, data), soap_begin_send(soap) || soap_put_ns1__getReportRunResultsByRecordID(soap, data, "ns1:getReportRunResultsByRecordID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getReportRunResultsByRecordID * SOAP_FMAC4 soap_get_ns1__getReportRunResultsByRecordID(struct soap*, struct ns1__getReportRunResultsByRecordID *, const char*, const char*);

#ifndef soap_read_ns1__getReportRunResultsByRecordID
#define soap_read_ns1__getReportRunResultsByRecordID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getReportRunResultsByRecordID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getReportRunResultsByRecordID * SOAP_FMAC2 soap_instantiate_ns1__getReportRunResultsByRecordID(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getReportRunResultsByRecordID * soap_new_ns1__getReportRunResultsByRecordID(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getReportRunResultsByRecordID(soap, n, NULL, NULL, NULL); }

inline struct ns1__getReportRunResultsByRecordID * soap_new_req_ns1__getReportRunResultsByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__getReportRunResultsByRecordID *_p = soap_instantiate_ns1__getReportRunResultsByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getReportRunResultsByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline struct ns1__getReportRunResultsByRecordID * soap_new_set_ns1__getReportRunResultsByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__getReportRunResultsByRecordID *_p = soap_instantiate_ns1__getReportRunResultsByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getReportRunResultsByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__getReportRunResultsByRecordID(struct soap *soap, struct ns1__getReportRunResultsByRecordID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getReportRunResultsByRecordID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getReportRunResultsByRecordIDResponse
#define SOAP_TYPE_ns1__getReportRunResultsByRecordIDResponse (317)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getReportRunResultsByRecordIDResponse(struct soap*, struct ns1__getReportRunResultsByRecordIDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getReportRunResultsByRecordIDResponse(struct soap*, const struct ns1__getReportRunResultsByRecordIDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getReportRunResultsByRecordIDResponse(struct soap*, const char*, int, const struct ns1__getReportRunResultsByRecordIDResponse *, const char*);
SOAP_FMAC3 struct ns1__getReportRunResultsByRecordIDResponse * SOAP_FMAC4 soap_in_ns1__getReportRunResultsByRecordIDResponse(struct soap*, const char*, struct ns1__getReportRunResultsByRecordIDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getReportRunResultsByRecordIDResponse(struct soap*, const struct ns1__getReportRunResultsByRecordIDResponse *, const char*, const char*);

#ifndef soap_write_ns1__getReportRunResultsByRecordIDResponse
#define soap_write_ns1__getReportRunResultsByRecordIDResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getReportRunResultsByRecordIDResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getReportRunResultsByRecordIDResponse(soap, data, "ns1:getReportRunResultsByRecordIDResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getReportRunResultsByRecordIDResponse * SOAP_FMAC4 soap_get_ns1__getReportRunResultsByRecordIDResponse(struct soap*, struct ns1__getReportRunResultsByRecordIDResponse *, const char*, const char*);

#ifndef soap_read_ns1__getReportRunResultsByRecordIDResponse
#define soap_read_ns1__getReportRunResultsByRecordIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getReportRunResultsByRecordIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getReportRunResultsByRecordIDResponse * SOAP_FMAC2 soap_instantiate_ns1__getReportRunResultsByRecordIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getReportRunResultsByRecordIDResponse * soap_new_ns1__getReportRunResultsByRecordIDResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getReportRunResultsByRecordIDResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getReportRunResultsByRecordIDResponse * soap_new_req_ns1__getReportRunResultsByRecordIDResponse(struct soap *soap) { struct ns1__getReportRunResultsByRecordIDResponse *_p = soap_instantiate_ns1__getReportRunResultsByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getReportRunResultsByRecordIDResponse(soap, _p); } return _p; }

inline struct ns1__getReportRunResultsByRecordIDResponse * soap_new_set_ns1__getReportRunResultsByRecordIDResponse(struct soap *soap, ns1__CReportRunResults *results) { struct ns1__getReportRunResultsByRecordIDResponse *_p = soap_instantiate_ns1__getReportRunResultsByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getReportRunResultsByRecordIDResponse(soap, _p); _p->results = results; } return _p; }

inline void soap_delete_ns1__getReportRunResultsByRecordIDResponse(struct soap *soap, struct ns1__getReportRunResultsByRecordIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getReportRunResultsByRecordIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getReportRunResultsByName
#define SOAP_TYPE_ns1__getReportRunResultsByName (316)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getReportRunResultsByName(struct soap*, struct ns1__getReportRunResultsByName *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getReportRunResultsByName(struct soap*, const struct ns1__getReportRunResultsByName *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getReportRunResultsByName(struct soap*, const char*, int, const struct ns1__getReportRunResultsByName *, const char*);
SOAP_FMAC3 struct ns1__getReportRunResultsByName * SOAP_FMAC4 soap_in_ns1__getReportRunResultsByName(struct soap*, const char*, struct ns1__getReportRunResultsByName *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getReportRunResultsByName(struct soap*, const struct ns1__getReportRunResultsByName *, const char*, const char*);

#ifndef soap_write_ns1__getReportRunResultsByName
#define soap_write_ns1__getReportRunResultsByName(soap, data) ( soap_begin(soap), soap_serialize_ns1__getReportRunResultsByName(soap, data), soap_begin_send(soap) || soap_put_ns1__getReportRunResultsByName(soap, data, "ns1:getReportRunResultsByName", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getReportRunResultsByName * SOAP_FMAC4 soap_get_ns1__getReportRunResultsByName(struct soap*, struct ns1__getReportRunResultsByName *, const char*, const char*);

#ifndef soap_read_ns1__getReportRunResultsByName
#define soap_read_ns1__getReportRunResultsByName(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getReportRunResultsByName(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getReportRunResultsByName * SOAP_FMAC2 soap_instantiate_ns1__getReportRunResultsByName(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getReportRunResultsByName * soap_new_ns1__getReportRunResultsByName(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getReportRunResultsByName(soap, n, NULL, NULL, NULL); }

inline struct ns1__getReportRunResultsByName * soap_new_req_ns1__getReportRunResultsByName(struct soap *soap, LONG64 cookie) { struct ns1__getReportRunResultsByName *_p = soap_instantiate_ns1__getReportRunResultsByName(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getReportRunResultsByName(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__getReportRunResultsByName * soap_new_set_ns1__getReportRunResultsByName(struct soap *soap, LONG64 cookie, char *name) { struct ns1__getReportRunResultsByName *_p = soap_instantiate_ns1__getReportRunResultsByName(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getReportRunResultsByName(soap, _p); _p->cookie = cookie; _p->name = name; } return _p; }

inline void soap_delete_ns1__getReportRunResultsByName(struct soap *soap, struct ns1__getReportRunResultsByName *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getReportRunResultsByName(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getReportRunResultsByNameResponse
#define SOAP_TYPE_ns1__getReportRunResultsByNameResponse (312)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getReportRunResultsByNameResponse(struct soap*, struct ns1__getReportRunResultsByNameResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getReportRunResultsByNameResponse(struct soap*, const struct ns1__getReportRunResultsByNameResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getReportRunResultsByNameResponse(struct soap*, const char*, int, const struct ns1__getReportRunResultsByNameResponse *, const char*);
SOAP_FMAC3 struct ns1__getReportRunResultsByNameResponse * SOAP_FMAC4 soap_in_ns1__getReportRunResultsByNameResponse(struct soap*, const char*, struct ns1__getReportRunResultsByNameResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getReportRunResultsByNameResponse(struct soap*, const struct ns1__getReportRunResultsByNameResponse *, const char*, const char*);

#ifndef soap_write_ns1__getReportRunResultsByNameResponse
#define soap_write_ns1__getReportRunResultsByNameResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getReportRunResultsByNameResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getReportRunResultsByNameResponse(soap, data, "ns1:getReportRunResultsByNameResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getReportRunResultsByNameResponse * SOAP_FMAC4 soap_get_ns1__getReportRunResultsByNameResponse(struct soap*, struct ns1__getReportRunResultsByNameResponse *, const char*, const char*);

#ifndef soap_read_ns1__getReportRunResultsByNameResponse
#define soap_read_ns1__getReportRunResultsByNameResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getReportRunResultsByNameResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getReportRunResultsByNameResponse * SOAP_FMAC2 soap_instantiate_ns1__getReportRunResultsByNameResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getReportRunResultsByNameResponse * soap_new_ns1__getReportRunResultsByNameResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getReportRunResultsByNameResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getReportRunResultsByNameResponse * soap_new_req_ns1__getReportRunResultsByNameResponse(struct soap *soap) { struct ns1__getReportRunResultsByNameResponse *_p = soap_instantiate_ns1__getReportRunResultsByNameResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getReportRunResultsByNameResponse(soap, _p); } return _p; }

inline struct ns1__getReportRunResultsByNameResponse * soap_new_set_ns1__getReportRunResultsByNameResponse(struct soap *soap, ns1__CReportRunResults *results) { struct ns1__getReportRunResultsByNameResponse *_p = soap_instantiate_ns1__getReportRunResultsByNameResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getReportRunResultsByNameResponse(soap, _p); _p->results = results; } return _p; }

inline void soap_delete_ns1__getReportRunResultsByNameResponse(struct soap *soap, struct ns1__getReportRunResultsByNameResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getReportRunResultsByNameResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getAttachmentTypes
#define SOAP_TYPE_ns1__getAttachmentTypes (311)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getAttachmentTypes(struct soap*, struct ns1__getAttachmentTypes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getAttachmentTypes(struct soap*, const struct ns1__getAttachmentTypes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getAttachmentTypes(struct soap*, const char*, int, const struct ns1__getAttachmentTypes *, const char*);
SOAP_FMAC3 struct ns1__getAttachmentTypes * SOAP_FMAC4 soap_in_ns1__getAttachmentTypes(struct soap*, const char*, struct ns1__getAttachmentTypes *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getAttachmentTypes(struct soap*, const struct ns1__getAttachmentTypes *, const char*, const char*);

#ifndef soap_write_ns1__getAttachmentTypes
#define soap_write_ns1__getAttachmentTypes(soap, data) ( soap_begin(soap), soap_serialize_ns1__getAttachmentTypes(soap, data), soap_begin_send(soap) || soap_put_ns1__getAttachmentTypes(soap, data, "ns1:getAttachmentTypes", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getAttachmentTypes * SOAP_FMAC4 soap_get_ns1__getAttachmentTypes(struct soap*, struct ns1__getAttachmentTypes *, const char*, const char*);

#ifndef soap_read_ns1__getAttachmentTypes
#define soap_read_ns1__getAttachmentTypes(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getAttachmentTypes(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getAttachmentTypes * SOAP_FMAC2 soap_instantiate_ns1__getAttachmentTypes(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getAttachmentTypes * soap_new_ns1__getAttachmentTypes(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getAttachmentTypes(soap, n, NULL, NULL, NULL); }

inline struct ns1__getAttachmentTypes * soap_new_req_ns1__getAttachmentTypes(struct soap *soap, LONG64 cookie) { struct ns1__getAttachmentTypes *_p = soap_instantiate_ns1__getAttachmentTypes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getAttachmentTypes(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__getAttachmentTypes * soap_new_set_ns1__getAttachmentTypes(struct soap *soap, LONG64 cookie) { struct ns1__getAttachmentTypes *_p = soap_instantiate_ns1__getAttachmentTypes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getAttachmentTypes(soap, _p); _p->cookie = cookie; } return _p; }

inline void soap_delete_ns1__getAttachmentTypes(struct soap *soap, struct ns1__getAttachmentTypes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getAttachmentTypes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getAttachmentTypesResponse
#define SOAP_TYPE_ns1__getAttachmentTypesResponse (308)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getAttachmentTypesResponse(struct soap*, struct ns1__getAttachmentTypesResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getAttachmentTypesResponse(struct soap*, const struct ns1__getAttachmentTypesResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getAttachmentTypesResponse(struct soap*, const char*, int, const struct ns1__getAttachmentTypesResponse *, const char*);
SOAP_FMAC3 struct ns1__getAttachmentTypesResponse * SOAP_FMAC4 soap_in_ns1__getAttachmentTypesResponse(struct soap*, const char*, struct ns1__getAttachmentTypesResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getAttachmentTypesResponse(struct soap*, const struct ns1__getAttachmentTypesResponse *, const char*, const char*);

#ifndef soap_write_ns1__getAttachmentTypesResponse
#define soap_write_ns1__getAttachmentTypesResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getAttachmentTypesResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getAttachmentTypesResponse(soap, data, "ns1:getAttachmentTypesResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getAttachmentTypesResponse * SOAP_FMAC4 soap_get_ns1__getAttachmentTypesResponse(struct soap*, struct ns1__getAttachmentTypesResponse *, const char*, const char*);

#ifndef soap_read_ns1__getAttachmentTypesResponse
#define soap_read_ns1__getAttachmentTypesResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getAttachmentTypesResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getAttachmentTypesResponse * SOAP_FMAC2 soap_instantiate_ns1__getAttachmentTypesResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getAttachmentTypesResponse * soap_new_ns1__getAttachmentTypesResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getAttachmentTypesResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getAttachmentTypesResponse * soap_new_req_ns1__getAttachmentTypesResponse(struct soap *soap) { struct ns1__getAttachmentTypesResponse *_p = soap_instantiate_ns1__getAttachmentTypesResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getAttachmentTypesResponse(soap, _p); } return _p; }

inline struct ns1__getAttachmentTypesResponse * soap_new_set_ns1__getAttachmentTypesResponse(struct soap *soap, ArrayOfstring *pTypeList) { struct ns1__getAttachmentTypesResponse *_p = soap_instantiate_ns1__getAttachmentTypesResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getAttachmentTypesResponse(soap, _p); _p->pTypeList = pTypeList; } return _p; }

inline void soap_delete_ns1__getAttachmentTypesResponse(struct soap *soap, struct ns1__getAttachmentTypesResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getAttachmentTypesResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__cancelSaveTestConfig
#define SOAP_TYPE_ns1__cancelSaveTestConfig (307)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__cancelSaveTestConfig(struct soap*, struct ns1__cancelSaveTestConfig *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__cancelSaveTestConfig(struct soap*, const struct ns1__cancelSaveTestConfig *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__cancelSaveTestConfig(struct soap*, const char*, int, const struct ns1__cancelSaveTestConfig *, const char*);
SOAP_FMAC3 struct ns1__cancelSaveTestConfig * SOAP_FMAC4 soap_in_ns1__cancelSaveTestConfig(struct soap*, const char*, struct ns1__cancelSaveTestConfig *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__cancelSaveTestConfig(struct soap*, const struct ns1__cancelSaveTestConfig *, const char*, const char*);

#ifndef soap_write_ns1__cancelSaveTestConfig
#define soap_write_ns1__cancelSaveTestConfig(soap, data) ( soap_begin(soap), soap_serialize_ns1__cancelSaveTestConfig(soap, data), soap_begin_send(soap) || soap_put_ns1__cancelSaveTestConfig(soap, data, "ns1:cancelSaveTestConfig", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__cancelSaveTestConfig * SOAP_FMAC4 soap_get_ns1__cancelSaveTestConfig(struct soap*, struct ns1__cancelSaveTestConfig *, const char*, const char*);

#ifndef soap_read_ns1__cancelSaveTestConfig
#define soap_read_ns1__cancelSaveTestConfig(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__cancelSaveTestConfig(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__cancelSaveTestConfig * SOAP_FMAC2 soap_instantiate_ns1__cancelSaveTestConfig(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__cancelSaveTestConfig * soap_new_ns1__cancelSaveTestConfig(struct soap *soap, int n = -1) { return soap_instantiate_ns1__cancelSaveTestConfig(soap, n, NULL, NULL, NULL); }

inline struct ns1__cancelSaveTestConfig * soap_new_req_ns1__cancelSaveTestConfig(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__cancelSaveTestConfig *_p = soap_instantiate_ns1__cancelSaveTestConfig(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveTestConfig(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline struct ns1__cancelSaveTestConfig * soap_new_set_ns1__cancelSaveTestConfig(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__cancelSaveTestConfig *_p = soap_instantiate_ns1__cancelSaveTestConfig(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveTestConfig(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__cancelSaveTestConfig(struct soap *soap, struct ns1__cancelSaveTestConfig *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__cancelSaveTestConfig(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__cancelSaveTestConfigResponse
#define SOAP_TYPE_ns1__cancelSaveTestConfigResponse (306)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__cancelSaveTestConfigResponse(struct soap*, struct ns1__cancelSaveTestConfigResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__cancelSaveTestConfigResponse(struct soap*, const struct ns1__cancelSaveTestConfigResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__cancelSaveTestConfigResponse(struct soap*, const char*, int, const struct ns1__cancelSaveTestConfigResponse *, const char*);
SOAP_FMAC3 struct ns1__cancelSaveTestConfigResponse * SOAP_FMAC4 soap_in_ns1__cancelSaveTestConfigResponse(struct soap*, const char*, struct ns1__cancelSaveTestConfigResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__cancelSaveTestConfigResponse(struct soap*, const struct ns1__cancelSaveTestConfigResponse *, const char*, const char*);

#ifndef soap_write_ns1__cancelSaveTestConfigResponse
#define soap_write_ns1__cancelSaveTestConfigResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__cancelSaveTestConfigResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__cancelSaveTestConfigResponse(soap, data, "ns1:cancelSaveTestConfigResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__cancelSaveTestConfigResponse * SOAP_FMAC4 soap_get_ns1__cancelSaveTestConfigResponse(struct soap*, struct ns1__cancelSaveTestConfigResponse *, const char*, const char*);

#ifndef soap_read_ns1__cancelSaveTestConfigResponse
#define soap_read_ns1__cancelSaveTestConfigResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__cancelSaveTestConfigResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__cancelSaveTestConfigResponse * SOAP_FMAC2 soap_instantiate_ns1__cancelSaveTestConfigResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__cancelSaveTestConfigResponse * soap_new_ns1__cancelSaveTestConfigResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__cancelSaveTestConfigResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__cancelSaveTestConfigResponse * soap_new_req_ns1__cancelSaveTestConfigResponse(struct soap *soap, int result) { struct ns1__cancelSaveTestConfigResponse *_p = soap_instantiate_ns1__cancelSaveTestConfigResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveTestConfigResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__cancelSaveTestConfigResponse * soap_new_set_ns1__cancelSaveTestConfigResponse(struct soap *soap, int result) { struct ns1__cancelSaveTestConfigResponse *_p = soap_instantiate_ns1__cancelSaveTestConfigResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__cancelSaveTestConfigResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__cancelSaveTestConfigResponse(struct soap *soap, struct ns1__cancelSaveTestConfigResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__cancelSaveTestConfigResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteTestConfigByRecordID
#define SOAP_TYPE_ns1__deleteTestConfigByRecordID (304)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteTestConfigByRecordID(struct soap*, struct ns1__deleteTestConfigByRecordID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteTestConfigByRecordID(struct soap*, const struct ns1__deleteTestConfigByRecordID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteTestConfigByRecordID(struct soap*, const char*, int, const struct ns1__deleteTestConfigByRecordID *, const char*);
SOAP_FMAC3 struct ns1__deleteTestConfigByRecordID * SOAP_FMAC4 soap_in_ns1__deleteTestConfigByRecordID(struct soap*, const char*, struct ns1__deleteTestConfigByRecordID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteTestConfigByRecordID(struct soap*, const struct ns1__deleteTestConfigByRecordID *, const char*, const char*);

#ifndef soap_write_ns1__deleteTestConfigByRecordID
#define soap_write_ns1__deleteTestConfigByRecordID(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteTestConfigByRecordID(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteTestConfigByRecordID(soap, data, "ns1:deleteTestConfigByRecordID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteTestConfigByRecordID * SOAP_FMAC4 soap_get_ns1__deleteTestConfigByRecordID(struct soap*, struct ns1__deleteTestConfigByRecordID *, const char*, const char*);

#ifndef soap_read_ns1__deleteTestConfigByRecordID
#define soap_read_ns1__deleteTestConfigByRecordID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteTestConfigByRecordID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteTestConfigByRecordID * SOAP_FMAC2 soap_instantiate_ns1__deleteTestConfigByRecordID(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteTestConfigByRecordID * soap_new_ns1__deleteTestConfigByRecordID(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteTestConfigByRecordID(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteTestConfigByRecordID * soap_new_req_ns1__deleteTestConfigByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__deleteTestConfigByRecordID *_p = soap_instantiate_ns1__deleteTestConfigByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteTestConfigByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline struct ns1__deleteTestConfigByRecordID * soap_new_set_ns1__deleteTestConfigByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__deleteTestConfigByRecordID *_p = soap_instantiate_ns1__deleteTestConfigByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteTestConfigByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__deleteTestConfigByRecordID(struct soap *soap, struct ns1__deleteTestConfigByRecordID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteTestConfigByRecordID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteTestConfigByRecordIDResponse
#define SOAP_TYPE_ns1__deleteTestConfigByRecordIDResponse (303)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteTestConfigByRecordIDResponse(struct soap*, struct ns1__deleteTestConfigByRecordIDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteTestConfigByRecordIDResponse(struct soap*, const struct ns1__deleteTestConfigByRecordIDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteTestConfigByRecordIDResponse(struct soap*, const char*, int, const struct ns1__deleteTestConfigByRecordIDResponse *, const char*);
SOAP_FMAC3 struct ns1__deleteTestConfigByRecordIDResponse * SOAP_FMAC4 soap_in_ns1__deleteTestConfigByRecordIDResponse(struct soap*, const char*, struct ns1__deleteTestConfigByRecordIDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteTestConfigByRecordIDResponse(struct soap*, const struct ns1__deleteTestConfigByRecordIDResponse *, const char*, const char*);

#ifndef soap_write_ns1__deleteTestConfigByRecordIDResponse
#define soap_write_ns1__deleteTestConfigByRecordIDResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteTestConfigByRecordIDResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteTestConfigByRecordIDResponse(soap, data, "ns1:deleteTestConfigByRecordIDResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteTestConfigByRecordIDResponse * SOAP_FMAC4 soap_get_ns1__deleteTestConfigByRecordIDResponse(struct soap*, struct ns1__deleteTestConfigByRecordIDResponse *, const char*, const char*);

#ifndef soap_read_ns1__deleteTestConfigByRecordIDResponse
#define soap_read_ns1__deleteTestConfigByRecordIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteTestConfigByRecordIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteTestConfigByRecordIDResponse * SOAP_FMAC2 soap_instantiate_ns1__deleteTestConfigByRecordIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteTestConfigByRecordIDResponse * soap_new_ns1__deleteTestConfigByRecordIDResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteTestConfigByRecordIDResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteTestConfigByRecordIDResponse * soap_new_req_ns1__deleteTestConfigByRecordIDResponse(struct soap *soap, int result) { struct ns1__deleteTestConfigByRecordIDResponse *_p = soap_instantiate_ns1__deleteTestConfigByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteTestConfigByRecordIDResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__deleteTestConfigByRecordIDResponse * soap_new_set_ns1__deleteTestConfigByRecordIDResponse(struct soap *soap, int result) { struct ns1__deleteTestConfigByRecordIDResponse *_p = soap_instantiate_ns1__deleteTestConfigByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteTestConfigByRecordIDResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__deleteTestConfigByRecordIDResponse(struct soap *soap, struct ns1__deleteTestConfigByRecordIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteTestConfigByRecordIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteTestConfig
#define SOAP_TYPE_ns1__deleteTestConfig (301)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteTestConfig(struct soap*, struct ns1__deleteTestConfig *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteTestConfig(struct soap*, const struct ns1__deleteTestConfig *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteTestConfig(struct soap*, const char*, int, const struct ns1__deleteTestConfig *, const char*);
SOAP_FMAC3 struct ns1__deleteTestConfig * SOAP_FMAC4 soap_in_ns1__deleteTestConfig(struct soap*, const char*, struct ns1__deleteTestConfig *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteTestConfig(struct soap*, const struct ns1__deleteTestConfig *, const char*, const char*);

#ifndef soap_write_ns1__deleteTestConfig
#define soap_write_ns1__deleteTestConfig(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteTestConfig(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteTestConfig(soap, data, "ns1:deleteTestConfig", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteTestConfig * SOAP_FMAC4 soap_get_ns1__deleteTestConfig(struct soap*, struct ns1__deleteTestConfig *, const char*, const char*);

#ifndef soap_read_ns1__deleteTestConfig
#define soap_read_ns1__deleteTestConfig(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteTestConfig(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteTestConfig * SOAP_FMAC2 soap_instantiate_ns1__deleteTestConfig(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteTestConfig * soap_new_ns1__deleteTestConfig(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteTestConfig(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteTestConfig * soap_new_req_ns1__deleteTestConfig(struct soap *soap, LONG64 cookie) { struct ns1__deleteTestConfig *_p = soap_instantiate_ns1__deleteTestConfig(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteTestConfig(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__deleteTestConfig * soap_new_set_ns1__deleteTestConfig(struct soap *soap, LONG64 cookie, char *name) { struct ns1__deleteTestConfig *_p = soap_instantiate_ns1__deleteTestConfig(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteTestConfig(soap, _p); _p->cookie = cookie; _p->name = name; } return _p; }

inline void soap_delete_ns1__deleteTestConfig(struct soap *soap, struct ns1__deleteTestConfig *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteTestConfig(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__deleteTestConfigResponse
#define SOAP_TYPE_ns1__deleteTestConfigResponse (300)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__deleteTestConfigResponse(struct soap*, struct ns1__deleteTestConfigResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__deleteTestConfigResponse(struct soap*, const struct ns1__deleteTestConfigResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deleteTestConfigResponse(struct soap*, const char*, int, const struct ns1__deleteTestConfigResponse *, const char*);
SOAP_FMAC3 struct ns1__deleteTestConfigResponse * SOAP_FMAC4 soap_in_ns1__deleteTestConfigResponse(struct soap*, const char*, struct ns1__deleteTestConfigResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__deleteTestConfigResponse(struct soap*, const struct ns1__deleteTestConfigResponse *, const char*, const char*);

#ifndef soap_write_ns1__deleteTestConfigResponse
#define soap_write_ns1__deleteTestConfigResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__deleteTestConfigResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__deleteTestConfigResponse(soap, data, "ns1:deleteTestConfigResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__deleteTestConfigResponse * SOAP_FMAC4 soap_get_ns1__deleteTestConfigResponse(struct soap*, struct ns1__deleteTestConfigResponse *, const char*, const char*);

#ifndef soap_read_ns1__deleteTestConfigResponse
#define soap_read_ns1__deleteTestConfigResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__deleteTestConfigResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__deleteTestConfigResponse * SOAP_FMAC2 soap_instantiate_ns1__deleteTestConfigResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__deleteTestConfigResponse * soap_new_ns1__deleteTestConfigResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__deleteTestConfigResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__deleteTestConfigResponse * soap_new_req_ns1__deleteTestConfigResponse(struct soap *soap, int result) { struct ns1__deleteTestConfigResponse *_p = soap_instantiate_ns1__deleteTestConfigResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteTestConfigResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__deleteTestConfigResponse * soap_new_set_ns1__deleteTestConfigResponse(struct soap *soap, int result) { struct ns1__deleteTestConfigResponse *_p = soap_instantiate_ns1__deleteTestConfigResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__deleteTestConfigResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__deleteTestConfigResponse(struct soap *soap, struct ns1__deleteTestConfigResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__deleteTestConfigResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveTestConfig
#define SOAP_TYPE_ns1__saveTestConfig (298)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveTestConfig(struct soap*, struct ns1__saveTestConfig *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveTestConfig(struct soap*, const struct ns1__saveTestConfig *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveTestConfig(struct soap*, const char*, int, const struct ns1__saveTestConfig *, const char*);
SOAP_FMAC3 struct ns1__saveTestConfig * SOAP_FMAC4 soap_in_ns1__saveTestConfig(struct soap*, const char*, struct ns1__saveTestConfig *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveTestConfig(struct soap*, const struct ns1__saveTestConfig *, const char*, const char*);

#ifndef soap_write_ns1__saveTestConfig
#define soap_write_ns1__saveTestConfig(soap, data) ( soap_begin(soap), soap_serialize_ns1__saveTestConfig(soap, data), soap_begin_send(soap) || soap_put_ns1__saveTestConfig(soap, data, "ns1:saveTestConfig", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__saveTestConfig * SOAP_FMAC4 soap_get_ns1__saveTestConfig(struct soap*, struct ns1__saveTestConfig *, const char*, const char*);

#ifndef soap_read_ns1__saveTestConfig
#define soap_read_ns1__saveTestConfig(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveTestConfig(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__saveTestConfig * SOAP_FMAC2 soap_instantiate_ns1__saveTestConfig(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveTestConfig * soap_new_ns1__saveTestConfig(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveTestConfig(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveTestConfig * soap_new_req_ns1__saveTestConfig(struct soap *soap, LONG64 cookie) { struct ns1__saveTestConfig *_p = soap_instantiate_ns1__saveTestConfig(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveTestConfig(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__saveTestConfig * soap_new_set_ns1__saveTestConfig(struct soap *soap, LONG64 cookie, ns1__CSystem *pTestConfig) { struct ns1__saveTestConfig *_p = soap_instantiate_ns1__saveTestConfig(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveTestConfig(soap, _p); _p->cookie = cookie; _p->pTestConfig = pTestConfig; } return _p; }

inline void soap_delete_ns1__saveTestConfig(struct soap *soap, struct ns1__saveTestConfig *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveTestConfig(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveTestConfigResponse
#define SOAP_TYPE_ns1__saveTestConfigResponse (297)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveTestConfigResponse(struct soap*, struct ns1__saveTestConfigResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveTestConfigResponse(struct soap*, const struct ns1__saveTestConfigResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveTestConfigResponse(struct soap*, const char*, int, const struct ns1__saveTestConfigResponse *, const char*);
SOAP_FMAC3 struct ns1__saveTestConfigResponse * SOAP_FMAC4 soap_in_ns1__saveTestConfigResponse(struct soap*, const char*, struct ns1__saveTestConfigResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveTestConfigResponse(struct soap*, const struct ns1__saveTestConfigResponse *, const char*, const char*);

#ifndef soap_write_ns1__saveTestConfigResponse
#define soap_write_ns1__saveTestConfigResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__saveTestConfigResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__saveTestConfigResponse(soap, data, "ns1:saveTestConfigResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__saveTestConfigResponse * SOAP_FMAC4 soap_get_ns1__saveTestConfigResponse(struct soap*, struct ns1__saveTestConfigResponse *, const char*, const char*);

#ifndef soap_read_ns1__saveTestConfigResponse
#define soap_read_ns1__saveTestConfigResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveTestConfigResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__saveTestConfigResponse * SOAP_FMAC2 soap_instantiate_ns1__saveTestConfigResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveTestConfigResponse * soap_new_ns1__saveTestConfigResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveTestConfigResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveTestConfigResponse * soap_new_req_ns1__saveTestConfigResponse(struct soap *soap, int result) { struct ns1__saveTestConfigResponse *_p = soap_instantiate_ns1__saveTestConfigResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveTestConfigResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__saveTestConfigResponse * soap_new_set_ns1__saveTestConfigResponse(struct soap *soap, int result) { struct ns1__saveTestConfigResponse *_p = soap_instantiate_ns1__saveTestConfigResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveTestConfigResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__saveTestConfigResponse(struct soap *soap, struct ns1__saveTestConfigResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveTestConfigResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editTestConfigByRecordID
#define SOAP_TYPE_ns1__editTestConfigByRecordID (295)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editTestConfigByRecordID(struct soap*, struct ns1__editTestConfigByRecordID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editTestConfigByRecordID(struct soap*, const struct ns1__editTestConfigByRecordID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editTestConfigByRecordID(struct soap*, const char*, int, const struct ns1__editTestConfigByRecordID *, const char*);
SOAP_FMAC3 struct ns1__editTestConfigByRecordID * SOAP_FMAC4 soap_in_ns1__editTestConfigByRecordID(struct soap*, const char*, struct ns1__editTestConfigByRecordID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editTestConfigByRecordID(struct soap*, const struct ns1__editTestConfigByRecordID *, const char*, const char*);

#ifndef soap_write_ns1__editTestConfigByRecordID
#define soap_write_ns1__editTestConfigByRecordID(soap, data) ( soap_begin(soap), soap_serialize_ns1__editTestConfigByRecordID(soap, data), soap_begin_send(soap) || soap_put_ns1__editTestConfigByRecordID(soap, data, "ns1:editTestConfigByRecordID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editTestConfigByRecordID * SOAP_FMAC4 soap_get_ns1__editTestConfigByRecordID(struct soap*, struct ns1__editTestConfigByRecordID *, const char*, const char*);

#ifndef soap_read_ns1__editTestConfigByRecordID
#define soap_read_ns1__editTestConfigByRecordID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editTestConfigByRecordID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editTestConfigByRecordID * SOAP_FMAC2 soap_instantiate_ns1__editTestConfigByRecordID(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editTestConfigByRecordID * soap_new_ns1__editTestConfigByRecordID(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editTestConfigByRecordID(soap, n, NULL, NULL, NULL); }

inline struct ns1__editTestConfigByRecordID * soap_new_req_ns1__editTestConfigByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__editTestConfigByRecordID *_p = soap_instantiate_ns1__editTestConfigByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editTestConfigByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline struct ns1__editTestConfigByRecordID * soap_new_set_ns1__editTestConfigByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__editTestConfigByRecordID *_p = soap_instantiate_ns1__editTestConfigByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editTestConfigByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__editTestConfigByRecordID(struct soap *soap, struct ns1__editTestConfigByRecordID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editTestConfigByRecordID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editTestConfigByRecordIDResponse
#define SOAP_TYPE_ns1__editTestConfigByRecordIDResponse (292)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editTestConfigByRecordIDResponse(struct soap*, struct ns1__editTestConfigByRecordIDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editTestConfigByRecordIDResponse(struct soap*, const struct ns1__editTestConfigByRecordIDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editTestConfigByRecordIDResponse(struct soap*, const char*, int, const struct ns1__editTestConfigByRecordIDResponse *, const char*);
SOAP_FMAC3 struct ns1__editTestConfigByRecordIDResponse * SOAP_FMAC4 soap_in_ns1__editTestConfigByRecordIDResponse(struct soap*, const char*, struct ns1__editTestConfigByRecordIDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editTestConfigByRecordIDResponse(struct soap*, const struct ns1__editTestConfigByRecordIDResponse *, const char*, const char*);

#ifndef soap_write_ns1__editTestConfigByRecordIDResponse
#define soap_write_ns1__editTestConfigByRecordIDResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__editTestConfigByRecordIDResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__editTestConfigByRecordIDResponse(soap, data, "ns1:editTestConfigByRecordIDResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editTestConfigByRecordIDResponse * SOAP_FMAC4 soap_get_ns1__editTestConfigByRecordIDResponse(struct soap*, struct ns1__editTestConfigByRecordIDResponse *, const char*, const char*);

#ifndef soap_read_ns1__editTestConfigByRecordIDResponse
#define soap_read_ns1__editTestConfigByRecordIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editTestConfigByRecordIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editTestConfigByRecordIDResponse * SOAP_FMAC2 soap_instantiate_ns1__editTestConfigByRecordIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editTestConfigByRecordIDResponse * soap_new_ns1__editTestConfigByRecordIDResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editTestConfigByRecordIDResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__editTestConfigByRecordIDResponse * soap_new_req_ns1__editTestConfigByRecordIDResponse(struct soap *soap) { struct ns1__editTestConfigByRecordIDResponse *_p = soap_instantiate_ns1__editTestConfigByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editTestConfigByRecordIDResponse(soap, _p); } return _p; }

inline struct ns1__editTestConfigByRecordIDResponse * soap_new_set_ns1__editTestConfigByRecordIDResponse(struct soap *soap, ns1__CSystem *pTestConfig) { struct ns1__editTestConfigByRecordIDResponse *_p = soap_instantiate_ns1__editTestConfigByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editTestConfigByRecordIDResponse(soap, _p); _p->pTestConfig = pTestConfig; } return _p; }

inline void soap_delete_ns1__editTestConfigByRecordIDResponse(struct soap *soap, struct ns1__editTestConfigByRecordIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editTestConfigByRecordIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editTestConfig
#define SOAP_TYPE_ns1__editTestConfig (291)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editTestConfig(struct soap*, struct ns1__editTestConfig *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editTestConfig(struct soap*, const struct ns1__editTestConfig *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editTestConfig(struct soap*, const char*, int, const struct ns1__editTestConfig *, const char*);
SOAP_FMAC3 struct ns1__editTestConfig * SOAP_FMAC4 soap_in_ns1__editTestConfig(struct soap*, const char*, struct ns1__editTestConfig *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editTestConfig(struct soap*, const struct ns1__editTestConfig *, const char*, const char*);

#ifndef soap_write_ns1__editTestConfig
#define soap_write_ns1__editTestConfig(soap, data) ( soap_begin(soap), soap_serialize_ns1__editTestConfig(soap, data), soap_begin_send(soap) || soap_put_ns1__editTestConfig(soap, data, "ns1:editTestConfig", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editTestConfig * SOAP_FMAC4 soap_get_ns1__editTestConfig(struct soap*, struct ns1__editTestConfig *, const char*, const char*);

#ifndef soap_read_ns1__editTestConfig
#define soap_read_ns1__editTestConfig(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editTestConfig(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editTestConfig * SOAP_FMAC2 soap_instantiate_ns1__editTestConfig(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editTestConfig * soap_new_ns1__editTestConfig(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editTestConfig(soap, n, NULL, NULL, NULL); }

inline struct ns1__editTestConfig * soap_new_req_ns1__editTestConfig(struct soap *soap, LONG64 cookie) { struct ns1__editTestConfig *_p = soap_instantiate_ns1__editTestConfig(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editTestConfig(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__editTestConfig * soap_new_set_ns1__editTestConfig(struct soap *soap, LONG64 cookie, char *name) { struct ns1__editTestConfig *_p = soap_instantiate_ns1__editTestConfig(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editTestConfig(soap, _p); _p->cookie = cookie; _p->name = name; } return _p; }

inline void soap_delete_ns1__editTestConfig(struct soap *soap, struct ns1__editTestConfig *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editTestConfig(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__editTestConfigResponse
#define SOAP_TYPE_ns1__editTestConfigResponse (288)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__editTestConfigResponse(struct soap*, struct ns1__editTestConfigResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__editTestConfigResponse(struct soap*, const struct ns1__editTestConfigResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__editTestConfigResponse(struct soap*, const char*, int, const struct ns1__editTestConfigResponse *, const char*);
SOAP_FMAC3 struct ns1__editTestConfigResponse * SOAP_FMAC4 soap_in_ns1__editTestConfigResponse(struct soap*, const char*, struct ns1__editTestConfigResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__editTestConfigResponse(struct soap*, const struct ns1__editTestConfigResponse *, const char*, const char*);

#ifndef soap_write_ns1__editTestConfigResponse
#define soap_write_ns1__editTestConfigResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__editTestConfigResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__editTestConfigResponse(soap, data, "ns1:editTestConfigResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__editTestConfigResponse * SOAP_FMAC4 soap_get_ns1__editTestConfigResponse(struct soap*, struct ns1__editTestConfigResponse *, const char*, const char*);

#ifndef soap_read_ns1__editTestConfigResponse
#define soap_read_ns1__editTestConfigResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__editTestConfigResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__editTestConfigResponse * SOAP_FMAC2 soap_instantiate_ns1__editTestConfigResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__editTestConfigResponse * soap_new_ns1__editTestConfigResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__editTestConfigResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__editTestConfigResponse * soap_new_req_ns1__editTestConfigResponse(struct soap *soap) { struct ns1__editTestConfigResponse *_p = soap_instantiate_ns1__editTestConfigResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editTestConfigResponse(soap, _p); } return _p; }

inline struct ns1__editTestConfigResponse * soap_new_set_ns1__editTestConfigResponse(struct soap *soap, ns1__CSystem *pTestConfig) { struct ns1__editTestConfigResponse *_p = soap_instantiate_ns1__editTestConfigResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__editTestConfigResponse(soap, _p); _p->pTestConfig = pTestConfig; } return _p; }

inline void soap_delete_ns1__editTestConfigResponse(struct soap *soap, struct ns1__editTestConfigResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__editTestConfigResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__addTestConfig
#define SOAP_TYPE_ns1__addTestConfig (287)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addTestConfig(struct soap*, struct ns1__addTestConfig *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addTestConfig(struct soap*, const struct ns1__addTestConfig *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addTestConfig(struct soap*, const char*, int, const struct ns1__addTestConfig *, const char*);
SOAP_FMAC3 struct ns1__addTestConfig * SOAP_FMAC4 soap_in_ns1__addTestConfig(struct soap*, const char*, struct ns1__addTestConfig *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addTestConfig(struct soap*, const struct ns1__addTestConfig *, const char*, const char*);

#ifndef soap_write_ns1__addTestConfig
#define soap_write_ns1__addTestConfig(soap, data) ( soap_begin(soap), soap_serialize_ns1__addTestConfig(soap, data), soap_begin_send(soap) || soap_put_ns1__addTestConfig(soap, data, "ns1:addTestConfig", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__addTestConfig * SOAP_FMAC4 soap_get_ns1__addTestConfig(struct soap*, struct ns1__addTestConfig *, const char*, const char*);

#ifndef soap_read_ns1__addTestConfig
#define soap_read_ns1__addTestConfig(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__addTestConfig(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__addTestConfig * SOAP_FMAC2 soap_instantiate_ns1__addTestConfig(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__addTestConfig * soap_new_ns1__addTestConfig(struct soap *soap, int n = -1) { return soap_instantiate_ns1__addTestConfig(soap, n, NULL, NULL, NULL); }

inline struct ns1__addTestConfig * soap_new_req_ns1__addTestConfig(struct soap *soap, LONG64 cookie) { struct ns1__addTestConfig *_p = soap_instantiate_ns1__addTestConfig(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addTestConfig(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__addTestConfig * soap_new_set_ns1__addTestConfig(struct soap *soap, LONG64 cookie, ns1__CSystem *pTestConfig) { struct ns1__addTestConfig *_p = soap_instantiate_ns1__addTestConfig(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addTestConfig(soap, _p); _p->cookie = cookie; _p->pTestConfig = pTestConfig; } return _p; }

inline void soap_delete_ns1__addTestConfig(struct soap *soap, struct ns1__addTestConfig *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__addTestConfig(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__addTestConfigResponse
#define SOAP_TYPE_ns1__addTestConfigResponse (286)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addTestConfigResponse(struct soap*, struct ns1__addTestConfigResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addTestConfigResponse(struct soap*, const struct ns1__addTestConfigResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addTestConfigResponse(struct soap*, const char*, int, const struct ns1__addTestConfigResponse *, const char*);
SOAP_FMAC3 struct ns1__addTestConfigResponse * SOAP_FMAC4 soap_in_ns1__addTestConfigResponse(struct soap*, const char*, struct ns1__addTestConfigResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addTestConfigResponse(struct soap*, const struct ns1__addTestConfigResponse *, const char*, const char*);

#ifndef soap_write_ns1__addTestConfigResponse
#define soap_write_ns1__addTestConfigResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__addTestConfigResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__addTestConfigResponse(soap, data, "ns1:addTestConfigResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__addTestConfigResponse * SOAP_FMAC4 soap_get_ns1__addTestConfigResponse(struct soap*, struct ns1__addTestConfigResponse *, const char*, const char*);

#ifndef soap_read_ns1__addTestConfigResponse
#define soap_read_ns1__addTestConfigResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__addTestConfigResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__addTestConfigResponse * SOAP_FMAC2 soap_instantiate_ns1__addTestConfigResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__addTestConfigResponse * soap_new_ns1__addTestConfigResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__addTestConfigResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__addTestConfigResponse * soap_new_req_ns1__addTestConfigResponse(struct soap *soap, LONG64 recordID) { struct ns1__addTestConfigResponse *_p = soap_instantiate_ns1__addTestConfigResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addTestConfigResponse(soap, _p); _p->recordID = recordID; } return _p; }

inline struct ns1__addTestConfigResponse * soap_new_set_ns1__addTestConfigResponse(struct soap *soap, LONG64 recordID) { struct ns1__addTestConfigResponse *_p = soap_instantiate_ns1__addTestConfigResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addTestConfigResponse(soap, _p); _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__addTestConfigResponse(struct soap *soap, struct ns1__addTestConfigResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__addTestConfigResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getTestConfigByRecordID
#define SOAP_TYPE_ns1__getTestConfigByRecordID (284)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getTestConfigByRecordID(struct soap*, struct ns1__getTestConfigByRecordID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getTestConfigByRecordID(struct soap*, const struct ns1__getTestConfigByRecordID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTestConfigByRecordID(struct soap*, const char*, int, const struct ns1__getTestConfigByRecordID *, const char*);
SOAP_FMAC3 struct ns1__getTestConfigByRecordID * SOAP_FMAC4 soap_in_ns1__getTestConfigByRecordID(struct soap*, const char*, struct ns1__getTestConfigByRecordID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getTestConfigByRecordID(struct soap*, const struct ns1__getTestConfigByRecordID *, const char*, const char*);

#ifndef soap_write_ns1__getTestConfigByRecordID
#define soap_write_ns1__getTestConfigByRecordID(soap, data) ( soap_begin(soap), soap_serialize_ns1__getTestConfigByRecordID(soap, data), soap_begin_send(soap) || soap_put_ns1__getTestConfigByRecordID(soap, data, "ns1:getTestConfigByRecordID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getTestConfigByRecordID * SOAP_FMAC4 soap_get_ns1__getTestConfigByRecordID(struct soap*, struct ns1__getTestConfigByRecordID *, const char*, const char*);

#ifndef soap_read_ns1__getTestConfigByRecordID
#define soap_read_ns1__getTestConfigByRecordID(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getTestConfigByRecordID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getTestConfigByRecordID * SOAP_FMAC2 soap_instantiate_ns1__getTestConfigByRecordID(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getTestConfigByRecordID * soap_new_ns1__getTestConfigByRecordID(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getTestConfigByRecordID(soap, n, NULL, NULL, NULL); }

inline struct ns1__getTestConfigByRecordID * soap_new_req_ns1__getTestConfigByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__getTestConfigByRecordID *_p = soap_instantiate_ns1__getTestConfigByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTestConfigByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline struct ns1__getTestConfigByRecordID * soap_new_set_ns1__getTestConfigByRecordID(struct soap *soap, LONG64 cookie, LONG64 recordID) { struct ns1__getTestConfigByRecordID *_p = soap_instantiate_ns1__getTestConfigByRecordID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTestConfigByRecordID(soap, _p); _p->cookie = cookie; _p->recordID = recordID; } return _p; }

inline void soap_delete_ns1__getTestConfigByRecordID(struct soap *soap, struct ns1__getTestConfigByRecordID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getTestConfigByRecordID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getTestConfigByRecordIDResponse
#define SOAP_TYPE_ns1__getTestConfigByRecordIDResponse (281)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getTestConfigByRecordIDResponse(struct soap*, struct ns1__getTestConfigByRecordIDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getTestConfigByRecordIDResponse(struct soap*, const struct ns1__getTestConfigByRecordIDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTestConfigByRecordIDResponse(struct soap*, const char*, int, const struct ns1__getTestConfigByRecordIDResponse *, const char*);
SOAP_FMAC3 struct ns1__getTestConfigByRecordIDResponse * SOAP_FMAC4 soap_in_ns1__getTestConfigByRecordIDResponse(struct soap*, const char*, struct ns1__getTestConfigByRecordIDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getTestConfigByRecordIDResponse(struct soap*, const struct ns1__getTestConfigByRecordIDResponse *, const char*, const char*);

#ifndef soap_write_ns1__getTestConfigByRecordIDResponse
#define soap_write_ns1__getTestConfigByRecordIDResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getTestConfigByRecordIDResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getTestConfigByRecordIDResponse(soap, data, "ns1:getTestConfigByRecordIDResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getTestConfigByRecordIDResponse * SOAP_FMAC4 soap_get_ns1__getTestConfigByRecordIDResponse(struct soap*, struct ns1__getTestConfigByRecordIDResponse *, const char*, const char*);

#ifndef soap_read_ns1__getTestConfigByRecordIDResponse
#define soap_read_ns1__getTestConfigByRecordIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getTestConfigByRecordIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getTestConfigByRecordIDResponse * SOAP_FMAC2 soap_instantiate_ns1__getTestConfigByRecordIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getTestConfigByRecordIDResponse * soap_new_ns1__getTestConfigByRecordIDResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getTestConfigByRecordIDResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getTestConfigByRecordIDResponse * soap_new_req_ns1__getTestConfigByRecordIDResponse(struct soap *soap) { struct ns1__getTestConfigByRecordIDResponse *_p = soap_instantiate_ns1__getTestConfigByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTestConfigByRecordIDResponse(soap, _p); } return _p; }

inline struct ns1__getTestConfigByRecordIDResponse * soap_new_set_ns1__getTestConfigByRecordIDResponse(struct soap *soap, ns1__CSystem *pTestConfig) { struct ns1__getTestConfigByRecordIDResponse *_p = soap_instantiate_ns1__getTestConfigByRecordIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTestConfigByRecordIDResponse(soap, _p); _p->pTestConfig = pTestConfig; } return _p; }

inline void soap_delete_ns1__getTestConfigByRecordIDResponse(struct soap *soap, struct ns1__getTestConfigByRecordIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getTestConfigByRecordIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getTestConfig
#define SOAP_TYPE_ns1__getTestConfig (280)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getTestConfig(struct soap*, struct ns1__getTestConfig *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getTestConfig(struct soap*, const struct ns1__getTestConfig *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTestConfig(struct soap*, const char*, int, const struct ns1__getTestConfig *, const char*);
SOAP_FMAC3 struct ns1__getTestConfig * SOAP_FMAC4 soap_in_ns1__getTestConfig(struct soap*, const char*, struct ns1__getTestConfig *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getTestConfig(struct soap*, const struct ns1__getTestConfig *, const char*, const char*);

#ifndef soap_write_ns1__getTestConfig
#define soap_write_ns1__getTestConfig(soap, data) ( soap_begin(soap), soap_serialize_ns1__getTestConfig(soap, data), soap_begin_send(soap) || soap_put_ns1__getTestConfig(soap, data, "ns1:getTestConfig", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getTestConfig * SOAP_FMAC4 soap_get_ns1__getTestConfig(struct soap*, struct ns1__getTestConfig *, const char*, const char*);

#ifndef soap_read_ns1__getTestConfig
#define soap_read_ns1__getTestConfig(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getTestConfig(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getTestConfig * SOAP_FMAC2 soap_instantiate_ns1__getTestConfig(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getTestConfig * soap_new_ns1__getTestConfig(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getTestConfig(soap, n, NULL, NULL, NULL); }

inline struct ns1__getTestConfig * soap_new_req_ns1__getTestConfig(struct soap *soap, LONG64 cookie) { struct ns1__getTestConfig *_p = soap_instantiate_ns1__getTestConfig(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTestConfig(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__getTestConfig * soap_new_set_ns1__getTestConfig(struct soap *soap, LONG64 cookie, char *name) { struct ns1__getTestConfig *_p = soap_instantiate_ns1__getTestConfig(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTestConfig(soap, _p); _p->cookie = cookie; _p->name = name; } return _p; }

inline void soap_delete_ns1__getTestConfig(struct soap *soap, struct ns1__getTestConfig *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getTestConfig(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getTestConfigResponse
#define SOAP_TYPE_ns1__getTestConfigResponse (277)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getTestConfigResponse(struct soap*, struct ns1__getTestConfigResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getTestConfigResponse(struct soap*, const struct ns1__getTestConfigResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTestConfigResponse(struct soap*, const char*, int, const struct ns1__getTestConfigResponse *, const char*);
SOAP_FMAC3 struct ns1__getTestConfigResponse * SOAP_FMAC4 soap_in_ns1__getTestConfigResponse(struct soap*, const char*, struct ns1__getTestConfigResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getTestConfigResponse(struct soap*, const struct ns1__getTestConfigResponse *, const char*, const char*);

#ifndef soap_write_ns1__getTestConfigResponse
#define soap_write_ns1__getTestConfigResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getTestConfigResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getTestConfigResponse(soap, data, "ns1:getTestConfigResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getTestConfigResponse * SOAP_FMAC4 soap_get_ns1__getTestConfigResponse(struct soap*, struct ns1__getTestConfigResponse *, const char*, const char*);

#ifndef soap_read_ns1__getTestConfigResponse
#define soap_read_ns1__getTestConfigResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getTestConfigResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getTestConfigResponse * SOAP_FMAC2 soap_instantiate_ns1__getTestConfigResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getTestConfigResponse * soap_new_ns1__getTestConfigResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getTestConfigResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getTestConfigResponse * soap_new_req_ns1__getTestConfigResponse(struct soap *soap) { struct ns1__getTestConfigResponse *_p = soap_instantiate_ns1__getTestConfigResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTestConfigResponse(soap, _p); } return _p; }

inline struct ns1__getTestConfigResponse * soap_new_set_ns1__getTestConfigResponse(struct soap *soap, ns1__CSystem *pTestConfig) { struct ns1__getTestConfigResponse *_p = soap_instantiate_ns1__getTestConfigResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTestConfigResponse(soap, _p); _p->pTestConfig = pTestConfig; } return _p; }

inline void soap_delete_ns1__getTestConfigResponse(struct soap *soap, struct ns1__getTestConfigResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getTestConfigResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getRecordListForTable
#define SOAP_TYPE_ns1__getRecordListForTable (276)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getRecordListForTable(struct soap*, struct ns1__getRecordListForTable *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getRecordListForTable(struct soap*, const struct ns1__getRecordListForTable *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getRecordListForTable(struct soap*, const char*, int, const struct ns1__getRecordListForTable *, const char*);
SOAP_FMAC3 struct ns1__getRecordListForTable * SOAP_FMAC4 soap_in_ns1__getRecordListForTable(struct soap*, const char*, struct ns1__getRecordListForTable *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getRecordListForTable(struct soap*, const struct ns1__getRecordListForTable *, const char*, const char*);

#ifndef soap_write_ns1__getRecordListForTable
#define soap_write_ns1__getRecordListForTable(soap, data) ( soap_begin(soap), soap_serialize_ns1__getRecordListForTable(soap, data), soap_begin_send(soap) || soap_put_ns1__getRecordListForTable(soap, data, "ns1:getRecordListForTable", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getRecordListForTable * SOAP_FMAC4 soap_get_ns1__getRecordListForTable(struct soap*, struct ns1__getRecordListForTable *, const char*, const char*);

#ifndef soap_read_ns1__getRecordListForTable
#define soap_read_ns1__getRecordListForTable(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getRecordListForTable(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getRecordListForTable * SOAP_FMAC2 soap_instantiate_ns1__getRecordListForTable(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getRecordListForTable * soap_new_ns1__getRecordListForTable(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getRecordListForTable(soap, n, NULL, NULL, NULL); }

inline struct ns1__getRecordListForTable * soap_new_req_ns1__getRecordListForTable(struct soap *soap, LONG64 cookie) { struct ns1__getRecordListForTable *_p = soap_instantiate_ns1__getRecordListForTable(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getRecordListForTable(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__getRecordListForTable * soap_new_set_ns1__getRecordListForTable(struct soap *soap, LONG64 cookie, char *tablename, char *filtername, ArrayOfCTableColumn *columnlist) { struct ns1__getRecordListForTable *_p = soap_instantiate_ns1__getRecordListForTable(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getRecordListForTable(soap, _p); _p->cookie = cookie; _p->tablename = tablename; _p->filtername = filtername; _p->columnlist = columnlist; } return _p; }

inline void soap_delete_ns1__getRecordListForTable(struct soap *soap, struct ns1__getRecordListForTable *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getRecordListForTable(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getRecordListForTableResponse
#define SOAP_TYPE_ns1__getRecordListForTableResponse (272)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getRecordListForTableResponse(struct soap*, struct ns1__getRecordListForTableResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getRecordListForTableResponse(struct soap*, const struct ns1__getRecordListForTableResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getRecordListForTableResponse(struct soap*, const char*, int, const struct ns1__getRecordListForTableResponse *, const char*);
SOAP_FMAC3 struct ns1__getRecordListForTableResponse * SOAP_FMAC4 soap_in_ns1__getRecordListForTableResponse(struct soap*, const char*, struct ns1__getRecordListForTableResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getRecordListForTableResponse(struct soap*, const struct ns1__getRecordListForTableResponse *, const char*, const char*);

#ifndef soap_write_ns1__getRecordListForTableResponse
#define soap_write_ns1__getRecordListForTableResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getRecordListForTableResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getRecordListForTableResponse(soap, data, "ns1:getRecordListForTableResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getRecordListForTableResponse * SOAP_FMAC4 soap_get_ns1__getRecordListForTableResponse(struct soap*, struct ns1__getRecordListForTableResponse *, const char*, const char*);

#ifndef soap_read_ns1__getRecordListForTableResponse
#define soap_read_ns1__getRecordListForTableResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getRecordListForTableResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getRecordListForTableResponse * SOAP_FMAC2 soap_instantiate_ns1__getRecordListForTableResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getRecordListForTableResponse * soap_new_ns1__getRecordListForTableResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getRecordListForTableResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getRecordListForTableResponse * soap_new_req_ns1__getRecordListForTableResponse(struct soap *soap) { struct ns1__getRecordListForTableResponse *_p = soap_instantiate_ns1__getRecordListForTableResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getRecordListForTableResponse(soap, _p); } return _p; }

inline struct ns1__getRecordListForTableResponse * soap_new_set_ns1__getRecordListForTableResponse(struct soap *soap, ns1__CRecordListSoap *recordlist) { struct ns1__getRecordListForTableResponse *_p = soap_instantiate_ns1__getRecordListForTableResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getRecordListForTableResponse(soap, _p); _p->recordlist = recordlist; } return _p; }

inline void soap_delete_ns1__getRecordListForTableResponse(struct soap *soap, struct ns1__getRecordListForTableResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getRecordListForTableResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getFilterListForTable
#define SOAP_TYPE_ns1__getFilterListForTable (271)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getFilterListForTable(struct soap*, struct ns1__getFilterListForTable *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getFilterListForTable(struct soap*, const struct ns1__getFilterListForTable *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getFilterListForTable(struct soap*, const char*, int, const struct ns1__getFilterListForTable *, const char*);
SOAP_FMAC3 struct ns1__getFilterListForTable * SOAP_FMAC4 soap_in_ns1__getFilterListForTable(struct soap*, const char*, struct ns1__getFilterListForTable *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getFilterListForTable(struct soap*, const struct ns1__getFilterListForTable *, const char*, const char*);

#ifndef soap_write_ns1__getFilterListForTable
#define soap_write_ns1__getFilterListForTable(soap, data) ( soap_begin(soap), soap_serialize_ns1__getFilterListForTable(soap, data), soap_begin_send(soap) || soap_put_ns1__getFilterListForTable(soap, data, "ns1:getFilterListForTable", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getFilterListForTable * SOAP_FMAC4 soap_get_ns1__getFilterListForTable(struct soap*, struct ns1__getFilterListForTable *, const char*, const char*);

#ifndef soap_read_ns1__getFilterListForTable
#define soap_read_ns1__getFilterListForTable(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getFilterListForTable(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getFilterListForTable * SOAP_FMAC2 soap_instantiate_ns1__getFilterListForTable(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getFilterListForTable * soap_new_ns1__getFilterListForTable(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getFilterListForTable(soap, n, NULL, NULL, NULL); }

inline struct ns1__getFilterListForTable * soap_new_req_ns1__getFilterListForTable(struct soap *soap, LONG64 cookie) { struct ns1__getFilterListForTable *_p = soap_instantiate_ns1__getFilterListForTable(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFilterListForTable(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__getFilterListForTable * soap_new_set_ns1__getFilterListForTable(struct soap *soap, LONG64 cookie, char *tablename) { struct ns1__getFilterListForTable *_p = soap_instantiate_ns1__getFilterListForTable(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFilterListForTable(soap, _p); _p->cookie = cookie; _p->tablename = tablename; } return _p; }

inline void soap_delete_ns1__getFilterListForTable(struct soap *soap, struct ns1__getFilterListForTable *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getFilterListForTable(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getFilterListForTableResponse
#define SOAP_TYPE_ns1__getFilterListForTableResponse (268)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getFilterListForTableResponse(struct soap*, struct ns1__getFilterListForTableResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getFilterListForTableResponse(struct soap*, const struct ns1__getFilterListForTableResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getFilterListForTableResponse(struct soap*, const char*, int, const struct ns1__getFilterListForTableResponse *, const char*);
SOAP_FMAC3 struct ns1__getFilterListForTableResponse * SOAP_FMAC4 soap_in_ns1__getFilterListForTableResponse(struct soap*, const char*, struct ns1__getFilterListForTableResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getFilterListForTableResponse(struct soap*, const struct ns1__getFilterListForTableResponse *, const char*, const char*);

#ifndef soap_write_ns1__getFilterListForTableResponse
#define soap_write_ns1__getFilterListForTableResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getFilterListForTableResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getFilterListForTableResponse(soap, data, "ns1:getFilterListForTableResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getFilterListForTableResponse * SOAP_FMAC4 soap_get_ns1__getFilterListForTableResponse(struct soap*, struct ns1__getFilterListForTableResponse *, const char*, const char*);

#ifndef soap_read_ns1__getFilterListForTableResponse
#define soap_read_ns1__getFilterListForTableResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getFilterListForTableResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getFilterListForTableResponse * SOAP_FMAC2 soap_instantiate_ns1__getFilterListForTableResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getFilterListForTableResponse * soap_new_ns1__getFilterListForTableResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getFilterListForTableResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getFilterListForTableResponse * soap_new_req_ns1__getFilterListForTableResponse(struct soap *soap) { struct ns1__getFilterListForTableResponse *_p = soap_instantiate_ns1__getFilterListForTableResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFilterListForTableResponse(soap, _p); } return _p; }

inline struct ns1__getFilterListForTableResponse * soap_new_set_ns1__getFilterListForTableResponse(struct soap *soap, ArrayOfCFilter *pFilterList) { struct ns1__getFilterListForTableResponse *_p = soap_instantiate_ns1__getFilterListForTableResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFilterListForTableResponse(soap, _p); _p->pFilterList = pFilterList; } return _p; }

inline void soap_delete_ns1__getFilterListForTableResponse(struct soap *soap, struct ns1__getFilterListForTableResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getFilterListForTableResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getFilterList
#define SOAP_TYPE_ns1__getFilterList (267)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getFilterList(struct soap*, struct ns1__getFilterList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getFilterList(struct soap*, const struct ns1__getFilterList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getFilterList(struct soap*, const char*, int, const struct ns1__getFilterList *, const char*);
SOAP_FMAC3 struct ns1__getFilterList * SOAP_FMAC4 soap_in_ns1__getFilterList(struct soap*, const char*, struct ns1__getFilterList *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getFilterList(struct soap*, const struct ns1__getFilterList *, const char*, const char*);

#ifndef soap_write_ns1__getFilterList
#define soap_write_ns1__getFilterList(soap, data) ( soap_begin(soap), soap_serialize_ns1__getFilterList(soap, data), soap_begin_send(soap) || soap_put_ns1__getFilterList(soap, data, "ns1:getFilterList", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getFilterList * SOAP_FMAC4 soap_get_ns1__getFilterList(struct soap*, struct ns1__getFilterList *, const char*, const char*);

#ifndef soap_read_ns1__getFilterList
#define soap_read_ns1__getFilterList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getFilterList(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getFilterList * SOAP_FMAC2 soap_instantiate_ns1__getFilterList(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getFilterList * soap_new_ns1__getFilterList(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getFilterList(soap, n, NULL, NULL, NULL); }

inline struct ns1__getFilterList * soap_new_req_ns1__getFilterList(struct soap *soap, LONG64 cookie) { struct ns1__getFilterList *_p = soap_instantiate_ns1__getFilterList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFilterList(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__getFilterList * soap_new_set_ns1__getFilterList(struct soap *soap, LONG64 cookie) { struct ns1__getFilterList *_p = soap_instantiate_ns1__getFilterList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFilterList(soap, _p); _p->cookie = cookie; } return _p; }

inline void soap_delete_ns1__getFilterList(struct soap *soap, struct ns1__getFilterList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getFilterList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getFilterListResponse
#define SOAP_TYPE_ns1__getFilterListResponse (263)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getFilterListResponse(struct soap*, struct ns1__getFilterListResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getFilterListResponse(struct soap*, const struct ns1__getFilterListResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getFilterListResponse(struct soap*, const char*, int, const struct ns1__getFilterListResponse *, const char*);
SOAP_FMAC3 struct ns1__getFilterListResponse * SOAP_FMAC4 soap_in_ns1__getFilterListResponse(struct soap*, const char*, struct ns1__getFilterListResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getFilterListResponse(struct soap*, const struct ns1__getFilterListResponse *, const char*, const char*);

#ifndef soap_write_ns1__getFilterListResponse
#define soap_write_ns1__getFilterListResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getFilterListResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getFilterListResponse(soap, data, "ns1:getFilterListResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getFilterListResponse * SOAP_FMAC4 soap_get_ns1__getFilterListResponse(struct soap*, struct ns1__getFilterListResponse *, const char*, const char*);

#ifndef soap_read_ns1__getFilterListResponse
#define soap_read_ns1__getFilterListResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getFilterListResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getFilterListResponse * SOAP_FMAC2 soap_instantiate_ns1__getFilterListResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getFilterListResponse * soap_new_ns1__getFilterListResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getFilterListResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getFilterListResponse * soap_new_req_ns1__getFilterListResponse(struct soap *soap) { struct ns1__getFilterListResponse *_p = soap_instantiate_ns1__getFilterListResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFilterListResponse(soap, _p); } return _p; }

inline struct ns1__getFilterListResponse * soap_new_set_ns1__getFilterListResponse(struct soap *soap, ArrayOfCFilter *pFilterList) { struct ns1__getFilterListResponse *_p = soap_instantiate_ns1__getFilterListResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getFilterListResponse(soap, _p); _p->pFilterList = pFilterList; } return _p; }

inline void soap_delete_ns1__getFilterListResponse(struct soap *soap, struct ns1__getFilterListResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getFilterListResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getColumnsForTable
#define SOAP_TYPE_ns1__getColumnsForTable (262)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getColumnsForTable(struct soap*, struct ns1__getColumnsForTable *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getColumnsForTable(struct soap*, const struct ns1__getColumnsForTable *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getColumnsForTable(struct soap*, const char*, int, const struct ns1__getColumnsForTable *, const char*);
SOAP_FMAC3 struct ns1__getColumnsForTable * SOAP_FMAC4 soap_in_ns1__getColumnsForTable(struct soap*, const char*, struct ns1__getColumnsForTable *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getColumnsForTable(struct soap*, const struct ns1__getColumnsForTable *, const char*, const char*);

#ifndef soap_write_ns1__getColumnsForTable
#define soap_write_ns1__getColumnsForTable(soap, data) ( soap_begin(soap), soap_serialize_ns1__getColumnsForTable(soap, data), soap_begin_send(soap) || soap_put_ns1__getColumnsForTable(soap, data, "ns1:getColumnsForTable", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getColumnsForTable * SOAP_FMAC4 soap_get_ns1__getColumnsForTable(struct soap*, struct ns1__getColumnsForTable *, const char*, const char*);

#ifndef soap_read_ns1__getColumnsForTable
#define soap_read_ns1__getColumnsForTable(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getColumnsForTable(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getColumnsForTable * SOAP_FMAC2 soap_instantiate_ns1__getColumnsForTable(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getColumnsForTable * soap_new_ns1__getColumnsForTable(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getColumnsForTable(soap, n, NULL, NULL, NULL); }

inline struct ns1__getColumnsForTable * soap_new_req_ns1__getColumnsForTable(struct soap *soap, LONG64 cookie) { struct ns1__getColumnsForTable *_p = soap_instantiate_ns1__getColumnsForTable(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getColumnsForTable(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__getColumnsForTable * soap_new_set_ns1__getColumnsForTable(struct soap *soap, LONG64 cookie, char *tablename) { struct ns1__getColumnsForTable *_p = soap_instantiate_ns1__getColumnsForTable(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getColumnsForTable(soap, _p); _p->cookie = cookie; _p->tablename = tablename; } return _p; }

inline void soap_delete_ns1__getColumnsForTable(struct soap *soap, struct ns1__getColumnsForTable *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getColumnsForTable(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getColumnsForTableResponse
#define SOAP_TYPE_ns1__getColumnsForTableResponse (259)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getColumnsForTableResponse(struct soap*, struct ns1__getColumnsForTableResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getColumnsForTableResponse(struct soap*, const struct ns1__getColumnsForTableResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getColumnsForTableResponse(struct soap*, const char*, int, const struct ns1__getColumnsForTableResponse *, const char*);
SOAP_FMAC3 struct ns1__getColumnsForTableResponse * SOAP_FMAC4 soap_in_ns1__getColumnsForTableResponse(struct soap*, const char*, struct ns1__getColumnsForTableResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getColumnsForTableResponse(struct soap*, const struct ns1__getColumnsForTableResponse *, const char*, const char*);

#ifndef soap_write_ns1__getColumnsForTableResponse
#define soap_write_ns1__getColumnsForTableResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getColumnsForTableResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getColumnsForTableResponse(soap, data, "ns1:getColumnsForTableResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getColumnsForTableResponse * SOAP_FMAC4 soap_get_ns1__getColumnsForTableResponse(struct soap*, struct ns1__getColumnsForTableResponse *, const char*, const char*);

#ifndef soap_read_ns1__getColumnsForTableResponse
#define soap_read_ns1__getColumnsForTableResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getColumnsForTableResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getColumnsForTableResponse * SOAP_FMAC2 soap_instantiate_ns1__getColumnsForTableResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getColumnsForTableResponse * soap_new_ns1__getColumnsForTableResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getColumnsForTableResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getColumnsForTableResponse * soap_new_req_ns1__getColumnsForTableResponse(struct soap *soap) { struct ns1__getColumnsForTableResponse *_p = soap_instantiate_ns1__getColumnsForTableResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getColumnsForTableResponse(soap, _p); } return _p; }

inline struct ns1__getColumnsForTableResponse * soap_new_set_ns1__getColumnsForTableResponse(struct soap *soap, ArrayOfCTableColumn *pColumnList) { struct ns1__getColumnsForTableResponse *_p = soap_instantiate_ns1__getColumnsForTableResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getColumnsForTableResponse(soap, _p); _p->pColumnList = pColumnList; } return _p; }

inline void soap_delete_ns1__getColumnsForTableResponse(struct soap *soap, struct ns1__getColumnsForTableResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getColumnsForTableResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__GetLinkDefinitionValues
#define SOAP_TYPE_ns1__GetLinkDefinitionValues (258)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetLinkDefinitionValues(struct soap*, struct ns1__GetLinkDefinitionValues *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetLinkDefinitionValues(struct soap*, const struct ns1__GetLinkDefinitionValues *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetLinkDefinitionValues(struct soap*, const char*, int, const struct ns1__GetLinkDefinitionValues *, const char*);
SOAP_FMAC3 struct ns1__GetLinkDefinitionValues * SOAP_FMAC4 soap_in_ns1__GetLinkDefinitionValues(struct soap*, const char*, struct ns1__GetLinkDefinitionValues *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetLinkDefinitionValues(struct soap*, const struct ns1__GetLinkDefinitionValues *, const char*, const char*);

#ifndef soap_write_ns1__GetLinkDefinitionValues
#define soap_write_ns1__GetLinkDefinitionValues(soap, data) ( soap_begin(soap), soap_serialize_ns1__GetLinkDefinitionValues(soap, data), soap_begin_send(soap) || soap_put_ns1__GetLinkDefinitionValues(soap, data, "ns1:GetLinkDefinitionValues", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__GetLinkDefinitionValues * SOAP_FMAC4 soap_get_ns1__GetLinkDefinitionValues(struct soap*, struct ns1__GetLinkDefinitionValues *, const char*, const char*);

#ifndef soap_read_ns1__GetLinkDefinitionValues
#define soap_read_ns1__GetLinkDefinitionValues(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__GetLinkDefinitionValues(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__GetLinkDefinitionValues * SOAP_FMAC2 soap_instantiate_ns1__GetLinkDefinitionValues(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetLinkDefinitionValues * soap_new_ns1__GetLinkDefinitionValues(struct soap *soap, int n = -1) { return soap_instantiate_ns1__GetLinkDefinitionValues(soap, n, NULL, NULL, NULL); }

inline struct ns1__GetLinkDefinitionValues * soap_new_req_ns1__GetLinkDefinitionValues(struct soap *soap, LONG64 cookie) { struct ns1__GetLinkDefinitionValues *_p = soap_instantiate_ns1__GetLinkDefinitionValues(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__GetLinkDefinitionValues(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__GetLinkDefinitionValues * soap_new_set_ns1__GetLinkDefinitionValues(struct soap *soap, LONG64 cookie) { struct ns1__GetLinkDefinitionValues *_p = soap_instantiate_ns1__GetLinkDefinitionValues(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__GetLinkDefinitionValues(soap, _p); _p->cookie = cookie; } return _p; }

inline void soap_delete_ns1__GetLinkDefinitionValues(struct soap *soap, struct ns1__GetLinkDefinitionValues *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__GetLinkDefinitionValues(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__GetLinkDefinitionValuesResponse
#define SOAP_TYPE_ns1__GetLinkDefinitionValuesResponse (255)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetLinkDefinitionValuesResponse(struct soap*, struct ns1__GetLinkDefinitionValuesResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetLinkDefinitionValuesResponse(struct soap*, const struct ns1__GetLinkDefinitionValuesResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetLinkDefinitionValuesResponse(struct soap*, const char*, int, const struct ns1__GetLinkDefinitionValuesResponse *, const char*);
SOAP_FMAC3 struct ns1__GetLinkDefinitionValuesResponse * SOAP_FMAC4 soap_in_ns1__GetLinkDefinitionValuesResponse(struct soap*, const char*, struct ns1__GetLinkDefinitionValuesResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetLinkDefinitionValuesResponse(struct soap*, const struct ns1__GetLinkDefinitionValuesResponse *, const char*, const char*);

#ifndef soap_write_ns1__GetLinkDefinitionValuesResponse
#define soap_write_ns1__GetLinkDefinitionValuesResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__GetLinkDefinitionValuesResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__GetLinkDefinitionValuesResponse(soap, data, "ns1:GetLinkDefinitionValuesResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__GetLinkDefinitionValuesResponse * SOAP_FMAC4 soap_get_ns1__GetLinkDefinitionValuesResponse(struct soap*, struct ns1__GetLinkDefinitionValuesResponse *, const char*, const char*);

#ifndef soap_read_ns1__GetLinkDefinitionValuesResponse
#define soap_read_ns1__GetLinkDefinitionValuesResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__GetLinkDefinitionValuesResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__GetLinkDefinitionValuesResponse * SOAP_FMAC2 soap_instantiate_ns1__GetLinkDefinitionValuesResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetLinkDefinitionValuesResponse * soap_new_ns1__GetLinkDefinitionValuesResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__GetLinkDefinitionValuesResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__GetLinkDefinitionValuesResponse * soap_new_req_ns1__GetLinkDefinitionValuesResponse(struct soap *soap) { struct ns1__GetLinkDefinitionValuesResponse *_p = soap_instantiate_ns1__GetLinkDefinitionValuesResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__GetLinkDefinitionValuesResponse(soap, _p); } return _p; }

inline struct ns1__GetLinkDefinitionValuesResponse * soap_new_set_ns1__GetLinkDefinitionValuesResponse(struct soap *soap, ArrayOfCFieldValue *pValueList) { struct ns1__GetLinkDefinitionValuesResponse *_p = soap_instantiate_ns1__GetLinkDefinitionValuesResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__GetLinkDefinitionValuesResponse(soap, _p); _p->pValueList = pValueList; } return _p; }

inline void soap_delete_ns1__GetLinkDefinitionValuesResponse(struct soap *soap, struct ns1__GetLinkDefinitionValuesResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__GetLinkDefinitionValuesResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__addDropdownFieldValuesForTable
#define SOAP_TYPE_ns1__addDropdownFieldValuesForTable (254)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addDropdownFieldValuesForTable(struct soap*, struct ns1__addDropdownFieldValuesForTable *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addDropdownFieldValuesForTable(struct soap*, const struct ns1__addDropdownFieldValuesForTable *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addDropdownFieldValuesForTable(struct soap*, const char*, int, const struct ns1__addDropdownFieldValuesForTable *, const char*);
SOAP_FMAC3 struct ns1__addDropdownFieldValuesForTable * SOAP_FMAC4 soap_in_ns1__addDropdownFieldValuesForTable(struct soap*, const char*, struct ns1__addDropdownFieldValuesForTable *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addDropdownFieldValuesForTable(struct soap*, const struct ns1__addDropdownFieldValuesForTable *, const char*, const char*);

#ifndef soap_write_ns1__addDropdownFieldValuesForTable
#define soap_write_ns1__addDropdownFieldValuesForTable(soap, data) ( soap_begin(soap), soap_serialize_ns1__addDropdownFieldValuesForTable(soap, data), soap_begin_send(soap) || soap_put_ns1__addDropdownFieldValuesForTable(soap, data, "ns1:addDropdownFieldValuesForTable", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__addDropdownFieldValuesForTable * SOAP_FMAC4 soap_get_ns1__addDropdownFieldValuesForTable(struct soap*, struct ns1__addDropdownFieldValuesForTable *, const char*, const char*);

#ifndef soap_read_ns1__addDropdownFieldValuesForTable
#define soap_read_ns1__addDropdownFieldValuesForTable(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__addDropdownFieldValuesForTable(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__addDropdownFieldValuesForTable * SOAP_FMAC2 soap_instantiate_ns1__addDropdownFieldValuesForTable(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__addDropdownFieldValuesForTable * soap_new_ns1__addDropdownFieldValuesForTable(struct soap *soap, int n = -1) { return soap_instantiate_ns1__addDropdownFieldValuesForTable(soap, n, NULL, NULL, NULL); }

inline struct ns1__addDropdownFieldValuesForTable * soap_new_req_ns1__addDropdownFieldValuesForTable(struct soap *soap, LONG64 cookie) { struct ns1__addDropdownFieldValuesForTable *_p = soap_instantiate_ns1__addDropdownFieldValuesForTable(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addDropdownFieldValuesForTable(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__addDropdownFieldValuesForTable * soap_new_set_ns1__addDropdownFieldValuesForTable(struct soap *soap, LONG64 cookie, char *tablename, char *fieldname, ArrayOfCFieldValue *pValueList) { struct ns1__addDropdownFieldValuesForTable *_p = soap_instantiate_ns1__addDropdownFieldValuesForTable(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addDropdownFieldValuesForTable(soap, _p); _p->cookie = cookie; _p->tablename = tablename; _p->fieldname = fieldname; _p->pValueList = pValueList; } return _p; }

inline void soap_delete_ns1__addDropdownFieldValuesForTable(struct soap *soap, struct ns1__addDropdownFieldValuesForTable *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__addDropdownFieldValuesForTable(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__addDropdownFieldValuesForTableResponse
#define SOAP_TYPE_ns1__addDropdownFieldValuesForTableResponse (253)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addDropdownFieldValuesForTableResponse(struct soap*, struct ns1__addDropdownFieldValuesForTableResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addDropdownFieldValuesForTableResponse(struct soap*, const struct ns1__addDropdownFieldValuesForTableResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addDropdownFieldValuesForTableResponse(struct soap*, const char*, int, const struct ns1__addDropdownFieldValuesForTableResponse *, const char*);
SOAP_FMAC3 struct ns1__addDropdownFieldValuesForTableResponse * SOAP_FMAC4 soap_in_ns1__addDropdownFieldValuesForTableResponse(struct soap*, const char*, struct ns1__addDropdownFieldValuesForTableResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addDropdownFieldValuesForTableResponse(struct soap*, const struct ns1__addDropdownFieldValuesForTableResponse *, const char*, const char*);

#ifndef soap_write_ns1__addDropdownFieldValuesForTableResponse
#define soap_write_ns1__addDropdownFieldValuesForTableResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__addDropdownFieldValuesForTableResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__addDropdownFieldValuesForTableResponse(soap, data, "ns1:addDropdownFieldValuesForTableResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__addDropdownFieldValuesForTableResponse * SOAP_FMAC4 soap_get_ns1__addDropdownFieldValuesForTableResponse(struct soap*, struct ns1__addDropdownFieldValuesForTableResponse *, const char*, const char*);

#ifndef soap_read_ns1__addDropdownFieldValuesForTableResponse
#define soap_read_ns1__addDropdownFieldValuesForTableResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__addDropdownFieldValuesForTableResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__addDropdownFieldValuesForTableResponse * SOAP_FMAC2 soap_instantiate_ns1__addDropdownFieldValuesForTableResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__addDropdownFieldValuesForTableResponse * soap_new_ns1__addDropdownFieldValuesForTableResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__addDropdownFieldValuesForTableResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__addDropdownFieldValuesForTableResponse * soap_new_req_ns1__addDropdownFieldValuesForTableResponse(struct soap *soap, int result) { struct ns1__addDropdownFieldValuesForTableResponse *_p = soap_instantiate_ns1__addDropdownFieldValuesForTableResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addDropdownFieldValuesForTableResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__addDropdownFieldValuesForTableResponse * soap_new_set_ns1__addDropdownFieldValuesForTableResponse(struct soap *soap, int result) { struct ns1__addDropdownFieldValuesForTableResponse *_p = soap_instantiate_ns1__addDropdownFieldValuesForTableResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addDropdownFieldValuesForTableResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__addDropdownFieldValuesForTableResponse(struct soap *soap, struct ns1__addDropdownFieldValuesForTableResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__addDropdownFieldValuesForTableResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getDropdownFieldValuesForTable
#define SOAP_TYPE_ns1__getDropdownFieldValuesForTable (251)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getDropdownFieldValuesForTable(struct soap*, struct ns1__getDropdownFieldValuesForTable *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getDropdownFieldValuesForTable(struct soap*, const struct ns1__getDropdownFieldValuesForTable *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getDropdownFieldValuesForTable(struct soap*, const char*, int, const struct ns1__getDropdownFieldValuesForTable *, const char*);
SOAP_FMAC3 struct ns1__getDropdownFieldValuesForTable * SOAP_FMAC4 soap_in_ns1__getDropdownFieldValuesForTable(struct soap*, const char*, struct ns1__getDropdownFieldValuesForTable *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getDropdownFieldValuesForTable(struct soap*, const struct ns1__getDropdownFieldValuesForTable *, const char*, const char*);

#ifndef soap_write_ns1__getDropdownFieldValuesForTable
#define soap_write_ns1__getDropdownFieldValuesForTable(soap, data) ( soap_begin(soap), soap_serialize_ns1__getDropdownFieldValuesForTable(soap, data), soap_begin_send(soap) || soap_put_ns1__getDropdownFieldValuesForTable(soap, data, "ns1:getDropdownFieldValuesForTable", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getDropdownFieldValuesForTable * SOAP_FMAC4 soap_get_ns1__getDropdownFieldValuesForTable(struct soap*, struct ns1__getDropdownFieldValuesForTable *, const char*, const char*);

#ifndef soap_read_ns1__getDropdownFieldValuesForTable
#define soap_read_ns1__getDropdownFieldValuesForTable(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getDropdownFieldValuesForTable(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getDropdownFieldValuesForTable * SOAP_FMAC2 soap_instantiate_ns1__getDropdownFieldValuesForTable(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getDropdownFieldValuesForTable * soap_new_ns1__getDropdownFieldValuesForTable(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getDropdownFieldValuesForTable(soap, n, NULL, NULL, NULL); }

inline struct ns1__getDropdownFieldValuesForTable * soap_new_req_ns1__getDropdownFieldValuesForTable(struct soap *soap, LONG64 cookie) { struct ns1__getDropdownFieldValuesForTable *_p = soap_instantiate_ns1__getDropdownFieldValuesForTable(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDropdownFieldValuesForTable(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__getDropdownFieldValuesForTable * soap_new_set_ns1__getDropdownFieldValuesForTable(struct soap *soap, LONG64 cookie, char *tablename, char *fieldname) { struct ns1__getDropdownFieldValuesForTable *_p = soap_instantiate_ns1__getDropdownFieldValuesForTable(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDropdownFieldValuesForTable(soap, _p); _p->cookie = cookie; _p->tablename = tablename; _p->fieldname = fieldname; } return _p; }

inline void soap_delete_ns1__getDropdownFieldValuesForTable(struct soap *soap, struct ns1__getDropdownFieldValuesForTable *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getDropdownFieldValuesForTable(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getDropdownFieldValuesForTableResponse
#define SOAP_TYPE_ns1__getDropdownFieldValuesForTableResponse (248)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getDropdownFieldValuesForTableResponse(struct soap*, struct ns1__getDropdownFieldValuesForTableResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getDropdownFieldValuesForTableResponse(struct soap*, const struct ns1__getDropdownFieldValuesForTableResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getDropdownFieldValuesForTableResponse(struct soap*, const char*, int, const struct ns1__getDropdownFieldValuesForTableResponse *, const char*);
SOAP_FMAC3 struct ns1__getDropdownFieldValuesForTableResponse * SOAP_FMAC4 soap_in_ns1__getDropdownFieldValuesForTableResponse(struct soap*, const char*, struct ns1__getDropdownFieldValuesForTableResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getDropdownFieldValuesForTableResponse(struct soap*, const struct ns1__getDropdownFieldValuesForTableResponse *, const char*, const char*);

#ifndef soap_write_ns1__getDropdownFieldValuesForTableResponse
#define soap_write_ns1__getDropdownFieldValuesForTableResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getDropdownFieldValuesForTableResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getDropdownFieldValuesForTableResponse(soap, data, "ns1:getDropdownFieldValuesForTableResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getDropdownFieldValuesForTableResponse * SOAP_FMAC4 soap_get_ns1__getDropdownFieldValuesForTableResponse(struct soap*, struct ns1__getDropdownFieldValuesForTableResponse *, const char*, const char*);

#ifndef soap_read_ns1__getDropdownFieldValuesForTableResponse
#define soap_read_ns1__getDropdownFieldValuesForTableResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getDropdownFieldValuesForTableResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getDropdownFieldValuesForTableResponse * SOAP_FMAC2 soap_instantiate_ns1__getDropdownFieldValuesForTableResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getDropdownFieldValuesForTableResponse * soap_new_ns1__getDropdownFieldValuesForTableResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getDropdownFieldValuesForTableResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getDropdownFieldValuesForTableResponse * soap_new_req_ns1__getDropdownFieldValuesForTableResponse(struct soap *soap) { struct ns1__getDropdownFieldValuesForTableResponse *_p = soap_instantiate_ns1__getDropdownFieldValuesForTableResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDropdownFieldValuesForTableResponse(soap, _p); } return _p; }

inline struct ns1__getDropdownFieldValuesForTableResponse * soap_new_set_ns1__getDropdownFieldValuesForTableResponse(struct soap *soap, ArrayOfCFieldValue *pValueList) { struct ns1__getDropdownFieldValuesForTableResponse *_p = soap_instantiate_ns1__getDropdownFieldValuesForTableResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDropdownFieldValuesForTableResponse(soap, _p); _p->pValueList = pValueList; } return _p; }

inline void soap_delete_ns1__getDropdownFieldValuesForTableResponse(struct soap *soap, struct ns1__getDropdownFieldValuesForTableResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getDropdownFieldValuesForTableResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getDropdownFieldForTable
#define SOAP_TYPE_ns1__getDropdownFieldForTable (247)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getDropdownFieldForTable(struct soap*, struct ns1__getDropdownFieldForTable *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getDropdownFieldForTable(struct soap*, const struct ns1__getDropdownFieldForTable *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getDropdownFieldForTable(struct soap*, const char*, int, const struct ns1__getDropdownFieldForTable *, const char*);
SOAP_FMAC3 struct ns1__getDropdownFieldForTable * SOAP_FMAC4 soap_in_ns1__getDropdownFieldForTable(struct soap*, const char*, struct ns1__getDropdownFieldForTable *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getDropdownFieldForTable(struct soap*, const struct ns1__getDropdownFieldForTable *, const char*, const char*);

#ifndef soap_write_ns1__getDropdownFieldForTable
#define soap_write_ns1__getDropdownFieldForTable(soap, data) ( soap_begin(soap), soap_serialize_ns1__getDropdownFieldForTable(soap, data), soap_begin_send(soap) || soap_put_ns1__getDropdownFieldForTable(soap, data, "ns1:getDropdownFieldForTable", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getDropdownFieldForTable * SOAP_FMAC4 soap_get_ns1__getDropdownFieldForTable(struct soap*, struct ns1__getDropdownFieldForTable *, const char*, const char*);

#ifndef soap_read_ns1__getDropdownFieldForTable
#define soap_read_ns1__getDropdownFieldForTable(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getDropdownFieldForTable(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getDropdownFieldForTable * SOAP_FMAC2 soap_instantiate_ns1__getDropdownFieldForTable(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getDropdownFieldForTable * soap_new_ns1__getDropdownFieldForTable(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getDropdownFieldForTable(soap, n, NULL, NULL, NULL); }

inline struct ns1__getDropdownFieldForTable * soap_new_req_ns1__getDropdownFieldForTable(struct soap *soap, LONG64 cookie) { struct ns1__getDropdownFieldForTable *_p = soap_instantiate_ns1__getDropdownFieldForTable(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDropdownFieldForTable(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__getDropdownFieldForTable * soap_new_set_ns1__getDropdownFieldForTable(struct soap *soap, LONG64 cookie, char *tablename) { struct ns1__getDropdownFieldForTable *_p = soap_instantiate_ns1__getDropdownFieldForTable(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDropdownFieldForTable(soap, _p); _p->cookie = cookie; _p->tablename = tablename; } return _p; }

inline void soap_delete_ns1__getDropdownFieldForTable(struct soap *soap, struct ns1__getDropdownFieldForTable *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getDropdownFieldForTable(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getDropdownFieldForTableResponse
#define SOAP_TYPE_ns1__getDropdownFieldForTableResponse (243)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getDropdownFieldForTableResponse(struct soap*, struct ns1__getDropdownFieldForTableResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getDropdownFieldForTableResponse(struct soap*, const struct ns1__getDropdownFieldForTableResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getDropdownFieldForTableResponse(struct soap*, const char*, int, const struct ns1__getDropdownFieldForTableResponse *, const char*);
SOAP_FMAC3 struct ns1__getDropdownFieldForTableResponse * SOAP_FMAC4 soap_in_ns1__getDropdownFieldForTableResponse(struct soap*, const char*, struct ns1__getDropdownFieldForTableResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getDropdownFieldForTableResponse(struct soap*, const struct ns1__getDropdownFieldForTableResponse *, const char*, const char*);

#ifndef soap_write_ns1__getDropdownFieldForTableResponse
#define soap_write_ns1__getDropdownFieldForTableResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getDropdownFieldForTableResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getDropdownFieldForTableResponse(soap, data, "ns1:getDropdownFieldForTableResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getDropdownFieldForTableResponse * SOAP_FMAC4 soap_get_ns1__getDropdownFieldForTableResponse(struct soap*, struct ns1__getDropdownFieldForTableResponse *, const char*, const char*);

#ifndef soap_read_ns1__getDropdownFieldForTableResponse
#define soap_read_ns1__getDropdownFieldForTableResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getDropdownFieldForTableResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getDropdownFieldForTableResponse * SOAP_FMAC2 soap_instantiate_ns1__getDropdownFieldForTableResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getDropdownFieldForTableResponse * soap_new_ns1__getDropdownFieldForTableResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getDropdownFieldForTableResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getDropdownFieldForTableResponse * soap_new_req_ns1__getDropdownFieldForTableResponse(struct soap *soap) { struct ns1__getDropdownFieldForTableResponse *_p = soap_instantiate_ns1__getDropdownFieldForTableResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDropdownFieldForTableResponse(soap, _p); } return _p; }

inline struct ns1__getDropdownFieldForTableResponse * soap_new_set_ns1__getDropdownFieldForTableResponse(struct soap *soap, ArrayOfCTableField *pFieldList) { struct ns1__getDropdownFieldForTableResponse *_p = soap_instantiate_ns1__getDropdownFieldForTableResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDropdownFieldForTableResponse(soap, _p); _p->pFieldList = pFieldList; } return _p; }

inline void soap_delete_ns1__getDropdownFieldForTableResponse(struct soap *soap, struct ns1__getDropdownFieldForTableResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getDropdownFieldForTableResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getTableList
#define SOAP_TYPE_ns1__getTableList (242)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getTableList(struct soap*, struct ns1__getTableList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getTableList(struct soap*, const struct ns1__getTableList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTableList(struct soap*, const char*, int, const struct ns1__getTableList *, const char*);
SOAP_FMAC3 struct ns1__getTableList * SOAP_FMAC4 soap_in_ns1__getTableList(struct soap*, const char*, struct ns1__getTableList *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getTableList(struct soap*, const struct ns1__getTableList *, const char*, const char*);

#ifndef soap_write_ns1__getTableList
#define soap_write_ns1__getTableList(soap, data) ( soap_begin(soap), soap_serialize_ns1__getTableList(soap, data), soap_begin_send(soap) || soap_put_ns1__getTableList(soap, data, "ns1:getTableList", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getTableList * SOAP_FMAC4 soap_get_ns1__getTableList(struct soap*, struct ns1__getTableList *, const char*, const char*);

#ifndef soap_read_ns1__getTableList
#define soap_read_ns1__getTableList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getTableList(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getTableList * SOAP_FMAC2 soap_instantiate_ns1__getTableList(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getTableList * soap_new_ns1__getTableList(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getTableList(soap, n, NULL, NULL, NULL); }

inline struct ns1__getTableList * soap_new_req_ns1__getTableList(struct soap *soap, LONG64 cookie) { struct ns1__getTableList *_p = soap_instantiate_ns1__getTableList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTableList(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__getTableList * soap_new_set_ns1__getTableList(struct soap *soap, LONG64 cookie) { struct ns1__getTableList *_p = soap_instantiate_ns1__getTableList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTableList(soap, _p); _p->cookie = cookie; } return _p; }

inline void soap_delete_ns1__getTableList(struct soap *soap, struct ns1__getTableList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getTableList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getTableListResponse
#define SOAP_TYPE_ns1__getTableListResponse (238)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getTableListResponse(struct soap*, struct ns1__getTableListResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getTableListResponse(struct soap*, const struct ns1__getTableListResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getTableListResponse(struct soap*, const char*, int, const struct ns1__getTableListResponse *, const char*);
SOAP_FMAC3 struct ns1__getTableListResponse * SOAP_FMAC4 soap_in_ns1__getTableListResponse(struct soap*, const char*, struct ns1__getTableListResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getTableListResponse(struct soap*, const struct ns1__getTableListResponse *, const char*, const char*);

#ifndef soap_write_ns1__getTableListResponse
#define soap_write_ns1__getTableListResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getTableListResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getTableListResponse(soap, data, "ns1:getTableListResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getTableListResponse * SOAP_FMAC4 soap_get_ns1__getTableListResponse(struct soap*, struct ns1__getTableListResponse *, const char*, const char*);

#ifndef soap_read_ns1__getTableListResponse
#define soap_read_ns1__getTableListResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getTableListResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getTableListResponse * SOAP_FMAC2 soap_instantiate_ns1__getTableListResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getTableListResponse * soap_new_ns1__getTableListResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getTableListResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getTableListResponse * soap_new_req_ns1__getTableListResponse(struct soap *soap) { struct ns1__getTableListResponse *_p = soap_instantiate_ns1__getTableListResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTableListResponse(soap, _p); } return _p; }

inline struct ns1__getTableListResponse * soap_new_set_ns1__getTableListResponse(struct soap *soap, ArrayOfCDatabaseTable *pTableList) { struct ns1__getTableListResponse *_p = soap_instantiate_ns1__getTableListResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getTableListResponse(soap, _p); _p->pTableList = pTableList; } return _p; }

inline void soap_delete_ns1__getTableListResponse(struct soap *soap, struct ns1__getTableListResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getTableListResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__formattedTextSupport
#define SOAP_TYPE_ns1__formattedTextSupport (237)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__formattedTextSupport(struct soap*, struct ns1__formattedTextSupport *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__formattedTextSupport(struct soap*, const struct ns1__formattedTextSupport *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__formattedTextSupport(struct soap*, const char*, int, const struct ns1__formattedTextSupport *, const char*);
SOAP_FMAC3 struct ns1__formattedTextSupport * SOAP_FMAC4 soap_in_ns1__formattedTextSupport(struct soap*, const char*, struct ns1__formattedTextSupport *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__formattedTextSupport(struct soap*, const struct ns1__formattedTextSupport *, const char*, const char*);

#ifndef soap_write_ns1__formattedTextSupport
#define soap_write_ns1__formattedTextSupport(soap, data) ( soap_begin(soap), soap_serialize_ns1__formattedTextSupport(soap, data), soap_begin_send(soap) || soap_put_ns1__formattedTextSupport(soap, data, "ns1:formattedTextSupport", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__formattedTextSupport * SOAP_FMAC4 soap_get_ns1__formattedTextSupport(struct soap*, struct ns1__formattedTextSupport *, const char*, const char*);

#ifndef soap_read_ns1__formattedTextSupport
#define soap_read_ns1__formattedTextSupport(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__formattedTextSupport(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__formattedTextSupport * SOAP_FMAC2 soap_instantiate_ns1__formattedTextSupport(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__formattedTextSupport * soap_new_ns1__formattedTextSupport(struct soap *soap, int n = -1) { return soap_instantiate_ns1__formattedTextSupport(soap, n, NULL, NULL, NULL); }

inline struct ns1__formattedTextSupport * soap_new_req_ns1__formattedTextSupport(struct soap *soap, LONG64 cookie, bool enableFormattedText) { struct ns1__formattedTextSupport *_p = soap_instantiate_ns1__formattedTextSupport(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__formattedTextSupport(soap, _p); _p->cookie = cookie; _p->enableFormattedText = enableFormattedText; } return _p; }

inline struct ns1__formattedTextSupport * soap_new_set_ns1__formattedTextSupport(struct soap *soap, LONG64 cookie, bool enableFormattedText) { struct ns1__formattedTextSupport *_p = soap_instantiate_ns1__formattedTextSupport(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__formattedTextSupport(soap, _p); _p->cookie = cookie; _p->enableFormattedText = enableFormattedText; } return _p; }

inline void soap_delete_ns1__formattedTextSupport(struct soap *soap, struct ns1__formattedTextSupport *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__formattedTextSupport(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__formattedTextSupportResponse
#define SOAP_TYPE_ns1__formattedTextSupportResponse (236)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__formattedTextSupportResponse(struct soap*, struct ns1__formattedTextSupportResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__formattedTextSupportResponse(struct soap*, const struct ns1__formattedTextSupportResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__formattedTextSupportResponse(struct soap*, const char*, int, const struct ns1__formattedTextSupportResponse *, const char*);
SOAP_FMAC3 struct ns1__formattedTextSupportResponse * SOAP_FMAC4 soap_in_ns1__formattedTextSupportResponse(struct soap*, const char*, struct ns1__formattedTextSupportResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__formattedTextSupportResponse(struct soap*, const struct ns1__formattedTextSupportResponse *, const char*, const char*);

#ifndef soap_write_ns1__formattedTextSupportResponse
#define soap_write_ns1__formattedTextSupportResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__formattedTextSupportResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__formattedTextSupportResponse(soap, data, "ns1:formattedTextSupportResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__formattedTextSupportResponse * SOAP_FMAC4 soap_get_ns1__formattedTextSupportResponse(struct soap*, struct ns1__formattedTextSupportResponse *, const char*, const char*);

#ifndef soap_read_ns1__formattedTextSupportResponse
#define soap_read_ns1__formattedTextSupportResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__formattedTextSupportResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__formattedTextSupportResponse * SOAP_FMAC2 soap_instantiate_ns1__formattedTextSupportResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__formattedTextSupportResponse * soap_new_ns1__formattedTextSupportResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__formattedTextSupportResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__formattedTextSupportResponse * soap_new_req_ns1__formattedTextSupportResponse(struct soap *soap, bool formattingEnabled) { struct ns1__formattedTextSupportResponse *_p = soap_instantiate_ns1__formattedTextSupportResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__formattedTextSupportResponse(soap, _p); _p->formattingEnabled = formattingEnabled; } return _p; }

inline struct ns1__formattedTextSupportResponse * soap_new_set_ns1__formattedTextSupportResponse(struct soap *soap, bool formattingEnabled) { struct ns1__formattedTextSupportResponse *_p = soap_instantiate_ns1__formattedTextSupportResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__formattedTextSupportResponse(soap, _p); _p->formattingEnabled = formattingEnabled; } return _p; }

inline void soap_delete_ns1__formattedTextSupportResponse(struct soap *soap, struct ns1__formattedTextSupportResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__formattedTextSupportResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__DatabaseLogoff
#define SOAP_TYPE_ns1__DatabaseLogoff (233)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DatabaseLogoff(struct soap*, struct ns1__DatabaseLogoff *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DatabaseLogoff(struct soap*, const struct ns1__DatabaseLogoff *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DatabaseLogoff(struct soap*, const char*, int, const struct ns1__DatabaseLogoff *, const char*);
SOAP_FMAC3 struct ns1__DatabaseLogoff * SOAP_FMAC4 soap_in_ns1__DatabaseLogoff(struct soap*, const char*, struct ns1__DatabaseLogoff *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DatabaseLogoff(struct soap*, const struct ns1__DatabaseLogoff *, const char*, const char*);

#ifndef soap_write_ns1__DatabaseLogoff
#define soap_write_ns1__DatabaseLogoff(soap, data) ( soap_begin(soap), soap_serialize_ns1__DatabaseLogoff(soap, data), soap_begin_send(soap) || soap_put_ns1__DatabaseLogoff(soap, data, "ns1:DatabaseLogoff", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__DatabaseLogoff * SOAP_FMAC4 soap_get_ns1__DatabaseLogoff(struct soap*, struct ns1__DatabaseLogoff *, const char*, const char*);

#ifndef soap_read_ns1__DatabaseLogoff
#define soap_read_ns1__DatabaseLogoff(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__DatabaseLogoff(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__DatabaseLogoff * SOAP_FMAC2 soap_instantiate_ns1__DatabaseLogoff(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__DatabaseLogoff * soap_new_ns1__DatabaseLogoff(struct soap *soap, int n = -1) { return soap_instantiate_ns1__DatabaseLogoff(soap, n, NULL, NULL, NULL); }

inline struct ns1__DatabaseLogoff * soap_new_req_ns1__DatabaseLogoff(struct soap *soap, LONG64 cookie) { struct ns1__DatabaseLogoff *_p = soap_instantiate_ns1__DatabaseLogoff(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__DatabaseLogoff(soap, _p); _p->cookie = cookie; } return _p; }

inline struct ns1__DatabaseLogoff * soap_new_set_ns1__DatabaseLogoff(struct soap *soap, LONG64 cookie) { struct ns1__DatabaseLogoff *_p = soap_instantiate_ns1__DatabaseLogoff(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__DatabaseLogoff(soap, _p); _p->cookie = cookie; } return _p; }

inline void soap_delete_ns1__DatabaseLogoff(struct soap *soap, struct ns1__DatabaseLogoff *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__DatabaseLogoff(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__DatabaseLogoffResponse
#define SOAP_TYPE_ns1__DatabaseLogoffResponse (232)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DatabaseLogoffResponse(struct soap*, struct ns1__DatabaseLogoffResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DatabaseLogoffResponse(struct soap*, const struct ns1__DatabaseLogoffResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DatabaseLogoffResponse(struct soap*, const char*, int, const struct ns1__DatabaseLogoffResponse *, const char*);
SOAP_FMAC3 struct ns1__DatabaseLogoffResponse * SOAP_FMAC4 soap_in_ns1__DatabaseLogoffResponse(struct soap*, const char*, struct ns1__DatabaseLogoffResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DatabaseLogoffResponse(struct soap*, const struct ns1__DatabaseLogoffResponse *, const char*, const char*);

#ifndef soap_write_ns1__DatabaseLogoffResponse
#define soap_write_ns1__DatabaseLogoffResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__DatabaseLogoffResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__DatabaseLogoffResponse(soap, data, "ns1:DatabaseLogoffResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__DatabaseLogoffResponse * SOAP_FMAC4 soap_get_ns1__DatabaseLogoffResponse(struct soap*, struct ns1__DatabaseLogoffResponse *, const char*, const char*);

#ifndef soap_read_ns1__DatabaseLogoffResponse
#define soap_read_ns1__DatabaseLogoffResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__DatabaseLogoffResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__DatabaseLogoffResponse * SOAP_FMAC2 soap_instantiate_ns1__DatabaseLogoffResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__DatabaseLogoffResponse * soap_new_ns1__DatabaseLogoffResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__DatabaseLogoffResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__DatabaseLogoffResponse * soap_new_req_ns1__DatabaseLogoffResponse(struct soap *soap, int result) { struct ns1__DatabaseLogoffResponse *_p = soap_instantiate_ns1__DatabaseLogoffResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__DatabaseLogoffResponse(soap, _p); _p->result = result; } return _p; }

inline struct ns1__DatabaseLogoffResponse * soap_new_set_ns1__DatabaseLogoffResponse(struct soap *soap, int result) { struct ns1__DatabaseLogoffResponse *_p = soap_instantiate_ns1__DatabaseLogoffResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__DatabaseLogoffResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns1__DatabaseLogoffResponse(struct soap *soap, struct ns1__DatabaseLogoffResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__DatabaseLogoffResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__ProjectLogon
#define SOAP_TYPE_ns1__ProjectLogon (229)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__ProjectLogon(struct soap*, struct ns1__ProjectLogon *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ProjectLogon(struct soap*, const struct ns1__ProjectLogon *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ProjectLogon(struct soap*, const char*, int, const struct ns1__ProjectLogon *, const char*);
SOAP_FMAC3 struct ns1__ProjectLogon * SOAP_FMAC4 soap_in_ns1__ProjectLogon(struct soap*, const char*, struct ns1__ProjectLogon *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ProjectLogon(struct soap*, const struct ns1__ProjectLogon *, const char*, const char*);

#ifndef soap_write_ns1__ProjectLogon
#define soap_write_ns1__ProjectLogon(soap, data) ( soap_begin(soap), soap_serialize_ns1__ProjectLogon(soap, data), soap_begin_send(soap) || soap_put_ns1__ProjectLogon(soap, data, "ns1:ProjectLogon", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__ProjectLogon * SOAP_FMAC4 soap_get_ns1__ProjectLogon(struct soap*, struct ns1__ProjectLogon *, const char*, const char*);

#ifndef soap_read_ns1__ProjectLogon
#define soap_read_ns1__ProjectLogon(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__ProjectLogon(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__ProjectLogon * SOAP_FMAC2 soap_instantiate_ns1__ProjectLogon(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__ProjectLogon * soap_new_ns1__ProjectLogon(struct soap *soap, int n = -1) { return soap_instantiate_ns1__ProjectLogon(soap, n, NULL, NULL, NULL); }

inline struct ns1__ProjectLogon * soap_new_req_ns1__ProjectLogon(struct soap *soap) { struct ns1__ProjectLogon *_p = soap_instantiate_ns1__ProjectLogon(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__ProjectLogon(soap, _p); } return _p; }

inline struct ns1__ProjectLogon * soap_new_set_ns1__ProjectLogon(struct soap *soap, ns1__CProject *pProj, char *username, char *password) { struct ns1__ProjectLogon *_p = soap_instantiate_ns1__ProjectLogon(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__ProjectLogon(soap, _p); _p->pProj = pProj; _p->username = username; _p->password = password; } return _p; }

inline void soap_delete_ns1__ProjectLogon(struct soap *soap, struct ns1__ProjectLogon *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ProjectLogon(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__ProjectLogonResponse
#define SOAP_TYPE_ns1__ProjectLogonResponse (228)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__ProjectLogonResponse(struct soap*, struct ns1__ProjectLogonResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ProjectLogonResponse(struct soap*, const struct ns1__ProjectLogonResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ProjectLogonResponse(struct soap*, const char*, int, const struct ns1__ProjectLogonResponse *, const char*);
SOAP_FMAC3 struct ns1__ProjectLogonResponse * SOAP_FMAC4 soap_in_ns1__ProjectLogonResponse(struct soap*, const char*, struct ns1__ProjectLogonResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ProjectLogonResponse(struct soap*, const struct ns1__ProjectLogonResponse *, const char*, const char*);

#ifndef soap_write_ns1__ProjectLogonResponse
#define soap_write_ns1__ProjectLogonResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__ProjectLogonResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__ProjectLogonResponse(soap, data, "ns1:ProjectLogonResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__ProjectLogonResponse * SOAP_FMAC4 soap_get_ns1__ProjectLogonResponse(struct soap*, struct ns1__ProjectLogonResponse *, const char*, const char*);

#ifndef soap_read_ns1__ProjectLogonResponse
#define soap_read_ns1__ProjectLogonResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__ProjectLogonResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__ProjectLogonResponse * SOAP_FMAC2 soap_instantiate_ns1__ProjectLogonResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__ProjectLogonResponse * soap_new_ns1__ProjectLogonResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__ProjectLogonResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__ProjectLogonResponse * soap_new_req_ns1__ProjectLogonResponse(struct soap *soap, LONG64 Cookie) { struct ns1__ProjectLogonResponse *_p = soap_instantiate_ns1__ProjectLogonResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__ProjectLogonResponse(soap, _p); _p->Cookie = Cookie; } return _p; }

inline struct ns1__ProjectLogonResponse * soap_new_set_ns1__ProjectLogonResponse(struct soap *soap, LONG64 Cookie) { struct ns1__ProjectLogonResponse *_p = soap_instantiate_ns1__ProjectLogonResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__ProjectLogonResponse(soap, _p); _p->Cookie = Cookie; } return _p; }

inline void soap_delete_ns1__ProjectLogonResponse(struct soap *soap, struct ns1__ProjectLogonResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ProjectLogonResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__DatabaseLogon
#define SOAP_TYPE_ns1__DatabaseLogon (226)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DatabaseLogon(struct soap*, struct ns1__DatabaseLogon *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DatabaseLogon(struct soap*, const struct ns1__DatabaseLogon *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DatabaseLogon(struct soap*, const char*, int, const struct ns1__DatabaseLogon *, const char*);
SOAP_FMAC3 struct ns1__DatabaseLogon * SOAP_FMAC4 soap_in_ns1__DatabaseLogon(struct soap*, const char*, struct ns1__DatabaseLogon *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DatabaseLogon(struct soap*, const struct ns1__DatabaseLogon *, const char*, const char*);

#ifndef soap_write_ns1__DatabaseLogon
#define soap_write_ns1__DatabaseLogon(soap, data) ( soap_begin(soap), soap_serialize_ns1__DatabaseLogon(soap, data), soap_begin_send(soap) || soap_put_ns1__DatabaseLogon(soap, data, "ns1:DatabaseLogon", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__DatabaseLogon * SOAP_FMAC4 soap_get_ns1__DatabaseLogon(struct soap*, struct ns1__DatabaseLogon *, const char*, const char*);

#ifndef soap_read_ns1__DatabaseLogon
#define soap_read_ns1__DatabaseLogon(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__DatabaseLogon(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__DatabaseLogon * SOAP_FMAC2 soap_instantiate_ns1__DatabaseLogon(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__DatabaseLogon * soap_new_ns1__DatabaseLogon(struct soap *soap, int n = -1) { return soap_instantiate_ns1__DatabaseLogon(soap, n, NULL, NULL, NULL); }

inline struct ns1__DatabaseLogon * soap_new_req_ns1__DatabaseLogon(struct soap *soap) { struct ns1__DatabaseLogon *_p = soap_instantiate_ns1__DatabaseLogon(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__DatabaseLogon(soap, _p); } return _p; }

inline struct ns1__DatabaseLogon * soap_new_set_ns1__DatabaseLogon(struct soap *soap, char *dbname, char *username, char *password) { struct ns1__DatabaseLogon *_p = soap_instantiate_ns1__DatabaseLogon(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__DatabaseLogon(soap, _p); _p->dbname = dbname; _p->username = username; _p->password = password; } return _p; }

inline void soap_delete_ns1__DatabaseLogon(struct soap *soap, struct ns1__DatabaseLogon *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__DatabaseLogon(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__DatabaseLogonResponse
#define SOAP_TYPE_ns1__DatabaseLogonResponse (225)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DatabaseLogonResponse(struct soap*, struct ns1__DatabaseLogonResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DatabaseLogonResponse(struct soap*, const struct ns1__DatabaseLogonResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DatabaseLogonResponse(struct soap*, const char*, int, const struct ns1__DatabaseLogonResponse *, const char*);
SOAP_FMAC3 struct ns1__DatabaseLogonResponse * SOAP_FMAC4 soap_in_ns1__DatabaseLogonResponse(struct soap*, const char*, struct ns1__DatabaseLogonResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DatabaseLogonResponse(struct soap*, const struct ns1__DatabaseLogonResponse *, const char*, const char*);

#ifndef soap_write_ns1__DatabaseLogonResponse
#define soap_write_ns1__DatabaseLogonResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__DatabaseLogonResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__DatabaseLogonResponse(soap, data, "ns1:DatabaseLogonResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__DatabaseLogonResponse * SOAP_FMAC4 soap_get_ns1__DatabaseLogonResponse(struct soap*, struct ns1__DatabaseLogonResponse *, const char*, const char*);

#ifndef soap_read_ns1__DatabaseLogonResponse
#define soap_read_ns1__DatabaseLogonResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__DatabaseLogonResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__DatabaseLogonResponse * SOAP_FMAC2 soap_instantiate_ns1__DatabaseLogonResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__DatabaseLogonResponse * soap_new_ns1__DatabaseLogonResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__DatabaseLogonResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__DatabaseLogonResponse * soap_new_req_ns1__DatabaseLogonResponse(struct soap *soap, LONG64 Cookie) { struct ns1__DatabaseLogonResponse *_p = soap_instantiate_ns1__DatabaseLogonResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__DatabaseLogonResponse(soap, _p); _p->Cookie = Cookie; } return _p; }

inline struct ns1__DatabaseLogonResponse * soap_new_set_ns1__DatabaseLogonResponse(struct soap *soap, LONG64 Cookie) { struct ns1__DatabaseLogonResponse *_p = soap_instantiate_ns1__DatabaseLogonResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__DatabaseLogonResponse(soap, _p); _p->Cookie = Cookie; } return _p; }

inline void soap_delete_ns1__DatabaseLogonResponse(struct soap *soap, struct ns1__DatabaseLogonResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__DatabaseLogonResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getProjectDataOptionList
#define SOAP_TYPE_ns1__getProjectDataOptionList (222)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getProjectDataOptionList(struct soap*, struct ns1__getProjectDataOptionList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getProjectDataOptionList(struct soap*, const struct ns1__getProjectDataOptionList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getProjectDataOptionList(struct soap*, const char*, int, const struct ns1__getProjectDataOptionList *, const char*);
SOAP_FMAC3 struct ns1__getProjectDataOptionList * SOAP_FMAC4 soap_in_ns1__getProjectDataOptionList(struct soap*, const char*, struct ns1__getProjectDataOptionList *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getProjectDataOptionList(struct soap*, const struct ns1__getProjectDataOptionList *, const char*, const char*);

#ifndef soap_write_ns1__getProjectDataOptionList
#define soap_write_ns1__getProjectDataOptionList(soap, data) ( soap_begin(soap), soap_serialize_ns1__getProjectDataOptionList(soap, data), soap_begin_send(soap) || soap_put_ns1__getProjectDataOptionList(soap, data, "ns1:getProjectDataOptionList", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getProjectDataOptionList * SOAP_FMAC4 soap_get_ns1__getProjectDataOptionList(struct soap*, struct ns1__getProjectDataOptionList *, const char*, const char*);

#ifndef soap_read_ns1__getProjectDataOptionList
#define soap_read_ns1__getProjectDataOptionList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getProjectDataOptionList(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getProjectDataOptionList * SOAP_FMAC2 soap_instantiate_ns1__getProjectDataOptionList(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getProjectDataOptionList * soap_new_ns1__getProjectDataOptionList(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getProjectDataOptionList(soap, n, NULL, NULL, NULL); }

inline struct ns1__getProjectDataOptionList * soap_new_req_ns1__getProjectDataOptionList(struct soap *soap) { struct ns1__getProjectDataOptionList *_p = soap_instantiate_ns1__getProjectDataOptionList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getProjectDataOptionList(soap, _p); } return _p; }

inline struct ns1__getProjectDataOptionList * soap_new_set_ns1__getProjectDataOptionList(struct soap *soap) { struct ns1__getProjectDataOptionList *_p = soap_instantiate_ns1__getProjectDataOptionList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getProjectDataOptionList(soap, _p); } return _p; }

inline void soap_delete_ns1__getProjectDataOptionList(struct soap *soap, struct ns1__getProjectDataOptionList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getProjectDataOptionList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getProjectDataOptionListResponse
#define SOAP_TYPE_ns1__getProjectDataOptionListResponse (219)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getProjectDataOptionListResponse(struct soap*, struct ns1__getProjectDataOptionListResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getProjectDataOptionListResponse(struct soap*, const struct ns1__getProjectDataOptionListResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getProjectDataOptionListResponse(struct soap*, const char*, int, const struct ns1__getProjectDataOptionListResponse *, const char*);
SOAP_FMAC3 struct ns1__getProjectDataOptionListResponse * SOAP_FMAC4 soap_in_ns1__getProjectDataOptionListResponse(struct soap*, const char*, struct ns1__getProjectDataOptionListResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getProjectDataOptionListResponse(struct soap*, const struct ns1__getProjectDataOptionListResponse *, const char*, const char*);

#ifndef soap_write_ns1__getProjectDataOptionListResponse
#define soap_write_ns1__getProjectDataOptionListResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getProjectDataOptionListResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getProjectDataOptionListResponse(soap, data, "ns1:getProjectDataOptionListResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getProjectDataOptionListResponse * SOAP_FMAC4 soap_get_ns1__getProjectDataOptionListResponse(struct soap*, struct ns1__getProjectDataOptionListResponse *, const char*, const char*);

#ifndef soap_read_ns1__getProjectDataOptionListResponse
#define soap_read_ns1__getProjectDataOptionListResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getProjectDataOptionListResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getProjectDataOptionListResponse * SOAP_FMAC2 soap_instantiate_ns1__getProjectDataOptionListResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getProjectDataOptionListResponse * soap_new_ns1__getProjectDataOptionListResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getProjectDataOptionListResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getProjectDataOptionListResponse * soap_new_req_ns1__getProjectDataOptionListResponse(struct soap *soap) { struct ns1__getProjectDataOptionListResponse *_p = soap_instantiate_ns1__getProjectDataOptionListResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getProjectDataOptionListResponse(soap, _p); } return _p; }

inline struct ns1__getProjectDataOptionListResponse * soap_new_set_ns1__getProjectDataOptionListResponse(struct soap *soap, ArrayOfCProjectDataOption *pProjTypes) { struct ns1__getProjectDataOptionListResponse *_p = soap_instantiate_ns1__getProjectDataOptionListResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getProjectDataOptionListResponse(soap, _p); _p->pProjTypes = pProjTypes; } return _p; }

inline void soap_delete_ns1__getProjectDataOptionListResponse(struct soap *soap, struct ns1__getProjectDataOptionListResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getProjectDataOptionListResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getProjectList
#define SOAP_TYPE_ns1__getProjectList (218)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getProjectList(struct soap*, struct ns1__getProjectList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getProjectList(struct soap*, const struct ns1__getProjectList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getProjectList(struct soap*, const char*, int, const struct ns1__getProjectList *, const char*);
SOAP_FMAC3 struct ns1__getProjectList * SOAP_FMAC4 soap_in_ns1__getProjectList(struct soap*, const char*, struct ns1__getProjectList *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getProjectList(struct soap*, const struct ns1__getProjectList *, const char*, const char*);

#ifndef soap_write_ns1__getProjectList
#define soap_write_ns1__getProjectList(soap, data) ( soap_begin(soap), soap_serialize_ns1__getProjectList(soap, data), soap_begin_send(soap) || soap_put_ns1__getProjectList(soap, data, "ns1:getProjectList", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getProjectList * SOAP_FMAC4 soap_get_ns1__getProjectList(struct soap*, struct ns1__getProjectList *, const char*, const char*);

#ifndef soap_read_ns1__getProjectList
#define soap_read_ns1__getProjectList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getProjectList(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getProjectList * SOAP_FMAC2 soap_instantiate_ns1__getProjectList(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getProjectList * soap_new_ns1__getProjectList(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getProjectList(soap, n, NULL, NULL, NULL); }

inline struct ns1__getProjectList * soap_new_req_ns1__getProjectList(struct soap *soap) { struct ns1__getProjectList *_p = soap_instantiate_ns1__getProjectList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getProjectList(soap, _p); } return _p; }

inline struct ns1__getProjectList * soap_new_set_ns1__getProjectList(struct soap *soap, char *username, char *password) { struct ns1__getProjectList *_p = soap_instantiate_ns1__getProjectList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getProjectList(soap, _p); _p->username = username; _p->password = password; } return _p; }

inline void soap_delete_ns1__getProjectList(struct soap *soap, struct ns1__getProjectList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getProjectList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getProjectListResponse
#define SOAP_TYPE_ns1__getProjectListResponse (214)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getProjectListResponse(struct soap*, struct ns1__getProjectListResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getProjectListResponse(struct soap*, const struct ns1__getProjectListResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getProjectListResponse(struct soap*, const char*, int, const struct ns1__getProjectListResponse *, const char*);
SOAP_FMAC3 struct ns1__getProjectListResponse * SOAP_FMAC4 soap_in_ns1__getProjectListResponse(struct soap*, const char*, struct ns1__getProjectListResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getProjectListResponse(struct soap*, const struct ns1__getProjectListResponse *, const char*, const char*);

#ifndef soap_write_ns1__getProjectListResponse
#define soap_write_ns1__getProjectListResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getProjectListResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getProjectListResponse(soap, data, "ns1:getProjectListResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getProjectListResponse * SOAP_FMAC4 soap_get_ns1__getProjectListResponse(struct soap*, struct ns1__getProjectListResponse *, const char*, const char*);

#ifndef soap_read_ns1__getProjectListResponse
#define soap_read_ns1__getProjectListResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getProjectListResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getProjectListResponse * SOAP_FMAC2 soap_instantiate_ns1__getProjectListResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getProjectListResponse * soap_new_ns1__getProjectListResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getProjectListResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getProjectListResponse * soap_new_req_ns1__getProjectListResponse(struct soap *soap) { struct ns1__getProjectListResponse *_p = soap_instantiate_ns1__getProjectListResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getProjectListResponse(soap, _p); } return _p; }

inline struct ns1__getProjectListResponse * soap_new_set_ns1__getProjectListResponse(struct soap *soap, ArrayOfCProject *pProjList) { struct ns1__getProjectListResponse *_p = soap_instantiate_ns1__getProjectListResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getProjectListResponse(soap, _p); _p->pProjList = pProjList; } return _p; }

inline void soap_delete_ns1__getProjectListResponse(struct soap *soap, struct ns1__getProjectListResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getProjectListResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getDatabaseList
#define SOAP_TYPE_ns1__getDatabaseList (213)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getDatabaseList(struct soap*, struct ns1__getDatabaseList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getDatabaseList(struct soap*, const struct ns1__getDatabaseList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getDatabaseList(struct soap*, const char*, int, const struct ns1__getDatabaseList *, const char*);
SOAP_FMAC3 struct ns1__getDatabaseList * SOAP_FMAC4 soap_in_ns1__getDatabaseList(struct soap*, const char*, struct ns1__getDatabaseList *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getDatabaseList(struct soap*, const struct ns1__getDatabaseList *, const char*, const char*);

#ifndef soap_write_ns1__getDatabaseList
#define soap_write_ns1__getDatabaseList(soap, data) ( soap_begin(soap), soap_serialize_ns1__getDatabaseList(soap, data), soap_begin_send(soap) || soap_put_ns1__getDatabaseList(soap, data, "ns1:getDatabaseList", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getDatabaseList * SOAP_FMAC4 soap_get_ns1__getDatabaseList(struct soap*, struct ns1__getDatabaseList *, const char*, const char*);

#ifndef soap_read_ns1__getDatabaseList
#define soap_read_ns1__getDatabaseList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getDatabaseList(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getDatabaseList * SOAP_FMAC2 soap_instantiate_ns1__getDatabaseList(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getDatabaseList * soap_new_ns1__getDatabaseList(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getDatabaseList(soap, n, NULL, NULL, NULL); }

inline struct ns1__getDatabaseList * soap_new_req_ns1__getDatabaseList(struct soap *soap) { struct ns1__getDatabaseList *_p = soap_instantiate_ns1__getDatabaseList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDatabaseList(soap, _p); } return _p; }

inline struct ns1__getDatabaseList * soap_new_set_ns1__getDatabaseList(struct soap *soap) { struct ns1__getDatabaseList *_p = soap_instantiate_ns1__getDatabaseList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDatabaseList(soap, _p); } return _p; }

inline void soap_delete_ns1__getDatabaseList(struct soap *soap, struct ns1__getDatabaseList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getDatabaseList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getDatabaseListResponse
#define SOAP_TYPE_ns1__getDatabaseListResponse (209)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getDatabaseListResponse(struct soap*, struct ns1__getDatabaseListResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getDatabaseListResponse(struct soap*, const struct ns1__getDatabaseListResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getDatabaseListResponse(struct soap*, const char*, int, const struct ns1__getDatabaseListResponse *, const char*);
SOAP_FMAC3 struct ns1__getDatabaseListResponse * SOAP_FMAC4 soap_in_ns1__getDatabaseListResponse(struct soap*, const char*, struct ns1__getDatabaseListResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getDatabaseListResponse(struct soap*, const struct ns1__getDatabaseListResponse *, const char*, const char*);

#ifndef soap_write_ns1__getDatabaseListResponse
#define soap_write_ns1__getDatabaseListResponse(soap, data) ( soap_begin(soap), soap_serialize_ns1__getDatabaseListResponse(soap, data), soap_begin_send(soap) || soap_put_ns1__getDatabaseListResponse(soap, data, "ns1:getDatabaseListResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct ns1__getDatabaseListResponse * SOAP_FMAC4 soap_get_ns1__getDatabaseListResponse(struct soap*, struct ns1__getDatabaseListResponse *, const char*, const char*);

#ifndef soap_read_ns1__getDatabaseListResponse
#define soap_read_ns1__getDatabaseListResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getDatabaseListResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct ns1__getDatabaseListResponse * SOAP_FMAC2 soap_instantiate_ns1__getDatabaseListResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getDatabaseListResponse * soap_new_ns1__getDatabaseListResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getDatabaseListResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getDatabaseListResponse * soap_new_req_ns1__getDatabaseListResponse(struct soap *soap) { struct ns1__getDatabaseListResponse *_p = soap_instantiate_ns1__getDatabaseListResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDatabaseListResponse(soap, _p); } return _p; }

inline struct ns1__getDatabaseListResponse * soap_new_set_ns1__getDatabaseListResponse(struct soap *soap, ArrayOfCDatabase *pDBList) { struct ns1__getDatabaseListResponse *_p = soap_instantiate_ns1__getDatabaseListResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getDatabaseListResponse(soap, _p); _p->pDBList = pDBList; } return _p; }

inline void soap_delete_ns1__getDatabaseListResponse(struct soap *soap, struct ns1__getDatabaseListResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getDatabaseListResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (800)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin(soap), soap_serialize_PointerToSOAP_ENV__Reason(soap, data), soap_begin_send(soap) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (799)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin(soap), soap_serialize_PointerToSOAP_ENV__Detail(soap, data), soap_begin_send(soap) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (793)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_begin(soap), soap_serialize_PointerToSOAP_ENV__Code(soap, data), soap_begin_send(soap) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerTons1__CItemHyperlinkContainer
#define SOAP_TYPE_PointerTons1__CItemHyperlinkContainer (787)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CItemHyperlinkContainer(struct soap*, ns1__CItemHyperlinkContainer *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CItemHyperlinkContainer(struct soap*, const char *, int, ns1__CItemHyperlinkContainer *const*, const char *);
SOAP_FMAC3 ns1__CItemHyperlinkContainer ** SOAP_FMAC4 soap_in_PointerTons1__CItemHyperlinkContainer(struct soap*, const char*, ns1__CItemHyperlinkContainer **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CItemHyperlinkContainer(struct soap*, ns1__CItemHyperlinkContainer *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CItemHyperlinkContainer
#define soap_write_PointerTons1__CItemHyperlinkContainer(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CItemHyperlinkContainer(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CItemHyperlinkContainer(soap, data, "ns1:CItemHyperlinkContainer", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CItemHyperlinkContainer ** SOAP_FMAC4 soap_get_PointerTons1__CItemHyperlinkContainer(struct soap*, ns1__CItemHyperlinkContainer **, const char*, const char*);

#ifndef soap_read_PointerTons1__CItemHyperlinkContainer
#define soap_read_PointerTons1__CItemHyperlinkContainer(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CItemHyperlinkContainer(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CRequirementDocument
#define SOAP_TYPE_PointerTons1__CRequirementDocument (736)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CRequirementDocument(struct soap*, ns1__CRequirementDocument *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CRequirementDocument(struct soap*, const char *, int, ns1__CRequirementDocument *const*, const char *);
SOAP_FMAC3 ns1__CRequirementDocument ** SOAP_FMAC4 soap_in_PointerTons1__CRequirementDocument(struct soap*, const char*, ns1__CRequirementDocument **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CRequirementDocument(struct soap*, ns1__CRequirementDocument *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CRequirementDocument
#define soap_write_PointerTons1__CRequirementDocument(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CRequirementDocument(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CRequirementDocument(soap, data, "ns1:CRequirementDocument", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CRequirementDocument ** SOAP_FMAC4 soap_get_PointerTons1__CRequirementDocument(struct soap*, ns1__CRequirementDocument **, const char*, const char*);

#ifndef soap_read_PointerTons1__CRequirementDocument
#define soap_read_PointerTons1__CRequirementDocument(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CRequirementDocument(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToArrayOflong
#define SOAP_TYPE_PointerToArrayOflong (728)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOflong(struct soap*, ArrayOflong *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOflong(struct soap*, const char *, int, ArrayOflong *const*, const char *);
SOAP_FMAC3 ArrayOflong ** SOAP_FMAC4 soap_in_PointerToArrayOflong(struct soap*, const char*, ArrayOflong **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOflong(struct soap*, ArrayOflong *const*, const char*, const char*);

#ifndef soap_write_PointerToArrayOflong
#define soap_write_PointerToArrayOflong(soap, data) ( soap_begin(soap), soap_serialize_PointerToArrayOflong(soap, data), soap_begin_send(soap) || soap_put_PointerToArrayOflong(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOflong ** SOAP_FMAC4 soap_get_PointerToArrayOflong(struct soap*, ArrayOflong **, const char*, const char*);

#ifndef soap_read_PointerToArrayOflong
#define soap_read_PointerToArrayOflong(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToArrayOflong(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CRequirement
#define SOAP_TYPE_PointerTons1__CRequirement (693)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CRequirement(struct soap*, ns1__CRequirement *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CRequirement(struct soap*, const char *, int, ns1__CRequirement *const*, const char *);
SOAP_FMAC3 ns1__CRequirement ** SOAP_FMAC4 soap_in_PointerTons1__CRequirement(struct soap*, const char*, ns1__CRequirement **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CRequirement(struct soap*, ns1__CRequirement *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CRequirement
#define soap_write_PointerTons1__CRequirement(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CRequirement(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CRequirement(soap, data, "ns1:CRequirement", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CRequirement ** SOAP_FMAC4 soap_get_PointerTons1__CRequirement(struct soap*, ns1__CRequirement **, const char*, const char*);

#ifndef soap_read_PointerTons1__CRequirement
#define soap_read_PointerTons1__CRequirement(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CRequirement(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToArrayOfCFolder
#define SOAP_TYPE_PointerToArrayOfCFolder (667)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOfCFolder(struct soap*, ArrayOfCFolder *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOfCFolder(struct soap*, const char *, int, ArrayOfCFolder *const*, const char *);
SOAP_FMAC3 ArrayOfCFolder ** SOAP_FMAC4 soap_in_PointerToArrayOfCFolder(struct soap*, const char*, ArrayOfCFolder **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOfCFolder(struct soap*, ArrayOfCFolder *const*, const char*, const char*);

#ifndef soap_write_PointerToArrayOfCFolder
#define soap_write_PointerToArrayOfCFolder(soap, data) ( soap_begin(soap), soap_serialize_PointerToArrayOfCFolder(soap, data), soap_begin_send(soap) || soap_put_PointerToArrayOfCFolder(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCFolder ** SOAP_FMAC4 soap_get_PointerToArrayOfCFolder(struct soap*, ArrayOfCFolder **, const char*, const char*);

#ifndef soap_read_PointerToArrayOfCFolder
#define soap_read_PointerToArrayOfCFolder(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToArrayOfCFolder(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToArrayOfCFolderItem
#define SOAP_TYPE_PointerToArrayOfCFolderItem (662)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOfCFolderItem(struct soap*, ArrayOfCFolderItem *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOfCFolderItem(struct soap*, const char *, int, ArrayOfCFolderItem *const*, const char *);
SOAP_FMAC3 ArrayOfCFolderItem ** SOAP_FMAC4 soap_in_PointerToArrayOfCFolderItem(struct soap*, const char*, ArrayOfCFolderItem **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOfCFolderItem(struct soap*, ArrayOfCFolderItem *const*, const char*, const char*);

#ifndef soap_write_PointerToArrayOfCFolderItem
#define soap_write_PointerToArrayOfCFolderItem(soap, data) ( soap_begin(soap), soap_serialize_PointerToArrayOfCFolderItem(soap, data), soap_begin_send(soap) || soap_put_PointerToArrayOfCFolderItem(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCFolderItem ** SOAP_FMAC4 soap_get_PointerToArrayOfCFolderItem(struct soap*, ArrayOfCFolderItem **, const char*, const char*);

#ifndef soap_read_PointerToArrayOfCFolderItem
#define soap_read_PointerToArrayOfCFolderItem(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToArrayOfCFolderItem(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToArrayOfCFolderType
#define SOAP_TYPE_PointerToArrayOfCFolderType (620)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOfCFolderType(struct soap*, ArrayOfCFolderType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOfCFolderType(struct soap*, const char *, int, ArrayOfCFolderType *const*, const char *);
SOAP_FMAC3 ArrayOfCFolderType ** SOAP_FMAC4 soap_in_PointerToArrayOfCFolderType(struct soap*, const char*, ArrayOfCFolderType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOfCFolderType(struct soap*, ArrayOfCFolderType *const*, const char*, const char*);

#ifndef soap_write_PointerToArrayOfCFolderType
#define soap_write_PointerToArrayOfCFolderType(soap, data) ( soap_begin(soap), soap_serialize_PointerToArrayOfCFolderType(soap, data), soap_begin_send(soap) || soap_put_PointerToArrayOfCFolderType(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCFolderType ** SOAP_FMAC4 soap_get_PointerToArrayOfCFolderType(struct soap*, ArrayOfCFolderType **, const char*, const char*);

#ifndef soap_read_PointerToArrayOfCFolderType
#define soap_read_PointerToArrayOfCFolderType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToArrayOfCFolderType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToArrayOfCTestRunVariantField
#define SOAP_TYPE_PointerToArrayOfCTestRunVariantField (611)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOfCTestRunVariantField(struct soap*, ArrayOfCTestRunVariantField *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOfCTestRunVariantField(struct soap*, const char *, int, ArrayOfCTestRunVariantField *const*, const char *);
SOAP_FMAC3 ArrayOfCTestRunVariantField ** SOAP_FMAC4 soap_in_PointerToArrayOfCTestRunVariantField(struct soap*, const char*, ArrayOfCTestRunVariantField **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOfCTestRunVariantField(struct soap*, ArrayOfCTestRunVariantField *const*, const char*, const char*);

#ifndef soap_write_PointerToArrayOfCTestRunVariantField
#define soap_write_PointerToArrayOfCTestRunVariantField(soap, data) ( soap_begin(soap), soap_serialize_PointerToArrayOfCTestRunVariantField(soap, data), soap_begin_send(soap) || soap_put_PointerToArrayOfCTestRunVariantField(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCTestRunVariantField ** SOAP_FMAC4 soap_get_PointerToArrayOfCTestRunVariantField(struct soap*, ArrayOfCTestRunVariantField **, const char*, const char*);

#ifndef soap_read_PointerToArrayOfCTestRunVariantField
#define soap_read_PointerToArrayOfCTestRunVariantField(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToArrayOfCTestRunVariantField(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToArrayOfCItemToTrack
#define SOAP_TYPE_PointerToArrayOfCItemToTrack (610)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOfCItemToTrack(struct soap*, ArrayOfCItemToTrack *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOfCItemToTrack(struct soap*, const char *, int, ArrayOfCItemToTrack *const*, const char *);
SOAP_FMAC3 ArrayOfCItemToTrack ** SOAP_FMAC4 soap_in_PointerToArrayOfCItemToTrack(struct soap*, const char*, ArrayOfCItemToTrack **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOfCItemToTrack(struct soap*, ArrayOfCItemToTrack *const*, const char*, const char*);

#ifndef soap_write_PointerToArrayOfCItemToTrack
#define soap_write_PointerToArrayOfCItemToTrack(soap, data) ( soap_begin(soap), soap_serialize_PointerToArrayOfCItemToTrack(soap, data), soap_begin_send(soap) || soap_put_PointerToArrayOfCItemToTrack(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCItemToTrack ** SOAP_FMAC4 soap_get_PointerToArrayOfCItemToTrack(struct soap*, ArrayOfCItemToTrack **, const char*, const char*);

#ifndef soap_read_PointerToArrayOfCItemToTrack
#define soap_read_PointerToArrayOfCItemToTrack(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToArrayOfCItemToTrack(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CTestRun
#define SOAP_TYPE_PointerTons1__CTestRun (577)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CTestRun(struct soap*, ns1__CTestRun *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CTestRun(struct soap*, const char *, int, ns1__CTestRun *const*, const char *);
SOAP_FMAC3 ns1__CTestRun ** SOAP_FMAC4 soap_in_PointerTons1__CTestRun(struct soap*, const char*, ns1__CTestRun **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CTestRun(struct soap*, ns1__CTestRun *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CTestRun
#define soap_write_PointerTons1__CTestRun(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CTestRun(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CTestRun(soap, data, "ns1:CTestRun", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CTestRun ** SOAP_FMAC4 soap_get_PointerTons1__CTestRun(struct soap*, ns1__CTestRun **, const char*, const char*);

#ifndef soap_read_PointerTons1__CTestRun
#define soap_read_PointerTons1__CTestRun(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CTestRun(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CTestCase
#define SOAP_TYPE_PointerTons1__CTestCase (545)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CTestCase(struct soap*, ns1__CTestCase *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CTestCase(struct soap*, const char *, int, ns1__CTestCase *const*, const char *);
SOAP_FMAC3 ns1__CTestCase ** SOAP_FMAC4 soap_in_PointerTons1__CTestCase(struct soap*, const char*, ns1__CTestCase **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CTestCase(struct soap*, ns1__CTestCase *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CTestCase
#define soap_write_PointerTons1__CTestCase(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CTestCase(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CTestCase(soap, data, "ns1:CTestCase", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CTestCase ** SOAP_FMAC4 soap_get_PointerTons1__CTestCase(struct soap*, ns1__CTestCase **, const char*, const char*);

#ifndef soap_read_PointerTons1__CTestCase
#define soap_read_PointerTons1__CTestCase(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CTestCase(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToArrayOfCLink
#define SOAP_TYPE_PointerToArrayOfCLink (508)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOfCLink(struct soap*, ArrayOfCLink *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOfCLink(struct soap*, const char *, int, ArrayOfCLink *const*, const char *);
SOAP_FMAC3 ArrayOfCLink ** SOAP_FMAC4 soap_in_PointerToArrayOfCLink(struct soap*, const char*, ArrayOfCLink **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOfCLink(struct soap*, ArrayOfCLink *const*, const char*, const char*);

#ifndef soap_write_PointerToArrayOfCLink
#define soap_write_PointerToArrayOfCLink(soap, data) ( soap_begin(soap), soap_serialize_PointerToArrayOfCLink(soap, data), soap_begin_send(soap) || soap_put_PointerToArrayOfCLink(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCLink ** SOAP_FMAC4 soap_get_PointerToArrayOfCLink(struct soap*, ArrayOfCLink **, const char*, const char*);

#ifndef soap_read_PointerToArrayOfCLink
#define soap_read_PointerToArrayOfCLink(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToArrayOfCLink(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CUser
#define SOAP_TYPE_PointerTons1__CUser (429)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CUser(struct soap*, ns1__CUser *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CUser(struct soap*, const char *, int, ns1__CUser *const*, const char *);
SOAP_FMAC3 ns1__CUser ** SOAP_FMAC4 soap_in_PointerTons1__CUser(struct soap*, const char*, ns1__CUser **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CUser(struct soap*, ns1__CUser *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CUser
#define soap_write_PointerTons1__CUser(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CUser(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CUser(soap, data, "ns1:CUser", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CUser ** SOAP_FMAC4 soap_get_PointerTons1__CUser(struct soap*, ns1__CUser **, const char*, const char*);

#ifndef soap_read_PointerTons1__CUser
#define soap_read_PointerTons1__CUser(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CUser(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToArrayOfCUserLicense
#define SOAP_TYPE_PointerToArrayOfCUserLicense (424)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOfCUserLicense(struct soap*, ArrayOfCUserLicense *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOfCUserLicense(struct soap*, const char *, int, ArrayOfCUserLicense *const*, const char *);
SOAP_FMAC3 ArrayOfCUserLicense ** SOAP_FMAC4 soap_in_PointerToArrayOfCUserLicense(struct soap*, const char*, ArrayOfCUserLicense **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOfCUserLicense(struct soap*, ArrayOfCUserLicense *const*, const char*, const char*);

#ifndef soap_write_PointerToArrayOfCUserLicense
#define soap_write_PointerToArrayOfCUserLicense(soap, data) ( soap_begin(soap), soap_serialize_PointerToArrayOfCUserLicense(soap, data), soap_begin_send(soap) || soap_put_PointerToArrayOfCUserLicense(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCUserLicense ** SOAP_FMAC4 soap_get_PointerToArrayOfCUserLicense(struct soap*, ArrayOfCUserLicense **, const char*, const char*);

#ifndef soap_read_PointerToArrayOfCUserLicense
#define soap_read_PointerToArrayOfCUserLicense(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToArrayOfCUserLicense(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToArrayOfCGlobalUser
#define SOAP_TYPE_PointerToArrayOfCGlobalUser (415)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOfCGlobalUser(struct soap*, ArrayOfCGlobalUser *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOfCGlobalUser(struct soap*, const char *, int, ArrayOfCGlobalUser *const*, const char *);
SOAP_FMAC3 ArrayOfCGlobalUser ** SOAP_FMAC4 soap_in_PointerToArrayOfCGlobalUser(struct soap*, const char*, ArrayOfCGlobalUser **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOfCGlobalUser(struct soap*, ArrayOfCGlobalUser *const*, const char*, const char*);

#ifndef soap_write_PointerToArrayOfCGlobalUser
#define soap_write_PointerToArrayOfCGlobalUser(soap, data) ( soap_begin(soap), soap_serialize_PointerToArrayOfCGlobalUser(soap, data), soap_begin_send(soap) || soap_put_PointerToArrayOfCGlobalUser(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCGlobalUser ** SOAP_FMAC4 soap_get_PointerToArrayOfCGlobalUser(struct soap*, ArrayOfCGlobalUser **, const char*, const char*);

#ifndef soap_read_PointerToArrayOfCGlobalUser
#define soap_read_PointerToArrayOfCGlobalUser(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToArrayOfCGlobalUser(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CTask
#define SOAP_TYPE_PointerTons1__CTask (383)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CTask(struct soap*, ns1__CTask *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CTask(struct soap*, const char *, int, ns1__CTask *const*, const char *);
SOAP_FMAC3 ns1__CTask ** SOAP_FMAC4 soap_in_PointerTons1__CTask(struct soap*, const char*, ns1__CTask **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CTask(struct soap*, ns1__CTask *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CTask
#define soap_write_PointerTons1__CTask(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CTask(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CTask(soap, data, "ns1:CTask", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CTask ** SOAP_FMAC4 soap_get_PointerTons1__CTask(struct soap*, ns1__CTask **, const char*, const char*);

#ifndef soap_read_PointerTons1__CTask
#define soap_read_PointerTons1__CTask(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CTask(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CDefect
#define SOAP_TYPE_PointerTons1__CDefect (340)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CDefect(struct soap*, ns1__CDefect *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CDefect(struct soap*, const char *, int, ns1__CDefect *const*, const char *);
SOAP_FMAC3 ns1__CDefect ** SOAP_FMAC4 soap_in_PointerTons1__CDefect(struct soap*, const char*, ns1__CDefect **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CDefect(struct soap*, ns1__CDefect *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CDefect
#define soap_write_PointerTons1__CDefect(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CDefect(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CDefect(soap, data, "ns1:CDefect", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CDefect ** SOAP_FMAC4 soap_get_PointerTons1__CDefect(struct soap*, ns1__CDefect **, const char*, const char*);

#ifndef soap_read_PointerTons1__CDefect
#define soap_read_PointerTons1__CDefect(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CDefect(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToArrayOfCDefectEventDefinition
#define SOAP_TYPE_PointerToArrayOfCDefectEventDefinition (327)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOfCDefectEventDefinition(struct soap*, ArrayOfCDefectEventDefinition *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOfCDefectEventDefinition(struct soap*, const char *, int, ArrayOfCDefectEventDefinition *const*, const char *);
SOAP_FMAC3 ArrayOfCDefectEventDefinition ** SOAP_FMAC4 soap_in_PointerToArrayOfCDefectEventDefinition(struct soap*, const char*, ArrayOfCDefectEventDefinition **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOfCDefectEventDefinition(struct soap*, ArrayOfCDefectEventDefinition *const*, const char*, const char*);

#ifndef soap_write_PointerToArrayOfCDefectEventDefinition
#define soap_write_PointerToArrayOfCDefectEventDefinition(soap, data) ( soap_begin(soap), soap_serialize_PointerToArrayOfCDefectEventDefinition(soap, data), soap_begin_send(soap) || soap_put_PointerToArrayOfCDefectEventDefinition(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCDefectEventDefinition ** SOAP_FMAC4 soap_get_PointerToArrayOfCDefectEventDefinition(struct soap*, ArrayOfCDefectEventDefinition **, const char*, const char*);

#ifndef soap_read_PointerToArrayOfCDefectEventDefinition
#define soap_read_PointerToArrayOfCDefectEventDefinition(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToArrayOfCDefectEventDefinition(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToArrayOfCEventDefinition
#define SOAP_TYPE_PointerToArrayOfCEventDefinition (322)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOfCEventDefinition(struct soap*, ArrayOfCEventDefinition *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOfCEventDefinition(struct soap*, const char *, int, ArrayOfCEventDefinition *const*, const char *);
SOAP_FMAC3 ArrayOfCEventDefinition ** SOAP_FMAC4 soap_in_PointerToArrayOfCEventDefinition(struct soap*, const char*, ArrayOfCEventDefinition **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOfCEventDefinition(struct soap*, ArrayOfCEventDefinition *const*, const char*, const char*);

#ifndef soap_write_PointerToArrayOfCEventDefinition
#define soap_write_PointerToArrayOfCEventDefinition(soap, data) ( soap_begin(soap), soap_serialize_PointerToArrayOfCEventDefinition(soap, data), soap_begin_send(soap) || soap_put_PointerToArrayOfCEventDefinition(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCEventDefinition ** SOAP_FMAC4 soap_get_PointerToArrayOfCEventDefinition(struct soap*, ArrayOfCEventDefinition **, const char*, const char*);

#ifndef soap_read_PointerToArrayOfCEventDefinition
#define soap_read_PointerToArrayOfCEventDefinition(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToArrayOfCEventDefinition(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CReportRunResults
#define SOAP_TYPE_PointerTons1__CReportRunResults (313)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CReportRunResults(struct soap*, ns1__CReportRunResults *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CReportRunResults(struct soap*, const char *, int, ns1__CReportRunResults *const*, const char *);
SOAP_FMAC3 ns1__CReportRunResults ** SOAP_FMAC4 soap_in_PointerTons1__CReportRunResults(struct soap*, const char*, ns1__CReportRunResults **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CReportRunResults(struct soap*, ns1__CReportRunResults *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CReportRunResults
#define soap_write_PointerTons1__CReportRunResults(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CReportRunResults(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CReportRunResults(soap, data, "ns1:CReportRunResults", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CReportRunResults ** SOAP_FMAC4 soap_get_PointerTons1__CReportRunResults(struct soap*, ns1__CReportRunResults **, const char*, const char*);

#ifndef soap_read_PointerTons1__CReportRunResults
#define soap_read_PointerTons1__CReportRunResults(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CReportRunResults(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CRecordListSoap
#define SOAP_TYPE_PointerTons1__CRecordListSoap (273)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CRecordListSoap(struct soap*, ns1__CRecordListSoap *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CRecordListSoap(struct soap*, const char *, int, ns1__CRecordListSoap *const*, const char *);
SOAP_FMAC3 ns1__CRecordListSoap ** SOAP_FMAC4 soap_in_PointerTons1__CRecordListSoap(struct soap*, const char*, ns1__CRecordListSoap **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CRecordListSoap(struct soap*, ns1__CRecordListSoap *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CRecordListSoap
#define soap_write_PointerTons1__CRecordListSoap(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CRecordListSoap(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CRecordListSoap(soap, data, "ns1:CRecordListSoap", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CRecordListSoap ** SOAP_FMAC4 soap_get_PointerTons1__CRecordListSoap(struct soap*, ns1__CRecordListSoap **, const char*, const char*);

#ifndef soap_read_PointerTons1__CRecordListSoap
#define soap_read_PointerTons1__CRecordListSoap(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CRecordListSoap(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToArrayOfCFilter
#define SOAP_TYPE_PointerToArrayOfCFilter (264)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOfCFilter(struct soap*, ArrayOfCFilter *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOfCFilter(struct soap*, const char *, int, ArrayOfCFilter *const*, const char *);
SOAP_FMAC3 ArrayOfCFilter ** SOAP_FMAC4 soap_in_PointerToArrayOfCFilter(struct soap*, const char*, ArrayOfCFilter **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOfCFilter(struct soap*, ArrayOfCFilter *const*, const char*, const char*);

#ifndef soap_write_PointerToArrayOfCFilter
#define soap_write_PointerToArrayOfCFilter(soap, data) ( soap_begin(soap), soap_serialize_PointerToArrayOfCFilter(soap, data), soap_begin_send(soap) || soap_put_PointerToArrayOfCFilter(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCFilter ** SOAP_FMAC4 soap_get_PointerToArrayOfCFilter(struct soap*, ArrayOfCFilter **, const char*, const char*);

#ifndef soap_read_PointerToArrayOfCFilter
#define soap_read_PointerToArrayOfCFilter(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToArrayOfCFilter(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToArrayOfCTableField
#define SOAP_TYPE_PointerToArrayOfCTableField (244)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOfCTableField(struct soap*, ArrayOfCTableField *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOfCTableField(struct soap*, const char *, int, ArrayOfCTableField *const*, const char *);
SOAP_FMAC3 ArrayOfCTableField ** SOAP_FMAC4 soap_in_PointerToArrayOfCTableField(struct soap*, const char*, ArrayOfCTableField **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOfCTableField(struct soap*, ArrayOfCTableField *const*, const char*, const char*);

#ifndef soap_write_PointerToArrayOfCTableField
#define soap_write_PointerToArrayOfCTableField(soap, data) ( soap_begin(soap), soap_serialize_PointerToArrayOfCTableField(soap, data), soap_begin_send(soap) || soap_put_PointerToArrayOfCTableField(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCTableField ** SOAP_FMAC4 soap_get_PointerToArrayOfCTableField(struct soap*, ArrayOfCTableField **, const char*, const char*);

#ifndef soap_read_PointerToArrayOfCTableField
#define soap_read_PointerToArrayOfCTableField(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToArrayOfCTableField(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToArrayOfCDatabaseTable
#define SOAP_TYPE_PointerToArrayOfCDatabaseTable (239)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOfCDatabaseTable(struct soap*, ArrayOfCDatabaseTable *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOfCDatabaseTable(struct soap*, const char *, int, ArrayOfCDatabaseTable *const*, const char *);
SOAP_FMAC3 ArrayOfCDatabaseTable ** SOAP_FMAC4 soap_in_PointerToArrayOfCDatabaseTable(struct soap*, const char*, ArrayOfCDatabaseTable **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOfCDatabaseTable(struct soap*, ArrayOfCDatabaseTable *const*, const char*, const char*);

#ifndef soap_write_PointerToArrayOfCDatabaseTable
#define soap_write_PointerToArrayOfCDatabaseTable(soap, data) ( soap_begin(soap), soap_serialize_PointerToArrayOfCDatabaseTable(soap, data), soap_begin_send(soap) || soap_put_PointerToArrayOfCDatabaseTable(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCDatabaseTable ** SOAP_FMAC4 soap_get_PointerToArrayOfCDatabaseTable(struct soap*, ArrayOfCDatabaseTable **, const char*, const char*);

#ifndef soap_read_PointerToArrayOfCDatabaseTable
#define soap_read_PointerToArrayOfCDatabaseTable(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToArrayOfCDatabaseTable(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToArrayOfCProject
#define SOAP_TYPE_PointerToArrayOfCProject (215)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOfCProject(struct soap*, ArrayOfCProject *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOfCProject(struct soap*, const char *, int, ArrayOfCProject *const*, const char *);
SOAP_FMAC3 ArrayOfCProject ** SOAP_FMAC4 soap_in_PointerToArrayOfCProject(struct soap*, const char*, ArrayOfCProject **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOfCProject(struct soap*, ArrayOfCProject *const*, const char*, const char*);

#ifndef soap_write_PointerToArrayOfCProject
#define soap_write_PointerToArrayOfCProject(soap, data) ( soap_begin(soap), soap_serialize_PointerToArrayOfCProject(soap, data), soap_begin_send(soap) || soap_put_PointerToArrayOfCProject(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCProject ** SOAP_FMAC4 soap_get_PointerToArrayOfCProject(struct soap*, ArrayOfCProject **, const char*, const char*);

#ifndef soap_read_PointerToArrayOfCProject
#define soap_read_PointerToArrayOfCProject(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToArrayOfCProject(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToArrayOfCDatabase
#define SOAP_TYPE_PointerToArrayOfCDatabase (210)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOfCDatabase(struct soap*, ArrayOfCDatabase *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOfCDatabase(struct soap*, const char *, int, ArrayOfCDatabase *const*, const char *);
SOAP_FMAC3 ArrayOfCDatabase ** SOAP_FMAC4 soap_in_PointerToArrayOfCDatabase(struct soap*, const char*, ArrayOfCDatabase **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOfCDatabase(struct soap*, ArrayOfCDatabase *const*, const char*, const char*);

#ifndef soap_write_PointerToArrayOfCDatabase
#define soap_write_PointerToArrayOfCDatabase(soap, data) ( soap_begin(soap), soap_serialize_PointerToArrayOfCDatabase(soap, data), soap_begin_send(soap) || soap_put_PointerToArrayOfCDatabase(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCDatabase ** SOAP_FMAC4 soap_get_PointerToArrayOfCDatabase(struct soap*, ArrayOfCDatabase **, const char*, const char*);

#ifndef soap_read_PointerToArrayOfCDatabase
#define soap_read_PointerToArrayOfCDatabase(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToArrayOfCDatabase(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToArrayOfCSnapshotInfo
#define SOAP_TYPE_PointerToArrayOfCSnapshotInfo (208)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOfCSnapshotInfo(struct soap*, ArrayOfCSnapshotInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOfCSnapshotInfo(struct soap*, const char *, int, ArrayOfCSnapshotInfo *const*, const char *);
SOAP_FMAC3 ArrayOfCSnapshotInfo ** SOAP_FMAC4 soap_in_PointerToArrayOfCSnapshotInfo(struct soap*, const char*, ArrayOfCSnapshotInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOfCSnapshotInfo(struct soap*, ArrayOfCSnapshotInfo *const*, const char*, const char*);

#ifndef soap_write_PointerToArrayOfCSnapshotInfo
#define soap_write_PointerToArrayOfCSnapshotInfo(soap, data) ( soap_begin(soap), soap_serialize_PointerToArrayOfCSnapshotInfo(soap, data), soap_begin_send(soap) || soap_put_PointerToArrayOfCSnapshotInfo(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCSnapshotInfo ** SOAP_FMAC4 soap_get_PointerToArrayOfCSnapshotInfo(struct soap*, ArrayOfCSnapshotInfo **, const char*, const char*);

#ifndef soap_read_PointerToArrayOfCSnapshotInfo
#define soap_read_PointerToArrayOfCSnapshotInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToArrayOfCSnapshotInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToArrayOfCVersionInfo
#define SOAP_TYPE_PointerToArrayOfCVersionInfo (207)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOfCVersionInfo(struct soap*, ArrayOfCVersionInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOfCVersionInfo(struct soap*, const char *, int, ArrayOfCVersionInfo *const*, const char *);
SOAP_FMAC3 ArrayOfCVersionInfo ** SOAP_FMAC4 soap_in_PointerToArrayOfCVersionInfo(struct soap*, const char*, ArrayOfCVersionInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOfCVersionInfo(struct soap*, ArrayOfCVersionInfo *const*, const char*, const char*);

#ifndef soap_write_PointerToArrayOfCVersionInfo
#define soap_write_PointerToArrayOfCVersionInfo(soap, data) ( soap_begin(soap), soap_serialize_PointerToArrayOfCVersionInfo(soap, data), soap_begin_send(soap) || soap_put_PointerToArrayOfCVersionInfo(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCVersionInfo ** SOAP_FMAC4 soap_get_PointerToArrayOfCVersionInfo(struct soap*, ArrayOfCVersionInfo **, const char*, const char*);

#ifndef soap_read_PointerToArrayOfCVersionInfo
#define soap_read_PointerToArrayOfCVersionInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToArrayOfCVersionInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CScheduleInfo
#define SOAP_TYPE_PointerTons1__CScheduleInfo (206)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CScheduleInfo(struct soap*, ns1__CScheduleInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CScheduleInfo(struct soap*, const char *, int, ns1__CScheduleInfo *const*, const char *);
SOAP_FMAC3 ns1__CScheduleInfo ** SOAP_FMAC4 soap_in_PointerTons1__CScheduleInfo(struct soap*, const char*, ns1__CScheduleInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CScheduleInfo(struct soap*, ns1__CScheduleInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CScheduleInfo
#define soap_write_PointerTons1__CScheduleInfo(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CScheduleInfo(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CScheduleInfo(soap, data, "ns1:CScheduleInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CScheduleInfo ** SOAP_FMAC4 soap_get_PointerTons1__CScheduleInfo(struct soap*, ns1__CScheduleInfo **, const char*, const char*);

#ifndef soap_read_PointerTons1__CScheduleInfo
#define soap_read_PointerTons1__CScheduleInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CScheduleInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToArrayOfCTestCaseVariantField
#define SOAP_TYPE_PointerToArrayOfCTestCaseVariantField (205)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOfCTestCaseVariantField(struct soap*, ArrayOfCTestCaseVariantField *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOfCTestCaseVariantField(struct soap*, const char *, int, ArrayOfCTestCaseVariantField *const*, const char *);
SOAP_FMAC3 ArrayOfCTestCaseVariantField ** SOAP_FMAC4 soap_in_PointerToArrayOfCTestCaseVariantField(struct soap*, const char*, ArrayOfCTestCaseVariantField **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOfCTestCaseVariantField(struct soap*, ArrayOfCTestCaseVariantField *const*, const char*, const char*);

#ifndef soap_write_PointerToArrayOfCTestCaseVariantField
#define soap_write_PointerToArrayOfCTestCaseVariantField(soap, data) ( soap_begin(soap), soap_serialize_PointerToArrayOfCTestCaseVariantField(soap, data), soap_begin_send(soap) || soap_put_PointerToArrayOfCTestCaseVariantField(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCTestCaseVariantField ** SOAP_FMAC4 soap_get_PointerToArrayOfCTestCaseVariantField(struct soap*, ArrayOfCTestCaseVariantField **, const char*, const char*);

#ifndef soap_read_PointerToArrayOfCTestCaseVariantField
#define soap_read_PointerToArrayOfCTestCaseVariantField(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToArrayOfCTestCaseVariantField(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToArrayOfCLinkHistoryItem
#define SOAP_TYPE_PointerToArrayOfCLinkHistoryItem (204)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOfCLinkHistoryItem(struct soap*, ArrayOfCLinkHistoryItem *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOfCLinkHistoryItem(struct soap*, const char *, int, ArrayOfCLinkHistoryItem *const*, const char *);
SOAP_FMAC3 ArrayOfCLinkHistoryItem ** SOAP_FMAC4 soap_in_PointerToArrayOfCLinkHistoryItem(struct soap*, const char*, ArrayOfCLinkHistoryItem **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOfCLinkHistoryItem(struct soap*, ArrayOfCLinkHistoryItem *const*, const char*, const char*);

#ifndef soap_write_PointerToArrayOfCLinkHistoryItem
#define soap_write_PointerToArrayOfCLinkHistoryItem(soap, data) ( soap_begin(soap), soap_serialize_PointerToArrayOfCLinkHistoryItem(soap, data), soap_begin_send(soap) || soap_put_PointerToArrayOfCLinkHistoryItem(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCLinkHistoryItem ** SOAP_FMAC4 soap_get_PointerToArrayOfCLinkHistoryItem(struct soap*, ArrayOfCLinkHistoryItem **, const char*, const char*);

#ifndef soap_read_PointerToArrayOfCLinkHistoryItem
#define soap_read_PointerToArrayOfCLinkHistoryItem(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToArrayOfCLinkHistoryItem(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToArrayOfCLinkedItem
#define SOAP_TYPE_PointerToArrayOfCLinkedItem (203)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOfCLinkedItem(struct soap*, ArrayOfCLinkedItem *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOfCLinkedItem(struct soap*, const char *, int, ArrayOfCLinkedItem *const*, const char *);
SOAP_FMAC3 ArrayOfCLinkedItem ** SOAP_FMAC4 soap_in_PointerToArrayOfCLinkedItem(struct soap*, const char*, ArrayOfCLinkedItem **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOfCLinkedItem(struct soap*, ArrayOfCLinkedItem *const*, const char*, const char*);

#ifndef soap_write_PointerToArrayOfCLinkedItem
#define soap_write_PointerToArrayOfCLinkedItem(soap, data) ( soap_begin(soap), soap_serialize_PointerToArrayOfCLinkedItem(soap, data), soap_begin_send(soap) || soap_put_PointerToArrayOfCLinkedItem(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCLinkedItem ** SOAP_FMAC4 soap_get_PointerToArrayOfCLinkedItem(struct soap*, ArrayOfCLinkedItem **, const char*, const char*);

#ifndef soap_read_PointerToArrayOfCLinkedItem
#define soap_read_PointerToArrayOfCLinkedItem(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToArrayOfCLinkedItem(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__PhoneNumber
#define SOAP_TYPE_PointerTons1__PhoneNumber (202)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__PhoneNumber(struct soap*, ns1__PhoneNumber *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__PhoneNumber(struct soap*, const char *, int, ns1__PhoneNumber *const*, const char *);
SOAP_FMAC3 ns1__PhoneNumber ** SOAP_FMAC4 soap_in_PointerTons1__PhoneNumber(struct soap*, const char*, ns1__PhoneNumber **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__PhoneNumber(struct soap*, ns1__PhoneNumber *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__PhoneNumber
#define soap_write_PointerTons1__PhoneNumber(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__PhoneNumber(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__PhoneNumber(soap, data, "ns1:PhoneNumber", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__PhoneNumber ** SOAP_FMAC4 soap_get_PointerTons1__PhoneNumber(struct soap*, ns1__PhoneNumber **, const char*, const char*);

#ifndef soap_read_PointerTons1__PhoneNumber
#define soap_read_PointerTons1__PhoneNumber(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__PhoneNumber(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToArrayOfCSCCFileRecord
#define SOAP_TYPE_PointerToArrayOfCSCCFileRecord (201)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOfCSCCFileRecord(struct soap*, ArrayOfCSCCFileRecord *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOfCSCCFileRecord(struct soap*, const char *, int, ArrayOfCSCCFileRecord *const*, const char *);
SOAP_FMAC3 ArrayOfCSCCFileRecord ** SOAP_FMAC4 soap_in_PointerToArrayOfCSCCFileRecord(struct soap*, const char*, ArrayOfCSCCFileRecord **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOfCSCCFileRecord(struct soap*, ArrayOfCSCCFileRecord *const*, const char*, const char*);

#ifndef soap_write_PointerToArrayOfCSCCFileRecord
#define soap_write_PointerToArrayOfCSCCFileRecord(soap, data) ( soap_begin(soap), soap_serialize_PointerToArrayOfCSCCFileRecord(soap, data), soap_begin_send(soap) || soap_put_PointerToArrayOfCSCCFileRecord(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCSCCFileRecord ** SOAP_FMAC4 soap_get_PointerToArrayOfCSCCFileRecord(struct soap*, ArrayOfCSCCFileRecord **, const char*, const char*);

#ifndef soap_read_PointerToArrayOfCSCCFileRecord
#define soap_read_PointerToArrayOfCSCCFileRecord(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToArrayOfCSCCFileRecord(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToArrayOfCEvent
#define SOAP_TYPE_PointerToArrayOfCEvent (200)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOfCEvent(struct soap*, ArrayOfCEvent *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOfCEvent(struct soap*, const char *, int, ArrayOfCEvent *const*, const char *);
SOAP_FMAC3 ArrayOfCEvent ** SOAP_FMAC4 soap_in_PointerToArrayOfCEvent(struct soap*, const char*, ArrayOfCEvent **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOfCEvent(struct soap*, ArrayOfCEvent *const*, const char*, const char*);

#ifndef soap_write_PointerToArrayOfCEvent
#define soap_write_PointerToArrayOfCEvent(soap, data) ( soap_begin(soap), soap_serialize_PointerToArrayOfCEvent(soap, data), soap_begin_send(soap) || soap_put_PointerToArrayOfCEvent(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCEvent ** SOAP_FMAC4 soap_get_PointerToArrayOfCEvent(struct soap*, ArrayOfCEvent **, const char*, const char*);

#ifndef soap_read_PointerToArrayOfCEvent
#define soap_read_PointerToArrayOfCEvent(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToArrayOfCEvent(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToArrayOfCReportedByRecord
#define SOAP_TYPE_PointerToArrayOfCReportedByRecord (199)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOfCReportedByRecord(struct soap*, ArrayOfCReportedByRecord *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOfCReportedByRecord(struct soap*, const char *, int, ArrayOfCReportedByRecord *const*, const char *);
SOAP_FMAC3 ArrayOfCReportedByRecord ** SOAP_FMAC4 soap_in_PointerToArrayOfCReportedByRecord(struct soap*, const char*, ArrayOfCReportedByRecord **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOfCReportedByRecord(struct soap*, ArrayOfCReportedByRecord *const*, const char*, const char*);

#ifndef soap_write_PointerToArrayOfCReportedByRecord
#define soap_write_PointerToArrayOfCReportedByRecord(soap, data) ( soap_begin(soap), soap_serialize_PointerToArrayOfCReportedByRecord(soap, data), soap_begin_send(soap) || soap_put_PointerToArrayOfCReportedByRecord(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCReportedByRecord ** SOAP_FMAC4 soap_get_PointerToArrayOfCReportedByRecord(struct soap*, ArrayOfCReportedByRecord **, const char*, const char*);

#ifndef soap_read_PointerToArrayOfCReportedByRecord
#define soap_read_PointerToArrayOfCReportedByRecord(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToArrayOfCReportedByRecord(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__CTreeNodeSoap
#define SOAP_TYPE_PointerToPointerTons1__CTreeNodeSoap (198)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CTreeNodeSoap(struct soap*, ns1__CTreeNodeSoap **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CTreeNodeSoap(struct soap*, const char *, int, ns1__CTreeNodeSoap **const*, const char *);
SOAP_FMAC3 ns1__CTreeNodeSoap *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CTreeNodeSoap(struct soap*, const char*, ns1__CTreeNodeSoap ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CTreeNodeSoap(struct soap*, ns1__CTreeNodeSoap **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__CTreeNodeSoap
#define soap_write_PointerToPointerTons1__CTreeNodeSoap(soap, data) ( soap_begin(soap), soap_serialize_PointerToPointerTons1__CTreeNodeSoap(soap, data), soap_begin_send(soap) || soap_put_PointerToPointerTons1__CTreeNodeSoap(soap, data, "ns1:CTreeNodeSoap", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CTreeNodeSoap *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CTreeNodeSoap(struct soap*, ns1__CTreeNodeSoap ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__CTreeNodeSoap
#define soap_read_PointerToPointerTons1__CTreeNodeSoap(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__CTreeNodeSoap(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CTreeNodeSoap
#define SOAP_TYPE_PointerTons1__CTreeNodeSoap (197)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CTreeNodeSoap(struct soap*, ns1__CTreeNodeSoap *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CTreeNodeSoap(struct soap*, const char *, int, ns1__CTreeNodeSoap *const*, const char *);
SOAP_FMAC3 ns1__CTreeNodeSoap ** SOAP_FMAC4 soap_in_PointerTons1__CTreeNodeSoap(struct soap*, const char*, ns1__CTreeNodeSoap **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CTreeNodeSoap(struct soap*, ns1__CTreeNodeSoap *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CTreeNodeSoap
#define soap_write_PointerTons1__CTreeNodeSoap(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CTreeNodeSoap(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CTreeNodeSoap(soap, data, "ns1:CTreeNodeSoap", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CTreeNodeSoap ** SOAP_FMAC4 soap_get_PointerTons1__CTreeNodeSoap(struct soap*, ns1__CTreeNodeSoap **, const char*, const char*);

#ifndef soap_read_PointerTons1__CTreeNodeSoap
#define soap_read_PointerTons1__CTreeNodeSoap(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CTreeNodeSoap(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__CSnapshotInfo
#define SOAP_TYPE_PointerToPointerTons1__CSnapshotInfo (196)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CSnapshotInfo(struct soap*, ns1__CSnapshotInfo **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CSnapshotInfo(struct soap*, const char *, int, ns1__CSnapshotInfo **const*, const char *);
SOAP_FMAC3 ns1__CSnapshotInfo *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CSnapshotInfo(struct soap*, const char*, ns1__CSnapshotInfo ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CSnapshotInfo(struct soap*, ns1__CSnapshotInfo **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__CSnapshotInfo
#define soap_write_PointerToPointerTons1__CSnapshotInfo(soap, data) ( soap_begin(soap), soap_serialize_PointerToPointerTons1__CSnapshotInfo(soap, data), soap_begin_send(soap) || soap_put_PointerToPointerTons1__CSnapshotInfo(soap, data, "ns1:CSnapshotInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CSnapshotInfo *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CSnapshotInfo(struct soap*, ns1__CSnapshotInfo ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__CSnapshotInfo
#define soap_read_PointerToPointerTons1__CSnapshotInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__CSnapshotInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CSnapshotInfo
#define SOAP_TYPE_PointerTons1__CSnapshotInfo (195)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CSnapshotInfo(struct soap*, ns1__CSnapshotInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CSnapshotInfo(struct soap*, const char *, int, ns1__CSnapshotInfo *const*, const char *);
SOAP_FMAC3 ns1__CSnapshotInfo ** SOAP_FMAC4 soap_in_PointerTons1__CSnapshotInfo(struct soap*, const char*, ns1__CSnapshotInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CSnapshotInfo(struct soap*, ns1__CSnapshotInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CSnapshotInfo
#define soap_write_PointerTons1__CSnapshotInfo(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CSnapshotInfo(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CSnapshotInfo(soap, data, "ns1:CSnapshotInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CSnapshotInfo ** SOAP_FMAC4 soap_get_PointerTons1__CSnapshotInfo(struct soap*, ns1__CSnapshotInfo **, const char*, const char*);

#ifndef soap_read_PointerTons1__CSnapshotInfo
#define soap_read_PointerTons1__CSnapshotInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CSnapshotInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__CVersionInfo
#define SOAP_TYPE_PointerToPointerTons1__CVersionInfo (194)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CVersionInfo(struct soap*, ns1__CVersionInfo **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CVersionInfo(struct soap*, const char *, int, ns1__CVersionInfo **const*, const char *);
SOAP_FMAC3 ns1__CVersionInfo *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CVersionInfo(struct soap*, const char*, ns1__CVersionInfo ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CVersionInfo(struct soap*, ns1__CVersionInfo **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__CVersionInfo
#define soap_write_PointerToPointerTons1__CVersionInfo(soap, data) ( soap_begin(soap), soap_serialize_PointerToPointerTons1__CVersionInfo(soap, data), soap_begin_send(soap) || soap_put_PointerToPointerTons1__CVersionInfo(soap, data, "ns1:CVersionInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CVersionInfo *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CVersionInfo(struct soap*, ns1__CVersionInfo ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__CVersionInfo
#define soap_read_PointerToPointerTons1__CVersionInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__CVersionInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CVersionInfo
#define SOAP_TYPE_PointerTons1__CVersionInfo (193)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CVersionInfo(struct soap*, ns1__CVersionInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CVersionInfo(struct soap*, const char *, int, ns1__CVersionInfo *const*, const char *);
SOAP_FMAC3 ns1__CVersionInfo ** SOAP_FMAC4 soap_in_PointerTons1__CVersionInfo(struct soap*, const char*, ns1__CVersionInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CVersionInfo(struct soap*, ns1__CVersionInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CVersionInfo
#define soap_write_PointerTons1__CVersionInfo(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CVersionInfo(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CVersionInfo(soap, data, "ns1:CVersionInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CVersionInfo ** SOAP_FMAC4 soap_get_PointerTons1__CVersionInfo(struct soap*, ns1__CVersionInfo **, const char*, const char*);

#ifndef soap_read_PointerTons1__CVersionInfo
#define soap_read_PointerTons1__CVersionInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CVersionInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__CFolderItem
#define SOAP_TYPE_PointerToPointerTons1__CFolderItem (192)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CFolderItem(struct soap*, ns1__CFolderItem **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CFolderItem(struct soap*, const char *, int, ns1__CFolderItem **const*, const char *);
SOAP_FMAC3 ns1__CFolderItem *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CFolderItem(struct soap*, const char*, ns1__CFolderItem ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CFolderItem(struct soap*, ns1__CFolderItem **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__CFolderItem
#define soap_write_PointerToPointerTons1__CFolderItem(soap, data) ( soap_begin(soap), soap_serialize_PointerToPointerTons1__CFolderItem(soap, data), soap_begin_send(soap) || soap_put_PointerToPointerTons1__CFolderItem(soap, data, "ns1:CFolderItem", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CFolderItem *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CFolderItem(struct soap*, ns1__CFolderItem ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__CFolderItem
#define soap_read_PointerToPointerTons1__CFolderItem(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__CFolderItem(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CFolderItem
#define SOAP_TYPE_PointerTons1__CFolderItem (191)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CFolderItem(struct soap*, ns1__CFolderItem *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CFolderItem(struct soap*, const char *, int, ns1__CFolderItem *const*, const char *);
SOAP_FMAC3 ns1__CFolderItem ** SOAP_FMAC4 soap_in_PointerTons1__CFolderItem(struct soap*, const char*, ns1__CFolderItem **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CFolderItem(struct soap*, ns1__CFolderItem *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CFolderItem
#define soap_write_PointerTons1__CFolderItem(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CFolderItem(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CFolderItem(soap, data, "ns1:CFolderItem", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CFolderItem ** SOAP_FMAC4 soap_get_PointerTons1__CFolderItem(struct soap*, ns1__CFolderItem **, const char*, const char*);

#ifndef soap_read_PointerTons1__CFolderItem
#define soap_read_PointerTons1__CFolderItem(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CFolderItem(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__CFolder
#define SOAP_TYPE_PointerToPointerTons1__CFolder (190)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CFolder(struct soap*, ns1__CFolder **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CFolder(struct soap*, const char *, int, ns1__CFolder **const*, const char *);
SOAP_FMAC3 ns1__CFolder *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CFolder(struct soap*, const char*, ns1__CFolder ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CFolder(struct soap*, ns1__CFolder **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__CFolder
#define soap_write_PointerToPointerTons1__CFolder(soap, data) ( soap_begin(soap), soap_serialize_PointerToPointerTons1__CFolder(soap, data), soap_begin_send(soap) || soap_put_PointerToPointerTons1__CFolder(soap, data, "ns1:CFolder", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CFolder *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CFolder(struct soap*, ns1__CFolder ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__CFolder
#define soap_read_PointerToPointerTons1__CFolder(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__CFolder(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CFolder
#define SOAP_TYPE_PointerTons1__CFolder (189)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CFolder(struct soap*, ns1__CFolder *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CFolder(struct soap*, const char *, int, ns1__CFolder *const*, const char *);
SOAP_FMAC3 ns1__CFolder ** SOAP_FMAC4 soap_in_PointerTons1__CFolder(struct soap*, const char*, ns1__CFolder **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CFolder(struct soap*, ns1__CFolder *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CFolder
#define soap_write_PointerTons1__CFolder(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CFolder(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CFolder(soap, data, "ns1:CFolder", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CFolder ** SOAP_FMAC4 soap_get_PointerTons1__CFolder(struct soap*, ns1__CFolder **, const char*, const char*);

#ifndef soap_read_PointerTons1__CFolder
#define soap_read_PointerTons1__CFolder(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CFolder(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__CFolderType
#define SOAP_TYPE_PointerToPointerTons1__CFolderType (188)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CFolderType(struct soap*, ns1__CFolderType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CFolderType(struct soap*, const char *, int, ns1__CFolderType **const*, const char *);
SOAP_FMAC3 ns1__CFolderType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CFolderType(struct soap*, const char*, ns1__CFolderType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CFolderType(struct soap*, ns1__CFolderType **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__CFolderType
#define soap_write_PointerToPointerTons1__CFolderType(soap, data) ( soap_begin(soap), soap_serialize_PointerToPointerTons1__CFolderType(soap, data), soap_begin_send(soap) || soap_put_PointerToPointerTons1__CFolderType(soap, data, "ns1:CFolderType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CFolderType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CFolderType(struct soap*, ns1__CFolderType ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__CFolderType
#define soap_read_PointerToPointerTons1__CFolderType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__CFolderType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CFolderType
#define SOAP_TYPE_PointerTons1__CFolderType (187)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CFolderType(struct soap*, ns1__CFolderType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CFolderType(struct soap*, const char *, int, ns1__CFolderType *const*, const char *);
SOAP_FMAC3 ns1__CFolderType ** SOAP_FMAC4 soap_in_PointerTons1__CFolderType(struct soap*, const char*, ns1__CFolderType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CFolderType(struct soap*, ns1__CFolderType *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CFolderType
#define soap_write_PointerTons1__CFolderType(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CFolderType(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CFolderType(soap, data, "ns1:CFolderType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CFolderType ** SOAP_FMAC4 soap_get_PointerTons1__CFolderType(struct soap*, ns1__CFolderType **, const char*, const char*);

#ifndef soap_read_PointerTons1__CFolderType
#define soap_read_PointerTons1__CFolderType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CFolderType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__CItemToTrack
#define SOAP_TYPE_PointerToPointerTons1__CItemToTrack (186)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CItemToTrack(struct soap*, ns1__CItemToTrack **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CItemToTrack(struct soap*, const char *, int, ns1__CItemToTrack **const*, const char *);
SOAP_FMAC3 ns1__CItemToTrack *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CItemToTrack(struct soap*, const char*, ns1__CItemToTrack ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CItemToTrack(struct soap*, ns1__CItemToTrack **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__CItemToTrack
#define soap_write_PointerToPointerTons1__CItemToTrack(soap, data) ( soap_begin(soap), soap_serialize_PointerToPointerTons1__CItemToTrack(soap, data), soap_begin_send(soap) || soap_put_PointerToPointerTons1__CItemToTrack(soap, data, "ns1:CItemToTrack", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CItemToTrack *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CItemToTrack(struct soap*, ns1__CItemToTrack ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__CItemToTrack
#define soap_read_PointerToPointerTons1__CItemToTrack(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__CItemToTrack(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CItemToTrack
#define SOAP_TYPE_PointerTons1__CItemToTrack (185)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CItemToTrack(struct soap*, ns1__CItemToTrack *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CItemToTrack(struct soap*, const char *, int, ns1__CItemToTrack *const*, const char *);
SOAP_FMAC3 ns1__CItemToTrack ** SOAP_FMAC4 soap_in_PointerTons1__CItemToTrack(struct soap*, const char*, ns1__CItemToTrack **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CItemToTrack(struct soap*, ns1__CItemToTrack *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CItemToTrack
#define soap_write_PointerTons1__CItemToTrack(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CItemToTrack(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CItemToTrack(soap, data, "ns1:CItemToTrack", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CItemToTrack ** SOAP_FMAC4 soap_get_PointerTons1__CItemToTrack(struct soap*, ns1__CItemToTrack **, const char*, const char*);

#ifndef soap_read_PointerTons1__CItemToTrack
#define soap_read_PointerTons1__CItemToTrack(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CItemToTrack(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__CLink
#define SOAP_TYPE_PointerToPointerTons1__CLink (184)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CLink(struct soap*, ns1__CLink **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CLink(struct soap*, const char *, int, ns1__CLink **const*, const char *);
SOAP_FMAC3 ns1__CLink *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CLink(struct soap*, const char*, ns1__CLink ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CLink(struct soap*, ns1__CLink **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__CLink
#define soap_write_PointerToPointerTons1__CLink(soap, data) ( soap_begin(soap), soap_serialize_PointerToPointerTons1__CLink(soap, data), soap_begin_send(soap) || soap_put_PointerToPointerTons1__CLink(soap, data, "ns1:CLink", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CLink *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CLink(struct soap*, ns1__CLink ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__CLink
#define soap_read_PointerToPointerTons1__CLink(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__CLink(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CLink
#define SOAP_TYPE_PointerTons1__CLink (183)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CLink(struct soap*, ns1__CLink *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CLink(struct soap*, const char *, int, ns1__CLink *const*, const char *);
SOAP_FMAC3 ns1__CLink ** SOAP_FMAC4 soap_in_PointerTons1__CLink(struct soap*, const char*, ns1__CLink **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CLink(struct soap*, ns1__CLink *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CLink
#define soap_write_PointerTons1__CLink(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CLink(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CLink(soap, data, "ns1:CLink", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CLink ** SOAP_FMAC4 soap_get_PointerTons1__CLink(struct soap*, ns1__CLink **, const char*, const char*);

#ifndef soap_read_PointerTons1__CLink
#define soap_read_PointerTons1__CLink(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CLink(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__CLinkHistoryItem
#define SOAP_TYPE_PointerToPointerTons1__CLinkHistoryItem (182)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CLinkHistoryItem(struct soap*, ns1__CLinkHistoryItem **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CLinkHistoryItem(struct soap*, const char *, int, ns1__CLinkHistoryItem **const*, const char *);
SOAP_FMAC3 ns1__CLinkHistoryItem *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CLinkHistoryItem(struct soap*, const char*, ns1__CLinkHistoryItem ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CLinkHistoryItem(struct soap*, ns1__CLinkHistoryItem **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__CLinkHistoryItem
#define soap_write_PointerToPointerTons1__CLinkHistoryItem(soap, data) ( soap_begin(soap), soap_serialize_PointerToPointerTons1__CLinkHistoryItem(soap, data), soap_begin_send(soap) || soap_put_PointerToPointerTons1__CLinkHistoryItem(soap, data, "ns1:CLinkHistoryItem", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CLinkHistoryItem *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CLinkHistoryItem(struct soap*, ns1__CLinkHistoryItem ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__CLinkHistoryItem
#define soap_read_PointerToPointerTons1__CLinkHistoryItem(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__CLinkHistoryItem(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CLinkHistoryItem
#define SOAP_TYPE_PointerTons1__CLinkHistoryItem (181)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CLinkHistoryItem(struct soap*, ns1__CLinkHistoryItem *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CLinkHistoryItem(struct soap*, const char *, int, ns1__CLinkHistoryItem *const*, const char *);
SOAP_FMAC3 ns1__CLinkHistoryItem ** SOAP_FMAC4 soap_in_PointerTons1__CLinkHistoryItem(struct soap*, const char*, ns1__CLinkHistoryItem **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CLinkHistoryItem(struct soap*, ns1__CLinkHistoryItem *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CLinkHistoryItem
#define soap_write_PointerTons1__CLinkHistoryItem(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CLinkHistoryItem(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CLinkHistoryItem(soap, data, "ns1:CLinkHistoryItem", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CLinkHistoryItem ** SOAP_FMAC4 soap_get_PointerTons1__CLinkHistoryItem(struct soap*, ns1__CLinkHistoryItem **, const char*, const char*);

#ifndef soap_read_PointerTons1__CLinkHistoryItem
#define soap_read_PointerTons1__CLinkHistoryItem(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CLinkHistoryItem(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__CLinkedItem
#define SOAP_TYPE_PointerToPointerTons1__CLinkedItem (180)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CLinkedItem(struct soap*, ns1__CLinkedItem **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CLinkedItem(struct soap*, const char *, int, ns1__CLinkedItem **const*, const char *);
SOAP_FMAC3 ns1__CLinkedItem *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CLinkedItem(struct soap*, const char*, ns1__CLinkedItem ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CLinkedItem(struct soap*, ns1__CLinkedItem **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__CLinkedItem
#define soap_write_PointerToPointerTons1__CLinkedItem(soap, data) ( soap_begin(soap), soap_serialize_PointerToPointerTons1__CLinkedItem(soap, data), soap_begin_send(soap) || soap_put_PointerToPointerTons1__CLinkedItem(soap, data, "ns1:CLinkedItem", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CLinkedItem *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CLinkedItem(struct soap*, ns1__CLinkedItem ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__CLinkedItem
#define soap_read_PointerToPointerTons1__CLinkedItem(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__CLinkedItem(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CLinkedItem
#define SOAP_TYPE_PointerTons1__CLinkedItem (179)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CLinkedItem(struct soap*, ns1__CLinkedItem *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CLinkedItem(struct soap*, const char *, int, ns1__CLinkedItem *const*, const char *);
SOAP_FMAC3 ns1__CLinkedItem ** SOAP_FMAC4 soap_in_PointerTons1__CLinkedItem(struct soap*, const char*, ns1__CLinkedItem **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CLinkedItem(struct soap*, ns1__CLinkedItem *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CLinkedItem
#define soap_write_PointerTons1__CLinkedItem(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CLinkedItem(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CLinkedItem(soap, data, "ns1:CLinkedItem", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CLinkedItem ** SOAP_FMAC4 soap_get_PointerTons1__CLinkedItem(struct soap*, ns1__CLinkedItem **, const char*, const char*);

#ifndef soap_read_PointerTons1__CLinkedItem
#define soap_read_PointerTons1__CLinkedItem(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CLinkedItem(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__CUserLicense
#define SOAP_TYPE_PointerToPointerTons1__CUserLicense (178)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CUserLicense(struct soap*, ns1__CUserLicense **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CUserLicense(struct soap*, const char *, int, ns1__CUserLicense **const*, const char *);
SOAP_FMAC3 ns1__CUserLicense *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CUserLicense(struct soap*, const char*, ns1__CUserLicense ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CUserLicense(struct soap*, ns1__CUserLicense **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__CUserLicense
#define soap_write_PointerToPointerTons1__CUserLicense(soap, data) ( soap_begin(soap), soap_serialize_PointerToPointerTons1__CUserLicense(soap, data), soap_begin_send(soap) || soap_put_PointerToPointerTons1__CUserLicense(soap, data, "ns1:CUserLicense", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CUserLicense *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CUserLicense(struct soap*, ns1__CUserLicense ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__CUserLicense
#define soap_read_PointerToPointerTons1__CUserLicense(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__CUserLicense(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CUserLicense
#define SOAP_TYPE_PointerTons1__CUserLicense (177)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CUserLicense(struct soap*, ns1__CUserLicense *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CUserLicense(struct soap*, const char *, int, ns1__CUserLicense *const*, const char *);
SOAP_FMAC3 ns1__CUserLicense ** SOAP_FMAC4 soap_in_PointerTons1__CUserLicense(struct soap*, const char*, ns1__CUserLicense **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CUserLicense(struct soap*, ns1__CUserLicense *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CUserLicense
#define soap_write_PointerTons1__CUserLicense(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CUserLicense(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CUserLicense(soap, data, "ns1:CUserLicense", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CUserLicense ** SOAP_FMAC4 soap_get_PointerTons1__CUserLicense(struct soap*, ns1__CUserLicense **, const char*, const char*);

#ifndef soap_read_PointerTons1__CUserLicense
#define soap_read_PointerTons1__CUserLicense(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CUserLicense(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__CGlobalUser
#define SOAP_TYPE_PointerToPointerTons1__CGlobalUser (176)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CGlobalUser(struct soap*, ns1__CGlobalUser **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CGlobalUser(struct soap*, const char *, int, ns1__CGlobalUser **const*, const char *);
SOAP_FMAC3 ns1__CGlobalUser *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CGlobalUser(struct soap*, const char*, ns1__CGlobalUser ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CGlobalUser(struct soap*, ns1__CGlobalUser **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__CGlobalUser
#define soap_write_PointerToPointerTons1__CGlobalUser(soap, data) ( soap_begin(soap), soap_serialize_PointerToPointerTons1__CGlobalUser(soap, data), soap_begin_send(soap) || soap_put_PointerToPointerTons1__CGlobalUser(soap, data, "ns1:CGlobalUser", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CGlobalUser *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CGlobalUser(struct soap*, ns1__CGlobalUser ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__CGlobalUser
#define soap_read_PointerToPointerTons1__CGlobalUser(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__CGlobalUser(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CGlobalUser
#define SOAP_TYPE_PointerTons1__CGlobalUser (175)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CGlobalUser(struct soap*, ns1__CGlobalUser *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CGlobalUser(struct soap*, const char *, int, ns1__CGlobalUser *const*, const char *);
SOAP_FMAC3 ns1__CGlobalUser ** SOAP_FMAC4 soap_in_PointerTons1__CGlobalUser(struct soap*, const char*, ns1__CGlobalUser **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CGlobalUser(struct soap*, ns1__CGlobalUser *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CGlobalUser
#define soap_write_PointerTons1__CGlobalUser(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CGlobalUser(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CGlobalUser(soap, data, "ns1:CGlobalUser", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CGlobalUser ** SOAP_FMAC4 soap_get_PointerTons1__CGlobalUser(struct soap*, ns1__CGlobalUser **, const char*, const char*);

#ifndef soap_read_PointerTons1__CGlobalUser
#define soap_read_PointerTons1__CGlobalUser(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CGlobalUser(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__CDefectEventDefinition
#define SOAP_TYPE_PointerToPointerTons1__CDefectEventDefinition (174)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CDefectEventDefinition(struct soap*, ns1__CDefectEventDefinition **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CDefectEventDefinition(struct soap*, const char *, int, ns1__CDefectEventDefinition **const*, const char *);
SOAP_FMAC3 ns1__CDefectEventDefinition *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CDefectEventDefinition(struct soap*, const char*, ns1__CDefectEventDefinition ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CDefectEventDefinition(struct soap*, ns1__CDefectEventDefinition **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__CDefectEventDefinition
#define soap_write_PointerToPointerTons1__CDefectEventDefinition(soap, data) ( soap_begin(soap), soap_serialize_PointerToPointerTons1__CDefectEventDefinition(soap, data), soap_begin_send(soap) || soap_put_PointerToPointerTons1__CDefectEventDefinition(soap, data, "ns1:CDefectEventDefinition", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CDefectEventDefinition *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CDefectEventDefinition(struct soap*, ns1__CDefectEventDefinition ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__CDefectEventDefinition
#define soap_read_PointerToPointerTons1__CDefectEventDefinition(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__CDefectEventDefinition(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CDefectEventDefinition
#define SOAP_TYPE_PointerTons1__CDefectEventDefinition (173)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CDefectEventDefinition(struct soap*, ns1__CDefectEventDefinition *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CDefectEventDefinition(struct soap*, const char *, int, ns1__CDefectEventDefinition *const*, const char *);
SOAP_FMAC3 ns1__CDefectEventDefinition ** SOAP_FMAC4 soap_in_PointerTons1__CDefectEventDefinition(struct soap*, const char*, ns1__CDefectEventDefinition **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CDefectEventDefinition(struct soap*, ns1__CDefectEventDefinition *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CDefectEventDefinition
#define soap_write_PointerTons1__CDefectEventDefinition(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CDefectEventDefinition(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CDefectEventDefinition(soap, data, "ns1:CDefectEventDefinition", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CDefectEventDefinition ** SOAP_FMAC4 soap_get_PointerTons1__CDefectEventDefinition(struct soap*, ns1__CDefectEventDefinition **, const char*, const char*);

#ifndef soap_read_PointerTons1__CDefectEventDefinition
#define soap_read_PointerTons1__CDefectEventDefinition(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CDefectEventDefinition(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__CEventDefinition
#define SOAP_TYPE_PointerToPointerTons1__CEventDefinition (172)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CEventDefinition(struct soap*, ns1__CEventDefinition **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CEventDefinition(struct soap*, const char *, int, ns1__CEventDefinition **const*, const char *);
SOAP_FMAC3 ns1__CEventDefinition *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CEventDefinition(struct soap*, const char*, ns1__CEventDefinition ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CEventDefinition(struct soap*, ns1__CEventDefinition **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__CEventDefinition
#define soap_write_PointerToPointerTons1__CEventDefinition(soap, data) ( soap_begin(soap), soap_serialize_PointerToPointerTons1__CEventDefinition(soap, data), soap_begin_send(soap) || soap_put_PointerToPointerTons1__CEventDefinition(soap, data, "ns1:CEventDefinition", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CEventDefinition *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CEventDefinition(struct soap*, ns1__CEventDefinition ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__CEventDefinition
#define soap_read_PointerToPointerTons1__CEventDefinition(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__CEventDefinition(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CEventDefinition
#define SOAP_TYPE_PointerTons1__CEventDefinition (171)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CEventDefinition(struct soap*, ns1__CEventDefinition *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CEventDefinition(struct soap*, const char *, int, ns1__CEventDefinition *const*, const char *);
SOAP_FMAC3 ns1__CEventDefinition ** SOAP_FMAC4 soap_in_PointerTons1__CEventDefinition(struct soap*, const char*, ns1__CEventDefinition **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CEventDefinition(struct soap*, ns1__CEventDefinition *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CEventDefinition
#define soap_write_PointerTons1__CEventDefinition(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CEventDefinition(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CEventDefinition(soap, data, "ns1:CEventDefinition", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CEventDefinition ** SOAP_FMAC4 soap_get_PointerTons1__CEventDefinition(struct soap*, ns1__CEventDefinition **, const char*, const char*);

#ifndef soap_read_PointerTons1__CEventDefinition
#define soap_read_PointerTons1__CEventDefinition(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CEventDefinition(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__CDefectEvent
#define SOAP_TYPE_PointerToPointerTons1__CDefectEvent (170)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CDefectEvent(struct soap*, ns1__CDefectEvent **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CDefectEvent(struct soap*, const char *, int, ns1__CDefectEvent **const*, const char *);
SOAP_FMAC3 ns1__CDefectEvent *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CDefectEvent(struct soap*, const char*, ns1__CDefectEvent ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CDefectEvent(struct soap*, ns1__CDefectEvent **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__CDefectEvent
#define soap_write_PointerToPointerTons1__CDefectEvent(soap, data) ( soap_begin(soap), soap_serialize_PointerToPointerTons1__CDefectEvent(soap, data), soap_begin_send(soap) || soap_put_PointerToPointerTons1__CDefectEvent(soap, data, "ns1:CDefectEvent", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CDefectEvent *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CDefectEvent(struct soap*, ns1__CDefectEvent ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__CDefectEvent
#define soap_read_PointerToPointerTons1__CDefectEvent(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__CDefectEvent(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CDefectEvent
#define SOAP_TYPE_PointerTons1__CDefectEvent (169)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CDefectEvent(struct soap*, ns1__CDefectEvent *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CDefectEvent(struct soap*, const char *, int, ns1__CDefectEvent *const*, const char *);
SOAP_FMAC3 ns1__CDefectEvent ** SOAP_FMAC4 soap_in_PointerTons1__CDefectEvent(struct soap*, const char*, ns1__CDefectEvent **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CDefectEvent(struct soap*, ns1__CDefectEvent *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CDefectEvent
#define soap_write_PointerTons1__CDefectEvent(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CDefectEvent(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CDefectEvent(soap, data, "ns1:CDefectEvent", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CDefectEvent ** SOAP_FMAC4 soap_get_PointerTons1__CDefectEvent(struct soap*, ns1__CDefectEvent **, const char*, const char*);

#ifndef soap_read_PointerTons1__CDefectEvent
#define soap_read_PointerTons1__CDefectEvent(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CDefectEvent(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__CEvent
#define SOAP_TYPE_PointerToPointerTons1__CEvent (168)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CEvent(struct soap*, ns1__CEvent **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CEvent(struct soap*, const char *, int, ns1__CEvent **const*, const char *);
SOAP_FMAC3 ns1__CEvent *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CEvent(struct soap*, const char*, ns1__CEvent ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CEvent(struct soap*, ns1__CEvent **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__CEvent
#define soap_write_PointerToPointerTons1__CEvent(soap, data) ( soap_begin(soap), soap_serialize_PointerToPointerTons1__CEvent(soap, data), soap_begin_send(soap) || soap_put_PointerToPointerTons1__CEvent(soap, data, "ns1:CEvent", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CEvent *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CEvent(struct soap*, ns1__CEvent ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__CEvent
#define soap_read_PointerToPointerTons1__CEvent(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__CEvent(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CEvent
#define SOAP_TYPE_PointerTons1__CEvent (167)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CEvent(struct soap*, ns1__CEvent *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CEvent(struct soap*, const char *, int, ns1__CEvent *const*, const char *);
SOAP_FMAC3 ns1__CEvent ** SOAP_FMAC4 soap_in_PointerTons1__CEvent(struct soap*, const char*, ns1__CEvent **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CEvent(struct soap*, ns1__CEvent *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CEvent
#define soap_write_PointerTons1__CEvent(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CEvent(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CEvent(soap, data, "ns1:CEvent", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CEvent ** SOAP_FMAC4 soap_get_PointerTons1__CEvent(struct soap*, ns1__CEvent **, const char*, const char*);

#ifndef soap_read_PointerTons1__CEvent
#define soap_read_PointerTons1__CEvent(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CEvent(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToArrayOfstring
#define SOAP_TYPE_PointerToArrayOfstring (166)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOfstring(struct soap*, ArrayOfstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOfstring(struct soap*, const char *, int, ArrayOfstring *const*, const char *);
SOAP_FMAC3 ArrayOfstring ** SOAP_FMAC4 soap_in_PointerToArrayOfstring(struct soap*, const char*, ArrayOfstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOfstring(struct soap*, ArrayOfstring *const*, const char*, const char*);

#ifndef soap_write_PointerToArrayOfstring
#define soap_write_PointerToArrayOfstring(soap, data) ( soap_begin(soap), soap_serialize_PointerToArrayOfstring(soap, data), soap_begin_send(soap) || soap_put_PointerToArrayOfstring(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfstring ** SOAP_FMAC4 soap_get_PointerToArrayOfstring(struct soap*, ArrayOfstring **, const char*, const char*);

#ifndef soap_read_PointerToArrayOfstring
#define soap_read_PointerToArrayOfstring(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToArrayOfstring(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__CTestCaseVariantField
#define SOAP_TYPE_PointerToPointerTons1__CTestCaseVariantField (165)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CTestCaseVariantField(struct soap*, ns1__CTestCaseVariantField **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CTestCaseVariantField(struct soap*, const char *, int, ns1__CTestCaseVariantField **const*, const char *);
SOAP_FMAC3 ns1__CTestCaseVariantField *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CTestCaseVariantField(struct soap*, const char*, ns1__CTestCaseVariantField ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CTestCaseVariantField(struct soap*, ns1__CTestCaseVariantField **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__CTestCaseVariantField
#define soap_write_PointerToPointerTons1__CTestCaseVariantField(soap, data) ( soap_begin(soap), soap_serialize_PointerToPointerTons1__CTestCaseVariantField(soap, data), soap_begin_send(soap) || soap_put_PointerToPointerTons1__CTestCaseVariantField(soap, data, "ns1:CTestCaseVariantField", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CTestCaseVariantField *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CTestCaseVariantField(struct soap*, ns1__CTestCaseVariantField ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__CTestCaseVariantField
#define soap_read_PointerToPointerTons1__CTestCaseVariantField(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__CTestCaseVariantField(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CTestCaseVariantField
#define SOAP_TYPE_PointerTons1__CTestCaseVariantField (164)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CTestCaseVariantField(struct soap*, ns1__CTestCaseVariantField *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CTestCaseVariantField(struct soap*, const char *, int, ns1__CTestCaseVariantField *const*, const char *);
SOAP_FMAC3 ns1__CTestCaseVariantField ** SOAP_FMAC4 soap_in_PointerTons1__CTestCaseVariantField(struct soap*, const char*, ns1__CTestCaseVariantField **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CTestCaseVariantField(struct soap*, ns1__CTestCaseVariantField *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CTestCaseVariantField
#define soap_write_PointerTons1__CTestCaseVariantField(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CTestCaseVariantField(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CTestCaseVariantField(soap, data, "ns1:CTestCaseVariantField", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CTestCaseVariantField ** SOAP_FMAC4 soap_get_PointerTons1__CTestCaseVariantField(struct soap*, ns1__CTestCaseVariantField **, const char*, const char*);

#ifndef soap_read_PointerTons1__CTestCaseVariantField
#define soap_read_PointerTons1__CTestCaseVariantField(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CTestCaseVariantField(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__CTestRunVariantField
#define SOAP_TYPE_PointerToPointerTons1__CTestRunVariantField (163)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CTestRunVariantField(struct soap*, ns1__CTestRunVariantField **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CTestRunVariantField(struct soap*, const char *, int, ns1__CTestRunVariantField **const*, const char *);
SOAP_FMAC3 ns1__CTestRunVariantField *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CTestRunVariantField(struct soap*, const char*, ns1__CTestRunVariantField ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CTestRunVariantField(struct soap*, ns1__CTestRunVariantField **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__CTestRunVariantField
#define soap_write_PointerToPointerTons1__CTestRunVariantField(soap, data) ( soap_begin(soap), soap_serialize_PointerToPointerTons1__CTestRunVariantField(soap, data), soap_begin_send(soap) || soap_put_PointerToPointerTons1__CTestRunVariantField(soap, data, "ns1:CTestRunVariantField", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CTestRunVariantField *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CTestRunVariantField(struct soap*, ns1__CTestRunVariantField ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__CTestRunVariantField
#define soap_read_PointerToPointerTons1__CTestRunVariantField(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__CTestRunVariantField(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CTestRunVariantField
#define SOAP_TYPE_PointerTons1__CTestRunVariantField (162)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CTestRunVariantField(struct soap*, ns1__CTestRunVariantField *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CTestRunVariantField(struct soap*, const char *, int, ns1__CTestRunVariantField *const*, const char *);
SOAP_FMAC3 ns1__CTestRunVariantField ** SOAP_FMAC4 soap_in_PointerTons1__CTestRunVariantField(struct soap*, const char*, ns1__CTestRunVariantField **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CTestRunVariantField(struct soap*, ns1__CTestRunVariantField *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CTestRunVariantField
#define soap_write_PointerTons1__CTestRunVariantField(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CTestRunVariantField(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CTestRunVariantField(soap, data, "ns1:CTestRunVariantField", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CTestRunVariantField ** SOAP_FMAC4 soap_get_PointerTons1__CTestRunVariantField(struct soap*, ns1__CTestRunVariantField **, const char*, const char*);

#ifndef soap_read_PointerTons1__CTestRunVariantField
#define soap_read_PointerTons1__CTestRunVariantField(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CTestRunVariantField(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__CField
#define SOAP_TYPE_PointerToPointerTons1__CField (161)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CField(struct soap*, ns1__CField **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CField(struct soap*, const char *, int, ns1__CField **const*, const char *);
SOAP_FMAC3 ns1__CField *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CField(struct soap*, const char*, ns1__CField ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CField(struct soap*, ns1__CField **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__CField
#define soap_write_PointerToPointerTons1__CField(soap, data) ( soap_begin(soap), soap_serialize_PointerToPointerTons1__CField(soap, data), soap_begin_send(soap) || soap_put_PointerToPointerTons1__CField(soap, data, "ns1:CField", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CField *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CField(struct soap*, ns1__CField ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__CField
#define soap_read_PointerToPointerTons1__CField(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__CField(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CField
#define SOAP_TYPE_PointerTons1__CField (160)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CField(struct soap*, ns1__CField *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CField(struct soap*, const char *, int, ns1__CField *const*, const char *);
SOAP_FMAC3 ns1__CField ** SOAP_FMAC4 soap_in_PointerTons1__CField(struct soap*, const char*, ns1__CField **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CField(struct soap*, ns1__CField *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CField
#define soap_write_PointerTons1__CField(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CField(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CField(soap, data, "ns1:CField", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CField ** SOAP_FMAC4 soap_get_PointerTons1__CField(struct soap*, ns1__CField **, const char*, const char*);

#ifndef soap_read_PointerTons1__CField
#define soap_read_PointerTons1__CField(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CField(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__CReportedByRecord
#define SOAP_TYPE_PointerToPointerTons1__CReportedByRecord (159)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CReportedByRecord(struct soap*, ns1__CReportedByRecord **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CReportedByRecord(struct soap*, const char *, int, ns1__CReportedByRecord **const*, const char *);
SOAP_FMAC3 ns1__CReportedByRecord *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CReportedByRecord(struct soap*, const char*, ns1__CReportedByRecord ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CReportedByRecord(struct soap*, ns1__CReportedByRecord **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__CReportedByRecord
#define soap_write_PointerToPointerTons1__CReportedByRecord(soap, data) ( soap_begin(soap), soap_serialize_PointerToPointerTons1__CReportedByRecord(soap, data), soap_begin_send(soap) || soap_put_PointerToPointerTons1__CReportedByRecord(soap, data, "ns1:CReportedByRecord", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CReportedByRecord *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CReportedByRecord(struct soap*, ns1__CReportedByRecord ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__CReportedByRecord
#define soap_read_PointerToPointerTons1__CReportedByRecord(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__CReportedByRecord(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CReportedByRecord
#define SOAP_TYPE_PointerTons1__CReportedByRecord (158)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CReportedByRecord(struct soap*, ns1__CReportedByRecord *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CReportedByRecord(struct soap*, const char *, int, ns1__CReportedByRecord *const*, const char *);
SOAP_FMAC3 ns1__CReportedByRecord ** SOAP_FMAC4 soap_in_PointerTons1__CReportedByRecord(struct soap*, const char*, ns1__CReportedByRecord **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CReportedByRecord(struct soap*, ns1__CReportedByRecord *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CReportedByRecord
#define soap_write_PointerTons1__CReportedByRecord(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CReportedByRecord(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CReportedByRecord(soap, data, "ns1:CReportedByRecord", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CReportedByRecord ** SOAP_FMAC4 soap_get_PointerTons1__CReportedByRecord(struct soap*, ns1__CReportedByRecord **, const char*, const char*);

#ifndef soap_read_PointerTons1__CReportedByRecord
#define soap_read_PointerTons1__CReportedByRecord(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CReportedByRecord(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToshort
#define SOAP_TYPE_PointerToshort (157)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToshort(struct soap*, short *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToshort(struct soap*, const char *, int, short *const*, const char *);
SOAP_FMAC3 short ** SOAP_FMAC4 soap_in_PointerToshort(struct soap*, const char*, short **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToshort(struct soap*, short *const*, const char*, const char*);

#ifndef soap_write_PointerToshort
#define soap_write_PointerToshort(soap, data) ( soap_begin(soap), soap_serialize_PointerToshort(soap, data), soap_begin_send(soap) || soap_put_PointerToshort(soap, data, "short", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 short ** SOAP_FMAC4 soap_get_PointerToshort(struct soap*, short **, const char*, const char*);

#ifndef soap_read_PointerToshort
#define soap_read_PointerToshort(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToshort(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CSystem
#define SOAP_TYPE_PointerTons1__CSystem (155)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CSystem(struct soap*, ns1__CSystem *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CSystem(struct soap*, const char *, int, ns1__CSystem *const*, const char *);
SOAP_FMAC3 ns1__CSystem ** SOAP_FMAC4 soap_in_PointerTons1__CSystem(struct soap*, const char*, ns1__CSystem **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CSystem(struct soap*, ns1__CSystem *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CSystem
#define soap_write_PointerTons1__CSystem(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CSystem(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CSystem(soap, data, "ns1:CSystem", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CSystem ** SOAP_FMAC4 soap_get_PointerTons1__CSystem(struct soap*, ns1__CSystem **, const char*, const char*);

#ifndef soap_read_PointerTons1__CSystem
#define soap_read_PointerTons1__CSystem(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CSystem(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToArrayOfCFileAttachment
#define SOAP_TYPE_PointerToArrayOfCFileAttachment (154)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOfCFileAttachment(struct soap*, ArrayOfCFileAttachment *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOfCFileAttachment(struct soap*, const char *, int, ArrayOfCFileAttachment *const*, const char *);
SOAP_FMAC3 ArrayOfCFileAttachment ** SOAP_FMAC4 soap_in_PointerToArrayOfCFileAttachment(struct soap*, const char*, ArrayOfCFileAttachment **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOfCFileAttachment(struct soap*, ArrayOfCFileAttachment *const*, const char*, const char*);

#ifndef soap_write_PointerToArrayOfCFileAttachment
#define soap_write_PointerToArrayOfCFileAttachment(soap, data) ( soap_begin(soap), soap_serialize_PointerToArrayOfCFileAttachment(soap, data), soap_begin_send(soap) || soap_put_PointerToArrayOfCFileAttachment(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCFileAttachment ** SOAP_FMAC4 soap_get_PointerToArrayOfCFileAttachment(struct soap*, ArrayOfCFileAttachment **, const char*, const char*);

#ifndef soap_read_PointerToArrayOfCFileAttachment
#define soap_read_PointerToArrayOfCFileAttachment(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToArrayOfCFileAttachment(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__CFileAttachment
#define SOAP_TYPE_PointerToPointerTons1__CFileAttachment (153)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CFileAttachment(struct soap*, ns1__CFileAttachment **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CFileAttachment(struct soap*, const char *, int, ns1__CFileAttachment **const*, const char *);
SOAP_FMAC3 ns1__CFileAttachment *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CFileAttachment(struct soap*, const char*, ns1__CFileAttachment ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CFileAttachment(struct soap*, ns1__CFileAttachment **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__CFileAttachment
#define soap_write_PointerToPointerTons1__CFileAttachment(soap, data) ( soap_begin(soap), soap_serialize_PointerToPointerTons1__CFileAttachment(soap, data), soap_begin_send(soap) || soap_put_PointerToPointerTons1__CFileAttachment(soap, data, "ns1:CFileAttachment", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CFileAttachment *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CFileAttachment(struct soap*, ns1__CFileAttachment ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__CFileAttachment
#define soap_read_PointerToPointerTons1__CFileAttachment(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__CFileAttachment(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CFileAttachment
#define SOAP_TYPE_PointerTons1__CFileAttachment (152)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CFileAttachment(struct soap*, ns1__CFileAttachment *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CFileAttachment(struct soap*, const char *, int, ns1__CFileAttachment *const*, const char *);
SOAP_FMAC3 ns1__CFileAttachment ** SOAP_FMAC4 soap_in_PointerTons1__CFileAttachment(struct soap*, const char*, ns1__CFileAttachment **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CFileAttachment(struct soap*, ns1__CFileAttachment *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CFileAttachment
#define soap_write_PointerTons1__CFileAttachment(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CFileAttachment(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CFileAttachment(soap, data, "ns1:CFileAttachment", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CFileAttachment ** SOAP_FMAC4 soap_get_PointerTons1__CFileAttachment(struct soap*, ns1__CFileAttachment **, const char*, const char*);

#ifndef soap_read_PointerTons1__CFileAttachment
#define soap_read_PointerTons1__CFileAttachment(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CFileAttachment(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__CFile
#define SOAP_TYPE_PointerToPointerTons1__CFile (151)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CFile(struct soap*, ns1__CFile **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CFile(struct soap*, const char *, int, ns1__CFile **const*, const char *);
SOAP_FMAC3 ns1__CFile *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CFile(struct soap*, const char*, ns1__CFile ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CFile(struct soap*, ns1__CFile **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__CFile
#define soap_write_PointerToPointerTons1__CFile(soap, data) ( soap_begin(soap), soap_serialize_PointerToPointerTons1__CFile(soap, data), soap_begin_send(soap) || soap_put_PointerToPointerTons1__CFile(soap, data, "ns1:CFile", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CFile *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CFile(struct soap*, ns1__CFile ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__CFile
#define soap_read_PointerToPointerTons1__CFile(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__CFile(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CFile
#define SOAP_TYPE_PointerTons1__CFile (150)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CFile(struct soap*, ns1__CFile *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CFile(struct soap*, const char *, int, ns1__CFile *const*, const char *);
SOAP_FMAC3 ns1__CFile ** SOAP_FMAC4 soap_in_PointerTons1__CFile(struct soap*, const char*, ns1__CFile **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CFile(struct soap*, ns1__CFile *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CFile
#define soap_write_PointerTons1__CFile(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CFile(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CFile(soap, data, "ns1:CFile", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CFile ** SOAP_FMAC4 soap_get_PointerTons1__CFile(struct soap*, ns1__CFile **, const char*, const char*);

#ifndef soap_read_PointerTons1__CFile
#define soap_read_PointerTons1__CFile(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CFile(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__CSCCFileRecord
#define SOAP_TYPE_PointerToPointerTons1__CSCCFileRecord (149)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CSCCFileRecord(struct soap*, ns1__CSCCFileRecord **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CSCCFileRecord(struct soap*, const char *, int, ns1__CSCCFileRecord **const*, const char *);
SOAP_FMAC3 ns1__CSCCFileRecord *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CSCCFileRecord(struct soap*, const char*, ns1__CSCCFileRecord ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CSCCFileRecord(struct soap*, ns1__CSCCFileRecord **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__CSCCFileRecord
#define soap_write_PointerToPointerTons1__CSCCFileRecord(soap, data) ( soap_begin(soap), soap_serialize_PointerToPointerTons1__CSCCFileRecord(soap, data), soap_begin_send(soap) || soap_put_PointerToPointerTons1__CSCCFileRecord(soap, data, "ns1:CSCCFileRecord", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CSCCFileRecord *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CSCCFileRecord(struct soap*, ns1__CSCCFileRecord ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__CSCCFileRecord
#define soap_read_PointerToPointerTons1__CSCCFileRecord(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__CSCCFileRecord(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CSCCFileRecord
#define SOAP_TYPE_PointerTons1__CSCCFileRecord (148)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CSCCFileRecord(struct soap*, ns1__CSCCFileRecord *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CSCCFileRecord(struct soap*, const char *, int, ns1__CSCCFileRecord *const*, const char *);
SOAP_FMAC3 ns1__CSCCFileRecord ** SOAP_FMAC4 soap_in_PointerTons1__CSCCFileRecord(struct soap*, const char*, ns1__CSCCFileRecord **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CSCCFileRecord(struct soap*, ns1__CSCCFileRecord *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CSCCFileRecord
#define soap_write_PointerTons1__CSCCFileRecord(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CSCCFileRecord(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CSCCFileRecord(soap, data, "ns1:CSCCFileRecord", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CSCCFileRecord ** SOAP_FMAC4 soap_get_PointerTons1__CSCCFileRecord(struct soap*, ns1__CSCCFileRecord **, const char*, const char*);

#ifndef soap_read_PointerTons1__CSCCFileRecord
#define soap_read_PointerTons1__CSCCFileRecord(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CSCCFileRecord(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTotime
#define SOAP_TYPE_PointerTotime (147)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotime(struct soap*, time_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotime(struct soap*, const char *, int, time_t *const*, const char *);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTotime(struct soap*, const char*, time_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotime(struct soap*, time_t *const*, const char*, const char*);

#ifndef soap_write_PointerTotime
#define soap_write_PointerTotime(soap, data) ( soap_begin(soap), soap_serialize_PointerTotime(soap, data), soap_begin_send(soap) || soap_put_PointerTotime(soap, data, "dateTime", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTotime(struct soap*, time_t **, const char*, const char*);

#ifndef soap_read_PointerTotime
#define soap_read_PointerTotime(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTotime(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__CRecordRowSoap
#define SOAP_TYPE_PointerToPointerTons1__CRecordRowSoap (145)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CRecordRowSoap(struct soap*, ns1__CRecordRowSoap **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CRecordRowSoap(struct soap*, const char *, int, ns1__CRecordRowSoap **const*, const char *);
SOAP_FMAC3 ns1__CRecordRowSoap *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CRecordRowSoap(struct soap*, const char*, ns1__CRecordRowSoap ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CRecordRowSoap(struct soap*, ns1__CRecordRowSoap **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__CRecordRowSoap
#define soap_write_PointerToPointerTons1__CRecordRowSoap(soap, data) ( soap_begin(soap), soap_serialize_PointerToPointerTons1__CRecordRowSoap(soap, data), soap_begin_send(soap) || soap_put_PointerToPointerTons1__CRecordRowSoap(soap, data, "ns1:CRecordRowSoap", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CRecordRowSoap *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CRecordRowSoap(struct soap*, ns1__CRecordRowSoap ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__CRecordRowSoap
#define soap_read_PointerToPointerTons1__CRecordRowSoap(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__CRecordRowSoap(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CRecordRowSoap
#define SOAP_TYPE_PointerTons1__CRecordRowSoap (144)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CRecordRowSoap(struct soap*, ns1__CRecordRowSoap *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CRecordRowSoap(struct soap*, const char *, int, ns1__CRecordRowSoap *const*, const char *);
SOAP_FMAC3 ns1__CRecordRowSoap ** SOAP_FMAC4 soap_in_PointerTons1__CRecordRowSoap(struct soap*, const char*, ns1__CRecordRowSoap **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CRecordRowSoap(struct soap*, ns1__CRecordRowSoap *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CRecordRowSoap
#define soap_write_PointerTons1__CRecordRowSoap(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CRecordRowSoap(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CRecordRowSoap(soap, data, "ns1:CRecordRowSoap", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CRecordRowSoap ** SOAP_FMAC4 soap_get_PointerTons1__CRecordRowSoap(struct soap*, ns1__CRecordRowSoap **, const char*, const char*);

#ifndef soap_read_PointerTons1__CRecordRowSoap
#define soap_read_PointerTons1__CRecordRowSoap(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CRecordRowSoap(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__CRecordData
#define SOAP_TYPE_PointerToPointerTons1__CRecordData (143)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CRecordData(struct soap*, ns1__CRecordData **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CRecordData(struct soap*, const char *, int, ns1__CRecordData **const*, const char *);
SOAP_FMAC3 ns1__CRecordData *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CRecordData(struct soap*, const char*, ns1__CRecordData ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CRecordData(struct soap*, ns1__CRecordData **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__CRecordData
#define soap_write_PointerToPointerTons1__CRecordData(soap, data) ( soap_begin(soap), soap_serialize_PointerToPointerTons1__CRecordData(soap, data), soap_begin_send(soap) || soap_put_PointerToPointerTons1__CRecordData(soap, data, "ns1:CRecordData", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CRecordData *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CRecordData(struct soap*, ns1__CRecordData ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__CRecordData
#define soap_read_PointerToPointerTons1__CRecordData(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__CRecordData(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CRecordData
#define SOAP_TYPE_PointerTons1__CRecordData (142)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CRecordData(struct soap*, ns1__CRecordData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CRecordData(struct soap*, const char *, int, ns1__CRecordData *const*, const char *);
SOAP_FMAC3 ns1__CRecordData ** SOAP_FMAC4 soap_in_PointerTons1__CRecordData(struct soap*, const char*, ns1__CRecordData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CRecordData(struct soap*, ns1__CRecordData *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CRecordData
#define soap_write_PointerTons1__CRecordData(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CRecordData(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CRecordData(soap, data, "ns1:CRecordData", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CRecordData ** SOAP_FMAC4 soap_get_PointerTons1__CRecordData(struct soap*, ns1__CRecordData **, const char*, const char*);

#ifndef soap_read_PointerTons1__CRecordData
#define soap_read_PointerTons1__CRecordData(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CRecordData(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__CFilter
#define SOAP_TYPE_PointerToPointerTons1__CFilter (141)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CFilter(struct soap*, ns1__CFilter **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CFilter(struct soap*, const char *, int, ns1__CFilter **const*, const char *);
SOAP_FMAC3 ns1__CFilter *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CFilter(struct soap*, const char*, ns1__CFilter ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CFilter(struct soap*, ns1__CFilter **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__CFilter
#define soap_write_PointerToPointerTons1__CFilter(soap, data) ( soap_begin(soap), soap_serialize_PointerToPointerTons1__CFilter(soap, data), soap_begin_send(soap) || soap_put_PointerToPointerTons1__CFilter(soap, data, "ns1:CFilter", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CFilter *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CFilter(struct soap*, ns1__CFilter ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__CFilter
#define soap_read_PointerToPointerTons1__CFilter(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__CFilter(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CFilter
#define SOAP_TYPE_PointerTons1__CFilter (140)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CFilter(struct soap*, ns1__CFilter *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CFilter(struct soap*, const char *, int, ns1__CFilter *const*, const char *);
SOAP_FMAC3 ns1__CFilter ** SOAP_FMAC4 soap_in_PointerTons1__CFilter(struct soap*, const char*, ns1__CFilter **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CFilter(struct soap*, ns1__CFilter *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CFilter
#define soap_write_PointerTons1__CFilter(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CFilter(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CFilter(soap, data, "ns1:CFilter", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CFilter ** SOAP_FMAC4 soap_get_PointerTons1__CFilter(struct soap*, ns1__CFilter **, const char*, const char*);

#ifndef soap_read_PointerTons1__CFilter
#define soap_read_PointerTons1__CFilter(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CFilter(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__CTableColumn
#define SOAP_TYPE_PointerToPointerTons1__CTableColumn (139)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CTableColumn(struct soap*, ns1__CTableColumn **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CTableColumn(struct soap*, const char *, int, ns1__CTableColumn **const*, const char *);
SOAP_FMAC3 ns1__CTableColumn *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CTableColumn(struct soap*, const char*, ns1__CTableColumn ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CTableColumn(struct soap*, ns1__CTableColumn **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__CTableColumn
#define soap_write_PointerToPointerTons1__CTableColumn(soap, data) ( soap_begin(soap), soap_serialize_PointerToPointerTons1__CTableColumn(soap, data), soap_begin_send(soap) || soap_put_PointerToPointerTons1__CTableColumn(soap, data, "ns1:CTableColumn", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CTableColumn *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CTableColumn(struct soap*, ns1__CTableColumn ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__CTableColumn
#define soap_read_PointerToPointerTons1__CTableColumn(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__CTableColumn(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CTableColumn
#define SOAP_TYPE_PointerTons1__CTableColumn (138)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CTableColumn(struct soap*, ns1__CTableColumn *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CTableColumn(struct soap*, const char *, int, ns1__CTableColumn *const*, const char *);
SOAP_FMAC3 ns1__CTableColumn ** SOAP_FMAC4 soap_in_PointerTons1__CTableColumn(struct soap*, const char*, ns1__CTableColumn **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CTableColumn(struct soap*, ns1__CTableColumn *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CTableColumn
#define soap_write_PointerTons1__CTableColumn(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CTableColumn(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CTableColumn(soap, data, "ns1:CTableColumn", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CTableColumn ** SOAP_FMAC4 soap_get_PointerTons1__CTableColumn(struct soap*, ns1__CTableColumn **, const char*, const char*);

#ifndef soap_read_PointerTons1__CTableColumn
#define soap_read_PointerTons1__CTableColumn(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CTableColumn(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__CFieldValue
#define SOAP_TYPE_PointerToPointerTons1__CFieldValue (137)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CFieldValue(struct soap*, ns1__CFieldValue **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CFieldValue(struct soap*, const char *, int, ns1__CFieldValue **const*, const char *);
SOAP_FMAC3 ns1__CFieldValue *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CFieldValue(struct soap*, const char*, ns1__CFieldValue ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CFieldValue(struct soap*, ns1__CFieldValue **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__CFieldValue
#define soap_write_PointerToPointerTons1__CFieldValue(soap, data) ( soap_begin(soap), soap_serialize_PointerToPointerTons1__CFieldValue(soap, data), soap_begin_send(soap) || soap_put_PointerToPointerTons1__CFieldValue(soap, data, "ns1:CFieldValue", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CFieldValue *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CFieldValue(struct soap*, ns1__CFieldValue ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__CFieldValue
#define soap_read_PointerToPointerTons1__CFieldValue(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__CFieldValue(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CFieldValue
#define SOAP_TYPE_PointerTons1__CFieldValue (136)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CFieldValue(struct soap*, ns1__CFieldValue *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CFieldValue(struct soap*, const char *, int, ns1__CFieldValue *const*, const char *);
SOAP_FMAC3 ns1__CFieldValue ** SOAP_FMAC4 soap_in_PointerTons1__CFieldValue(struct soap*, const char*, ns1__CFieldValue **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CFieldValue(struct soap*, ns1__CFieldValue *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CFieldValue
#define soap_write_PointerTons1__CFieldValue(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CFieldValue(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CFieldValue(soap, data, "ns1:CFieldValue", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CFieldValue ** SOAP_FMAC4 soap_get_PointerTons1__CFieldValue(struct soap*, ns1__CFieldValue **, const char*, const char*);

#ifndef soap_read_PointerTons1__CFieldValue
#define soap_read_PointerTons1__CFieldValue(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CFieldValue(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__CTableField
#define SOAP_TYPE_PointerToPointerTons1__CTableField (135)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CTableField(struct soap*, ns1__CTableField **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CTableField(struct soap*, const char *, int, ns1__CTableField **const*, const char *);
SOAP_FMAC3 ns1__CTableField *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CTableField(struct soap*, const char*, ns1__CTableField ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CTableField(struct soap*, ns1__CTableField **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__CTableField
#define soap_write_PointerToPointerTons1__CTableField(soap, data) ( soap_begin(soap), soap_serialize_PointerToPointerTons1__CTableField(soap, data), soap_begin_send(soap) || soap_put_PointerToPointerTons1__CTableField(soap, data, "ns1:CTableField", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CTableField *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CTableField(struct soap*, ns1__CTableField ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__CTableField
#define soap_read_PointerToPointerTons1__CTableField(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__CTableField(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CTableField
#define SOAP_TYPE_PointerTons1__CTableField (134)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CTableField(struct soap*, ns1__CTableField *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CTableField(struct soap*, const char *, int, ns1__CTableField *const*, const char *);
SOAP_FMAC3 ns1__CTableField ** SOAP_FMAC4 soap_in_PointerTons1__CTableField(struct soap*, const char*, ns1__CTableField **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CTableField(struct soap*, ns1__CTableField *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CTableField
#define soap_write_PointerTons1__CTableField(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CTableField(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CTableField(soap, data, "ns1:CTableField", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CTableField ** SOAP_FMAC4 soap_get_PointerTons1__CTableField(struct soap*, ns1__CTableField **, const char*, const char*);

#ifndef soap_read_PointerTons1__CTableField
#define soap_read_PointerTons1__CTableField(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CTableField(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__CDatabaseTable
#define SOAP_TYPE_PointerToPointerTons1__CDatabaseTable (133)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CDatabaseTable(struct soap*, ns1__CDatabaseTable **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CDatabaseTable(struct soap*, const char *, int, ns1__CDatabaseTable **const*, const char *);
SOAP_FMAC3 ns1__CDatabaseTable *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CDatabaseTable(struct soap*, const char*, ns1__CDatabaseTable ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CDatabaseTable(struct soap*, ns1__CDatabaseTable **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__CDatabaseTable
#define soap_write_PointerToPointerTons1__CDatabaseTable(soap, data) ( soap_begin(soap), soap_serialize_PointerToPointerTons1__CDatabaseTable(soap, data), soap_begin_send(soap) || soap_put_PointerToPointerTons1__CDatabaseTable(soap, data, "ns1:CDatabaseTable", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CDatabaseTable *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CDatabaseTable(struct soap*, ns1__CDatabaseTable ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__CDatabaseTable
#define soap_read_PointerToPointerTons1__CDatabaseTable(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__CDatabaseTable(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CDatabaseTable
#define SOAP_TYPE_PointerTons1__CDatabaseTable (132)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CDatabaseTable(struct soap*, ns1__CDatabaseTable *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CDatabaseTable(struct soap*, const char *, int, ns1__CDatabaseTable *const*, const char *);
SOAP_FMAC3 ns1__CDatabaseTable ** SOAP_FMAC4 soap_in_PointerTons1__CDatabaseTable(struct soap*, const char*, ns1__CDatabaseTable **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CDatabaseTable(struct soap*, ns1__CDatabaseTable *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CDatabaseTable
#define soap_write_PointerTons1__CDatabaseTable(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CDatabaseTable(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CDatabaseTable(soap, data, "ns1:CDatabaseTable", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CDatabaseTable ** SOAP_FMAC4 soap_get_PointerTons1__CDatabaseTable(struct soap*, ns1__CDatabaseTable **, const char*, const char*);

#ifndef soap_read_PointerTons1__CDatabaseTable
#define soap_read_PointerTons1__CDatabaseTable(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CDatabaseTable(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__CProject
#define SOAP_TYPE_PointerToPointerTons1__CProject (131)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CProject(struct soap*, ns1__CProject **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CProject(struct soap*, const char *, int, ns1__CProject **const*, const char *);
SOAP_FMAC3 ns1__CProject *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CProject(struct soap*, const char*, ns1__CProject ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CProject(struct soap*, ns1__CProject **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__CProject
#define soap_write_PointerToPointerTons1__CProject(soap, data) ( soap_begin(soap), soap_serialize_PointerToPointerTons1__CProject(soap, data), soap_begin_send(soap) || soap_put_PointerToPointerTons1__CProject(soap, data, "ns1:CProject", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CProject *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CProject(struct soap*, ns1__CProject ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__CProject
#define soap_read_PointerToPointerTons1__CProject(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__CProject(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CProject
#define SOAP_TYPE_PointerTons1__CProject (130)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CProject(struct soap*, ns1__CProject *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CProject(struct soap*, const char *, int, ns1__CProject *const*, const char *);
SOAP_FMAC3 ns1__CProject ** SOAP_FMAC4 soap_in_PointerTons1__CProject(struct soap*, const char*, ns1__CProject **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CProject(struct soap*, ns1__CProject *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CProject
#define soap_write_PointerTons1__CProject(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CProject(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CProject(soap, data, "ns1:CProject", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CProject ** SOAP_FMAC4 soap_get_PointerTons1__CProject(struct soap*, ns1__CProject **, const char*, const char*);

#ifndef soap_read_PointerTons1__CProject
#define soap_read_PointerTons1__CProject(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CProject(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__CProjectDataOption
#define SOAP_TYPE_PointerToPointerTons1__CProjectDataOption (129)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CProjectDataOption(struct soap*, ns1__CProjectDataOption **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CProjectDataOption(struct soap*, const char *, int, ns1__CProjectDataOption **const*, const char *);
SOAP_FMAC3 ns1__CProjectDataOption *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CProjectDataOption(struct soap*, const char*, ns1__CProjectDataOption ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CProjectDataOption(struct soap*, ns1__CProjectDataOption **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__CProjectDataOption
#define soap_write_PointerToPointerTons1__CProjectDataOption(soap, data) ( soap_begin(soap), soap_serialize_PointerToPointerTons1__CProjectDataOption(soap, data), soap_begin_send(soap) || soap_put_PointerToPointerTons1__CProjectDataOption(soap, data, "ns1:CProjectDataOption", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CProjectDataOption *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CProjectDataOption(struct soap*, ns1__CProjectDataOption ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__CProjectDataOption
#define soap_read_PointerToPointerTons1__CProjectDataOption(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__CProjectDataOption(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CProjectDataOption
#define SOAP_TYPE_PointerTons1__CProjectDataOption (128)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CProjectDataOption(struct soap*, ns1__CProjectDataOption *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CProjectDataOption(struct soap*, const char *, int, ns1__CProjectDataOption *const*, const char *);
SOAP_FMAC3 ns1__CProjectDataOption ** SOAP_FMAC4 soap_in_PointerTons1__CProjectDataOption(struct soap*, const char*, ns1__CProjectDataOption **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CProjectDataOption(struct soap*, ns1__CProjectDataOption *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CProjectDataOption
#define soap_write_PointerTons1__CProjectDataOption(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CProjectDataOption(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CProjectDataOption(soap, data, "ns1:CProjectDataOption", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CProjectDataOption ** SOAP_FMAC4 soap_get_PointerTons1__CProjectDataOption(struct soap*, ns1__CProjectDataOption **, const char*, const char*);

#ifndef soap_read_PointerTons1__CProjectDataOption
#define soap_read_PointerTons1__CProjectDataOption(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CProjectDataOption(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__CDatabase
#define SOAP_TYPE_PointerToPointerTons1__CDatabase (127)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CDatabase(struct soap*, ns1__CDatabase **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CDatabase(struct soap*, const char *, int, ns1__CDatabase **const*, const char *);
SOAP_FMAC3 ns1__CDatabase *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CDatabase(struct soap*, const char*, ns1__CDatabase ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CDatabase(struct soap*, ns1__CDatabase **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__CDatabase
#define soap_write_PointerToPointerTons1__CDatabase(soap, data) ( soap_begin(soap), soap_serialize_PointerToPointerTons1__CDatabase(soap, data), soap_begin_send(soap) || soap_put_PointerToPointerTons1__CDatabase(soap, data, "ns1:CDatabase", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CDatabase *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CDatabase(struct soap*, ns1__CDatabase ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__CDatabase
#define soap_read_PointerToPointerTons1__CDatabase(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__CDatabase(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTostring
#define SOAP_TYPE_PointerTostring (126)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostring(struct soap*, char **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostring(struct soap*, const char *, int, char **const*, const char *);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerTostring(struct soap*, const char*, char ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostring(struct soap*, char **const*, const char*, const char*);

#ifndef soap_write_PointerTostring
#define soap_write_PointerTostring(soap, data) ( soap_begin(soap), soap_serialize_PointerTostring(soap, data), soap_begin_send(soap) || soap_put_PointerTostring(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerTostring(struct soap*, char ***, const char*, const char*);

#ifndef soap_read_PointerTostring
#define soap_read_PointerTostring(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostring(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToArrayOfCTreeNodeSoap
#define SOAP_TYPE_PointerToArrayOfCTreeNodeSoap (125)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOfCTreeNodeSoap(struct soap*, ArrayOfCTreeNodeSoap *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOfCTreeNodeSoap(struct soap*, const char *, int, ArrayOfCTreeNodeSoap *const*, const char *);
SOAP_FMAC3 ArrayOfCTreeNodeSoap ** SOAP_FMAC4 soap_in_PointerToArrayOfCTreeNodeSoap(struct soap*, const char*, ArrayOfCTreeNodeSoap **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOfCTreeNodeSoap(struct soap*, ArrayOfCTreeNodeSoap *const*, const char*, const char*);

#ifndef soap_write_PointerToArrayOfCTreeNodeSoap
#define soap_write_PointerToArrayOfCTreeNodeSoap(soap, data) ( soap_begin(soap), soap_serialize_PointerToArrayOfCTreeNodeSoap(soap, data), soap_begin_send(soap) || soap_put_PointerToArrayOfCTreeNodeSoap(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCTreeNodeSoap ** SOAP_FMAC4 soap_get_PointerToArrayOfCTreeNodeSoap(struct soap*, ArrayOfCTreeNodeSoap **, const char*, const char*);

#ifndef soap_read_PointerToArrayOfCTreeNodeSoap
#define soap_read_PointerToArrayOfCTreeNodeSoap(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToArrayOfCTreeNodeSoap(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTodouble
#define SOAP_TYPE_PointerTodouble (124)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodouble(struct soap*, double *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodouble(struct soap*, const char *, int, double *const*, const char *);
SOAP_FMAC3 double ** SOAP_FMAC4 soap_in_PointerTodouble(struct soap*, const char*, double **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodouble(struct soap*, double *const*, const char*, const char*);

#ifndef soap_write_PointerTodouble
#define soap_write_PointerTodouble(soap, data) ( soap_begin(soap), soap_serialize_PointerTodouble(soap, data), soap_begin_send(soap) || soap_put_PointerTodouble(soap, data, "double", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 double ** SOAP_FMAC4 soap_get_PointerTodouble(struct soap*, double **, const char*, const char*);

#ifndef soap_read_PointerTodouble
#define soap_read_PointerTodouble(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTodouble(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToLONG64
#define SOAP_TYPE_PointerToLONG64 (122)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToLONG64(struct soap*, LONG64 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToLONG64(struct soap*, const char *, int, LONG64 *const*, const char *);
SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_in_PointerToLONG64(struct soap*, const char*, LONG64 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToLONG64(struct soap*, LONG64 *const*, const char*, const char*);

#ifndef soap_write_PointerToLONG64
#define soap_write_PointerToLONG64(soap, data) ( soap_begin(soap), soap_serialize_PointerToLONG64(soap, data), soap_begin_send(soap) || soap_put_PointerToLONG64(soap, data, "long", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_get_PointerToLONG64(struct soap*, LONG64 **, const char*, const char*);

#ifndef soap_read_PointerToLONG64
#define soap_read_PointerToLONG64(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToLONG64(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToArrayOfCField
#define SOAP_TYPE_PointerToArrayOfCField (121)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOfCField(struct soap*, ArrayOfCField *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOfCField(struct soap*, const char *, int, ArrayOfCField *const*, const char *);
SOAP_FMAC3 ArrayOfCField ** SOAP_FMAC4 soap_in_PointerToArrayOfCField(struct soap*, const char*, ArrayOfCField **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOfCField(struct soap*, ArrayOfCField *const*, const char*, const char*);

#ifndef soap_write_PointerToArrayOfCField
#define soap_write_PointerToArrayOfCField(soap, data) ( soap_begin(soap), soap_serialize_PointerToArrayOfCField(soap, data), soap_begin_send(soap) || soap_put_PointerToArrayOfCField(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCField ** SOAP_FMAC4 soap_get_PointerToArrayOfCField(struct soap*, ArrayOfCField **, const char*, const char*);

#ifndef soap_read_PointerToArrayOfCField
#define soap_read_PointerToArrayOfCField(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToArrayOfCField(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToArrayOfCFieldValue
#define SOAP_TYPE_PointerToArrayOfCFieldValue (120)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOfCFieldValue(struct soap*, ArrayOfCFieldValue *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOfCFieldValue(struct soap*, const char *, int, ArrayOfCFieldValue *const*, const char *);
SOAP_FMAC3 ArrayOfCFieldValue ** SOAP_FMAC4 soap_in_PointerToArrayOfCFieldValue(struct soap*, const char*, ArrayOfCFieldValue **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOfCFieldValue(struct soap*, ArrayOfCFieldValue *const*, const char*, const char*);

#ifndef soap_write_PointerToArrayOfCFieldValue
#define soap_write_PointerToArrayOfCFieldValue(soap, data) ( soap_begin(soap), soap_serialize_PointerToArrayOfCFieldValue(soap, data), soap_begin_send(soap) || soap_put_PointerToArrayOfCFieldValue(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCFieldValue ** SOAP_FMAC4 soap_get_PointerToArrayOfCFieldValue(struct soap*, ArrayOfCFieldValue **, const char*, const char*);

#ifndef soap_read_PointerToArrayOfCFieldValue
#define soap_read_PointerToArrayOfCFieldValue(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToArrayOfCFieldValue(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTobool
#define SOAP_TYPE_PointerTobool (119)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap*, bool *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap*, const char *, int, bool *const*, const char *);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap*, const char*, bool **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap*, bool *const*, const char*, const char*);

#ifndef soap_write_PointerTobool
#define soap_write_PointerTobool(soap, data) ( soap_begin(soap), soap_serialize_PointerTobool(soap, data), soap_begin_send(soap) || soap_put_PointerTobool(soap, data, "boolean", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap*, bool **, const char*, const char*);

#ifndef soap_read_PointerTobool
#define soap_read_PointerTobool(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTobool(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToArrayOfCFile
#define SOAP_TYPE_PointerToArrayOfCFile (117)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOfCFile(struct soap*, ArrayOfCFile *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOfCFile(struct soap*, const char *, int, ArrayOfCFile *const*, const char *);
SOAP_FMAC3 ArrayOfCFile ** SOAP_FMAC4 soap_in_PointerToArrayOfCFile(struct soap*, const char*, ArrayOfCFile **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOfCFile(struct soap*, ArrayOfCFile *const*, const char*, const char*);

#ifndef soap_write_PointerToArrayOfCFile
#define soap_write_PointerToArrayOfCFile(soap, data) ( soap_begin(soap), soap_serialize_PointerToArrayOfCFile(soap, data), soap_begin_send(soap) || soap_put_PointerToArrayOfCFile(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCFile ** SOAP_FMAC4 soap_get_PointerToArrayOfCFile(struct soap*, ArrayOfCFile **, const char*, const char*);

#ifndef soap_read_PointerToArrayOfCFile
#define soap_read_PointerToArrayOfCFile(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToArrayOfCFile(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__base64Binary
#define SOAP_TYPE_PointerToxsd__base64Binary (116)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__base64Binary(struct soap*, const char *, int, xsd__base64Binary *const*, const char *);
SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_in_PointerToxsd__base64Binary(struct soap*, const char*, xsd__base64Binary **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__base64Binary
#define soap_write_PointerToxsd__base64Binary(soap, data) ( soap_begin(soap), soap_serialize_PointerToxsd__base64Binary(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__base64Binary(soap, data, "xsd:base64Binary", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_get_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary **, const char*, const char*);

#ifndef soap_read_PointerToxsd__base64Binary
#define soap_read_PointerToxsd__base64Binary(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__base64Binary(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToArrayOfCRecordRowSoap
#define SOAP_TYPE_PointerToArrayOfCRecordRowSoap (114)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOfCRecordRowSoap(struct soap*, ArrayOfCRecordRowSoap *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOfCRecordRowSoap(struct soap*, const char *, int, ArrayOfCRecordRowSoap *const*, const char *);
SOAP_FMAC3 ArrayOfCRecordRowSoap ** SOAP_FMAC4 soap_in_PointerToArrayOfCRecordRowSoap(struct soap*, const char*, ArrayOfCRecordRowSoap **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOfCRecordRowSoap(struct soap*, ArrayOfCRecordRowSoap *const*, const char*, const char*);

#ifndef soap_write_PointerToArrayOfCRecordRowSoap
#define soap_write_PointerToArrayOfCRecordRowSoap(soap, data) ( soap_begin(soap), soap_serialize_PointerToArrayOfCRecordRowSoap(soap, data), soap_begin_send(soap) || soap_put_PointerToArrayOfCRecordRowSoap(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCRecordRowSoap ** SOAP_FMAC4 soap_get_PointerToArrayOfCRecordRowSoap(struct soap*, ArrayOfCRecordRowSoap **, const char*, const char*);

#ifndef soap_read_PointerToArrayOfCRecordRowSoap
#define soap_read_PointerToArrayOfCRecordRowSoap(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToArrayOfCRecordRowSoap(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToArrayOfCTableColumn
#define SOAP_TYPE_PointerToArrayOfCTableColumn (113)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOfCTableColumn(struct soap*, ArrayOfCTableColumn *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOfCTableColumn(struct soap*, const char *, int, ArrayOfCTableColumn *const*, const char *);
SOAP_FMAC3 ArrayOfCTableColumn ** SOAP_FMAC4 soap_in_PointerToArrayOfCTableColumn(struct soap*, const char*, ArrayOfCTableColumn **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOfCTableColumn(struct soap*, ArrayOfCTableColumn *const*, const char*, const char*);

#ifndef soap_write_PointerToArrayOfCTableColumn
#define soap_write_PointerToArrayOfCTableColumn(soap, data) ( soap_begin(soap), soap_serialize_PointerToArrayOfCTableColumn(soap, data), soap_begin_send(soap) || soap_put_PointerToArrayOfCTableColumn(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCTableColumn ** SOAP_FMAC4 soap_get_PointerToArrayOfCTableColumn(struct soap*, ArrayOfCTableColumn **, const char*, const char*);

#ifndef soap_read_PointerToArrayOfCTableColumn
#define soap_read_PointerToArrayOfCTableColumn(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToArrayOfCTableColumn(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToArrayOfCRecordData
#define SOAP_TYPE_PointerToArrayOfCRecordData (112)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOfCRecordData(struct soap*, ArrayOfCRecordData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOfCRecordData(struct soap*, const char *, int, ArrayOfCRecordData *const*, const char *);
SOAP_FMAC3 ArrayOfCRecordData ** SOAP_FMAC4 soap_in_PointerToArrayOfCRecordData(struct soap*, const char*, ArrayOfCRecordData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOfCRecordData(struct soap*, ArrayOfCRecordData *const*, const char*, const char*);

#ifndef soap_write_PointerToArrayOfCRecordData
#define soap_write_PointerToArrayOfCRecordData(soap, data) ( soap_begin(soap), soap_serialize_PointerToArrayOfCRecordData(soap, data), soap_begin_send(soap) || soap_put_PointerToArrayOfCRecordData(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCRecordData ** SOAP_FMAC4 soap_get_PointerToArrayOfCRecordData(struct soap*, ArrayOfCRecordData **, const char*, const char*);

#ifndef soap_read_PointerToArrayOfCRecordData
#define soap_read_PointerToArrayOfCRecordData(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToArrayOfCRecordData(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToint
#define SOAP_TYPE_PointerToint (111)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);

#ifndef soap_write_PointerToint
#define soap_write_PointerToint(soap, data) ( soap_begin(soap), soap_serialize_PointerToint(soap, data), soap_begin_send(soap) || soap_put_PointerToint(soap, data, "int", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);

#ifndef soap_read_PointerToint
#define soap_read_PointerToint(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToint(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToArrayOfCProjectDataOption
#define SOAP_TYPE_PointerToArrayOfCProjectDataOption (110)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOfCProjectDataOption(struct soap*, ArrayOfCProjectDataOption *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOfCProjectDataOption(struct soap*, const char *, int, ArrayOfCProjectDataOption *const*, const char *);
SOAP_FMAC3 ArrayOfCProjectDataOption ** SOAP_FMAC4 soap_in_PointerToArrayOfCProjectDataOption(struct soap*, const char*, ArrayOfCProjectDataOption **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOfCProjectDataOption(struct soap*, ArrayOfCProjectDataOption *const*, const char*, const char*);

#ifndef soap_write_PointerToArrayOfCProjectDataOption
#define soap_write_PointerToArrayOfCProjectDataOption(soap, data) ( soap_begin(soap), soap_serialize_PointerToArrayOfCProjectDataOption(soap, data), soap_begin_send(soap) || soap_put_PointerToArrayOfCProjectDataOption(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ArrayOfCProjectDataOption ** SOAP_FMAC4 soap_get_PointerToArrayOfCProjectDataOption(struct soap*, ArrayOfCProjectDataOption **, const char*, const char*);

#ifndef soap_read_PointerToArrayOfCProjectDataOption
#define soap_read_PointerToArrayOfCProjectDataOption(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToArrayOfCProjectDataOption(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CDatabase
#define SOAP_TYPE_PointerTons1__CDatabase (109)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CDatabase(struct soap*, ns1__CDatabase *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CDatabase(struct soap*, const char *, int, ns1__CDatabase *const*, const char *);
SOAP_FMAC3 ns1__CDatabase ** SOAP_FMAC4 soap_in_PointerTons1__CDatabase(struct soap*, const char*, ns1__CDatabase **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CDatabase(struct soap*, ns1__CDatabase *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CDatabase
#define soap_write_PointerTons1__CDatabase(soap, data) ( soap_begin(soap), soap_serialize_PointerTons1__CDatabase(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CDatabase(soap, data, "ns1:CDatabase", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CDatabase ** SOAP_FMAC4 soap_get_PointerTons1__CDatabase(struct soap*, ns1__CDatabase **, const char*, const char*);

#ifndef soap_read_PointerTons1__CDatabase
#define soap_read_PointerTons1__CDatabase(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CDatabase(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_xsd__date
#define SOAP_TYPE_xsd__date (13)
#endif

#define soap_default_xsd__date(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__date(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__date(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__date(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__date(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_xsd__date
#define soap_write_xsd__date(soap, data) ( soap_begin(soap), soap_serialize_xsd__date(soap, data), soap_begin_send(soap) || soap_put_xsd__date(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__date(struct soap*, char **, const char*, const char*);

#ifndef soap_read_xsd__date
#define soap_read_xsd__date(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__date(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTounsignedByte
#define SOAP_TYPE_PointerTounsignedByte (10)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);

#ifndef soap_write_PointerTounsignedByte
#define soap_write_PointerTounsignedByte(soap, data) ( soap_begin(soap), soap_serialize_PointerTounsignedByte(soap, data), soap_begin_send(soap) || soap_put_PointerTounsignedByte(soap, data, "unsignedByte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);

#ifndef soap_read_PointerTounsignedByte
#define soap_read_PointerTounsignedByte(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTounsignedByte(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_begin(soap), soap_serialize__QName(soap, data), soap_begin_send(soap) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_begin(soap), soap_serialize_string(soap, data), soap_begin_send(soap) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

/* End of soapH.h */
