/* soapttsoapcgiProxy.cpp
   Generated by gSOAP 2.8.14 from ttsoapcgi.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapttsoapcgiProxy.h"

ttsoapcgiProxy::ttsoapcgiProxy()
{	ttsoapcgiProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

ttsoapcgiProxy::ttsoapcgiProxy(const struct soap &_soap) : soap(_soap)
{ }

ttsoapcgiProxy::ttsoapcgiProxy(const char *url)
{	ttsoapcgiProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

ttsoapcgiProxy::ttsoapcgiProxy(soap_mode iomode)
{	ttsoapcgiProxy_init(iomode, iomode);
}

ttsoapcgiProxy::ttsoapcgiProxy(const char *url, soap_mode iomode)
{	ttsoapcgiProxy_init(iomode, iomode);
	soap_endpoint = url;
}

ttsoapcgiProxy::ttsoapcgiProxy(soap_mode imode, soap_mode omode)
{	ttsoapcgiProxy_init(imode, omode);
}

ttsoapcgiProxy::~ttsoapcgiProxy()
{ }

void ttsoapcgiProxy::ttsoapcgiProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns1", "urn:testtrack-interface", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
}

void ttsoapcgiProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void ttsoapcgiProxy::reset()
{	destroy();
	soap_done(this);
	soap_init(this);
	ttsoapcgiProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void ttsoapcgiProxy::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *ttsoapcgiProxy::soap_header()
{	return this->header;
}

const SOAP_ENV__Fault *ttsoapcgiProxy::soap_fault()
{	return this->fault;
}

const char *ttsoapcgiProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *ttsoapcgiProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int ttsoapcgiProxy::soap_close_socket()
{	return soap_closesock(this);
}

int ttsoapcgiProxy::soap_force_close_socket()
{	return soap_force_closesock(this);
}

void ttsoapcgiProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void ttsoapcgiProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *ttsoapcgiProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int ttsoapcgiProxy::getDatabaseList(const char *endpoint, const char *soap_action, struct ns1__getDatabaseListResponse &_param_1)
{	struct soap *soap = this;
	struct ns1__getDatabaseList soap_tmp_ns1__getDatabaseList;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getDatabaseList";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getDatabaseList(soap, &soap_tmp_ns1__getDatabaseList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getDatabaseList(soap, &soap_tmp_ns1__getDatabaseList, "ns1:getDatabaseList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getDatabaseList(soap, &soap_tmp_ns1__getDatabaseList, "ns1:getDatabaseList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_1)
		return soap_closesock(soap);
	soap_default_ns1__getDatabaseListResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getDatabaseListResponse(soap, &_param_1, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getProjectList(const char *endpoint, const char *soap_action, char *username, char *password, struct ns1__getProjectListResponse &_param_2)
{	struct soap *soap = this;
	struct ns1__getProjectList soap_tmp_ns1__getProjectList;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getProjectList";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getProjectList.username = username;
	soap_tmp_ns1__getProjectList.password = password;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getProjectList(soap, &soap_tmp_ns1__getProjectList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getProjectList(soap, &soap_tmp_ns1__getProjectList, "ns1:getProjectList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getProjectList(soap, &soap_tmp_ns1__getProjectList, "ns1:getProjectList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_2)
		return soap_closesock(soap);
	soap_default_ns1__getProjectListResponse(soap, &_param_2);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getProjectListResponse(soap, &_param_2, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getProjectDataOptionList(const char *endpoint, const char *soap_action, struct ns1__getProjectDataOptionListResponse &_param_3)
{	struct soap *soap = this;
	struct ns1__getProjectDataOptionList soap_tmp_ns1__getProjectDataOptionList;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getProjectDataOptionList";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getProjectDataOptionList(soap, &soap_tmp_ns1__getProjectDataOptionList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getProjectDataOptionList(soap, &soap_tmp_ns1__getProjectDataOptionList, "ns1:getProjectDataOptionList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getProjectDataOptionList(soap, &soap_tmp_ns1__getProjectDataOptionList, "ns1:getProjectDataOptionList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_3)
		return soap_closesock(soap);
	soap_default_ns1__getProjectDataOptionListResponse(soap, &_param_3);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getProjectDataOptionListResponse(soap, &_param_3, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::DatabaseLogon(const char *endpoint, const char *soap_action, char *dbname, char *username, char *password, LONG64 &Cookie)
{	struct soap *soap = this;
	struct ns1__DatabaseLogon soap_tmp_ns1__DatabaseLogon;
	struct ns1__DatabaseLogonResponse *soap_tmp_ns1__DatabaseLogonResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#DatabaseLogon";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__DatabaseLogon.dbname = dbname;
	soap_tmp_ns1__DatabaseLogon.username = username;
	soap_tmp_ns1__DatabaseLogon.password = password;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__DatabaseLogon(soap, &soap_tmp_ns1__DatabaseLogon);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__DatabaseLogon(soap, &soap_tmp_ns1__DatabaseLogon, "ns1:DatabaseLogon", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__DatabaseLogon(soap, &soap_tmp_ns1__DatabaseLogon, "ns1:DatabaseLogon", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&Cookie)
		return soap_closesock(soap);
	soap_default_LONG64(soap, &Cookie);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__DatabaseLogonResponse = soap_get_ns1__DatabaseLogonResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	Cookie = soap_tmp_ns1__DatabaseLogonResponse->Cookie;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::ProjectLogon(const char *endpoint, const char *soap_action, ns1__CProject *pProj, char *username, char *password, LONG64 &Cookie)
{	struct soap *soap = this;
	struct ns1__ProjectLogon soap_tmp_ns1__ProjectLogon;
	struct ns1__ProjectLogonResponse *soap_tmp_ns1__ProjectLogonResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#ProjectLogon";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__ProjectLogon.pProj = pProj;
	soap_tmp_ns1__ProjectLogon.username = username;
	soap_tmp_ns1__ProjectLogon.password = password;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__ProjectLogon(soap, &soap_tmp_ns1__ProjectLogon);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__ProjectLogon(soap, &soap_tmp_ns1__ProjectLogon, "ns1:ProjectLogon", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__ProjectLogon(soap, &soap_tmp_ns1__ProjectLogon, "ns1:ProjectLogon", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&Cookie)
		return soap_closesock(soap);
	soap_default_LONG64(soap, &Cookie);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__ProjectLogonResponse = soap_get_ns1__ProjectLogonResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	Cookie = soap_tmp_ns1__ProjectLogonResponse->Cookie;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::DatabaseLogoff(const char *endpoint, const char *soap_action, LONG64 cookie, int &result)
{	struct soap *soap = this;
	struct ns1__DatabaseLogoff soap_tmp_ns1__DatabaseLogoff;
	struct ns1__DatabaseLogoffResponse *soap_tmp_ns1__DatabaseLogoffResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#DatabaseLogoff";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__DatabaseLogoff.cookie = cookie;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__DatabaseLogoff(soap, &soap_tmp_ns1__DatabaseLogoff);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__DatabaseLogoff(soap, &soap_tmp_ns1__DatabaseLogoff, "ns1:DatabaseLogoff", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__DatabaseLogoff(soap, &soap_tmp_ns1__DatabaseLogoff, "ns1:DatabaseLogoff", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__DatabaseLogoffResponse = soap_get_ns1__DatabaseLogoffResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__DatabaseLogoffResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::formattedTextSupport(const char *endpoint, const char *soap_action, LONG64 cookie, bool enableFormattedText, bool &formattingEnabled)
{	struct soap *soap = this;
	struct ns1__formattedTextSupport soap_tmp_ns1__formattedTextSupport;
	struct ns1__formattedTextSupportResponse *soap_tmp_ns1__formattedTextSupportResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__formattedTextSupport.cookie = cookie;
	soap_tmp_ns1__formattedTextSupport.enableFormattedText = enableFormattedText;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__formattedTextSupport(soap, &soap_tmp_ns1__formattedTextSupport);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__formattedTextSupport(soap, &soap_tmp_ns1__formattedTextSupport, "ns1:formattedTextSupport", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__formattedTextSupport(soap, &soap_tmp_ns1__formattedTextSupport, "ns1:formattedTextSupport", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&formattingEnabled)
		return soap_closesock(soap);
	soap_default_bool(soap, &formattingEnabled);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__formattedTextSupportResponse = soap_get_ns1__formattedTextSupportResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	formattingEnabled = soap_tmp_ns1__formattedTextSupportResponse->formattingEnabled;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getTableList(const char *endpoint, const char *soap_action, LONG64 cookie, struct ns1__getTableListResponse &_param_4)
{	struct soap *soap = this;
	struct ns1__getTableList soap_tmp_ns1__getTableList;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getTableList";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getTableList.cookie = cookie;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getTableList(soap, &soap_tmp_ns1__getTableList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getTableList(soap, &soap_tmp_ns1__getTableList, "ns1:getTableList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getTableList(soap, &soap_tmp_ns1__getTableList, "ns1:getTableList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_4)
		return soap_closesock(soap);
	soap_default_ns1__getTableListResponse(soap, &_param_4);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getTableListResponse(soap, &_param_4, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getDropdownFieldForTable(const char *endpoint, const char *soap_action, LONG64 cookie, char *tablename, struct ns1__getDropdownFieldForTableResponse &_param_5)
{	struct soap *soap = this;
	struct ns1__getDropdownFieldForTable soap_tmp_ns1__getDropdownFieldForTable;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getDropdownFieldForTable";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getDropdownFieldForTable.cookie = cookie;
	soap_tmp_ns1__getDropdownFieldForTable.tablename = tablename;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getDropdownFieldForTable(soap, &soap_tmp_ns1__getDropdownFieldForTable);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getDropdownFieldForTable(soap, &soap_tmp_ns1__getDropdownFieldForTable, "ns1:getDropdownFieldForTable", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getDropdownFieldForTable(soap, &soap_tmp_ns1__getDropdownFieldForTable, "ns1:getDropdownFieldForTable", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_5)
		return soap_closesock(soap);
	soap_default_ns1__getDropdownFieldForTableResponse(soap, &_param_5);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getDropdownFieldForTableResponse(soap, &_param_5, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getDropdownFieldValuesForTable(const char *endpoint, const char *soap_action, LONG64 cookie, char *tablename, char *fieldname, struct ns1__getDropdownFieldValuesForTableResponse &_param_6)
{	struct soap *soap = this;
	struct ns1__getDropdownFieldValuesForTable soap_tmp_ns1__getDropdownFieldValuesForTable;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getDropdownFieldValuesForTable";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getDropdownFieldValuesForTable.cookie = cookie;
	soap_tmp_ns1__getDropdownFieldValuesForTable.tablename = tablename;
	soap_tmp_ns1__getDropdownFieldValuesForTable.fieldname = fieldname;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getDropdownFieldValuesForTable(soap, &soap_tmp_ns1__getDropdownFieldValuesForTable);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getDropdownFieldValuesForTable(soap, &soap_tmp_ns1__getDropdownFieldValuesForTable, "ns1:getDropdownFieldValuesForTable", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getDropdownFieldValuesForTable(soap, &soap_tmp_ns1__getDropdownFieldValuesForTable, "ns1:getDropdownFieldValuesForTable", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_6)
		return soap_closesock(soap);
	soap_default_ns1__getDropdownFieldValuesForTableResponse(soap, &_param_6);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getDropdownFieldValuesForTableResponse(soap, &_param_6, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::addDropdownFieldValuesForTable(const char *endpoint, const char *soap_action, LONG64 cookie, char *tablename, char *fieldname, ArrayOfCFieldValue *pValueList, int &result)
{	struct soap *soap = this;
	struct ns1__addDropdownFieldValuesForTable soap_tmp_ns1__addDropdownFieldValuesForTable;
	struct ns1__addDropdownFieldValuesForTableResponse *soap_tmp_ns1__addDropdownFieldValuesForTableResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#addDropdownFieldValuesForTable";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__addDropdownFieldValuesForTable.cookie = cookie;
	soap_tmp_ns1__addDropdownFieldValuesForTable.tablename = tablename;
	soap_tmp_ns1__addDropdownFieldValuesForTable.fieldname = fieldname;
	soap_tmp_ns1__addDropdownFieldValuesForTable.pValueList = pValueList;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__addDropdownFieldValuesForTable(soap, &soap_tmp_ns1__addDropdownFieldValuesForTable);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__addDropdownFieldValuesForTable(soap, &soap_tmp_ns1__addDropdownFieldValuesForTable, "ns1:addDropdownFieldValuesForTable", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__addDropdownFieldValuesForTable(soap, &soap_tmp_ns1__addDropdownFieldValuesForTable, "ns1:addDropdownFieldValuesForTable", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__addDropdownFieldValuesForTableResponse = soap_get_ns1__addDropdownFieldValuesForTableResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__addDropdownFieldValuesForTableResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::GetLinkDefinitionValues(const char *endpoint, const char *soap_action, LONG64 cookie, struct ns1__GetLinkDefinitionValuesResponse &_param_7)
{	struct soap *soap = this;
	struct ns1__GetLinkDefinitionValues soap_tmp_ns1__GetLinkDefinitionValues;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#GetLinkDefinitionValues";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__GetLinkDefinitionValues.cookie = cookie;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__GetLinkDefinitionValues(soap, &soap_tmp_ns1__GetLinkDefinitionValues);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__GetLinkDefinitionValues(soap, &soap_tmp_ns1__GetLinkDefinitionValues, "ns1:GetLinkDefinitionValues", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__GetLinkDefinitionValues(soap, &soap_tmp_ns1__GetLinkDefinitionValues, "ns1:GetLinkDefinitionValues", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_7)
		return soap_closesock(soap);
	soap_default_ns1__GetLinkDefinitionValuesResponse(soap, &_param_7);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__GetLinkDefinitionValuesResponse(soap, &_param_7, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getColumnsForTable(const char *endpoint, const char *soap_action, LONG64 cookie, char *tablename, struct ns1__getColumnsForTableResponse &_param_8)
{	struct soap *soap = this;
	struct ns1__getColumnsForTable soap_tmp_ns1__getColumnsForTable;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getColumnsForTable";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getColumnsForTable.cookie = cookie;
	soap_tmp_ns1__getColumnsForTable.tablename = tablename;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getColumnsForTable(soap, &soap_tmp_ns1__getColumnsForTable);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getColumnsForTable(soap, &soap_tmp_ns1__getColumnsForTable, "ns1:getColumnsForTable", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getColumnsForTable(soap, &soap_tmp_ns1__getColumnsForTable, "ns1:getColumnsForTable", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_8)
		return soap_closesock(soap);
	soap_default_ns1__getColumnsForTableResponse(soap, &_param_8);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getColumnsForTableResponse(soap, &_param_8, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getFilterList(const char *endpoint, const char *soap_action, LONG64 cookie, struct ns1__getFilterListResponse &_param_9)
{	struct soap *soap = this;
	struct ns1__getFilterList soap_tmp_ns1__getFilterList;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getFilterList";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getFilterList.cookie = cookie;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getFilterList(soap, &soap_tmp_ns1__getFilterList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getFilterList(soap, &soap_tmp_ns1__getFilterList, "ns1:getFilterList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getFilterList(soap, &soap_tmp_ns1__getFilterList, "ns1:getFilterList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_9)
		return soap_closesock(soap);
	soap_default_ns1__getFilterListResponse(soap, &_param_9);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getFilterListResponse(soap, &_param_9, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getFilterListForTable(const char *endpoint, const char *soap_action, LONG64 cookie, char *tablename, struct ns1__getFilterListForTableResponse &_param_10)
{	struct soap *soap = this;
	struct ns1__getFilterListForTable soap_tmp_ns1__getFilterListForTable;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getFilterListForTable";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getFilterListForTable.cookie = cookie;
	soap_tmp_ns1__getFilterListForTable.tablename = tablename;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getFilterListForTable(soap, &soap_tmp_ns1__getFilterListForTable);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getFilterListForTable(soap, &soap_tmp_ns1__getFilterListForTable, "ns1:getFilterListForTable", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getFilterListForTable(soap, &soap_tmp_ns1__getFilterListForTable, "ns1:getFilterListForTable", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_10)
		return soap_closesock(soap);
	soap_default_ns1__getFilterListForTableResponse(soap, &_param_10);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getFilterListForTableResponse(soap, &_param_10, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getRecordListForTable(const char *endpoint, const char *soap_action, LONG64 cookie, char *tablename, char *filtername, ArrayOfCTableColumn *columnlist, struct ns1__getRecordListForTableResponse &_param_11)
{	struct soap *soap = this;
	struct ns1__getRecordListForTable soap_tmp_ns1__getRecordListForTable;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getRecordListForTable";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getRecordListForTable.cookie = cookie;
	soap_tmp_ns1__getRecordListForTable.tablename = tablename;
	soap_tmp_ns1__getRecordListForTable.filtername = filtername;
	soap_tmp_ns1__getRecordListForTable.columnlist = columnlist;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getRecordListForTable(soap, &soap_tmp_ns1__getRecordListForTable);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getRecordListForTable(soap, &soap_tmp_ns1__getRecordListForTable, "ns1:getRecordListForTable", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getRecordListForTable(soap, &soap_tmp_ns1__getRecordListForTable, "ns1:getRecordListForTable", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_11)
		return soap_closesock(soap);
	soap_default_ns1__getRecordListForTableResponse(soap, &_param_11);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getRecordListForTableResponse(soap, &_param_11, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getTestConfig(const char *endpoint, const char *soap_action, LONG64 cookie, char *name, struct ns1__getTestConfigResponse &_param_12)
{	struct soap *soap = this;
	struct ns1__getTestConfig soap_tmp_ns1__getTestConfig;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getTestConfig";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getTestConfig.cookie = cookie;
	soap_tmp_ns1__getTestConfig.name = name;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getTestConfig(soap, &soap_tmp_ns1__getTestConfig);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getTestConfig(soap, &soap_tmp_ns1__getTestConfig, "ns1:getTestConfig", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getTestConfig(soap, &soap_tmp_ns1__getTestConfig, "ns1:getTestConfig", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_12)
		return soap_closesock(soap);
	soap_default_ns1__getTestConfigResponse(soap, &_param_12);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getTestConfigResponse(soap, &_param_12, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getTestConfigByRecordID(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, struct ns1__getTestConfigByRecordIDResponse &_param_13)
{	struct soap *soap = this;
	struct ns1__getTestConfigByRecordID soap_tmp_ns1__getTestConfigByRecordID;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getTestConfigByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getTestConfigByRecordID.cookie = cookie;
	soap_tmp_ns1__getTestConfigByRecordID.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getTestConfigByRecordID(soap, &soap_tmp_ns1__getTestConfigByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getTestConfigByRecordID(soap, &soap_tmp_ns1__getTestConfigByRecordID, "ns1:getTestConfigByRecordID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getTestConfigByRecordID(soap, &soap_tmp_ns1__getTestConfigByRecordID, "ns1:getTestConfigByRecordID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_13)
		return soap_closesock(soap);
	soap_default_ns1__getTestConfigByRecordIDResponse(soap, &_param_13);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getTestConfigByRecordIDResponse(soap, &_param_13, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::addTestConfig(const char *endpoint, const char *soap_action, LONG64 cookie, ns1__CSystem *pTestConfig, LONG64 &recordID)
{	struct soap *soap = this;
	struct ns1__addTestConfig soap_tmp_ns1__addTestConfig;
	struct ns1__addTestConfigResponse *soap_tmp_ns1__addTestConfigResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#addTestConfig";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__addTestConfig.cookie = cookie;
	soap_tmp_ns1__addTestConfig.pTestConfig = pTestConfig;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__addTestConfig(soap, &soap_tmp_ns1__addTestConfig);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__addTestConfig(soap, &soap_tmp_ns1__addTestConfig, "ns1:addTestConfig", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__addTestConfig(soap, &soap_tmp_ns1__addTestConfig, "ns1:addTestConfig", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&recordID)
		return soap_closesock(soap);
	soap_default_LONG64(soap, &recordID);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__addTestConfigResponse = soap_get_ns1__addTestConfigResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	recordID = soap_tmp_ns1__addTestConfigResponse->recordID;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::editTestConfig(const char *endpoint, const char *soap_action, LONG64 cookie, char *name, struct ns1__editTestConfigResponse &_param_14)
{	struct soap *soap = this;
	struct ns1__editTestConfig soap_tmp_ns1__editTestConfig;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#editTestConfig";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__editTestConfig.cookie = cookie;
	soap_tmp_ns1__editTestConfig.name = name;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__editTestConfig(soap, &soap_tmp_ns1__editTestConfig);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__editTestConfig(soap, &soap_tmp_ns1__editTestConfig, "ns1:editTestConfig", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__editTestConfig(soap, &soap_tmp_ns1__editTestConfig, "ns1:editTestConfig", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_14)
		return soap_closesock(soap);
	soap_default_ns1__editTestConfigResponse(soap, &_param_14);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__editTestConfigResponse(soap, &_param_14, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::editTestConfigByRecordID(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, struct ns1__editTestConfigByRecordIDResponse &_param_15)
{	struct soap *soap = this;
	struct ns1__editTestConfigByRecordID soap_tmp_ns1__editTestConfigByRecordID;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#editTestConfigByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__editTestConfigByRecordID.cookie = cookie;
	soap_tmp_ns1__editTestConfigByRecordID.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__editTestConfigByRecordID(soap, &soap_tmp_ns1__editTestConfigByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__editTestConfigByRecordID(soap, &soap_tmp_ns1__editTestConfigByRecordID, "ns1:editTestConfigByRecordID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__editTestConfigByRecordID(soap, &soap_tmp_ns1__editTestConfigByRecordID, "ns1:editTestConfigByRecordID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_15)
		return soap_closesock(soap);
	soap_default_ns1__editTestConfigByRecordIDResponse(soap, &_param_15);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__editTestConfigByRecordIDResponse(soap, &_param_15, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::saveTestConfig(const char *endpoint, const char *soap_action, LONG64 cookie, ns1__CSystem *pTestConfig, int &result)
{	struct soap *soap = this;
	struct ns1__saveTestConfig soap_tmp_ns1__saveTestConfig;
	struct ns1__saveTestConfigResponse *soap_tmp_ns1__saveTestConfigResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#saveTestConfig";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__saveTestConfig.cookie = cookie;
	soap_tmp_ns1__saveTestConfig.pTestConfig = pTestConfig;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__saveTestConfig(soap, &soap_tmp_ns1__saveTestConfig);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__saveTestConfig(soap, &soap_tmp_ns1__saveTestConfig, "ns1:saveTestConfig", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__saveTestConfig(soap, &soap_tmp_ns1__saveTestConfig, "ns1:saveTestConfig", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__saveTestConfigResponse = soap_get_ns1__saveTestConfigResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__saveTestConfigResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::deleteTestConfig(const char *endpoint, const char *soap_action, LONG64 cookie, char *name, int &result)
{	struct soap *soap = this;
	struct ns1__deleteTestConfig soap_tmp_ns1__deleteTestConfig;
	struct ns1__deleteTestConfigResponse *soap_tmp_ns1__deleteTestConfigResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#deleteTestConfig";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__deleteTestConfig.cookie = cookie;
	soap_tmp_ns1__deleteTestConfig.name = name;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__deleteTestConfig(soap, &soap_tmp_ns1__deleteTestConfig);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__deleteTestConfig(soap, &soap_tmp_ns1__deleteTestConfig, "ns1:deleteTestConfig", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__deleteTestConfig(soap, &soap_tmp_ns1__deleteTestConfig, "ns1:deleteTestConfig", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__deleteTestConfigResponse = soap_get_ns1__deleteTestConfigResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__deleteTestConfigResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::deleteTestConfigByRecordID(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result)
{	struct soap *soap = this;
	struct ns1__deleteTestConfigByRecordID soap_tmp_ns1__deleteTestConfigByRecordID;
	struct ns1__deleteTestConfigByRecordIDResponse *soap_tmp_ns1__deleteTestConfigByRecordIDResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#deleteTestConfigByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__deleteTestConfigByRecordID.cookie = cookie;
	soap_tmp_ns1__deleteTestConfigByRecordID.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__deleteTestConfigByRecordID(soap, &soap_tmp_ns1__deleteTestConfigByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__deleteTestConfigByRecordID(soap, &soap_tmp_ns1__deleteTestConfigByRecordID, "ns1:deleteTestConfigByRecordID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__deleteTestConfigByRecordID(soap, &soap_tmp_ns1__deleteTestConfigByRecordID, "ns1:deleteTestConfigByRecordID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__deleteTestConfigByRecordIDResponse = soap_get_ns1__deleteTestConfigByRecordIDResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__deleteTestConfigByRecordIDResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::cancelSaveTestConfig(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result)
{	struct soap *soap = this;
	struct ns1__cancelSaveTestConfig soap_tmp_ns1__cancelSaveTestConfig;
	struct ns1__cancelSaveTestConfigResponse *soap_tmp_ns1__cancelSaveTestConfigResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#cancelSaveTestConfig";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__cancelSaveTestConfig.cookie = cookie;
	soap_tmp_ns1__cancelSaveTestConfig.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__cancelSaveTestConfig(soap, &soap_tmp_ns1__cancelSaveTestConfig);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__cancelSaveTestConfig(soap, &soap_tmp_ns1__cancelSaveTestConfig, "ns1:cancelSaveTestConfig", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__cancelSaveTestConfig(soap, &soap_tmp_ns1__cancelSaveTestConfig, "ns1:cancelSaveTestConfig", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__cancelSaveTestConfigResponse = soap_get_ns1__cancelSaveTestConfigResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__cancelSaveTestConfigResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getAttachmentTypes(const char *endpoint, const char *soap_action, LONG64 cookie, struct ns1__getAttachmentTypesResponse &_param_16)
{	struct soap *soap = this;
	struct ns1__getAttachmentTypes soap_tmp_ns1__getAttachmentTypes;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getAttachmentTypes";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getAttachmentTypes.cookie = cookie;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getAttachmentTypes(soap, &soap_tmp_ns1__getAttachmentTypes);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getAttachmentTypes(soap, &soap_tmp_ns1__getAttachmentTypes, "ns1:getAttachmentTypes", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getAttachmentTypes(soap, &soap_tmp_ns1__getAttachmentTypes, "ns1:getAttachmentTypes", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_16)
		return soap_closesock(soap);
	soap_default_ns1__getAttachmentTypesResponse(soap, &_param_16);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getAttachmentTypesResponse(soap, &_param_16, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getReportRunResultsByName(const char *endpoint, const char *soap_action, LONG64 cookie, char *name, struct ns1__getReportRunResultsByNameResponse &_param_17)
{	struct soap *soap = this;
	struct ns1__getReportRunResultsByName soap_tmp_ns1__getReportRunResultsByName;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getReportRunResultsByName";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getReportRunResultsByName.cookie = cookie;
	soap_tmp_ns1__getReportRunResultsByName.name = name;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getReportRunResultsByName(soap, &soap_tmp_ns1__getReportRunResultsByName);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getReportRunResultsByName(soap, &soap_tmp_ns1__getReportRunResultsByName, "ns1:getReportRunResultsByName", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getReportRunResultsByName(soap, &soap_tmp_ns1__getReportRunResultsByName, "ns1:getReportRunResultsByName", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_17)
		return soap_closesock(soap);
	soap_default_ns1__getReportRunResultsByNameResponse(soap, &_param_17);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getReportRunResultsByNameResponse(soap, &_param_17, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getReportRunResultsByRecordID(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, struct ns1__getReportRunResultsByRecordIDResponse &_param_18)
{	struct soap *soap = this;
	struct ns1__getReportRunResultsByRecordID soap_tmp_ns1__getReportRunResultsByRecordID;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getReportRunResultsByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getReportRunResultsByRecordID.cookie = cookie;
	soap_tmp_ns1__getReportRunResultsByRecordID.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getReportRunResultsByRecordID(soap, &soap_tmp_ns1__getReportRunResultsByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getReportRunResultsByRecordID(soap, &soap_tmp_ns1__getReportRunResultsByRecordID, "ns1:getReportRunResultsByRecordID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getReportRunResultsByRecordID(soap, &soap_tmp_ns1__getReportRunResultsByRecordID, "ns1:getReportRunResultsByRecordID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_18)
		return soap_closesock(soap);
	soap_default_ns1__getReportRunResultsByRecordIDResponse(soap, &_param_18);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getReportRunResultsByRecordIDResponse(soap, &_param_18, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getEventDefinitionList(const char *endpoint, const char *soap_action, LONG64 cookie, char *tablename, struct ns1__getEventDefinitionListResponse &_param_19)
{	struct soap *soap = this;
	struct ns1__getEventDefinitionList soap_tmp_ns1__getEventDefinitionList;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getEventDefinitionList";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getEventDefinitionList.cookie = cookie;
	soap_tmp_ns1__getEventDefinitionList.tablename = tablename;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getEventDefinitionList(soap, &soap_tmp_ns1__getEventDefinitionList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getEventDefinitionList(soap, &soap_tmp_ns1__getEventDefinitionList, "ns1:getEventDefinitionList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getEventDefinitionList(soap, &soap_tmp_ns1__getEventDefinitionList, "ns1:getEventDefinitionList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_19)
		return soap_closesock(soap);
	soap_default_ns1__getEventDefinitionListResponse(soap, &_param_19);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getEventDefinitionListResponse(soap, &_param_19, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getDefectEventDefinitionList(const char *endpoint, const char *soap_action, LONG64 cookie, struct ns1__getDefectEventDefinitionListResponse &_param_20)
{	struct soap *soap = this;
	struct ns1__getDefectEventDefinitionList soap_tmp_ns1__getDefectEventDefinitionList;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getDefectEventDefinitionList";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getDefectEventDefinitionList.cookie = cookie;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getDefectEventDefinitionList(soap, &soap_tmp_ns1__getDefectEventDefinitionList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getDefectEventDefinitionList(soap, &soap_tmp_ns1__getDefectEventDefinitionList, "ns1:getDefectEventDefinitionList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getDefectEventDefinitionList(soap, &soap_tmp_ns1__getDefectEventDefinitionList, "ns1:getDefectEventDefinitionList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_20)
		return soap_closesock(soap);
	soap_default_ns1__getDefectEventDefinitionListResponse(soap, &_param_20);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getDefectEventDefinitionListResponse(soap, &_param_20, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getCustomFieldsDefinitionList(const char *endpoint, const char *soap_action, LONG64 cookie, char *tablename, struct ns1__getCustomFieldsDefinitionListResponse &_param_21)
{	struct soap *soap = this;
	struct ns1__getCustomFieldsDefinitionList soap_tmp_ns1__getCustomFieldsDefinitionList;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getCustomFieldsDefinitionList";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getCustomFieldsDefinitionList.cookie = cookie;
	soap_tmp_ns1__getCustomFieldsDefinitionList.tablename = tablename;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getCustomFieldsDefinitionList(soap, &soap_tmp_ns1__getCustomFieldsDefinitionList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getCustomFieldsDefinitionList(soap, &soap_tmp_ns1__getCustomFieldsDefinitionList, "ns1:getCustomFieldsDefinitionList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getCustomFieldsDefinitionList(soap, &soap_tmp_ns1__getCustomFieldsDefinitionList, "ns1:getCustomFieldsDefinitionList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_21)
		return soap_closesock(soap);
	soap_default_ns1__getCustomFieldsDefinitionListResponse(soap, &_param_21);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getCustomFieldsDefinitionListResponse(soap, &_param_21, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getDefectCustomFieldsDefinitionList(const char *endpoint, const char *soap_action, LONG64 cookie, struct ns1__getDefectCustomFieldsDefinitionListResponse &_param_22)
{	struct soap *soap = this;
	struct ns1__getDefectCustomFieldsDefinitionList soap_tmp_ns1__getDefectCustomFieldsDefinitionList;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getDefectCustomFieldsDefinitionList";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getDefectCustomFieldsDefinitionList.cookie = cookie;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getDefectCustomFieldsDefinitionList(soap, &soap_tmp_ns1__getDefectCustomFieldsDefinitionList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getDefectCustomFieldsDefinitionList(soap, &soap_tmp_ns1__getDefectCustomFieldsDefinitionList, "ns1:getDefectCustomFieldsDefinitionList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getDefectCustomFieldsDefinitionList(soap, &soap_tmp_ns1__getDefectCustomFieldsDefinitionList, "ns1:getDefectCustomFieldsDefinitionList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_22)
		return soap_closesock(soap);
	soap_default_ns1__getDefectCustomFieldsDefinitionListResponse(soap, &_param_22);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getDefectCustomFieldsDefinitionListResponse(soap, &_param_22, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getDefect(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 defectNumber, char *summary, bool bDownloadAttachments, struct ns1__getDefectResponse &_param_23)
{	struct soap *soap = this;
	struct ns1__getDefect soap_tmp_ns1__getDefect;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getDefect";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getDefect.cookie = cookie;
	soap_tmp_ns1__getDefect.defectNumber = defectNumber;
	soap_tmp_ns1__getDefect.summary = summary;
	soap_tmp_ns1__getDefect.bDownloadAttachments = bDownloadAttachments;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getDefect(soap, &soap_tmp_ns1__getDefect);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getDefect(soap, &soap_tmp_ns1__getDefect, "ns1:getDefect", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getDefect(soap, &soap_tmp_ns1__getDefect, "ns1:getDefect", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_23)
		return soap_closesock(soap);
	soap_default_ns1__getDefectResponse(soap, &_param_23);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getDefectResponse(soap, &_param_23, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getDefectByRecordID(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments, struct ns1__getDefectByRecordIDResponse &_param_24)
{	struct soap *soap = this;
	struct ns1__getDefectByRecordID soap_tmp_ns1__getDefectByRecordID;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getDefectByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getDefectByRecordID.cookie = cookie;
	soap_tmp_ns1__getDefectByRecordID.recordID = recordID;
	soap_tmp_ns1__getDefectByRecordID.bDownloadAttachments = bDownloadAttachments;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getDefectByRecordID(soap, &soap_tmp_ns1__getDefectByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getDefectByRecordID(soap, &soap_tmp_ns1__getDefectByRecordID, "ns1:getDefectByRecordID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getDefectByRecordID(soap, &soap_tmp_ns1__getDefectByRecordID, "ns1:getDefectByRecordID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_24)
		return soap_closesock(soap);
	soap_default_ns1__getDefectByRecordIDResponse(soap, &_param_24);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getDefectByRecordIDResponse(soap, &_param_24, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::addDefect(const char *endpoint, const char *soap_action, LONG64 cookie, ns1__CDefect *pDefect, LONG64 &recordID)
{	struct soap *soap = this;
	struct ns1__addDefect soap_tmp_ns1__addDefect;
	struct ns1__addDefectResponse *soap_tmp_ns1__addDefectResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#addDefect";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__addDefect.cookie = cookie;
	soap_tmp_ns1__addDefect.pDefect = pDefect;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__addDefect(soap, &soap_tmp_ns1__addDefect);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__addDefect(soap, &soap_tmp_ns1__addDefect, "ns1:addDefect", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__addDefect(soap, &soap_tmp_ns1__addDefect, "ns1:addDefect", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&recordID)
		return soap_closesock(soap);
	soap_default_LONG64(soap, &recordID);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__addDefectResponse = soap_get_ns1__addDefectResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	recordID = soap_tmp_ns1__addDefectResponse->recordID;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::addDefectWithLink(const char *endpoint, const char *soap_action, LONG64 cookie, ns1__CDefect *pDefect, LONG64 testRunRecordID, LONG64 &recordID)
{	struct soap *soap = this;
	struct ns1__addDefectWithLink soap_tmp_ns1__addDefectWithLink;
	struct ns1__addDefectWithLinkResponse *soap_tmp_ns1__addDefectWithLinkResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#addDefectWithLink";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__addDefectWithLink.cookie = cookie;
	soap_tmp_ns1__addDefectWithLink.pDefect = pDefect;
	soap_tmp_ns1__addDefectWithLink.testRunRecordID = testRunRecordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__addDefectWithLink(soap, &soap_tmp_ns1__addDefectWithLink);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__addDefectWithLink(soap, &soap_tmp_ns1__addDefectWithLink, "ns1:addDefectWithLink", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__addDefectWithLink(soap, &soap_tmp_ns1__addDefectWithLink, "ns1:addDefectWithLink", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&recordID)
		return soap_closesock(soap);
	soap_default_LONG64(soap, &recordID);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__addDefectWithLinkResponse = soap_get_ns1__addDefectWithLinkResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	recordID = soap_tmp_ns1__addDefectWithLinkResponse->recordID;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::deleteDefect(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 defectNumber, char *summary, int &result)
{	struct soap *soap = this;
	struct ns1__deleteDefect soap_tmp_ns1__deleteDefect;
	struct ns1__deleteDefectResponse *soap_tmp_ns1__deleteDefectResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#deleteDefect";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__deleteDefect.cookie = cookie;
	soap_tmp_ns1__deleteDefect.defectNumber = defectNumber;
	soap_tmp_ns1__deleteDefect.summary = summary;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__deleteDefect(soap, &soap_tmp_ns1__deleteDefect);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__deleteDefect(soap, &soap_tmp_ns1__deleteDefect, "ns1:deleteDefect", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__deleteDefect(soap, &soap_tmp_ns1__deleteDefect, "ns1:deleteDefect", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__deleteDefectResponse = soap_get_ns1__deleteDefectResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__deleteDefectResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::deleteDefectByRecordID(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result)
{	struct soap *soap = this;
	struct ns1__deleteDefectByRecordID soap_tmp_ns1__deleteDefectByRecordID;
	struct ns1__deleteDefectByRecordIDResponse *soap_tmp_ns1__deleteDefectByRecordIDResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#deleteDefectByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__deleteDefectByRecordID.cookie = cookie;
	soap_tmp_ns1__deleteDefectByRecordID.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__deleteDefectByRecordID(soap, &soap_tmp_ns1__deleteDefectByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__deleteDefectByRecordID(soap, &soap_tmp_ns1__deleteDefectByRecordID, "ns1:deleteDefectByRecordID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__deleteDefectByRecordID(soap, &soap_tmp_ns1__deleteDefectByRecordID, "ns1:deleteDefectByRecordID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__deleteDefectByRecordIDResponse = soap_get_ns1__deleteDefectByRecordIDResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__deleteDefectByRecordIDResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::editDefect(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 defectNumber, char *summary, bool bDownloadAttachments, struct ns1__editDefectResponse &_param_25)
{	struct soap *soap = this;
	struct ns1__editDefect soap_tmp_ns1__editDefect;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#editDefect";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__editDefect.cookie = cookie;
	soap_tmp_ns1__editDefect.defectNumber = defectNumber;
	soap_tmp_ns1__editDefect.summary = summary;
	soap_tmp_ns1__editDefect.bDownloadAttachments = bDownloadAttachments;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__editDefect(soap, &soap_tmp_ns1__editDefect);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__editDefect(soap, &soap_tmp_ns1__editDefect, "ns1:editDefect", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__editDefect(soap, &soap_tmp_ns1__editDefect, "ns1:editDefect", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_25)
		return soap_closesock(soap);
	soap_default_ns1__editDefectResponse(soap, &_param_25);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__editDefectResponse(soap, &_param_25, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::editDefectByRecordID(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments, struct ns1__editDefectByRecordIDResponse &_param_26)
{	struct soap *soap = this;
	struct ns1__editDefectByRecordID soap_tmp_ns1__editDefectByRecordID;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#editDefectByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__editDefectByRecordID.cookie = cookie;
	soap_tmp_ns1__editDefectByRecordID.recordID = recordID;
	soap_tmp_ns1__editDefectByRecordID.bDownloadAttachments = bDownloadAttachments;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__editDefectByRecordID(soap, &soap_tmp_ns1__editDefectByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__editDefectByRecordID(soap, &soap_tmp_ns1__editDefectByRecordID, "ns1:editDefectByRecordID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__editDefectByRecordID(soap, &soap_tmp_ns1__editDefectByRecordID, "ns1:editDefectByRecordID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_26)
		return soap_closesock(soap);
	soap_default_ns1__editDefectByRecordIDResponse(soap, &_param_26);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__editDefectByRecordIDResponse(soap, &_param_26, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::saveDefect(const char *endpoint, const char *soap_action, LONG64 cookie, ns1__CDefect *pDefect, int &result)
{	struct soap *soap = this;
	struct ns1__saveDefect soap_tmp_ns1__saveDefect;
	struct ns1__saveDefectResponse *soap_tmp_ns1__saveDefectResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#saveDefect";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__saveDefect.cookie = cookie;
	soap_tmp_ns1__saveDefect.pDefect = pDefect;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__saveDefect(soap, &soap_tmp_ns1__saveDefect);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__saveDefect(soap, &soap_tmp_ns1__saveDefect, "ns1:saveDefect", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__saveDefect(soap, &soap_tmp_ns1__saveDefect, "ns1:saveDefect", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__saveDefectResponse = soap_get_ns1__saveDefectResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__saveDefectResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::cancelSaveDefect(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result)
{	struct soap *soap = this;
	struct ns1__cancelSaveDefect soap_tmp_ns1__cancelSaveDefect;
	struct ns1__cancelSaveDefectResponse *soap_tmp_ns1__cancelSaveDefectResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#cancelSaveDefect";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__cancelSaveDefect.cookie = cookie;
	soap_tmp_ns1__cancelSaveDefect.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__cancelSaveDefect(soap, &soap_tmp_ns1__cancelSaveDefect);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__cancelSaveDefect(soap, &soap_tmp_ns1__cancelSaveDefect, "ns1:cancelSaveDefect", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__cancelSaveDefect(soap, &soap_tmp_ns1__cancelSaveDefect, "ns1:cancelSaveDefect", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__cancelSaveDefectResponse = soap_get_ns1__cancelSaveDefectResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__cancelSaveDefectResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getAttachment(const char *endpoint, const char *soap_action, LONG64 cookie, char *tablename, LONG64 recordID, LONG64 eventID, char *pszArchiveName, struct ns1__getAttachmentResponse &_param_27)
{	struct soap *soap = this;
	struct ns1__getAttachment soap_tmp_ns1__getAttachment;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getAttachment";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getAttachment.cookie = cookie;
	soap_tmp_ns1__getAttachment.tablename = tablename;
	soap_tmp_ns1__getAttachment.recordID = recordID;
	soap_tmp_ns1__getAttachment.eventID = eventID;
	soap_tmp_ns1__getAttachment.pszArchiveName = pszArchiveName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getAttachment(soap, &soap_tmp_ns1__getAttachment);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getAttachment(soap, &soap_tmp_ns1__getAttachment, "ns1:getAttachment", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getAttachment(soap, &soap_tmp_ns1__getAttachment, "ns1:getAttachment", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_27)
		return soap_closesock(soap);
	soap_default_ns1__getAttachmentResponse(soap, &_param_27);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getAttachmentResponse(soap, &_param_27, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getDefectAttachment(const char *endpoint, const char *soap_action, LONG64 cookie, char *pszArchiveName, struct ns1__getDefectAttachmentResponse &_param_28)
{	struct soap *soap = this;
	struct ns1__getDefectAttachment soap_tmp_ns1__getDefectAttachment;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getDefectAttachment";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getDefectAttachment.cookie = cookie;
	soap_tmp_ns1__getDefectAttachment.pszArchiveName = pszArchiveName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getDefectAttachment(soap, &soap_tmp_ns1__getDefectAttachment);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getDefectAttachment(soap, &soap_tmp_ns1__getDefectAttachment, "ns1:getDefectAttachment", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getDefectAttachment(soap, &soap_tmp_ns1__getDefectAttachment, "ns1:getDefectAttachment", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_28)
		return soap_closesock(soap);
	soap_default_ns1__getDefectAttachmentResponse(soap, &_param_28);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getDefectAttachmentResponse(soap, &_param_28, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getTask(const char *endpoint, const char *soap_action, LONG64 cookie, char *summary, struct ns1__getTaskResponse &_param_29)
{	struct soap *soap = this;
	struct ns1__getTask soap_tmp_ns1__getTask;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getTask";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getTask.cookie = cookie;
	soap_tmp_ns1__getTask.summary = summary;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getTask(soap, &soap_tmp_ns1__getTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getTask(soap, &soap_tmp_ns1__getTask, "ns1:getTask", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getTask(soap, &soap_tmp_ns1__getTask, "ns1:getTask", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_29)
		return soap_closesock(soap);
	soap_default_ns1__getTaskResponse(soap, &_param_29);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getTaskResponse(soap, &_param_29, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getTaskByRecordID(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, struct ns1__getTaskByRecordIDResponse &_param_30)
{	struct soap *soap = this;
	struct ns1__getTaskByRecordID soap_tmp_ns1__getTaskByRecordID;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getTaskByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getTaskByRecordID.cookie = cookie;
	soap_tmp_ns1__getTaskByRecordID.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getTaskByRecordID(soap, &soap_tmp_ns1__getTaskByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getTaskByRecordID(soap, &soap_tmp_ns1__getTaskByRecordID, "ns1:getTaskByRecordID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getTaskByRecordID(soap, &soap_tmp_ns1__getTaskByRecordID, "ns1:getTaskByRecordID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_30)
		return soap_closesock(soap);
	soap_default_ns1__getTaskByRecordIDResponse(soap, &_param_30);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getTaskByRecordIDResponse(soap, &_param_30, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::addTask(const char *endpoint, const char *soap_action, LONG64 cookie, ns1__CTask *pTask, LONG64 &recordID)
{	struct soap *soap = this;
	struct ns1__addTask soap_tmp_ns1__addTask;
	struct ns1__addTaskResponse *soap_tmp_ns1__addTaskResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#addTask";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__addTask.cookie = cookie;
	soap_tmp_ns1__addTask.pTask = pTask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__addTask(soap, &soap_tmp_ns1__addTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__addTask(soap, &soap_tmp_ns1__addTask, "ns1:addTask", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__addTask(soap, &soap_tmp_ns1__addTask, "ns1:addTask", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&recordID)
		return soap_closesock(soap);
	soap_default_LONG64(soap, &recordID);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__addTaskResponse = soap_get_ns1__addTaskResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	recordID = soap_tmp_ns1__addTaskResponse->recordID;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::deleteTask(const char *endpoint, const char *soap_action, LONG64 cookie, char *summary, int &result)
{	struct soap *soap = this;
	struct ns1__deleteTask soap_tmp_ns1__deleteTask;
	struct ns1__deleteTaskResponse *soap_tmp_ns1__deleteTaskResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#deleteTask";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__deleteTask.cookie = cookie;
	soap_tmp_ns1__deleteTask.summary = summary;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__deleteTask(soap, &soap_tmp_ns1__deleteTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__deleteTask(soap, &soap_tmp_ns1__deleteTask, "ns1:deleteTask", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__deleteTask(soap, &soap_tmp_ns1__deleteTask, "ns1:deleteTask", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__deleteTaskResponse = soap_get_ns1__deleteTaskResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__deleteTaskResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::deleteTaskByRecordID(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result)
{	struct soap *soap = this;
	struct ns1__deleteTaskByRecordID soap_tmp_ns1__deleteTaskByRecordID;
	struct ns1__deleteTaskByRecordIDResponse *soap_tmp_ns1__deleteTaskByRecordIDResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#deleteTaskByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__deleteTaskByRecordID.cookie = cookie;
	soap_tmp_ns1__deleteTaskByRecordID.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__deleteTaskByRecordID(soap, &soap_tmp_ns1__deleteTaskByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__deleteTaskByRecordID(soap, &soap_tmp_ns1__deleteTaskByRecordID, "ns1:deleteTaskByRecordID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__deleteTaskByRecordID(soap, &soap_tmp_ns1__deleteTaskByRecordID, "ns1:deleteTaskByRecordID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__deleteTaskByRecordIDResponse = soap_get_ns1__deleteTaskByRecordIDResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__deleteTaskByRecordIDResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::editTask(const char *endpoint, const char *soap_action, LONG64 cookie, char *summary, struct ns1__editTaskResponse &_param_31)
{	struct soap *soap = this;
	struct ns1__editTask soap_tmp_ns1__editTask;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#editTask";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__editTask.cookie = cookie;
	soap_tmp_ns1__editTask.summary = summary;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__editTask(soap, &soap_tmp_ns1__editTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__editTask(soap, &soap_tmp_ns1__editTask, "ns1:editTask", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__editTask(soap, &soap_tmp_ns1__editTask, "ns1:editTask", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_31)
		return soap_closesock(soap);
	soap_default_ns1__editTaskResponse(soap, &_param_31);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__editTaskResponse(soap, &_param_31, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::editTaskByRecordID(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, struct ns1__editTaskByRecordIDResponse &_param_32)
{	struct soap *soap = this;
	struct ns1__editTaskByRecordID soap_tmp_ns1__editTaskByRecordID;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#editTaskByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__editTaskByRecordID.cookie = cookie;
	soap_tmp_ns1__editTaskByRecordID.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__editTaskByRecordID(soap, &soap_tmp_ns1__editTaskByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__editTaskByRecordID(soap, &soap_tmp_ns1__editTaskByRecordID, "ns1:editTaskByRecordID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__editTaskByRecordID(soap, &soap_tmp_ns1__editTaskByRecordID, "ns1:editTaskByRecordID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_32)
		return soap_closesock(soap);
	soap_default_ns1__editTaskByRecordIDResponse(soap, &_param_32);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__editTaskByRecordIDResponse(soap, &_param_32, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::saveTask(const char *endpoint, const char *soap_action, LONG64 cookie, ns1__CTask *pTask, int &result)
{	struct soap *soap = this;
	struct ns1__saveTask soap_tmp_ns1__saveTask;
	struct ns1__saveTaskResponse *soap_tmp_ns1__saveTaskResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#saveTask";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__saveTask.cookie = cookie;
	soap_tmp_ns1__saveTask.pTask = pTask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__saveTask(soap, &soap_tmp_ns1__saveTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__saveTask(soap, &soap_tmp_ns1__saveTask, "ns1:saveTask", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__saveTask(soap, &soap_tmp_ns1__saveTask, "ns1:saveTask", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__saveTaskResponse = soap_get_ns1__saveTaskResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__saveTaskResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::cancelSaveTask(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result)
{	struct soap *soap = this;
	struct ns1__cancelSaveTask soap_tmp_ns1__cancelSaveTask;
	struct ns1__cancelSaveTaskResponse *soap_tmp_ns1__cancelSaveTaskResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#cancelSaveTask";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__cancelSaveTask.cookie = cookie;
	soap_tmp_ns1__cancelSaveTask.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__cancelSaveTask(soap, &soap_tmp_ns1__cancelSaveTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__cancelSaveTask(soap, &soap_tmp_ns1__cancelSaveTask, "ns1:cancelSaveTask", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__cancelSaveTask(soap, &soap_tmp_ns1__cancelSaveTask, "ns1:cancelSaveTask", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__cancelSaveTaskResponse = soap_get_ns1__cancelSaveTaskResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__cancelSaveTaskResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getGlobalUserList(const char *endpoint, const char *soap_action, LONG64 cookie, struct ns1__getGlobalUserListResponse &_param_33)
{	struct soap *soap = this;
	struct ns1__getGlobalUserList soap_tmp_ns1__getGlobalUserList;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getGlobalUserList";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getGlobalUserList.cookie = cookie;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getGlobalUserList(soap, &soap_tmp_ns1__getGlobalUserList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getGlobalUserList(soap, &soap_tmp_ns1__getGlobalUserList, "ns1:getGlobalUserList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getGlobalUserList(soap, &soap_tmp_ns1__getGlobalUserList, "ns1:getGlobalUserList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_33)
		return soap_closesock(soap);
	soap_default_ns1__getGlobalUserListResponse(soap, &_param_33);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getGlobalUserListResponse(soap, &_param_33, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getGlobalCustomerList(const char *endpoint, const char *soap_action, LONG64 cookie, struct ns1__getGlobalCustomerListResponse &_param_34)
{	struct soap *soap = this;
	struct ns1__getGlobalCustomerList soap_tmp_ns1__getGlobalCustomerList;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getGlobalCustomerList";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getGlobalCustomerList.cookie = cookie;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getGlobalCustomerList(soap, &soap_tmp_ns1__getGlobalCustomerList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getGlobalCustomerList(soap, &soap_tmp_ns1__getGlobalCustomerList, "ns1:getGlobalCustomerList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getGlobalCustomerList(soap, &soap_tmp_ns1__getGlobalCustomerList, "ns1:getGlobalCustomerList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_34)
		return soap_closesock(soap);
	soap_default_ns1__getGlobalCustomerListResponse(soap, &_param_34);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getGlobalCustomerListResponse(soap, &_param_34, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getUserLicenseList(const char *endpoint, const char *soap_action, LONG64 cookie, struct ns1__getUserLicenseListResponse &_param_35)
{	struct soap *soap = this;
	struct ns1__getUserLicenseList soap_tmp_ns1__getUserLicenseList;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getUserLicenseList";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getUserLicenseList.cookie = cookie;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getUserLicenseList(soap, &soap_tmp_ns1__getUserLicenseList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getUserLicenseList(soap, &soap_tmp_ns1__getUserLicenseList, "ns1:getUserLicenseList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getUserLicenseList(soap, &soap_tmp_ns1__getUserLicenseList, "ns1:getUserLicenseList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_35)
		return soap_closesock(soap);
	soap_default_ns1__getUserLicenseListResponse(soap, &_param_35);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getUserLicenseListResponse(soap, &_param_35, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getUser(const char *endpoint, const char *soap_action, LONG64 cookie, char *firstName, char *middleInitials, char *lastName, struct ns1__getUserResponse &_param_36)
{	struct soap *soap = this;
	struct ns1__getUser soap_tmp_ns1__getUser;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getUser";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getUser.cookie = cookie;
	soap_tmp_ns1__getUser.firstName = firstName;
	soap_tmp_ns1__getUser.middleInitials = middleInitials;
	soap_tmp_ns1__getUser.lastName = lastName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getUser(soap, &soap_tmp_ns1__getUser);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getUser(soap, &soap_tmp_ns1__getUser, "ns1:getUser", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getUser(soap, &soap_tmp_ns1__getUser, "ns1:getUser", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_36)
		return soap_closesock(soap);
	soap_default_ns1__getUserResponse(soap, &_param_36);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getUserResponse(soap, &_param_36, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getUserByRecordID(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, struct ns1__getUserByRecordIDResponse &_param_37)
{	struct soap *soap = this;
	struct ns1__getUserByRecordID soap_tmp_ns1__getUserByRecordID;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getUserByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getUserByRecordID.cookie = cookie;
	soap_tmp_ns1__getUserByRecordID.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getUserByRecordID(soap, &soap_tmp_ns1__getUserByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getUserByRecordID(soap, &soap_tmp_ns1__getUserByRecordID, "ns1:getUserByRecordID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getUserByRecordID(soap, &soap_tmp_ns1__getUserByRecordID, "ns1:getUserByRecordID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_37)
		return soap_closesock(soap);
	soap_default_ns1__getUserByRecordIDResponse(soap, &_param_37);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getUserByRecordIDResponse(soap, &_param_37, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getUserForCurrentSession(const char *endpoint, const char *soap_action, LONG64 cookie, struct ns1__getUserForCurrentSessionResponse &_param_38)
{	struct soap *soap = this;
	struct ns1__getUserForCurrentSession soap_tmp_ns1__getUserForCurrentSession;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getUserForCurrentSession";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getUserForCurrentSession.cookie = cookie;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getUserForCurrentSession(soap, &soap_tmp_ns1__getUserForCurrentSession);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getUserForCurrentSession(soap, &soap_tmp_ns1__getUserForCurrentSession, "ns1:getUserForCurrentSession", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getUserForCurrentSession(soap, &soap_tmp_ns1__getUserForCurrentSession, "ns1:getUserForCurrentSession", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_38)
		return soap_closesock(soap);
	soap_default_ns1__getUserForCurrentSessionResponse(soap, &_param_38);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getUserForCurrentSessionResponse(soap, &_param_38, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::addUser(const char *endpoint, const char *soap_action, LONG64 cookie, ns1__CUser *pUser, LONG64 &recordID)
{	struct soap *soap = this;
	struct ns1__addUser soap_tmp_ns1__addUser;
	struct ns1__addUserResponse *soap_tmp_ns1__addUserResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#addUser";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__addUser.cookie = cookie;
	soap_tmp_ns1__addUser.pUser = pUser;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__addUser(soap, &soap_tmp_ns1__addUser);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__addUser(soap, &soap_tmp_ns1__addUser, "ns1:addUser", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__addUser(soap, &soap_tmp_ns1__addUser, "ns1:addUser", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&recordID)
		return soap_closesock(soap);
	soap_default_LONG64(soap, &recordID);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__addUserResponse = soap_get_ns1__addUserResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	recordID = soap_tmp_ns1__addUserResponse->recordID;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::editUser(const char *endpoint, const char *soap_action, LONG64 cookie, char *firstName, char *middleInitials, char *lastName, struct ns1__editUserResponse &_param_39)
{	struct soap *soap = this;
	struct ns1__editUser soap_tmp_ns1__editUser;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#editUser";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__editUser.cookie = cookie;
	soap_tmp_ns1__editUser.firstName = firstName;
	soap_tmp_ns1__editUser.middleInitials = middleInitials;
	soap_tmp_ns1__editUser.lastName = lastName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__editUser(soap, &soap_tmp_ns1__editUser);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__editUser(soap, &soap_tmp_ns1__editUser, "ns1:editUser", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__editUser(soap, &soap_tmp_ns1__editUser, "ns1:editUser", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_39)
		return soap_closesock(soap);
	soap_default_ns1__editUserResponse(soap, &_param_39);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__editUserResponse(soap, &_param_39, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::editUserByRecordID(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, struct ns1__editUserByRecordIDResponse &_param_40)
{	struct soap *soap = this;
	struct ns1__editUserByRecordID soap_tmp_ns1__editUserByRecordID;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#editUserByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__editUserByRecordID.cookie = cookie;
	soap_tmp_ns1__editUserByRecordID.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__editUserByRecordID(soap, &soap_tmp_ns1__editUserByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__editUserByRecordID(soap, &soap_tmp_ns1__editUserByRecordID, "ns1:editUserByRecordID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__editUserByRecordID(soap, &soap_tmp_ns1__editUserByRecordID, "ns1:editUserByRecordID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_40)
		return soap_closesock(soap);
	soap_default_ns1__editUserByRecordIDResponse(soap, &_param_40);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__editUserByRecordIDResponse(soap, &_param_40, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::saveUser(const char *endpoint, const char *soap_action, LONG64 cookie, char *firstName, char *middleInitials, char *lastName, ns1__CUser *pUser, int &result)
{	struct soap *soap = this;
	struct ns1__saveUser soap_tmp_ns1__saveUser;
	struct ns1__saveUserResponse *soap_tmp_ns1__saveUserResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#saveUser";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__saveUser.cookie = cookie;
	soap_tmp_ns1__saveUser.firstName = firstName;
	soap_tmp_ns1__saveUser.middleInitials = middleInitials;
	soap_tmp_ns1__saveUser.lastName = lastName;
	soap_tmp_ns1__saveUser.pUser = pUser;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__saveUser(soap, &soap_tmp_ns1__saveUser);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__saveUser(soap, &soap_tmp_ns1__saveUser, "ns1:saveUser", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__saveUser(soap, &soap_tmp_ns1__saveUser, "ns1:saveUser", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__saveUserResponse = soap_get_ns1__saveUserResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__saveUserResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::deleteUser(const char *endpoint, const char *soap_action, LONG64 cookie, char *firstName, char *middleInitials, char *lastName, int &result)
{	struct soap *soap = this;
	struct ns1__deleteUser soap_tmp_ns1__deleteUser;
	struct ns1__deleteUserResponse *soap_tmp_ns1__deleteUserResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#deleteUser";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__deleteUser.cookie = cookie;
	soap_tmp_ns1__deleteUser.firstName = firstName;
	soap_tmp_ns1__deleteUser.middleInitials = middleInitials;
	soap_tmp_ns1__deleteUser.lastName = lastName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__deleteUser(soap, &soap_tmp_ns1__deleteUser);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__deleteUser(soap, &soap_tmp_ns1__deleteUser, "ns1:deleteUser", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__deleteUser(soap, &soap_tmp_ns1__deleteUser, "ns1:deleteUser", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__deleteUserResponse = soap_get_ns1__deleteUserResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__deleteUserResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::deleteUserByRecordID(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result)
{	struct soap *soap = this;
	struct ns1__deleteUserByRecordID soap_tmp_ns1__deleteUserByRecordID;
	struct ns1__deleteUserByRecordIDResponse *soap_tmp_ns1__deleteUserByRecordIDResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#deleteUserByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__deleteUserByRecordID.cookie = cookie;
	soap_tmp_ns1__deleteUserByRecordID.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__deleteUserByRecordID(soap, &soap_tmp_ns1__deleteUserByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__deleteUserByRecordID(soap, &soap_tmp_ns1__deleteUserByRecordID, "ns1:deleteUserByRecordID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__deleteUserByRecordID(soap, &soap_tmp_ns1__deleteUserByRecordID, "ns1:deleteUserByRecordID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__deleteUserByRecordIDResponse = soap_get_ns1__deleteUserByRecordIDResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__deleteUserByRecordIDResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::cancelSaveUser(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result)
{	struct soap *soap = this;
	struct ns1__cancelSaveUser soap_tmp_ns1__cancelSaveUser;
	struct ns1__cancelSaveUserResponse *soap_tmp_ns1__cancelSaveUserResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#cancelSaveUser";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__cancelSaveUser.cookie = cookie;
	soap_tmp_ns1__cancelSaveUser.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__cancelSaveUser(soap, &soap_tmp_ns1__cancelSaveUser);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__cancelSaveUser(soap, &soap_tmp_ns1__cancelSaveUser, "ns1:cancelSaveUser", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__cancelSaveUser(soap, &soap_tmp_ns1__cancelSaveUser, "ns1:cancelSaveUser", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__cancelSaveUserResponse = soap_get_ns1__cancelSaveUserResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__cancelSaveUserResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::promoteUser(const char *endpoint, const char *soap_action, LONG64 cookie, char *localUser, char *globalUser, char *loginname, int &result)
{	struct soap *soap = this;
	struct ns1__promoteUser soap_tmp_ns1__promoteUser;
	struct ns1__promoteUserResponse *soap_tmp_ns1__promoteUserResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__promoteUser.cookie = cookie;
	soap_tmp_ns1__promoteUser.localUser = localUser;
	soap_tmp_ns1__promoteUser.globalUser = globalUser;
	soap_tmp_ns1__promoteUser.loginname = loginname;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__promoteUser(soap, &soap_tmp_ns1__promoteUser);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__promoteUser(soap, &soap_tmp_ns1__promoteUser, "ns1:promoteUser", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__promoteUser(soap, &soap_tmp_ns1__promoteUser, "ns1:promoteUser", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__promoteUserResponse = soap_get_ns1__promoteUserResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__promoteUserResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::addGlobalUser(const char *endpoint, const char *soap_action, LONG64 cookie, ns1__CGlobalUser *pUser, int &result)
{	struct soap *soap = this;
	struct ns1__addGlobalUser soap_tmp_ns1__addGlobalUser;
	struct ns1__addGlobalUserResponse *soap_tmp_ns1__addGlobalUserResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__addGlobalUser.cookie = cookie;
	soap_tmp_ns1__addGlobalUser.pUser = pUser;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__addGlobalUser(soap, &soap_tmp_ns1__addGlobalUser);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__addGlobalUser(soap, &soap_tmp_ns1__addGlobalUser, "ns1:addGlobalUser", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__addGlobalUser(soap, &soap_tmp_ns1__addGlobalUser, "ns1:addGlobalUser", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__addGlobalUserResponse = soap_get_ns1__addGlobalUserResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__addGlobalUserResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getCustomer(const char *endpoint, const char *soap_action, LONG64 cookie, char *firstName, char *middleInitials, char *lastName, struct ns1__getCustomerResponse &_param_41)
{	struct soap *soap = this;
	struct ns1__getCustomer soap_tmp_ns1__getCustomer;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getCustomer";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getCustomer.cookie = cookie;
	soap_tmp_ns1__getCustomer.firstName = firstName;
	soap_tmp_ns1__getCustomer.middleInitials = middleInitials;
	soap_tmp_ns1__getCustomer.lastName = lastName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getCustomer(soap, &soap_tmp_ns1__getCustomer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getCustomer(soap, &soap_tmp_ns1__getCustomer, "ns1:getCustomer", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getCustomer(soap, &soap_tmp_ns1__getCustomer, "ns1:getCustomer", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_41)
		return soap_closesock(soap);
	soap_default_ns1__getCustomerResponse(soap, &_param_41);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getCustomerResponse(soap, &_param_41, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getCustomerByRecordID(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, struct ns1__getCustomerByRecordIDResponse &_param_42)
{	struct soap *soap = this;
	struct ns1__getCustomerByRecordID soap_tmp_ns1__getCustomerByRecordID;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getCustomerByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getCustomerByRecordID.cookie = cookie;
	soap_tmp_ns1__getCustomerByRecordID.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getCustomerByRecordID(soap, &soap_tmp_ns1__getCustomerByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getCustomerByRecordID(soap, &soap_tmp_ns1__getCustomerByRecordID, "ns1:getCustomerByRecordID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getCustomerByRecordID(soap, &soap_tmp_ns1__getCustomerByRecordID, "ns1:getCustomerByRecordID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_42)
		return soap_closesock(soap);
	soap_default_ns1__getCustomerByRecordIDResponse(soap, &_param_42);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getCustomerByRecordIDResponse(soap, &_param_42, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::addCustomer(const char *endpoint, const char *soap_action, LONG64 cookie, ns1__CUser *pCustomer, LONG64 &recordID)
{	struct soap *soap = this;
	struct ns1__addCustomer soap_tmp_ns1__addCustomer;
	struct ns1__addCustomerResponse *soap_tmp_ns1__addCustomerResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#addCustomer";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__addCustomer.cookie = cookie;
	soap_tmp_ns1__addCustomer.pCustomer = pCustomer;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__addCustomer(soap, &soap_tmp_ns1__addCustomer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__addCustomer(soap, &soap_tmp_ns1__addCustomer, "ns1:addCustomer", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__addCustomer(soap, &soap_tmp_ns1__addCustomer, "ns1:addCustomer", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&recordID)
		return soap_closesock(soap);
	soap_default_LONG64(soap, &recordID);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__addCustomerResponse = soap_get_ns1__addCustomerResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	recordID = soap_tmp_ns1__addCustomerResponse->recordID;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::editCustomer(const char *endpoint, const char *soap_action, LONG64 cookie, char *firstName, char *middleInitials, char *lastName, struct ns1__editCustomerResponse &_param_43)
{	struct soap *soap = this;
	struct ns1__editCustomer soap_tmp_ns1__editCustomer;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#editCustomer";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__editCustomer.cookie = cookie;
	soap_tmp_ns1__editCustomer.firstName = firstName;
	soap_tmp_ns1__editCustomer.middleInitials = middleInitials;
	soap_tmp_ns1__editCustomer.lastName = lastName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__editCustomer(soap, &soap_tmp_ns1__editCustomer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__editCustomer(soap, &soap_tmp_ns1__editCustomer, "ns1:editCustomer", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__editCustomer(soap, &soap_tmp_ns1__editCustomer, "ns1:editCustomer", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_43)
		return soap_closesock(soap);
	soap_default_ns1__editCustomerResponse(soap, &_param_43);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__editCustomerResponse(soap, &_param_43, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::editCustomerByRecordID(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, struct ns1__editCustomerByRecordIDResponse &_param_44)
{	struct soap *soap = this;
	struct ns1__editCustomerByRecordID soap_tmp_ns1__editCustomerByRecordID;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#editCustomerByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__editCustomerByRecordID.cookie = cookie;
	soap_tmp_ns1__editCustomerByRecordID.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__editCustomerByRecordID(soap, &soap_tmp_ns1__editCustomerByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__editCustomerByRecordID(soap, &soap_tmp_ns1__editCustomerByRecordID, "ns1:editCustomerByRecordID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__editCustomerByRecordID(soap, &soap_tmp_ns1__editCustomerByRecordID, "ns1:editCustomerByRecordID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_44)
		return soap_closesock(soap);
	soap_default_ns1__editCustomerByRecordIDResponse(soap, &_param_44);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__editCustomerByRecordIDResponse(soap, &_param_44, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::saveCustomer(const char *endpoint, const char *soap_action, LONG64 cookie, char *firstName, char *middleInitials, char *lastName, ns1__CUser *pCustomer, int &result)
{	struct soap *soap = this;
	struct ns1__saveCustomer soap_tmp_ns1__saveCustomer;
	struct ns1__saveCustomerResponse *soap_tmp_ns1__saveCustomerResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#saveCustomer";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__saveCustomer.cookie = cookie;
	soap_tmp_ns1__saveCustomer.firstName = firstName;
	soap_tmp_ns1__saveCustomer.middleInitials = middleInitials;
	soap_tmp_ns1__saveCustomer.lastName = lastName;
	soap_tmp_ns1__saveCustomer.pCustomer = pCustomer;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__saveCustomer(soap, &soap_tmp_ns1__saveCustomer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__saveCustomer(soap, &soap_tmp_ns1__saveCustomer, "ns1:saveCustomer", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__saveCustomer(soap, &soap_tmp_ns1__saveCustomer, "ns1:saveCustomer", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__saveCustomerResponse = soap_get_ns1__saveCustomerResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__saveCustomerResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::deleteCustomer(const char *endpoint, const char *soap_action, LONG64 cookie, char *firstName, char *middleInitials, char *lastName, int &result)
{	struct soap *soap = this;
	struct ns1__deleteCustomer soap_tmp_ns1__deleteCustomer;
	struct ns1__deleteCustomerResponse *soap_tmp_ns1__deleteCustomerResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#deleteCustomer";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__deleteCustomer.cookie = cookie;
	soap_tmp_ns1__deleteCustomer.firstName = firstName;
	soap_tmp_ns1__deleteCustomer.middleInitials = middleInitials;
	soap_tmp_ns1__deleteCustomer.lastName = lastName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__deleteCustomer(soap, &soap_tmp_ns1__deleteCustomer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__deleteCustomer(soap, &soap_tmp_ns1__deleteCustomer, "ns1:deleteCustomer", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__deleteCustomer(soap, &soap_tmp_ns1__deleteCustomer, "ns1:deleteCustomer", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__deleteCustomerResponse = soap_get_ns1__deleteCustomerResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__deleteCustomerResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::deleteCustomerByRecordID(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result)
{	struct soap *soap = this;
	struct ns1__deleteCustomerByRecordID soap_tmp_ns1__deleteCustomerByRecordID;
	struct ns1__deleteCustomerByRecordIDResponse *soap_tmp_ns1__deleteCustomerByRecordIDResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#deleteCustomerByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__deleteCustomerByRecordID.cookie = cookie;
	soap_tmp_ns1__deleteCustomerByRecordID.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__deleteCustomerByRecordID(soap, &soap_tmp_ns1__deleteCustomerByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__deleteCustomerByRecordID(soap, &soap_tmp_ns1__deleteCustomerByRecordID, "ns1:deleteCustomerByRecordID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__deleteCustomerByRecordID(soap, &soap_tmp_ns1__deleteCustomerByRecordID, "ns1:deleteCustomerByRecordID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__deleteCustomerByRecordIDResponse = soap_get_ns1__deleteCustomerByRecordIDResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__deleteCustomerByRecordIDResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::cancelSaveCustomer(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result)
{	struct soap *soap = this;
	struct ns1__cancelSaveCustomer soap_tmp_ns1__cancelSaveCustomer;
	struct ns1__cancelSaveCustomerResponse *soap_tmp_ns1__cancelSaveCustomerResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#cancelSaveCustomer";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__cancelSaveCustomer.cookie = cookie;
	soap_tmp_ns1__cancelSaveCustomer.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__cancelSaveCustomer(soap, &soap_tmp_ns1__cancelSaveCustomer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__cancelSaveCustomer(soap, &soap_tmp_ns1__cancelSaveCustomer, "ns1:cancelSaveCustomer", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__cancelSaveCustomer(soap, &soap_tmp_ns1__cancelSaveCustomer, "ns1:cancelSaveCustomer", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__cancelSaveCustomerResponse = soap_get_ns1__cancelSaveCustomerResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__cancelSaveCustomerResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::promoteCustomer(const char *endpoint, const char *soap_action, LONG64 cookie, char *localCustomer, char *globalUser, char *loginname, int &result)
{	struct soap *soap = this;
	struct ns1__promoteCustomer soap_tmp_ns1__promoteCustomer;
	struct ns1__promoteCustomerResponse *soap_tmp_ns1__promoteCustomerResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__promoteCustomer.cookie = cookie;
	soap_tmp_ns1__promoteCustomer.localCustomer = localCustomer;
	soap_tmp_ns1__promoteCustomer.globalUser = globalUser;
	soap_tmp_ns1__promoteCustomer.loginname = loginname;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__promoteCustomer(soap, &soap_tmp_ns1__promoteCustomer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__promoteCustomer(soap, &soap_tmp_ns1__promoteCustomer, "ns1:promoteCustomer", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__promoteCustomer(soap, &soap_tmp_ns1__promoteCustomer, "ns1:promoteCustomer", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__promoteCustomerResponse = soap_get_ns1__promoteCustomerResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__promoteCustomerResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::addGlobalCustomer(const char *endpoint, const char *soap_action, LONG64 cookie, ns1__CGlobalUser *pUser, int &result)
{	struct soap *soap = this;
	struct ns1__addGlobalCustomer soap_tmp_ns1__addGlobalCustomer;
	struct ns1__addGlobalCustomerResponse *soap_tmp_ns1__addGlobalCustomerResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__addGlobalCustomer.cookie = cookie;
	soap_tmp_ns1__addGlobalCustomer.pUser = pUser;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__addGlobalCustomer(soap, &soap_tmp_ns1__addGlobalCustomer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__addGlobalCustomer(soap, &soap_tmp_ns1__addGlobalCustomer, "ns1:addGlobalCustomer", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__addGlobalCustomer(soap, &soap_tmp_ns1__addGlobalCustomer, "ns1:addGlobalCustomer", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__addGlobalCustomerResponse = soap_get_ns1__addGlobalCustomerResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__addGlobalCustomerResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getLinksForItem(const char *endpoint, const char *soap_action, LONG64 cookie, char *tablename, LONG64 itemRecordID, struct ns1__getLinksForItemResponse &_param_45)
{	struct soap *soap = this;
	struct ns1__getLinksForItem soap_tmp_ns1__getLinksForItem;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getLinksForItem";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getLinksForItem.cookie = cookie;
	soap_tmp_ns1__getLinksForItem.tablename = tablename;
	soap_tmp_ns1__getLinksForItem.itemRecordID = itemRecordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getLinksForItem(soap, &soap_tmp_ns1__getLinksForItem);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getLinksForItem(soap, &soap_tmp_ns1__getLinksForItem, "ns1:getLinksForItem", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getLinksForItem(soap, &soap_tmp_ns1__getLinksForItem, "ns1:getLinksForItem", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_45)
		return soap_closesock(soap);
	soap_default_ns1__getLinksForItemResponse(soap, &_param_45);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getLinksForItemResponse(soap, &_param_45, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getLinksForDefect(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 defectRecordID, struct ns1__getLinksForDefectResponse &_param_46)
{	struct soap *soap = this;
	struct ns1__getLinksForDefect soap_tmp_ns1__getLinksForDefect;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getLinksForDefect";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getLinksForDefect.cookie = cookie;
	soap_tmp_ns1__getLinksForDefect.defectRecordID = defectRecordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getLinksForDefect(soap, &soap_tmp_ns1__getLinksForDefect);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getLinksForDefect(soap, &soap_tmp_ns1__getLinksForDefect, "ns1:getLinksForDefect", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getLinksForDefect(soap, &soap_tmp_ns1__getLinksForDefect, "ns1:getLinksForDefect", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_46)
		return soap_closesock(soap);
	soap_default_ns1__getLinksForDefectResponse(soap, &_param_46);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getLinksForDefectResponse(soap, &_param_46, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getLink(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 linkID, struct ns1__getLinkResponse &_param_47)
{	struct soap *soap = this;
	struct ns1__getLink soap_tmp_ns1__getLink;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getLink";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getLink.cookie = cookie;
	soap_tmp_ns1__getLink.linkID = linkID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getLink(soap, &soap_tmp_ns1__getLink);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getLink(soap, &soap_tmp_ns1__getLink, "ns1:getLink", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getLink(soap, &soap_tmp_ns1__getLink, "ns1:getLink", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_47)
		return soap_closesock(soap);
	soap_default_ns1__getLinkResponse(soap, &_param_47);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getLinkResponse(soap, &_param_47, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::addLink(const char *endpoint, const char *soap_action, LONG64 cookie, ns1__CLink *pLink, LONG64 &recordID)
{	struct soap *soap = this;
	struct ns1__addLink soap_tmp_ns1__addLink;
	struct ns1__addLinkResponse *soap_tmp_ns1__addLinkResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#addLink";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__addLink.cookie = cookie;
	soap_tmp_ns1__addLink.pLink = pLink;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__addLink(soap, &soap_tmp_ns1__addLink);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__addLink(soap, &soap_tmp_ns1__addLink, "ns1:addLink", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__addLink(soap, &soap_tmp_ns1__addLink, "ns1:addLink", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&recordID)
		return soap_closesock(soap);
	soap_default_LONG64(soap, &recordID);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__addLinkResponse = soap_get_ns1__addLinkResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	recordID = soap_tmp_ns1__addLinkResponse->recordID;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::deleteLink(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 linkID, int &result)
{	struct soap *soap = this;
	struct ns1__deleteLink soap_tmp_ns1__deleteLink;
	struct ns1__deleteLinkResponse *soap_tmp_ns1__deleteLinkResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#deleteLink";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__deleteLink.cookie = cookie;
	soap_tmp_ns1__deleteLink.linkID = linkID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__deleteLink(soap, &soap_tmp_ns1__deleteLink);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__deleteLink(soap, &soap_tmp_ns1__deleteLink, "ns1:deleteLink", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__deleteLink(soap, &soap_tmp_ns1__deleteLink, "ns1:deleteLink", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__deleteLinkResponse = soap_get_ns1__deleteLinkResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__deleteLinkResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::editLink(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 linkID, struct ns1__editLinkResponse &_param_48)
{	struct soap *soap = this;
	struct ns1__editLink soap_tmp_ns1__editLink;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#editLink";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__editLink.cookie = cookie;
	soap_tmp_ns1__editLink.linkID = linkID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__editLink(soap, &soap_tmp_ns1__editLink);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__editLink(soap, &soap_tmp_ns1__editLink, "ns1:editLink", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__editLink(soap, &soap_tmp_ns1__editLink, "ns1:editLink", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_48)
		return soap_closesock(soap);
	soap_default_ns1__editLinkResponse(soap, &_param_48);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__editLinkResponse(soap, &_param_48, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::saveLink(const char *endpoint, const char *soap_action, LONG64 cookie, ns1__CLink *pLink, int &result)
{	struct soap *soap = this;
	struct ns1__saveLink soap_tmp_ns1__saveLink;
	struct ns1__saveLinkResponse *soap_tmp_ns1__saveLinkResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#saveLink";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__saveLink.cookie = cookie;
	soap_tmp_ns1__saveLink.pLink = pLink;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__saveLink(soap, &soap_tmp_ns1__saveLink);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__saveLink(soap, &soap_tmp_ns1__saveLink, "ns1:saveLink", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__saveLink(soap, &soap_tmp_ns1__saveLink, "ns1:saveLink", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__saveLinkResponse = soap_get_ns1__saveLinkResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__saveLinkResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::cancelSaveLink(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 linkID, int &result)
{	struct soap *soap = this;
	struct ns1__cancelSaveLink soap_tmp_ns1__cancelSaveLink;
	struct ns1__cancelSaveLinkResponse *soap_tmp_ns1__cancelSaveLinkResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#cancelSaveLink";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__cancelSaveLink.cookie = cookie;
	soap_tmp_ns1__cancelSaveLink.linkID = linkID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__cancelSaveLink(soap, &soap_tmp_ns1__cancelSaveLink);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__cancelSaveLink(soap, &soap_tmp_ns1__cancelSaveLink, "ns1:cancelSaveLink", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__cancelSaveLink(soap, &soap_tmp_ns1__cancelSaveLink, "ns1:cancelSaveLink", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__cancelSaveLinkResponse = soap_get_ns1__cancelSaveLinkResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__cancelSaveLinkResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getTestVariantTypes(const char *endpoint, const char *soap_action, LONG64 cookie, struct ns1__getTestVariantTypesResponse &_param_49)
{	struct soap *soap = this;
	struct ns1__getTestVariantTypes soap_tmp_ns1__getTestVariantTypes;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getTestVariantTypes";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getTestVariantTypes.cookie = cookie;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getTestVariantTypes(soap, &soap_tmp_ns1__getTestVariantTypes);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getTestVariantTypes(soap, &soap_tmp_ns1__getTestVariantTypes, "ns1:getTestVariantTypes", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getTestVariantTypes(soap, &soap_tmp_ns1__getTestVariantTypes, "ns1:getTestVariantTypes", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_49)
		return soap_closesock(soap);
	soap_default_ns1__getTestVariantTypesResponse(soap, &_param_49);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getTestVariantTypesResponse(soap, &_param_49, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getTestRunStepsModes(const char *endpoint, const char *soap_action, LONG64 cookie, struct ns1__getTestRunStepsModesResponse &_param_50)
{	struct soap *soap = this;
	struct ns1__getTestRunStepsModes soap_tmp_ns1__getTestRunStepsModes;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getTestRunStepsModes";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getTestRunStepsModes.cookie = cookie;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getTestRunStepsModes(soap, &soap_tmp_ns1__getTestRunStepsModes);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getTestRunStepsModes(soap, &soap_tmp_ns1__getTestRunStepsModes, "ns1:getTestRunStepsModes", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getTestRunStepsModes(soap, &soap_tmp_ns1__getTestRunStepsModes, "ns1:getTestRunStepsModes", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_50)
		return soap_closesock(soap);
	soap_default_ns1__getTestRunStepsModesResponse(soap, &_param_50);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getTestRunStepsModesResponse(soap, &_param_50, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getTestCase(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 testCaseNumber, char *summary, bool bDownloadAttachments, struct ns1__getTestCaseResponse &_param_51)
{	struct soap *soap = this;
	struct ns1__getTestCase soap_tmp_ns1__getTestCase;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getTestCase";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getTestCase.cookie = cookie;
	soap_tmp_ns1__getTestCase.testCaseNumber = testCaseNumber;
	soap_tmp_ns1__getTestCase.summary = summary;
	soap_tmp_ns1__getTestCase.bDownloadAttachments = bDownloadAttachments;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getTestCase(soap, &soap_tmp_ns1__getTestCase);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getTestCase(soap, &soap_tmp_ns1__getTestCase, "ns1:getTestCase", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getTestCase(soap, &soap_tmp_ns1__getTestCase, "ns1:getTestCase", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_51)
		return soap_closesock(soap);
	soap_default_ns1__getTestCaseResponse(soap, &_param_51);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getTestCaseResponse(soap, &_param_51, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getTestCaseByRecordID(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments, struct ns1__getTestCaseByRecordIDResponse &_param_52)
{	struct soap *soap = this;
	struct ns1__getTestCaseByRecordID soap_tmp_ns1__getTestCaseByRecordID;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getTestCaseByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getTestCaseByRecordID.cookie = cookie;
	soap_tmp_ns1__getTestCaseByRecordID.recordID = recordID;
	soap_tmp_ns1__getTestCaseByRecordID.bDownloadAttachments = bDownloadAttachments;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getTestCaseByRecordID(soap, &soap_tmp_ns1__getTestCaseByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getTestCaseByRecordID(soap, &soap_tmp_ns1__getTestCaseByRecordID, "ns1:getTestCaseByRecordID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getTestCaseByRecordID(soap, &soap_tmp_ns1__getTestCaseByRecordID, "ns1:getTestCaseByRecordID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_52)
		return soap_closesock(soap);
	soap_default_ns1__getTestCaseByRecordIDResponse(soap, &_param_52);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getTestCaseByRecordIDResponse(soap, &_param_52, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::addTestCase(const char *endpoint, const char *soap_action, LONG64 cookie, ns1__CTestCase *pTestCase, LONG64 &recordID)
{	struct soap *soap = this;
	struct ns1__addTestCase soap_tmp_ns1__addTestCase;
	struct ns1__addTestCaseResponse *soap_tmp_ns1__addTestCaseResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#addTestCase";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__addTestCase.cookie = cookie;
	soap_tmp_ns1__addTestCase.pTestCase = pTestCase;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__addTestCase(soap, &soap_tmp_ns1__addTestCase);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__addTestCase(soap, &soap_tmp_ns1__addTestCase, "ns1:addTestCase", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__addTestCase(soap, &soap_tmp_ns1__addTestCase, "ns1:addTestCase", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&recordID)
		return soap_closesock(soap);
	soap_default_LONG64(soap, &recordID);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__addTestCaseResponse = soap_get_ns1__addTestCaseResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	recordID = soap_tmp_ns1__addTestCaseResponse->recordID;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::deleteTestCase(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 testCaseNumber, char *summary, bool bDeleteAssociatedTestRuns, int &result)
{	struct soap *soap = this;
	struct ns1__deleteTestCase soap_tmp_ns1__deleteTestCase;
	struct ns1__deleteTestCaseResponse *soap_tmp_ns1__deleteTestCaseResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#deleteTestCase";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__deleteTestCase.cookie = cookie;
	soap_tmp_ns1__deleteTestCase.testCaseNumber = testCaseNumber;
	soap_tmp_ns1__deleteTestCase.summary = summary;
	soap_tmp_ns1__deleteTestCase.bDeleteAssociatedTestRuns = bDeleteAssociatedTestRuns;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__deleteTestCase(soap, &soap_tmp_ns1__deleteTestCase);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__deleteTestCase(soap, &soap_tmp_ns1__deleteTestCase, "ns1:deleteTestCase", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__deleteTestCase(soap, &soap_tmp_ns1__deleteTestCase, "ns1:deleteTestCase", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__deleteTestCaseResponse = soap_get_ns1__deleteTestCaseResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__deleteTestCaseResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::deleteTestCaseByRecordID(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool bDeleteAssociatedTestRun, int &result)
{	struct soap *soap = this;
	struct ns1__deleteTestCaseByRecordID soap_tmp_ns1__deleteTestCaseByRecordID;
	struct ns1__deleteTestCaseByRecordIDResponse *soap_tmp_ns1__deleteTestCaseByRecordIDResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#deleteTestCaseByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__deleteTestCaseByRecordID.cookie = cookie;
	soap_tmp_ns1__deleteTestCaseByRecordID.recordID = recordID;
	soap_tmp_ns1__deleteTestCaseByRecordID.bDeleteAssociatedTestRun = bDeleteAssociatedTestRun;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__deleteTestCaseByRecordID(soap, &soap_tmp_ns1__deleteTestCaseByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__deleteTestCaseByRecordID(soap, &soap_tmp_ns1__deleteTestCaseByRecordID, "ns1:deleteTestCaseByRecordID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__deleteTestCaseByRecordID(soap, &soap_tmp_ns1__deleteTestCaseByRecordID, "ns1:deleteTestCaseByRecordID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__deleteTestCaseByRecordIDResponse = soap_get_ns1__deleteTestCaseByRecordIDResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__deleteTestCaseByRecordIDResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::editTestCase(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 testCaseNumber, char *summary, bool bDownloadAttachments, struct ns1__editTestCaseResponse &_param_53)
{	struct soap *soap = this;
	struct ns1__editTestCase soap_tmp_ns1__editTestCase;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#editTestCase";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__editTestCase.cookie = cookie;
	soap_tmp_ns1__editTestCase.testCaseNumber = testCaseNumber;
	soap_tmp_ns1__editTestCase.summary = summary;
	soap_tmp_ns1__editTestCase.bDownloadAttachments = bDownloadAttachments;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__editTestCase(soap, &soap_tmp_ns1__editTestCase);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__editTestCase(soap, &soap_tmp_ns1__editTestCase, "ns1:editTestCase", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__editTestCase(soap, &soap_tmp_ns1__editTestCase, "ns1:editTestCase", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_53)
		return soap_closesock(soap);
	soap_default_ns1__editTestCaseResponse(soap, &_param_53);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__editTestCaseResponse(soap, &_param_53, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::editTestCaseByRecordID(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments, struct ns1__editTestCaseByRecordIDResponse &_param_54)
{	struct soap *soap = this;
	struct ns1__editTestCaseByRecordID soap_tmp_ns1__editTestCaseByRecordID;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#editTestCaseByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__editTestCaseByRecordID.cookie = cookie;
	soap_tmp_ns1__editTestCaseByRecordID.recordID = recordID;
	soap_tmp_ns1__editTestCaseByRecordID.bDownloadAttachments = bDownloadAttachments;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__editTestCaseByRecordID(soap, &soap_tmp_ns1__editTestCaseByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__editTestCaseByRecordID(soap, &soap_tmp_ns1__editTestCaseByRecordID, "ns1:editTestCaseByRecordID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__editTestCaseByRecordID(soap, &soap_tmp_ns1__editTestCaseByRecordID, "ns1:editTestCaseByRecordID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_54)
		return soap_closesock(soap);
	soap_default_ns1__editTestCaseByRecordIDResponse(soap, &_param_54);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__editTestCaseByRecordIDResponse(soap, &_param_54, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::saveTestCase(const char *endpoint, const char *soap_action, LONG64 cookie, ns1__CTestCase *pTestCase, int &result)
{	struct soap *soap = this;
	struct ns1__saveTestCase soap_tmp_ns1__saveTestCase;
	struct ns1__saveTestCaseResponse *soap_tmp_ns1__saveTestCaseResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#saveTestCase";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__saveTestCase.cookie = cookie;
	soap_tmp_ns1__saveTestCase.pTestCase = pTestCase;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__saveTestCase(soap, &soap_tmp_ns1__saveTestCase);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__saveTestCase(soap, &soap_tmp_ns1__saveTestCase, "ns1:saveTestCase", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__saveTestCase(soap, &soap_tmp_ns1__saveTestCase, "ns1:saveTestCase", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__saveTestCaseResponse = soap_get_ns1__saveTestCaseResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__saveTestCaseResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::cancelSaveTestCase(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result)
{	struct soap *soap = this;
	struct ns1__cancelSaveTestCase soap_tmp_ns1__cancelSaveTestCase;
	struct ns1__cancelSaveTestCaseResponse *soap_tmp_ns1__cancelSaveTestCaseResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#cancelSaveTestCase";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__cancelSaveTestCase.cookie = cookie;
	soap_tmp_ns1__cancelSaveTestCase.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__cancelSaveTestCase(soap, &soap_tmp_ns1__cancelSaveTestCase);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__cancelSaveTestCase(soap, &soap_tmp_ns1__cancelSaveTestCase, "ns1:cancelSaveTestCase", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__cancelSaveTestCase(soap, &soap_tmp_ns1__cancelSaveTestCase, "ns1:cancelSaveTestCase", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__cancelSaveTestCaseResponse = soap_get_ns1__cancelSaveTestCaseResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__cancelSaveTestCaseResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getTestRun(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 testRunNumber, char *summary, bool bDownloadAttachments, struct ns1__getTestRunResponse &_param_55)
{	struct soap *soap = this;
	struct ns1__getTestRun soap_tmp_ns1__getTestRun;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getTestRun";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getTestRun.cookie = cookie;
	soap_tmp_ns1__getTestRun.testRunNumber = testRunNumber;
	soap_tmp_ns1__getTestRun.summary = summary;
	soap_tmp_ns1__getTestRun.bDownloadAttachments = bDownloadAttachments;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getTestRun(soap, &soap_tmp_ns1__getTestRun);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getTestRun(soap, &soap_tmp_ns1__getTestRun, "ns1:getTestRun", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getTestRun(soap, &soap_tmp_ns1__getTestRun, "ns1:getTestRun", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_55)
		return soap_closesock(soap);
	soap_default_ns1__getTestRunResponse(soap, &_param_55);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getTestRunResponse(soap, &_param_55, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getTestRunByRecordID(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments, struct ns1__getTestRunByRecordIDResponse &_param_56)
{	struct soap *soap = this;
	struct ns1__getTestRunByRecordID soap_tmp_ns1__getTestRunByRecordID;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getTestRunByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getTestRunByRecordID.cookie = cookie;
	soap_tmp_ns1__getTestRunByRecordID.recordID = recordID;
	soap_tmp_ns1__getTestRunByRecordID.bDownloadAttachments = bDownloadAttachments;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getTestRunByRecordID(soap, &soap_tmp_ns1__getTestRunByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getTestRunByRecordID(soap, &soap_tmp_ns1__getTestRunByRecordID, "ns1:getTestRunByRecordID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getTestRunByRecordID(soap, &soap_tmp_ns1__getTestRunByRecordID, "ns1:getTestRunByRecordID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_56)
		return soap_closesock(soap);
	soap_default_ns1__getTestRunByRecordIDResponse(soap, &_param_56);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getTestRunByRecordIDResponse(soap, &_param_56, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::deleteTestRun(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 testRunNumber, char *summary, int &result)
{	struct soap *soap = this;
	struct ns1__deleteTestRun soap_tmp_ns1__deleteTestRun;
	struct ns1__deleteTestRunResponse *soap_tmp_ns1__deleteTestRunResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#deleteTestRun";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__deleteTestRun.cookie = cookie;
	soap_tmp_ns1__deleteTestRun.testRunNumber = testRunNumber;
	soap_tmp_ns1__deleteTestRun.summary = summary;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__deleteTestRun(soap, &soap_tmp_ns1__deleteTestRun);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__deleteTestRun(soap, &soap_tmp_ns1__deleteTestRun, "ns1:deleteTestRun", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__deleteTestRun(soap, &soap_tmp_ns1__deleteTestRun, "ns1:deleteTestRun", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__deleteTestRunResponse = soap_get_ns1__deleteTestRunResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__deleteTestRunResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::deleteTestRunByRecordID(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result)
{	struct soap *soap = this;
	struct ns1__deleteTestRunByRecordID soap_tmp_ns1__deleteTestRunByRecordID;
	struct ns1__deleteTestRunByRecordIDResponse *soap_tmp_ns1__deleteTestRunByRecordIDResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#deleteTestRunByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__deleteTestRunByRecordID.cookie = cookie;
	soap_tmp_ns1__deleteTestRunByRecordID.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__deleteTestRunByRecordID(soap, &soap_tmp_ns1__deleteTestRunByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__deleteTestRunByRecordID(soap, &soap_tmp_ns1__deleteTestRunByRecordID, "ns1:deleteTestRunByRecordID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__deleteTestRunByRecordID(soap, &soap_tmp_ns1__deleteTestRunByRecordID, "ns1:deleteTestRunByRecordID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__deleteTestRunByRecordIDResponse = soap_get_ns1__deleteTestRunByRecordIDResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__deleteTestRunByRecordIDResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::editTestRun(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 testRunNumber, char *summary, bool bDownloadAttachments, struct ns1__editTestRunResponse &_param_57)
{	struct soap *soap = this;
	struct ns1__editTestRun soap_tmp_ns1__editTestRun;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#editTestRun";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__editTestRun.cookie = cookie;
	soap_tmp_ns1__editTestRun.testRunNumber = testRunNumber;
	soap_tmp_ns1__editTestRun.summary = summary;
	soap_tmp_ns1__editTestRun.bDownloadAttachments = bDownloadAttachments;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__editTestRun(soap, &soap_tmp_ns1__editTestRun);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__editTestRun(soap, &soap_tmp_ns1__editTestRun, "ns1:editTestRun", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__editTestRun(soap, &soap_tmp_ns1__editTestRun, "ns1:editTestRun", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_57)
		return soap_closesock(soap);
	soap_default_ns1__editTestRunResponse(soap, &_param_57);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__editTestRunResponse(soap, &_param_57, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::editTestRunByRecordID(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments, struct ns1__editTestRunByRecordIDResponse &_param_58)
{	struct soap *soap = this;
	struct ns1__editTestRunByRecordID soap_tmp_ns1__editTestRunByRecordID;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#editTestRunByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__editTestRunByRecordID.cookie = cookie;
	soap_tmp_ns1__editTestRunByRecordID.recordID = recordID;
	soap_tmp_ns1__editTestRunByRecordID.bDownloadAttachments = bDownloadAttachments;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__editTestRunByRecordID(soap, &soap_tmp_ns1__editTestRunByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__editTestRunByRecordID(soap, &soap_tmp_ns1__editTestRunByRecordID, "ns1:editTestRunByRecordID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__editTestRunByRecordID(soap, &soap_tmp_ns1__editTestRunByRecordID, "ns1:editTestRunByRecordID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_58)
		return soap_closesock(soap);
	soap_default_ns1__editTestRunByRecordIDResponse(soap, &_param_58);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__editTestRunByRecordIDResponse(soap, &_param_58, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::saveTestRun(const char *endpoint, const char *soap_action, LONG64 cookie, ns1__CTestRun *pTestRun, int &result)
{	struct soap *soap = this;
	struct ns1__saveTestRun soap_tmp_ns1__saveTestRun;
	struct ns1__saveTestRunResponse *soap_tmp_ns1__saveTestRunResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#saveTestRun";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__saveTestRun.cookie = cookie;
	soap_tmp_ns1__saveTestRun.pTestRun = pTestRun;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__saveTestRun(soap, &soap_tmp_ns1__saveTestRun);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__saveTestRun(soap, &soap_tmp_ns1__saveTestRun, "ns1:saveTestRun", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__saveTestRun(soap, &soap_tmp_ns1__saveTestRun, "ns1:saveTestRun", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__saveTestRunResponse = soap_get_ns1__saveTestRunResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__saveTestRunResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::cancelSaveTestRun(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result)
{	struct soap *soap = this;
	struct ns1__cancelSaveTestRun soap_tmp_ns1__cancelSaveTestRun;
	struct ns1__cancelSaveTestRunResponse *soap_tmp_ns1__cancelSaveTestRunResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#cancelSaveTestRun";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__cancelSaveTestRun.cookie = cookie;
	soap_tmp_ns1__cancelSaveTestRun.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__cancelSaveTestRun(soap, &soap_tmp_ns1__cancelSaveTestRun);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__cancelSaveTestRun(soap, &soap_tmp_ns1__cancelSaveTestRun, "ns1:cancelSaveTestRun", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__cancelSaveTestRun(soap, &soap_tmp_ns1__cancelSaveTestRun, "ns1:cancelSaveTestRun", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__cancelSaveTestRunResponse = soap_get_ns1__cancelSaveTestRunResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__cancelSaveTestRunResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::createDefectForTestRun(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, struct ns1__createDefectForTestRunResponse &_param_59)
{	struct soap *soap = this;
	struct ns1__createDefectForTestRun soap_tmp_ns1__createDefectForTestRun;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#createDefectForTestRun";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__createDefectForTestRun.cookie = cookie;
	soap_tmp_ns1__createDefectForTestRun.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__createDefectForTestRun(soap, &soap_tmp_ns1__createDefectForTestRun);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__createDefectForTestRun(soap, &soap_tmp_ns1__createDefectForTestRun, "ns1:createDefectForTestRun", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__createDefectForTestRun(soap, &soap_tmp_ns1__createDefectForTestRun, "ns1:createDefectForTestRun", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_59)
		return soap_closesock(soap);
	soap_default_ns1__createDefectForTestRunResponse(soap, &_param_59);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__createDefectForTestRunResponse(soap, &_param_59, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::generateTestRuns(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, ArrayOfCTestRunVariantField *testVariants, char *testRunSet, struct ns1__generateTestRunsResponse &_param_60)
{	struct soap *soap = this;
	struct ns1__generateTestRuns soap_tmp_ns1__generateTestRuns;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#generateTestRuns";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__generateTestRuns.cookie = cookie;
	soap_tmp_ns1__generateTestRuns.recordID = recordID;
	soap_tmp_ns1__generateTestRuns.testVariants = testVariants;
	soap_tmp_ns1__generateTestRuns.testRunSet = testRunSet;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__generateTestRuns(soap, &soap_tmp_ns1__generateTestRuns);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__generateTestRuns(soap, &soap_tmp_ns1__generateTestRuns, "ns1:generateTestRuns", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__generateTestRuns(soap, &soap_tmp_ns1__generateTestRuns, "ns1:generateTestRuns", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_60)
		return soap_closesock(soap);
	soap_default_ns1__generateTestRunsResponse(soap, &_param_60);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__generateTestRunsResponse(soap, &_param_60, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getFolderTypeByName(const char *endpoint, const char *soap_action, LONG64 cookie, char *name, struct ns1__getFolderTypeByNameResponse &_param_61)
{	struct soap *soap = this;
	struct ns1__getFolderTypeByName soap_tmp_ns1__getFolderTypeByName;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getFolderTypeByName";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getFolderTypeByName.cookie = cookie;
	soap_tmp_ns1__getFolderTypeByName.name = name;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getFolderTypeByName(soap, &soap_tmp_ns1__getFolderTypeByName);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getFolderTypeByName(soap, &soap_tmp_ns1__getFolderTypeByName, "ns1:getFolderTypeByName", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getFolderTypeByName(soap, &soap_tmp_ns1__getFolderTypeByName, "ns1:getFolderTypeByName", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_61)
		return soap_closesock(soap);
	soap_default_ns1__getFolderTypeByNameResponse(soap, &_param_61);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getFolderTypeByNameResponse(soap, &_param_61, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getFolderTypeList(const char *endpoint, const char *soap_action, LONG64 cookie, struct ns1__getFolderTypeListResponse &_param_62)
{	struct soap *soap = this;
	struct ns1__getFolderTypeList soap_tmp_ns1__getFolderTypeList;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getFolderTypeList";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getFolderTypeList.cookie = cookie;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getFolderTypeList(soap, &soap_tmp_ns1__getFolderTypeList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getFolderTypeList(soap, &soap_tmp_ns1__getFolderTypeList, "ns1:getFolderTypeList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getFolderTypeList(soap, &soap_tmp_ns1__getFolderTypeList, "ns1:getFolderTypeList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_62)
		return soap_closesock(soap);
	soap_default_ns1__getFolderTypeListResponse(soap, &_param_62);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getFolderTypeListResponse(soap, &_param_62, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::addFolder(const char *endpoint, const char *soap_action, LONG64 cookie, ns1__CFolder *pFolder, LONG64 &recordID)
{	struct soap *soap = this;
	struct ns1__addFolder soap_tmp_ns1__addFolder;
	struct ns1__addFolderResponse *soap_tmp_ns1__addFolderResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#addFolder";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__addFolder.cookie = cookie;
	soap_tmp_ns1__addFolder.pFolder = pFolder;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__addFolder(soap, &soap_tmp_ns1__addFolder);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__addFolder(soap, &soap_tmp_ns1__addFolder, "ns1:addFolder", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__addFolder(soap, &soap_tmp_ns1__addFolder, "ns1:addFolder", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&recordID)
		return soap_closesock(soap);
	soap_default_LONG64(soap, &recordID);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__addFolderResponse = soap_get_ns1__addFolderResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	recordID = soap_tmp_ns1__addFolderResponse->recordID;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::editFolder(const char *endpoint, const char *soap_action, LONG64 cookie, char *folderPath, struct ns1__editFolderResponse &_param_63)
{	struct soap *soap = this;
	struct ns1__editFolder soap_tmp_ns1__editFolder;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#editFolder";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__editFolder.cookie = cookie;
	soap_tmp_ns1__editFolder.folderPath = folderPath;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__editFolder(soap, &soap_tmp_ns1__editFolder);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__editFolder(soap, &soap_tmp_ns1__editFolder, "ns1:editFolder", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__editFolder(soap, &soap_tmp_ns1__editFolder, "ns1:editFolder", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_63)
		return soap_closesock(soap);
	soap_default_ns1__editFolderResponse(soap, &_param_63);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__editFolderResponse(soap, &_param_63, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::editFolderByRecordID(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool publicFolder, struct ns1__editFolderByRecordIDResponse &_param_64)
{	struct soap *soap = this;
	struct ns1__editFolderByRecordID soap_tmp_ns1__editFolderByRecordID;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#editFolderByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__editFolderByRecordID.cookie = cookie;
	soap_tmp_ns1__editFolderByRecordID.recordID = recordID;
	soap_tmp_ns1__editFolderByRecordID.publicFolder = publicFolder;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__editFolderByRecordID(soap, &soap_tmp_ns1__editFolderByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__editFolderByRecordID(soap, &soap_tmp_ns1__editFolderByRecordID, "ns1:editFolderByRecordID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__editFolderByRecordID(soap, &soap_tmp_ns1__editFolderByRecordID, "ns1:editFolderByRecordID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_64)
		return soap_closesock(soap);
	soap_default_ns1__editFolderByRecordIDResponse(soap, &_param_64);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__editFolderByRecordIDResponse(soap, &_param_64, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::saveFolder(const char *endpoint, const char *soap_action, LONG64 cookie, ns1__CFolder *pFolder, int &result)
{	struct soap *soap = this;
	struct ns1__saveFolder soap_tmp_ns1__saveFolder;
	struct ns1__saveFolderResponse *soap_tmp_ns1__saveFolderResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#saveFolder";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__saveFolder.cookie = cookie;
	soap_tmp_ns1__saveFolder.pFolder = pFolder;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__saveFolder(soap, &soap_tmp_ns1__saveFolder);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__saveFolder(soap, &soap_tmp_ns1__saveFolder, "ns1:saveFolder", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__saveFolder(soap, &soap_tmp_ns1__saveFolder, "ns1:saveFolder", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__saveFolderResponse = soap_get_ns1__saveFolderResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__saveFolderResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::cancelSaveFolder(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result)
{	struct soap *soap = this;
	struct ns1__cancelSaveFolder soap_tmp_ns1__cancelSaveFolder;
	struct ns1__cancelSaveFolderResponse *soap_tmp_ns1__cancelSaveFolderResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#cancelSaveFolder";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__cancelSaveFolder.cookie = cookie;
	soap_tmp_ns1__cancelSaveFolder.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__cancelSaveFolder(soap, &soap_tmp_ns1__cancelSaveFolder);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__cancelSaveFolder(soap, &soap_tmp_ns1__cancelSaveFolder, "ns1:cancelSaveFolder", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__cancelSaveFolder(soap, &soap_tmp_ns1__cancelSaveFolder, "ns1:cancelSaveFolder", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__cancelSaveFolderResponse = soap_get_ns1__cancelSaveFolderResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__cancelSaveFolderResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getFolder(const char *endpoint, const char *soap_action, LONG64 cookie, char *path, struct ns1__getFolderResponse &_param_65)
{	struct soap *soap = this;
	struct ns1__getFolder soap_tmp_ns1__getFolder;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getFolder";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getFolder.cookie = cookie;
	soap_tmp_ns1__getFolder.path = path;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getFolder(soap, &soap_tmp_ns1__getFolder);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getFolder(soap, &soap_tmp_ns1__getFolder, "ns1:getFolder", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getFolder(soap, &soap_tmp_ns1__getFolder, "ns1:getFolder", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_65)
		return soap_closesock(soap);
	soap_default_ns1__getFolderResponse(soap, &_param_65);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getFolderResponse(soap, &_param_65, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getFolderByRecordID(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool publicFolder, struct ns1__getFolderByRecordIDResponse &_param_66)
{	struct soap *soap = this;
	struct ns1__getFolderByRecordID soap_tmp_ns1__getFolderByRecordID;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getFolderByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getFolderByRecordID.cookie = cookie;
	soap_tmp_ns1__getFolderByRecordID.recordID = recordID;
	soap_tmp_ns1__getFolderByRecordID.publicFolder = publicFolder;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getFolderByRecordID(soap, &soap_tmp_ns1__getFolderByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getFolderByRecordID(soap, &soap_tmp_ns1__getFolderByRecordID, "ns1:getFolderByRecordID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getFolderByRecordID(soap, &soap_tmp_ns1__getFolderByRecordID, "ns1:getFolderByRecordID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_66)
		return soap_closesock(soap);
	soap_default_ns1__getFolderByRecordIDResponse(soap, &_param_66);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getFolderByRecordIDResponse(soap, &_param_66, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::deleteFolder(const char *endpoint, const char *soap_action, LONG64 cookie, char *folderPath, int &result)
{	struct soap *soap = this;
	struct ns1__deleteFolder soap_tmp_ns1__deleteFolder;
	struct ns1__deleteFolderResponse *soap_tmp_ns1__deleteFolderResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#deleteFolder";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__deleteFolder.cookie = cookie;
	soap_tmp_ns1__deleteFolder.folderPath = folderPath;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__deleteFolder(soap, &soap_tmp_ns1__deleteFolder);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__deleteFolder(soap, &soap_tmp_ns1__deleteFolder, "ns1:deleteFolder", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__deleteFolder(soap, &soap_tmp_ns1__deleteFolder, "ns1:deleteFolder", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__deleteFolderResponse = soap_get_ns1__deleteFolderResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__deleteFolderResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::deleteFolderByRecordID(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool publicFolder, int &result)
{	struct soap *soap = this;
	struct ns1__deleteFolderByRecordID soap_tmp_ns1__deleteFolderByRecordID;
	struct ns1__deleteFolderByRecordIDResponse *soap_tmp_ns1__deleteFolderByRecordIDResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#deleteFolderByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__deleteFolderByRecordID.cookie = cookie;
	soap_tmp_ns1__deleteFolderByRecordID.recordID = recordID;
	soap_tmp_ns1__deleteFolderByRecordID.publicFolder = publicFolder;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__deleteFolderByRecordID(soap, &soap_tmp_ns1__deleteFolderByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__deleteFolderByRecordID(soap, &soap_tmp_ns1__deleteFolderByRecordID, "ns1:deleteFolderByRecordID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__deleteFolderByRecordID(soap, &soap_tmp_ns1__deleteFolderByRecordID, "ns1:deleteFolderByRecordID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__deleteFolderByRecordIDResponse = soap_get_ns1__deleteFolderByRecordIDResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__deleteFolderByRecordIDResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::addEntityToFolderByRecordID(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool publicFolder, LONG64 entityRecordID, char *entityTableName, int &itemRecordID)
{	struct soap *soap = this;
	struct ns1__addEntityToFolderByRecordID soap_tmp_ns1__addEntityToFolderByRecordID;
	struct ns1__addEntityToFolderByRecordIDResponse *soap_tmp_ns1__addEntityToFolderByRecordIDResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#addEntityToFolderByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__addEntityToFolderByRecordID.cookie = cookie;
	soap_tmp_ns1__addEntityToFolderByRecordID.recordID = recordID;
	soap_tmp_ns1__addEntityToFolderByRecordID.publicFolder = publicFolder;
	soap_tmp_ns1__addEntityToFolderByRecordID.entityRecordID = entityRecordID;
	soap_tmp_ns1__addEntityToFolderByRecordID.entityTableName = entityTableName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__addEntityToFolderByRecordID(soap, &soap_tmp_ns1__addEntityToFolderByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__addEntityToFolderByRecordID(soap, &soap_tmp_ns1__addEntityToFolderByRecordID, "ns1:addEntityToFolderByRecordID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__addEntityToFolderByRecordID(soap, &soap_tmp_ns1__addEntityToFolderByRecordID, "ns1:addEntityToFolderByRecordID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&itemRecordID)
		return soap_closesock(soap);
	soap_default_int(soap, &itemRecordID);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__addEntityToFolderByRecordIDResponse = soap_get_ns1__addEntityToFolderByRecordIDResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	itemRecordID = soap_tmp_ns1__addEntityToFolderByRecordIDResponse->itemRecordID;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::removeEntityFromFolderByRecordID(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool publicFolder, ns1__CFolderItem *entity, int &result)
{	struct soap *soap = this;
	struct ns1__removeEntityFromFolderByRecordID soap_tmp_ns1__removeEntityFromFolderByRecordID;
	struct ns1__removeEntityFromFolderByRecordIDResponse *soap_tmp_ns1__removeEntityFromFolderByRecordIDResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#removeEntityFromFolderByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__removeEntityFromFolderByRecordID.cookie = cookie;
	soap_tmp_ns1__removeEntityFromFolderByRecordID.recordID = recordID;
	soap_tmp_ns1__removeEntityFromFolderByRecordID.publicFolder = publicFolder;
	soap_tmp_ns1__removeEntityFromFolderByRecordID.entity = entity;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__removeEntityFromFolderByRecordID(soap, &soap_tmp_ns1__removeEntityFromFolderByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__removeEntityFromFolderByRecordID(soap, &soap_tmp_ns1__removeEntityFromFolderByRecordID, "ns1:removeEntityFromFolderByRecordID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__removeEntityFromFolderByRecordID(soap, &soap_tmp_ns1__removeEntityFromFolderByRecordID, "ns1:removeEntityFromFolderByRecordID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__removeEntityFromFolderByRecordIDResponse = soap_get_ns1__removeEntityFromFolderByRecordIDResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__removeEntityFromFolderByRecordIDResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getEntityListForFolderByRecordID(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool publicFolder, struct ns1__getEntityListForFolderByRecordIDResponse &_param_67)
{	struct soap *soap = this;
	struct ns1__getEntityListForFolderByRecordID soap_tmp_ns1__getEntityListForFolderByRecordID;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getEntityListForFolderByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getEntityListForFolderByRecordID.cookie = cookie;
	soap_tmp_ns1__getEntityListForFolderByRecordID.recordID = recordID;
	soap_tmp_ns1__getEntityListForFolderByRecordID.publicFolder = publicFolder;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getEntityListForFolderByRecordID(soap, &soap_tmp_ns1__getEntityListForFolderByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getEntityListForFolderByRecordID(soap, &soap_tmp_ns1__getEntityListForFolderByRecordID, "ns1:getEntityListForFolderByRecordID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getEntityListForFolderByRecordID(soap, &soap_tmp_ns1__getEntityListForFolderByRecordID, "ns1:getEntityListForFolderByRecordID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_67)
		return soap_closesock(soap);
	soap_default_ns1__getEntityListForFolderByRecordIDResponse(soap, &_param_67);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getEntityListForFolderByRecordIDResponse(soap, &_param_67, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getFolderListForEntityByRecordID(const char *endpoint, const char *soap_action, LONG64 cookie, char *tablename, LONG64 recordID, struct ns1__getFolderListForEntityByRecordIDResponse &_param_68)
{	struct soap *soap = this;
	struct ns1__getFolderListForEntityByRecordID soap_tmp_ns1__getFolderListForEntityByRecordID;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getFolderListForEntityByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getFolderListForEntityByRecordID.cookie = cookie;
	soap_tmp_ns1__getFolderListForEntityByRecordID.tablename = tablename;
	soap_tmp_ns1__getFolderListForEntityByRecordID.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getFolderListForEntityByRecordID(soap, &soap_tmp_ns1__getFolderListForEntityByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getFolderListForEntityByRecordID(soap, &soap_tmp_ns1__getFolderListForEntityByRecordID, "ns1:getFolderListForEntityByRecordID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getFolderListForEntityByRecordID(soap, &soap_tmp_ns1__getFolderListForEntityByRecordID, "ns1:getFolderListForEntityByRecordID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_68)
		return soap_closesock(soap);
	soap_default_ns1__getFolderListForEntityByRecordIDResponse(soap, &_param_68);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getFolderListForEntityByRecordIDResponse(soap, &_param_68, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getFolderPathSeparator(const char *endpoint, const char *soap_action, LONG64 cookie, char &separator)
{	struct soap *soap = this;
	struct ns1__getFolderPathSeparator soap_tmp_ns1__getFolderPathSeparator;
	struct ns1__getFolderPathSeparatorResponse *soap_tmp_ns1__getFolderPathSeparatorResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getFolderPathSeparator";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getFolderPathSeparator.cookie = cookie;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getFolderPathSeparator(soap, &soap_tmp_ns1__getFolderPathSeparator);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getFolderPathSeparator(soap, &soap_tmp_ns1__getFolderPathSeparator, "ns1:getFolderPathSeparator", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getFolderPathSeparator(soap, &soap_tmp_ns1__getFolderPathSeparator, "ns1:getFolderPathSeparator", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&separator)
		return soap_closesock(soap);
	soap_default_xsd__byte(soap, &separator);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__getFolderPathSeparatorResponse = soap_get_ns1__getFolderPathSeparatorResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	separator = soap_tmp_ns1__getFolderPathSeparatorResponse->separator;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getRootPublicFolderPath(const char *endpoint, const char *soap_action, LONG64 cookie, char *&strPublicPath)
{	struct soap *soap = this;
	struct ns1__getRootPublicFolderPath soap_tmp_ns1__getRootPublicFolderPath;
	struct ns1__getRootPublicFolderPathResponse *soap_tmp_ns1__getRootPublicFolderPathResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getRootPublicFolderPath";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getRootPublicFolderPath.cookie = cookie;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getRootPublicFolderPath(soap, &soap_tmp_ns1__getRootPublicFolderPath);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getRootPublicFolderPath(soap, &soap_tmp_ns1__getRootPublicFolderPath, "ns1:getRootPublicFolderPath", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getRootPublicFolderPath(soap, &soap_tmp_ns1__getRootPublicFolderPath, "ns1:getRootPublicFolderPath", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	strPublicPath = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__getRootPublicFolderPathResponse = soap_get_ns1__getRootPublicFolderPathResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	strPublicPath = soap_tmp_ns1__getRootPublicFolderPathResponse->strPublicPath;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getRootPrivateFolderPath(const char *endpoint, const char *soap_action, LONG64 cookie, char *&strPrivatePath)
{	struct soap *soap = this;
	struct ns1__getRootPrivateFolderPath soap_tmp_ns1__getRootPrivateFolderPath;
	struct ns1__getRootPrivateFolderPathResponse *soap_tmp_ns1__getRootPrivateFolderPathResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getRootPrivateFolderPath";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getRootPrivateFolderPath.cookie = cookie;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getRootPrivateFolderPath(soap, &soap_tmp_ns1__getRootPrivateFolderPath);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getRootPrivateFolderPath(soap, &soap_tmp_ns1__getRootPrivateFolderPath, "ns1:getRootPrivateFolderPath", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getRootPrivateFolderPath(soap, &soap_tmp_ns1__getRootPrivateFolderPath, "ns1:getRootPrivateFolderPath", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	strPrivatePath = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__getRootPrivateFolderPathResponse = soap_get_ns1__getRootPrivateFolderPathResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	strPrivatePath = soap_tmp_ns1__getRootPrivateFolderPathResponse->strPrivatePath;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::editFolderItemRank(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool publicFolder, struct ns1__editFolderItemRankResponse &_param_69)
{	struct soap *soap = this;
	struct ns1__editFolderItemRank soap_tmp_ns1__editFolderItemRank;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#editFolderItemRank";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__editFolderItemRank.cookie = cookie;
	soap_tmp_ns1__editFolderItemRank.recordID = recordID;
	soap_tmp_ns1__editFolderItemRank.publicFolder = publicFolder;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__editFolderItemRank(soap, &soap_tmp_ns1__editFolderItemRank);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__editFolderItemRank(soap, &soap_tmp_ns1__editFolderItemRank, "ns1:editFolderItemRank", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__editFolderItemRank(soap, &soap_tmp_ns1__editFolderItemRank, "ns1:editFolderItemRank", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_69)
		return soap_closesock(soap);
	soap_default_ns1__editFolderItemRankResponse(soap, &_param_69);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__editFolderItemRankResponse(soap, &_param_69, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::saveFolderItemRank(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool publicFolder, ArrayOfCFolderItem *folderItemList, int &result)
{	struct soap *soap = this;
	struct ns1__saveFolderItemRank soap_tmp_ns1__saveFolderItemRank;
	struct ns1__saveFolderItemRankResponse *soap_tmp_ns1__saveFolderItemRankResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#saveFolderItemRank";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__saveFolderItemRank.cookie = cookie;
	soap_tmp_ns1__saveFolderItemRank.recordID = recordID;
	soap_tmp_ns1__saveFolderItemRank.publicFolder = publicFolder;
	soap_tmp_ns1__saveFolderItemRank.folderItemList = folderItemList;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__saveFolderItemRank(soap, &soap_tmp_ns1__saveFolderItemRank);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__saveFolderItemRank(soap, &soap_tmp_ns1__saveFolderItemRank, "ns1:saveFolderItemRank", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__saveFolderItemRank(soap, &soap_tmp_ns1__saveFolderItemRank, "ns1:saveFolderItemRank", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__saveFolderItemRankResponse = soap_get_ns1__saveFolderItemRankResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__saveFolderItemRankResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::cancelSaveFolderItemRank(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result)
{	struct soap *soap = this;
	struct ns1__cancelSaveFolderItemRank soap_tmp_ns1__cancelSaveFolderItemRank;
	struct ns1__cancelSaveFolderItemRankResponse *soap_tmp_ns1__cancelSaveFolderItemRankResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#cancelSaveFolderItemRank";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__cancelSaveFolderItemRank.cookie = cookie;
	soap_tmp_ns1__cancelSaveFolderItemRank.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__cancelSaveFolderItemRank(soap, &soap_tmp_ns1__cancelSaveFolderItemRank);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__cancelSaveFolderItemRank(soap, &soap_tmp_ns1__cancelSaveFolderItemRank, "ns1:cancelSaveFolderItemRank", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__cancelSaveFolderItemRank(soap, &soap_tmp_ns1__cancelSaveFolderItemRank, "ns1:cancelSaveFolderItemRank", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__cancelSaveFolderItemRankResponse = soap_get_ns1__cancelSaveFolderItemRankResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__cancelSaveFolderItemRankResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getRequirement(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 requirementNumber, char *summary, bool bDownloadAttachments, struct ns1__getRequirementResponse &_param_70)
{	struct soap *soap = this;
	struct ns1__getRequirement soap_tmp_ns1__getRequirement;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getRequirement";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getRequirement.cookie = cookie;
	soap_tmp_ns1__getRequirement.requirementNumber = requirementNumber;
	soap_tmp_ns1__getRequirement.summary = summary;
	soap_tmp_ns1__getRequirement.bDownloadAttachments = bDownloadAttachments;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getRequirement(soap, &soap_tmp_ns1__getRequirement);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getRequirement(soap, &soap_tmp_ns1__getRequirement, "ns1:getRequirement", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getRequirement(soap, &soap_tmp_ns1__getRequirement, "ns1:getRequirement", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_70)
		return soap_closesock(soap);
	soap_default_ns1__getRequirementResponse(soap, &_param_70);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getRequirementResponse(soap, &_param_70, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getRequirementByRecordID(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments, struct ns1__getRequirementByRecordIDResponse &_param_71)
{	struct soap *soap = this;
	struct ns1__getRequirementByRecordID soap_tmp_ns1__getRequirementByRecordID;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getRequirementByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getRequirementByRecordID.cookie = cookie;
	soap_tmp_ns1__getRequirementByRecordID.recordID = recordID;
	soap_tmp_ns1__getRequirementByRecordID.bDownloadAttachments = bDownloadAttachments;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getRequirementByRecordID(soap, &soap_tmp_ns1__getRequirementByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getRequirementByRecordID(soap, &soap_tmp_ns1__getRequirementByRecordID, "ns1:getRequirementByRecordID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getRequirementByRecordID(soap, &soap_tmp_ns1__getRequirementByRecordID, "ns1:getRequirementByRecordID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_71)
		return soap_closesock(soap);
	soap_default_ns1__getRequirementByRecordIDResponse(soap, &_param_71);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getRequirementByRecordIDResponse(soap, &_param_71, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::addRequirement(const char *endpoint, const char *soap_action, LONG64 cookie, ns1__CRequirement *pRequirement, LONG64 &recordID)
{	struct soap *soap = this;
	struct ns1__addRequirement soap_tmp_ns1__addRequirement;
	struct ns1__addRequirementResponse *soap_tmp_ns1__addRequirementResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#addRequirement";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__addRequirement.cookie = cookie;
	soap_tmp_ns1__addRequirement.pRequirement = pRequirement;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__addRequirement(soap, &soap_tmp_ns1__addRequirement);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__addRequirement(soap, &soap_tmp_ns1__addRequirement, "ns1:addRequirement", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__addRequirement(soap, &soap_tmp_ns1__addRequirement, "ns1:addRequirement", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&recordID)
		return soap_closesock(soap);
	soap_default_LONG64(soap, &recordID);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__addRequirementResponse = soap_get_ns1__addRequirementResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	recordID = soap_tmp_ns1__addRequirementResponse->recordID;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::deleteRequirement(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 requirementNumber, char *summary, int &result)
{	struct soap *soap = this;
	struct ns1__deleteRequirement soap_tmp_ns1__deleteRequirement;
	struct ns1__deleteRequirementResponse *soap_tmp_ns1__deleteRequirementResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#deleteRequirement";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__deleteRequirement.cookie = cookie;
	soap_tmp_ns1__deleteRequirement.requirementNumber = requirementNumber;
	soap_tmp_ns1__deleteRequirement.summary = summary;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__deleteRequirement(soap, &soap_tmp_ns1__deleteRequirement);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__deleteRequirement(soap, &soap_tmp_ns1__deleteRequirement, "ns1:deleteRequirement", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__deleteRequirement(soap, &soap_tmp_ns1__deleteRequirement, "ns1:deleteRequirement", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__deleteRequirementResponse = soap_get_ns1__deleteRequirementResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__deleteRequirementResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::deleteRequirementByRecordID(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result)
{	struct soap *soap = this;
	struct ns1__deleteRequirementByRecordID soap_tmp_ns1__deleteRequirementByRecordID;
	struct ns1__deleteRequirementByRecordIDResponse *soap_tmp_ns1__deleteRequirementByRecordIDResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#deleteRequirementByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__deleteRequirementByRecordID.cookie = cookie;
	soap_tmp_ns1__deleteRequirementByRecordID.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__deleteRequirementByRecordID(soap, &soap_tmp_ns1__deleteRequirementByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__deleteRequirementByRecordID(soap, &soap_tmp_ns1__deleteRequirementByRecordID, "ns1:deleteRequirementByRecordID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__deleteRequirementByRecordID(soap, &soap_tmp_ns1__deleteRequirementByRecordID, "ns1:deleteRequirementByRecordID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__deleteRequirementByRecordIDResponse = soap_get_ns1__deleteRequirementByRecordIDResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__deleteRequirementByRecordIDResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::editRequirement(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 requirementNumber, char *summary, bool bDownloadAttachments, struct ns1__editRequirementResponse &_param_72)
{	struct soap *soap = this;
	struct ns1__editRequirement soap_tmp_ns1__editRequirement;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#editRequirement";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__editRequirement.cookie = cookie;
	soap_tmp_ns1__editRequirement.requirementNumber = requirementNumber;
	soap_tmp_ns1__editRequirement.summary = summary;
	soap_tmp_ns1__editRequirement.bDownloadAttachments = bDownloadAttachments;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__editRequirement(soap, &soap_tmp_ns1__editRequirement);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__editRequirement(soap, &soap_tmp_ns1__editRequirement, "ns1:editRequirement", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__editRequirement(soap, &soap_tmp_ns1__editRequirement, "ns1:editRequirement", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_72)
		return soap_closesock(soap);
	soap_default_ns1__editRequirementResponse(soap, &_param_72);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__editRequirementResponse(soap, &_param_72, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::editRequirementByRecordID(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments, struct ns1__editRequirementByRecordIDResponse &_param_73)
{	struct soap *soap = this;
	struct ns1__editRequirementByRecordID soap_tmp_ns1__editRequirementByRecordID;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#editRequirementByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__editRequirementByRecordID.cookie = cookie;
	soap_tmp_ns1__editRequirementByRecordID.recordID = recordID;
	soap_tmp_ns1__editRequirementByRecordID.bDownloadAttachments = bDownloadAttachments;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__editRequirementByRecordID(soap, &soap_tmp_ns1__editRequirementByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__editRequirementByRecordID(soap, &soap_tmp_ns1__editRequirementByRecordID, "ns1:editRequirementByRecordID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__editRequirementByRecordID(soap, &soap_tmp_ns1__editRequirementByRecordID, "ns1:editRequirementByRecordID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_73)
		return soap_closesock(soap);
	soap_default_ns1__editRequirementByRecordIDResponse(soap, &_param_73);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__editRequirementByRecordIDResponse(soap, &_param_73, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::saveRequirement(const char *endpoint, const char *soap_action, LONG64 cookie, ns1__CRequirement *pRequirement, int &result)
{	struct soap *soap = this;
	struct ns1__saveRequirement soap_tmp_ns1__saveRequirement;
	struct ns1__saveRequirementResponse *soap_tmp_ns1__saveRequirementResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#saveRequirement";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__saveRequirement.cookie = cookie;
	soap_tmp_ns1__saveRequirement.pRequirement = pRequirement;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__saveRequirement(soap, &soap_tmp_ns1__saveRequirement);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__saveRequirement(soap, &soap_tmp_ns1__saveRequirement, "ns1:saveRequirement", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__saveRequirement(soap, &soap_tmp_ns1__saveRequirement, "ns1:saveRequirement", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__saveRequirementResponse = soap_get_ns1__saveRequirementResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__saveRequirementResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::cancelSaveRequirement(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result)
{	struct soap *soap = this;
	struct ns1__cancelSaveRequirement soap_tmp_ns1__cancelSaveRequirement;
	struct ns1__cancelSaveRequirementResponse *soap_tmp_ns1__cancelSaveRequirementResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#cancelSaveRequirement";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__cancelSaveRequirement.cookie = cookie;
	soap_tmp_ns1__cancelSaveRequirement.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__cancelSaveRequirement(soap, &soap_tmp_ns1__cancelSaveRequirement);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__cancelSaveRequirement(soap, &soap_tmp_ns1__cancelSaveRequirement, "ns1:cancelSaveRequirement", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__cancelSaveRequirement(soap, &soap_tmp_ns1__cancelSaveRequirement, "ns1:cancelSaveRequirement", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__cancelSaveRequirementResponse = soap_get_ns1__cancelSaveRequirementResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__cancelSaveRequirementResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::appendToRequirementDocument(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 requirementID, LONG64 documentID, LONG64 parentRequirementID, int &result)
{	struct soap *soap = this;
	struct ns1__appendToRequirementDocument soap_tmp_ns1__appendToRequirementDocument;
	struct ns1__appendToRequirementDocumentResponse *soap_tmp_ns1__appendToRequirementDocumentResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#appendToRequirementDocument";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__appendToRequirementDocument.cookie = cookie;
	soap_tmp_ns1__appendToRequirementDocument.requirementID = requirementID;
	soap_tmp_ns1__appendToRequirementDocument.documentID = documentID;
	soap_tmp_ns1__appendToRequirementDocument.parentRequirementID = parentRequirementID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__appendToRequirementDocument(soap, &soap_tmp_ns1__appendToRequirementDocument);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__appendToRequirementDocument(soap, &soap_tmp_ns1__appendToRequirementDocument, "ns1:appendToRequirementDocument", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__appendToRequirementDocument(soap, &soap_tmp_ns1__appendToRequirementDocument, "ns1:appendToRequirementDocument", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__appendToRequirementDocumentResponse = soap_get_ns1__appendToRequirementDocumentResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__appendToRequirementDocumentResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getDocumentIDsForRequirement(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 requirementID, struct ns1__getDocumentIDsForRequirementResponse &_param_74)
{	struct soap *soap = this;
	struct ns1__getDocumentIDsForRequirement soap_tmp_ns1__getDocumentIDsForRequirement;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getDocumentIDsForRequirement";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getDocumentIDsForRequirement.cookie = cookie;
	soap_tmp_ns1__getDocumentIDsForRequirement.requirementID = requirementID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getDocumentIDsForRequirement(soap, &soap_tmp_ns1__getDocumentIDsForRequirement);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getDocumentIDsForRequirement(soap, &soap_tmp_ns1__getDocumentIDsForRequirement, "ns1:getDocumentIDsForRequirement", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getDocumentIDsForRequirement(soap, &soap_tmp_ns1__getDocumentIDsForRequirement, "ns1:getDocumentIDsForRequirement", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_74)
		return soap_closesock(soap);
	soap_default_ns1__getDocumentIDsForRequirementResponse(soap, &_param_74);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getDocumentIDsForRequirementResponse(soap, &_param_74, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::changeRequirementType(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 requirementID, char *newTypeName, int &result)
{	struct soap *soap = this;
	struct ns1__changeRequirementType soap_tmp_ns1__changeRequirementType;
	struct ns1__changeRequirementTypeResponse *soap_tmp_ns1__changeRequirementTypeResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#changeRequirementType";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__changeRequirementType.cookie = cookie;
	soap_tmp_ns1__changeRequirementType.requirementID = requirementID;
	soap_tmp_ns1__changeRequirementType.newTypeName = newTypeName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__changeRequirementType(soap, &soap_tmp_ns1__changeRequirementType);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__changeRequirementType(soap, &soap_tmp_ns1__changeRequirementType, "ns1:changeRequirementType", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__changeRequirementType(soap, &soap_tmp_ns1__changeRequirementType, "ns1:changeRequirementType", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__changeRequirementTypeResponse = soap_get_ns1__changeRequirementTypeResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__changeRequirementTypeResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getRequirementDocument(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 documentNumber, char *name, bool bDownloadAttachments, struct ns1__getRequirementDocumentResponse &_param_75)
{	struct soap *soap = this;
	struct ns1__getRequirementDocument soap_tmp_ns1__getRequirementDocument;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getRequirementDocument";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getRequirementDocument.cookie = cookie;
	soap_tmp_ns1__getRequirementDocument.documentNumber = documentNumber;
	soap_tmp_ns1__getRequirementDocument.name = name;
	soap_tmp_ns1__getRequirementDocument.bDownloadAttachments = bDownloadAttachments;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getRequirementDocument(soap, &soap_tmp_ns1__getRequirementDocument);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getRequirementDocument(soap, &soap_tmp_ns1__getRequirementDocument, "ns1:getRequirementDocument", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getRequirementDocument(soap, &soap_tmp_ns1__getRequirementDocument, "ns1:getRequirementDocument", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_75)
		return soap_closesock(soap);
	soap_default_ns1__getRequirementDocumentResponse(soap, &_param_75);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getRequirementDocumentResponse(soap, &_param_75, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getRequirementDocumentByRecordID(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments, struct ns1__getRequirementDocumentByRecordIDResponse &_param_76)
{	struct soap *soap = this;
	struct ns1__getRequirementDocumentByRecordID soap_tmp_ns1__getRequirementDocumentByRecordID;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getRequirementDocumentByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getRequirementDocumentByRecordID.cookie = cookie;
	soap_tmp_ns1__getRequirementDocumentByRecordID.recordID = recordID;
	soap_tmp_ns1__getRequirementDocumentByRecordID.bDownloadAttachments = bDownloadAttachments;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getRequirementDocumentByRecordID(soap, &soap_tmp_ns1__getRequirementDocumentByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getRequirementDocumentByRecordID(soap, &soap_tmp_ns1__getRequirementDocumentByRecordID, "ns1:getRequirementDocumentByRecordID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getRequirementDocumentByRecordID(soap, &soap_tmp_ns1__getRequirementDocumentByRecordID, "ns1:getRequirementDocumentByRecordID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_76)
		return soap_closesock(soap);
	soap_default_ns1__getRequirementDocumentByRecordIDResponse(soap, &_param_76);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getRequirementDocumentByRecordIDResponse(soap, &_param_76, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::addRequirementDocument(const char *endpoint, const char *soap_action, LONG64 cookie, ns1__CRequirementDocument *pRequirementDocument, LONG64 &recordID)
{	struct soap *soap = this;
	struct ns1__addRequirementDocument soap_tmp_ns1__addRequirementDocument;
	struct ns1__addRequirementDocumentResponse *soap_tmp_ns1__addRequirementDocumentResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#addRequirementDocument";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__addRequirementDocument.cookie = cookie;
	soap_tmp_ns1__addRequirementDocument.pRequirementDocument = pRequirementDocument;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__addRequirementDocument(soap, &soap_tmp_ns1__addRequirementDocument);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__addRequirementDocument(soap, &soap_tmp_ns1__addRequirementDocument, "ns1:addRequirementDocument", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__addRequirementDocument(soap, &soap_tmp_ns1__addRequirementDocument, "ns1:addRequirementDocument", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&recordID)
		return soap_closesock(soap);
	soap_default_LONG64(soap, &recordID);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__addRequirementDocumentResponse = soap_get_ns1__addRequirementDocumentResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	recordID = soap_tmp_ns1__addRequirementDocumentResponse->recordID;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::deleteRequirementDocument(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 documentNumber, char *name, bool bDeleteAssociatedRequirements, int &result)
{	struct soap *soap = this;
	struct ns1__deleteRequirementDocument soap_tmp_ns1__deleteRequirementDocument;
	struct ns1__deleteRequirementDocumentResponse *soap_tmp_ns1__deleteRequirementDocumentResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#deleteRequirementDocument";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__deleteRequirementDocument.cookie = cookie;
	soap_tmp_ns1__deleteRequirementDocument.documentNumber = documentNumber;
	soap_tmp_ns1__deleteRequirementDocument.name = name;
	soap_tmp_ns1__deleteRequirementDocument.bDeleteAssociatedRequirements = bDeleteAssociatedRequirements;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__deleteRequirementDocument(soap, &soap_tmp_ns1__deleteRequirementDocument);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__deleteRequirementDocument(soap, &soap_tmp_ns1__deleteRequirementDocument, "ns1:deleteRequirementDocument", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__deleteRequirementDocument(soap, &soap_tmp_ns1__deleteRequirementDocument, "ns1:deleteRequirementDocument", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__deleteRequirementDocumentResponse = soap_get_ns1__deleteRequirementDocumentResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__deleteRequirementDocumentResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::deleteRequirementDocumentByRecordID(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool bDeleteAssociatedRequirements, int &result)
{	struct soap *soap = this;
	struct ns1__deleteRequirementDocumentByRecordID soap_tmp_ns1__deleteRequirementDocumentByRecordID;
	struct ns1__deleteRequirementDocumentByRecordIDResponse *soap_tmp_ns1__deleteRequirementDocumentByRecordIDResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#deleteRequirementDocumentByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__deleteRequirementDocumentByRecordID.cookie = cookie;
	soap_tmp_ns1__deleteRequirementDocumentByRecordID.recordID = recordID;
	soap_tmp_ns1__deleteRequirementDocumentByRecordID.bDeleteAssociatedRequirements = bDeleteAssociatedRequirements;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__deleteRequirementDocumentByRecordID(soap, &soap_tmp_ns1__deleteRequirementDocumentByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__deleteRequirementDocumentByRecordID(soap, &soap_tmp_ns1__deleteRequirementDocumentByRecordID, "ns1:deleteRequirementDocumentByRecordID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__deleteRequirementDocumentByRecordID(soap, &soap_tmp_ns1__deleteRequirementDocumentByRecordID, "ns1:deleteRequirementDocumentByRecordID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__deleteRequirementDocumentByRecordIDResponse = soap_get_ns1__deleteRequirementDocumentByRecordIDResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__deleteRequirementDocumentByRecordIDResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::editRequirementDocument(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 documentNumber, char *name, bool bDownloadAttachments, struct ns1__editRequirementDocumentResponse &_param_77)
{	struct soap *soap = this;
	struct ns1__editRequirementDocument soap_tmp_ns1__editRequirementDocument;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#editRequirementDocument";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__editRequirementDocument.cookie = cookie;
	soap_tmp_ns1__editRequirementDocument.documentNumber = documentNumber;
	soap_tmp_ns1__editRequirementDocument.name = name;
	soap_tmp_ns1__editRequirementDocument.bDownloadAttachments = bDownloadAttachments;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__editRequirementDocument(soap, &soap_tmp_ns1__editRequirementDocument);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__editRequirementDocument(soap, &soap_tmp_ns1__editRequirementDocument, "ns1:editRequirementDocument", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__editRequirementDocument(soap, &soap_tmp_ns1__editRequirementDocument, "ns1:editRequirementDocument", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_77)
		return soap_closesock(soap);
	soap_default_ns1__editRequirementDocumentResponse(soap, &_param_77);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__editRequirementDocumentResponse(soap, &_param_77, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::editRequirementDocumentByRecordID(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, bool bDownloadAttachments, struct ns1__editRequirementDocumentByRecordIDResponse &_param_78)
{	struct soap *soap = this;
	struct ns1__editRequirementDocumentByRecordID soap_tmp_ns1__editRequirementDocumentByRecordID;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#editRequirementDocumentByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__editRequirementDocumentByRecordID.cookie = cookie;
	soap_tmp_ns1__editRequirementDocumentByRecordID.recordID = recordID;
	soap_tmp_ns1__editRequirementDocumentByRecordID.bDownloadAttachments = bDownloadAttachments;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__editRequirementDocumentByRecordID(soap, &soap_tmp_ns1__editRequirementDocumentByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__editRequirementDocumentByRecordID(soap, &soap_tmp_ns1__editRequirementDocumentByRecordID, "ns1:editRequirementDocumentByRecordID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__editRequirementDocumentByRecordID(soap, &soap_tmp_ns1__editRequirementDocumentByRecordID, "ns1:editRequirementDocumentByRecordID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_78)
		return soap_closesock(soap);
	soap_default_ns1__editRequirementDocumentByRecordIDResponse(soap, &_param_78);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__editRequirementDocumentByRecordIDResponse(soap, &_param_78, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::saveRequirementDocument(const char *endpoint, const char *soap_action, LONG64 cookie, ns1__CRequirementDocument *pRequirementDocument, int &result)
{	struct soap *soap = this;
	struct ns1__saveRequirementDocument soap_tmp_ns1__saveRequirementDocument;
	struct ns1__saveRequirementDocumentResponse *soap_tmp_ns1__saveRequirementDocumentResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#saveRequirementDocument";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__saveRequirementDocument.cookie = cookie;
	soap_tmp_ns1__saveRequirementDocument.pRequirementDocument = pRequirementDocument;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__saveRequirementDocument(soap, &soap_tmp_ns1__saveRequirementDocument);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__saveRequirementDocument(soap, &soap_tmp_ns1__saveRequirementDocument, "ns1:saveRequirementDocument", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__saveRequirementDocument(soap, &soap_tmp_ns1__saveRequirementDocument, "ns1:saveRequirementDocument", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__saveRequirementDocumentResponse = soap_get_ns1__saveRequirementDocumentResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__saveRequirementDocumentResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::cancelSaveRequirementDocument(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 recordID, int &result)
{	struct soap *soap = this;
	struct ns1__cancelSaveRequirementDocument soap_tmp_ns1__cancelSaveRequirementDocument;
	struct ns1__cancelSaveRequirementDocumentResponse *soap_tmp_ns1__cancelSaveRequirementDocumentResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#cancelSaveRequirementDocument";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__cancelSaveRequirementDocument.cookie = cookie;
	soap_tmp_ns1__cancelSaveRequirementDocument.recordID = recordID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__cancelSaveRequirementDocument(soap, &soap_tmp_ns1__cancelSaveRequirementDocument);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__cancelSaveRequirementDocument(soap, &soap_tmp_ns1__cancelSaveRequirementDocument, "ns1:cancelSaveRequirementDocument", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__cancelSaveRequirementDocument(soap, &soap_tmp_ns1__cancelSaveRequirementDocument, "ns1:cancelSaveRequirementDocument", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__cancelSaveRequirementDocumentResponse = soap_get_ns1__cancelSaveRequirementDocumentResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__cancelSaveRequirementDocumentResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::createSnapshot(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 documentID, ns1__CSnapshotInfo *snapshot, int &result)
{	struct soap *soap = this;
	struct ns1__createSnapshot soap_tmp_ns1__createSnapshot;
	struct ns1__createSnapshotResponse *soap_tmp_ns1__createSnapshotResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#createSnapshot";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__createSnapshot.cookie = cookie;
	soap_tmp_ns1__createSnapshot.documentID = documentID;
	soap_tmp_ns1__createSnapshot.snapshot = snapshot;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__createSnapshot(soap, &soap_tmp_ns1__createSnapshot);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__createSnapshot(soap, &soap_tmp_ns1__createSnapshot, "ns1:createSnapshot", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__createSnapshot(soap, &soap_tmp_ns1__createSnapshot, "ns1:createSnapshot", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&result)
		return soap_closesock(soap);
	soap_default_int(soap, &result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__createSnapshotResponse = soap_get_ns1__createSnapshotResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	result = soap_tmp_ns1__createSnapshotResponse->result;
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getRequirementIDsForDocument(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 documentID, struct ns1__getRequirementIDsForDocumentResponse &_param_79)
{	struct soap *soap = this;
	struct ns1__getRequirementIDsForDocument soap_tmp_ns1__getRequirementIDsForDocument;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getRequirementIDsForDocument";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getRequirementIDsForDocument.cookie = cookie;
	soap_tmp_ns1__getRequirementIDsForDocument.documentID = documentID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getRequirementIDsForDocument(soap, &soap_tmp_ns1__getRequirementIDsForDocument);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getRequirementIDsForDocument(soap, &soap_tmp_ns1__getRequirementIDsForDocument, "ns1:getRequirementIDsForDocument", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getRequirementIDsForDocument(soap, &soap_tmp_ns1__getRequirementIDsForDocument, "ns1:getRequirementIDsForDocument", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_79)
		return soap_closesock(soap);
	soap_default_ns1__getRequirementIDsForDocumentResponse(soap, &_param_79);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getRequirementIDsForDocumentResponse(soap, &_param_79, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getDocumentTree(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 documentID, struct ns1__getDocumentTreeResponse &_param_80)
{	struct soap *soap = this;
	struct ns1__getDocumentTree soap_tmp_ns1__getDocumentTree;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getDocumentTree";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getDocumentTree.cookie = cookie;
	soap_tmp_ns1__getDocumentTree.documentID = documentID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getDocumentTree(soap, &soap_tmp_ns1__getDocumentTree);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getDocumentTree(soap, &soap_tmp_ns1__getDocumentTree, "ns1:getDocumentTree", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getDocumentTree(soap, &soap_tmp_ns1__getDocumentTree, "ns1:getDocumentTree", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_80)
		return soap_closesock(soap);
	soap_default_ns1__getDocumentTreeResponse(soap, &_param_80);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getDocumentTreeResponse(soap, &_param_80, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getFolderTreeByRecordID(const char *endpoint, const char *soap_action, LONG64 cookie, LONG64 treeRootFolderID, struct ns1__getFolderTreeByRecordIDResponse &_param_81)
{	struct soap *soap = this;
	struct ns1__getFolderTreeByRecordID soap_tmp_ns1__getFolderTreeByRecordID;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getFolderTreeByRecordID";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getFolderTreeByRecordID.cookie = cookie;
	soap_tmp_ns1__getFolderTreeByRecordID.treeRootFolderID = treeRootFolderID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getFolderTreeByRecordID(soap, &soap_tmp_ns1__getFolderTreeByRecordID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getFolderTreeByRecordID(soap, &soap_tmp_ns1__getFolderTreeByRecordID, "ns1:getFolderTreeByRecordID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getFolderTreeByRecordID(soap, &soap_tmp_ns1__getFolderTreeByRecordID, "ns1:getFolderTreeByRecordID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_81)
		return soap_closesock(soap);
	soap_default_ns1__getFolderTreeByRecordIDResponse(soap, &_param_81);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getFolderTreeByRecordIDResponse(soap, &_param_81, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getFolderTree(const char *endpoint, const char *soap_action, LONG64 cookie, char *treeRootFolderPath, struct ns1__getFolderTreeResponse &_param_82)
{	struct soap *soap = this;
	struct ns1__getFolderTree soap_tmp_ns1__getFolderTree;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getFolderTree";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getFolderTree.cookie = cookie;
	soap_tmp_ns1__getFolderTree.treeRootFolderPath = treeRootFolderPath;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getFolderTree(soap, &soap_tmp_ns1__getFolderTree);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getFolderTree(soap, &soap_tmp_ns1__getFolderTree, "ns1:getFolderTree", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getFolderTree(soap, &soap_tmp_ns1__getFolderTree, "ns1:getFolderTree", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_82)
		return soap_closesock(soap);
	soap_default_ns1__getFolderTreeResponse(soap, &_param_82);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getFolderTreeResponse(soap, &_param_82, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ttsoapcgiProxy::getItemHyperlinks(const char *endpoint, const char *soap_action, LONG64 cookie, char *itemType, LONG64 itemID, struct ns1__getItemHyperlinksResponse &_param_83)
{	struct soap *soap = this;
	struct ns1__getItemHyperlinks soap_tmp_ns1__getItemHyperlinks;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.100.19:80/scripts/ttsoapcgi.exe";
	if (soap_action == NULL)
		soap_action = "urn:testtrack-interface#getItemHyperlinks";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__getItemHyperlinks.cookie = cookie;
	soap_tmp_ns1__getItemHyperlinks.itemType = itemType;
	soap_tmp_ns1__getItemHyperlinks.itemID = itemID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__getItemHyperlinks(soap, &soap_tmp_ns1__getItemHyperlinks);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getItemHyperlinks(soap, &soap_tmp_ns1__getItemHyperlinks, "ns1:getItemHyperlinks", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getItemHyperlinks(soap, &soap_tmp_ns1__getItemHyperlinks, "ns1:getItemHyperlinks", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_83)
		return soap_closesock(soap);
	soap_default_ns1__getItemHyperlinksResponse(soap, &_param_83);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns1__getItemHyperlinksResponse(soap, &_param_83, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
