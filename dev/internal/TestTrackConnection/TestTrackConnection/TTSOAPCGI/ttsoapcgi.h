/* ttsoapcgi.h
   Generated by wsdl2h 2.8.14 from ttsoapcgi.wsdl and typemap.dat
   2013-02-26 01:27:35 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2000-2013 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on ttsoapcgi.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
GPL or Genivia's license for commercial use.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   urn:testtrack-interface                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "urn:testtrack-interface"

*/

#define SOAP_NAMESPACE_OF_ns1	"urn:testtrack-interface"
//gsoap ns1   schema namespace:	urn:testtrack-interface
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/// Built-in type "xs:base64Binary".
class xsd__base64Binary
{	unsigned char *__ptr;
	int __size;
	char *id, *type, *options; // NOTE: for DIME and MTOM XOP attachments only
	struct soap *soap;
};

/// Built-in type "xs:byte".
typedef char xsd__byte;

/// Primitive built-in type "xs:date"
typedef char* xsd__date;

/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class ArrayOfstring.
class ArrayOfstring;

//  Forward declaration of class ArrayOflong.
class ArrayOflong;

//  Forward declaration of class ns1__CDatabase.
class ns1__CDatabase;

//  Forward declaration of class ArrayOfCDatabase.
class ArrayOfCDatabase;

//  Forward declaration of class ns1__CProjectDataOption.
class ns1__CProjectDataOption;

//  Forward declaration of class ArrayOfCProjectDataOption.
class ArrayOfCProjectDataOption;

//  Forward declaration of class ns1__CProject.
class ns1__CProject;

//  Forward declaration of class ArrayOfCProject.
class ArrayOfCProject;

//  Forward declaration of class ns1__CDatabaseTable.
class ns1__CDatabaseTable;

//  Forward declaration of class ArrayOfCDatabaseTable.
class ArrayOfCDatabaseTable;

//  Forward declaration of class ns1__CTableField.
class ns1__CTableField;

//  Forward declaration of class ArrayOfCTableField.
class ArrayOfCTableField;

//  Forward declaration of class ns1__CFieldValue.
class ns1__CFieldValue;

//  Forward declaration of class ArrayOfCFieldValue.
class ArrayOfCFieldValue;

//  Forward declaration of class ns1__CTableColumn.
class ns1__CTableColumn;

//  Forward declaration of class ArrayOfCTableColumn.
class ArrayOfCTableColumn;

//  Forward declaration of class ns1__CFilter.
class ns1__CFilter;

//  Forward declaration of class ArrayOfCFilter.
class ArrayOfCFilter;

//  Forward declaration of class ns1__CRecordData.
class ns1__CRecordData;

//  Forward declaration of class ArrayOfCRecordData.
class ArrayOfCRecordData;

//  Forward declaration of class ns1__CRecordRowSoap.
class ns1__CRecordRowSoap;

//  Forward declaration of class ArrayOfCRecordRowSoap.
class ArrayOfCRecordRowSoap;

//  Forward declaration of class ns1__CRecordListSoap.
class ns1__CRecordListSoap;

//  Forward declaration of class ns1__CItemWithDBRecordId.
class ns1__CItemWithDBRecordId;

//  Forward declaration of class ns1__CItemToTrack.
class ns1__CItemToTrack;

//  Forward declaration of class ns1__COrderedItemWithDBRecordId.
class ns1__COrderedItemWithDBRecordId;

//  Forward declaration of class ns1__CSystemBase.
class ns1__CSystemBase;

//  Forward declaration of class ns1__CSystem.
class ns1__CSystem;

//  Forward declaration of class ns1__CSCCFileRecord.
class ns1__CSCCFileRecord;

//  Forward declaration of class ArrayOfCSCCFileRecord.
class ArrayOfCSCCFileRecord;

//  Forward declaration of class ns1__CFile.
class ns1__CFile;

//  Forward declaration of class ArrayOfCFile.
class ArrayOfCFile;

//  Forward declaration of class ns1__CReportRunResults.
class ns1__CReportRunResults;

//  Forward declaration of class ns1__CFileAttachment.
class ns1__CFileAttachment;

//  Forward declaration of class ArrayOfCFileAttachment.
class ArrayOfCFileAttachment;

//  Forward declaration of class ns1__CReportedByRecord.
class ns1__CReportedByRecord;

//  Forward declaration of class ArrayOfCReportedByRecord.
class ArrayOfCReportedByRecord;

//  Forward declaration of class ns1__CField.
class ns1__CField;

//  Forward declaration of class ns1__CStringField.
class ns1__CStringField;

//  Forward declaration of class ns1__CIntegerField.
class ns1__CIntegerField;

//  Forward declaration of class ns1__CDecimalField.
class ns1__CDecimalField;

//  Forward declaration of class ns1__CBooleanField.
class ns1__CBooleanField;

//  Forward declaration of class ns1__CDateField.
class ns1__CDateField;

//  Forward declaration of class ns1__CDateTimeField.
class ns1__CDateTimeField;

//  Forward declaration of class ns1__CDropdownField.
class ns1__CDropdownField;

//  Forward declaration of class ns1__CMultiSelectDropdownField.
class ns1__CMultiSelectDropdownField;

//  Forward declaration of class ns1__CTestRunVariantField.
class ns1__CTestRunVariantField;

//  Forward declaration of class ns1__CTestCaseVariantField.
class ns1__CTestCaseVariantField;

//  Forward declaration of class ns1__CVersionField.
class ns1__CVersionField;

//  Forward declaration of class ns1__CTimespanField.
class ns1__CTimespanField;

//  Forward declaration of class ArrayOfCField.
class ArrayOfCField;

//  Forward declaration of class ArrayOfCTestRunVariantField.
class ArrayOfCTestRunVariantField;

//  Forward declaration of class ArrayOfCTestCaseVariantField.
class ArrayOfCTestCaseVariantField;

//  Forward declaration of class ns1__CEvent.
class ns1__CEvent;

//  Forward declaration of class ArrayOfCEvent.
class ArrayOfCEvent;

//  Forward declaration of class ns1__CDefectEvent.
class ns1__CDefectEvent;

//  Forward declaration of class ArrayOfCDefectEvent.
class ArrayOfCDefectEvent;

//  Forward declaration of class ns1__CEventDefinition.
class ns1__CEventDefinition;

//  Forward declaration of class ArrayOfCEventDefinition.
class ArrayOfCEventDefinition;

//  Forward declaration of class ns1__CDefectEventDefinition.
class ns1__CDefectEventDefinition;

//  Forward declaration of class ArrayOfCDefectEventDefinition.
class ArrayOfCDefectEventDefinition;

//  Forward declaration of class ns1__CDefect.
class ns1__CDefect;

//  Forward declaration of class ns1__CTask.
class ns1__CTask;

//  Forward declaration of class ns1__PhoneNumber.
class ns1__PhoneNumber;

//  Forward declaration of class ns1__CUser.
class ns1__CUser;

//  Forward declaration of class ns1__CGlobalUser.
class ns1__CGlobalUser;

//  Forward declaration of class ArrayOfCGlobalUser.
class ArrayOfCGlobalUser;

//  Forward declaration of class ns1__CUserLicense.
class ns1__CUserLicense;

//  Forward declaration of class ArrayOfCUserLicense.
class ArrayOfCUserLicense;

//  Forward declaration of class ns1__CLinkedItem.
class ns1__CLinkedItem;

//  Forward declaration of class ArrayOfCLinkedItem.
class ArrayOfCLinkedItem;

//  Forward declaration of class ns1__CLinkHistoryItem.
class ns1__CLinkHistoryItem;

//  Forward declaration of class ArrayOfCLinkHistoryItem.
class ArrayOfCLinkHistoryItem;

//  Forward declaration of class ns1__CLink.
class ns1__CLink;

//  Forward declaration of class ArrayOfCLink.
class ArrayOfCLink;

//  Forward declaration of class ns1__CTestCase.
class ns1__CTestCase;

//  Forward declaration of class ns1__CTestRun.
class ns1__CTestRun;

//  Forward declaration of class ArrayOfCItemToTrack.
class ArrayOfCItemToTrack;

//  Forward declaration of class ns1__CScheduleInfo.
class ns1__CScheduleInfo;

//  Forward declaration of class ns1__CFolderType.
class ns1__CFolderType;

//  Forward declaration of class ArrayOfCFolderType.
class ArrayOfCFolderType;

//  Forward declaration of class ns1__CFolder.
class ns1__CFolder;

//  Forward declaration of class ns1__CFolderItem.
class ns1__CFolderItem;

//  Forward declaration of class ArrayOfCFolder.
class ArrayOfCFolder;

//  Forward declaration of class ArrayOfCFolderItem.
class ArrayOfCFolderItem;

//  Forward declaration of class ns1__CVersionInfo.
class ns1__CVersionInfo;

//  Forward declaration of class ArrayOfCVersionInfo.
class ArrayOfCVersionInfo;

//  Forward declaration of class ns1__CSnapshotInfo.
class ns1__CSnapshotInfo;

//  Forward declaration of class ArrayOfCSnapshotInfo.
class ArrayOfCSnapshotInfo;

//  Forward declaration of class ns1__CRequirement.
class ns1__CRequirement;

//  Forward declaration of class ns1__CRequirementDocument.
class ns1__CRequirementDocument;

//  Forward declaration of class ns1__CTreeNodeSoap.
class ns1__CTreeNodeSoap;

//  Forward declaration of class ArrayOfCTreeNodeSoap.
class ArrayOfCTreeNodeSoap;

//  Forward declaration of class ns1__CDocumentTreeNode.
class ns1__CDocumentTreeNode;

//  Forward declaration of class ns1__CItemHyperlinkContainer.
class ns1__CItemHyperlinkContainer;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:testtrack-interface                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   urn:testtrack-interface                                                  *
 *                                                                            *
\******************************************************************************/


/// "urn:testtrack-interface":CDatabase is a complexType.
/// class ns1__CDatabase operations:
/// - soap_new_ns1__CDatabase(soap*) allocate
/// - soap_new_ns1__CDatabase(soap*, int num) allocate array
/// - soap_new_req_ns1__CDatabase(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CDatabase(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CDatabase(soap*, ns1__CDatabase*) deserialize from a stream
/// - int soap_write_ns1__CDatabase(soap, ns1__CDatabase*) serialize to a stream
class ns1__CDatabase
{ public:
/// Element name of type xs:string.
    char*                                name                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":CProjectDataOption is a complexType.
/// @brief Stores TestTrack project data options. Specifies what type of access a SOAP user has (TestTrack Pro, TestTrack TCM, and/or TestTrack RM).
/// class ns1__CProjectDataOption operations:
/// - soap_new_ns1__CProjectDataOption(soap*) allocate
/// - soap_new_ns1__CProjectDataOption(soap*, int num) allocate array
/// - soap_new_req_ns1__CProjectDataOption(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CProjectDataOption(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CProjectDataOption(soap*, ns1__CProjectDataOption*) deserialize from a stream
/// - int soap_write_ns1__CProjectDataOption(soap, ns1__CProjectDataOption*) serialize to a stream
class ns1__CProjectDataOption
{ public:
/// Element name of type xs:string.
    char*                                name                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":CProject is a complexType.
/// class ns1__CProject operations:
/// - soap_new_ns1__CProject(soap*) allocate
/// - soap_new_ns1__CProject(soap*, int num) allocate array
/// - soap_new_req_ns1__CProject(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CProject(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CProject(soap*, ns1__CProject*) deserialize from a stream
/// - int soap_write_ns1__CProject(soap, ns1__CProject*) serialize to a stream
class ns1__CProject
{ public:
/// Element database of type "urn:testtrack-interface":CDatabase.
    ns1__CDatabase*                      database                       1;	///< Required element.
/// Element options of type "urn:testtrack-interface":ArrayOfCProjectDataOption.
    ArrayOfCProjectDataOption*           options                        0;	///< Nillable pointer.
/// Element servernumber of type xs:int.
    int*                                 servernumber                   0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":CDatabaseTable is a complexType.
/// class ns1__CDatabaseTable operations:
/// - soap_new_ns1__CDatabaseTable(soap*) allocate
/// - soap_new_ns1__CDatabaseTable(soap*, int num) allocate array
/// - soap_new_req_ns1__CDatabaseTable(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CDatabaseTable(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CDatabaseTable(soap*, ns1__CDatabaseTable*) deserialize from a stream
/// - int soap_write_ns1__CDatabaseTable(soap, ns1__CDatabaseTable*) serialize to a stream
class ns1__CDatabaseTable
{ public:
/// Element name of type xs:string.
    char*                                name                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":CTableField is a complexType.
/// @brief Stores the name of a field with a discrete range of values. Used by getDropdownFieldForTable to return an array of field name values. For example, structure can be used for fields represented by a combo box.
/// class ns1__CTableField operations:
/// - soap_new_ns1__CTableField(soap*) allocate
/// - soap_new_ns1__CTableField(soap*, int num) allocate array
/// - soap_new_req_ns1__CTableField(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CTableField(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CTableField(soap*, ns1__CTableField*) deserialize from a stream
/// - int soap_write_ns1__CTableField(soap, ns1__CTableField*) serialize to a stream
class ns1__CTableField
{ public:
/// Element name of type xs:string.
    char*                                name                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":CFieldValue is a complexType.
/// @brief Stores values for a field with a discrete range of values, used by getDropdownFieldForTable to return an array of CTableField values.
/// class ns1__CFieldValue operations:
/// - soap_new_ns1__CFieldValue(soap*) allocate
/// - soap_new_ns1__CFieldValue(soap*, int num) allocate array
/// - soap_new_req_ns1__CFieldValue(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CFieldValue(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CFieldValue(soap*, ns1__CFieldValue*) deserialize from a stream
/// - int soap_write_ns1__CFieldValue(soap, ns1__CFieldValue*) serialize to a stream
class ns1__CFieldValue
{ public:
/// Element value of type xs:string.
    char*                                value                          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":CTableColumn is a complexType.
/// @brief Stores the name of a field that can be retrieved via list operations. Used by getColumnsForTable to return the list of columns that can be retrieved for a table. Structure is also used by getRecordListForTable to return an array of fields for objects in a table.
/// class ns1__CTableColumn operations:
/// - soap_new_ns1__CTableColumn(soap*) allocate
/// - soap_new_ns1__CTableColumn(soap*, int num) allocate array
/// - soap_new_req_ns1__CTableColumn(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CTableColumn(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CTableColumn(soap*, ns1__CTableColumn*) deserialize from a stream
/// - int soap_write_ns1__CTableColumn(soap, ns1__CTableColumn*) serialize to a stream
class ns1__CTableColumn
{ public:
/// Element name of type xs:string.
    char*                                name                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":CFilter is a complexType.
/// class ns1__CFilter operations:
/// - soap_new_ns1__CFilter(soap*) allocate
/// - soap_new_ns1__CFilter(soap*, int num) allocate array
/// - soap_new_req_ns1__CFilter(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CFilter(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CFilter(soap*, ns1__CFilter*) deserialize from a stream
/// - int soap_write_ns1__CFilter(soap, ns1__CFilter*) serialize to a stream
class ns1__CFilter
{ public:
/// Element name of type xs:string.
    char*                                name                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":CRecordData is a complexType.
/// class ns1__CRecordData operations:
/// - soap_new_ns1__CRecordData(soap*) allocate
/// - soap_new_ns1__CRecordData(soap*, int num) allocate array
/// - soap_new_req_ns1__CRecordData(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CRecordData(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CRecordData(soap*, ns1__CRecordData*) deserialize from a stream
/// - int soap_write_ns1__CRecordData(soap, ns1__CRecordData*) serialize to a stream
class ns1__CRecordData
{ public:
/// Element value of type xs:string.
    char*                                value                          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":CRecordRowSoap is a complexType.
/// class ns1__CRecordRowSoap operations:
/// - soap_new_ns1__CRecordRowSoap(soap*) allocate
/// - soap_new_ns1__CRecordRowSoap(soap*, int num) allocate array
/// - soap_new_req_ns1__CRecordRowSoap(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CRecordRowSoap(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CRecordRowSoap(soap*, ns1__CRecordRowSoap*) deserialize from a stream
/// - int soap_write_ns1__CRecordRowSoap(soap, ns1__CRecordRowSoap*) serialize to a stream
class ns1__CRecordRowSoap
{ public:
/// Element row of type "urn:testtrack-interface":ArrayOfCRecordData.
    ArrayOfCRecordData*                  row                            1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":CRecordListSoap is a complexType.
/// class ns1__CRecordListSoap operations:
/// - soap_new_ns1__CRecordListSoap(soap*) allocate
/// - soap_new_ns1__CRecordListSoap(soap*, int num) allocate array
/// - soap_new_req_ns1__CRecordListSoap(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CRecordListSoap(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CRecordListSoap(soap*, ns1__CRecordListSoap*) deserialize from a stream
/// - int soap_write_ns1__CRecordListSoap(soap, ns1__CRecordListSoap*) serialize to a stream
class ns1__CRecordListSoap
{ public:
/// Element columnlist of type "urn:testtrack-interface":ArrayOfCTableColumn.
    ArrayOfCTableColumn*                 columnlist                     0;	///< Nillable pointer.
/// Element records of type "urn:testtrack-interface":ArrayOfCRecordRowSoap.
    ArrayOfCRecordRowSoap*               records                        0;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":CItemWithDBRecordId is a complexType.
/// @brief Stores record ID value for each object stored on the TestTrack Server. More complex objects are created from this structure. For example, CSystem can be created from CItemWithDBRecordID.
/// class ns1__CItemWithDBRecordId operations:
/// - soap_new_ns1__CItemWithDBRecordId(soap*) allocate
/// - soap_new_ns1__CItemWithDBRecordId(soap*, int num) allocate array
/// - soap_new_req_ns1__CItemWithDBRecordId(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CItemWithDBRecordId(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CItemWithDBRecordId(soap*, ns1__CItemWithDBRecordId*) deserialize from a stream
/// - int soap_write_ns1__CItemWithDBRecordId(soap, ns1__CItemWithDBRecordId*) serialize to a stream
class ns1__CItemWithDBRecordId
{ public:
/// Element recordid of type xs:long.
    LONG64                               recordid                       1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":CFile is a complexType.
/// class ns1__CFile operations:
/// - soap_new_ns1__CFile(soap*) allocate
/// - soap_new_ns1__CFile(soap*, int num) allocate array
/// - soap_new_req_ns1__CFile(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CFile(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CFile(soap*, ns1__CFile*) deserialize from a stream
/// - int soap_write_ns1__CFile(soap, ns1__CFile*) serialize to a stream
class ns1__CFile
{ public:
/// Element m-pFileData of type xs:base64Binary.
    xsd__base64Binary*                   m_pFileData                    0;	///< Nillable pointer.
/// Element m-strFileName of type xs:string.
    char*                                m_strFileName                  0;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":CReportRunResults is a complexType.
/// class ns1__CReportRunResults operations:
/// - soap_new_ns1__CReportRunResults(soap*) allocate
/// - soap_new_ns1__CReportRunResults(soap*, int num) allocate array
/// - soap_new_req_ns1__CReportRunResults(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CReportRunResults(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CReportRunResults(soap*, ns1__CReportRunResults*) deserialize from a stream
/// - int soap_write_ns1__CReportRunResults(soap, ns1__CReportRunResults*) serialize to a stream
class ns1__CReportRunResults
{ public:
/// Element m-FileList of type "urn:testtrack-interface":ArrayOfCFile.
    ArrayOfCFile*                        m_FileList                     0;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":CEventDefinition is a complexType.
/// @brief Contains all information needed to define a CEvent object. It contains a list of xsd:boolean members that indicate which event fields are present for this particular event. This is a read-only object.
/// class ns1__CEventDefinition operations:
/// - soap_new_ns1__CEventDefinition(soap*) allocate
/// - soap_new_ns1__CEventDefinition(soap*, int num) allocate array
/// - soap_new_req_ns1__CEventDefinition(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CEventDefinition(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CEventDefinition(soap*, ns1__CEventDefinition*) deserialize from a stream
/// - int soap_write_ns1__CEventDefinition(soap, ns1__CEventDefinition*) serialize to a stream
class ns1__CEventDefinition
{ public:
/// Element name of type xs:string.
    char*                                name                           0;	///< Nillable pointer.
/// Element user of type xs:boolean.
    bool*                                user                           0;	///< Optional element.
/// Element datetime of type xs:boolean.
    bool*                                datetime                       0;	///< Optional element.
/// Element notes of type xs:boolean.
    bool*                                notes                          0;	///< Optional element.
/// Element resultingState of type xs:boolean.
    bool*                                resultingState                 0;	///< Optional element.
/// Element resultingStateValues of type "urn:testtrack-interface":ArrayOfCFieldValue.
    ArrayOfCFieldValue*                  resultingStateValues           0;	///< Nillable pointer.
/// Element fileattachments of type xs:boolean.
    bool*                                fileattachments                0;	///< Optional element.
/// Element timeTracking of type xs:boolean.
    bool*                                timeTracking                   0;	///< Optional element.
/// Element timeSumOfAll of type xs:boolean.
    bool*                                timeSumOfAll                   0;	///< Optional element.
/// Element timeHoursSinceLast of type xs:boolean.
    bool*                                timeHoursSinceLast             0;	///< Optional element.
/// Element newAssignment of type xs:boolean.
    bool*                                newAssignment                  0;	///< Optional element.
/// Element releaseNotes of type xs:boolean.
    bool*                                releaseNotes                   0;	///< Optional element.
/// Element marksuspect of type xs:boolean.
    bool*                                marksuspect                    0;	///< Optional element.
/// Element reviewnote of type xs:boolean.
    bool*                                reviewnote                     0;	///< Optional element.
/// Element customFields of type "urn:testtrack-interface":ArrayOfCField.
    ArrayOfCField*                       customFields                   0;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":PhoneNumber is a complexType.
/// class ns1__PhoneNumber operations:
/// - soap_new_ns1__PhoneNumber(soap*) allocate
/// - soap_new_ns1__PhoneNumber(soap*, int num) allocate array
/// - soap_new_req_ns1__PhoneNumber(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__PhoneNumber(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__PhoneNumber(soap*, ns1__PhoneNumber*) deserialize from a stream
/// - int soap_write_ns1__PhoneNumber(soap, ns1__PhoneNumber*) serialize to a stream
class ns1__PhoneNumber
{ public:
/// Element numbertype of type xs:string.
    char*                                numbertype                     0;	///< Nillable pointer.
/// Element phonenumber of type xs:string.
    char*                                phonenumber                    0;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":CGlobalUser is a complexType.
/// @brief Contains the login name and the name of a user that is stored on the Seapine License Server. Used by the addGlobalUser and addGlobalCustomer requests.
/// class ns1__CGlobalUser operations:
/// - soap_new_ns1__CGlobalUser(soap*) allocate
/// - soap_new_ns1__CGlobalUser(soap*, int num) allocate array
/// - soap_new_req_ns1__CGlobalUser(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CGlobalUser(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CGlobalUser(soap*, ns1__CGlobalUser*) deserialize from a stream
/// - int soap_write_ns1__CGlobalUser(soap, ns1__CGlobalUser*) serialize to a stream
class ns1__CGlobalUser
{ public:
/// Element loginname of type xs:string.
    char*                                loginname                      0;	///< Nillable pointer.
/// Element name of type xs:string.
    char*                                name                           0;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":CUserLicense is a complexType.
/// @brief Contains Seapine License Server user license information.
/// class ns1__CUserLicense operations:
/// - soap_new_ns1__CUserLicense(soap*) allocate
/// - soap_new_ns1__CUserLicense(soap*, int num) allocate array
/// - soap_new_req_ns1__CUserLicense(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CUserLicense(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CUserLicense(soap*, ns1__CUserLicense*) deserialize from a stream
/// - int soap_write_ns1__CUserLicense(soap, ns1__CUserLicense*) serialize to a stream
class ns1__CUserLicense
{ public:
/// Element name of type xs:string.
    char*                                name                           0;	///< Nillable pointer.
/// Element numberUsed of type xs:int.
    int*                                 numberUsed                     0;	///< Optional element.
/// Element numberTotal of type xs:int.
    int*                                 numberTotal                    0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":CScheduleInfo is a complexType.
/// class ns1__CScheduleInfo operations:
/// - soap_new_ns1__CScheduleInfo(soap*) allocate
/// - soap_new_ns1__CScheduleInfo(soap*, int num) allocate array
/// - soap_new_req_ns1__CScheduleInfo(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CScheduleInfo(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CScheduleInfo(soap*, ns1__CScheduleInfo*) deserialize from a stream
/// - int soap_write_ns1__CScheduleInfo(soap, ns1__CScheduleInfo*) serialize to a stream
class ns1__CScheduleInfo
{ public:
/// Element startdate of type xs:date.
    xsd__date                            startdate                      0;	///< Nillable pointer.
/// Element enddate of type xs:date.
    xsd__date                            enddate                        0;	///< Nillable pointer.
/// Element includeweekends of type xs:boolean.
    bool*                                includeweekends                0;	///< Optional element.
/// Element nonworkingdays of type xs:long.
    LONG64*                              nonworkingdays                 0;	///< Optional element.
/// Element hoursperday of type xs:double.
    double*                              hoursperday                    0;	///< Optional element.
/// Element ptohours of type xs:double.
    double*                              ptohours                       0;	///< Optional element.
/// Element usersavailable of type xs:double.
    double*                              usersavailable                 0;	///< Optional element.
/// Element storypoints of type xs:long.
    LONG64*                              storypoints                    0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":CVersionInfo is a complexType.
/// class ns1__CVersionInfo operations:
/// - soap_new_ns1__CVersionInfo(soap*) allocate
/// - soap_new_ns1__CVersionInfo(soap*, int num) allocate array
/// - soap_new_req_ns1__CVersionInfo(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CVersionInfo(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CVersionInfo(soap*, ns1__CVersionInfo*) deserialize from a stream
/// - int soap_write_ns1__CVersionInfo(soap, ns1__CVersionInfo*) serialize to a stream
class ns1__CVersionInfo
{ public:
/// Element versionNumber of type xs:long.
    LONG64*                              versionNumber                  0;	///< Optional element.
/// Element createdByUser of type xs:string.
    char*                                createdByUser                  0;	///< Nillable pointer.
/// Element dateTimeCreated of type xs:string.
    char*                                dateTimeCreated                0;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":CTreeNodeSoap is a complexType.
/// class ns1__CTreeNodeSoap operations:
/// - soap_new_ns1__CTreeNodeSoap(soap*) allocate
/// - soap_new_ns1__CTreeNodeSoap(soap*, int num) allocate array
/// - soap_new_req_ns1__CTreeNodeSoap(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CTreeNodeSoap(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CTreeNodeSoap(soap*, ns1__CTreeNodeSoap*) deserialize from a stream
/// - int soap_write_ns1__CTreeNodeSoap(soap, ns1__CTreeNodeSoap*) serialize to a stream
class ns1__CTreeNodeSoap
{ public:
/// Element entityTableName of type xs:string.
    char*                                entityTableName                0;	///< Nillable pointer.
/// Element entityRecordID of type xs:long.
    LONG64                               entityRecordID                 1;	///< Required element.
/// Element childList of type "urn:testtrack-interface":ArrayOfCTreeNodeSoap.
    ArrayOfCTreeNodeSoap*                childList                      0;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":CItemHyperlinkContainer is a complexType.
/// class ns1__CItemHyperlinkContainer operations:
/// - soap_new_ns1__CItemHyperlinkContainer(soap*) allocate
/// - soap_new_ns1__CItemHyperlinkContainer(soap*, int num) allocate array
/// - soap_new_req_ns1__CItemHyperlinkContainer(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CItemHyperlinkContainer(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CItemHyperlinkContainer(soap*, ns1__CItemHyperlinkContainer*) deserialize from a stream
/// - int soap_write_ns1__CItemHyperlinkContainer(soap, ns1__CItemHyperlinkContainer*) serialize to a stream
class ns1__CItemHyperlinkContainer
{ public:
/// Element ttstudioHyperlink of type xs:string.
    char*                                ttstudioHyperlink              0;	///< Nillable pointer.
/// Element httpHyperlink of type xs:string.
    char*                                httpHyperlink                  0;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":ArrayOfstring is a complexType with complexContent restriction of SOAP-ENC:Array.
/// class ArrayOfstring operations:
/// - soap_new_ArrayOfstring(soap*) allocate
/// - soap_new_ArrayOfstring(soap*, int num) allocate array
/// - soap_new_req_ArrayOfstring(soap*, ...) allocate, set required members
/// - soap_new_set_ArrayOfstring(soap*, ...) allocate, set all public members
/// - int soap_read_ArrayOfstring(soap*, ArrayOfstring*) deserialize from a stream
/// - int soap_write_ArrayOfstring(soap, ArrayOfstring*) serialize to a stream
/// SOAP encoded array of xs:string
class ArrayOfstring
{ public:
/// Pointer to array of char*.
    char*                               *__ptritem                     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":ArrayOflong is a complexType with complexContent restriction of SOAP-ENC:Array.
/// class ArrayOflong operations:
/// - soap_new_ArrayOflong(soap*) allocate
/// - soap_new_ArrayOflong(soap*, int num) allocate array
/// - soap_new_req_ArrayOflong(soap*, ...) allocate, set required members
/// - soap_new_set_ArrayOflong(soap*, ...) allocate, set all public members
/// - int soap_read_ArrayOflong(soap*, ArrayOflong*) deserialize from a stream
/// - int soap_write_ArrayOflong(soap, ArrayOflong*) serialize to a stream
/// SOAP encoded array of xs:long
class ArrayOflong
{ public:
/// Pointer to array of LONG64.
    LONG64                              *__ptritem                     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":ArrayOfCDatabase is a complexType with complexContent restriction of SOAP-ENC:Array.
/// class ArrayOfCDatabase operations:
/// - soap_new_ArrayOfCDatabase(soap*) allocate
/// - soap_new_ArrayOfCDatabase(soap*, int num) allocate array
/// - soap_new_req_ArrayOfCDatabase(soap*, ...) allocate, set required members
/// - soap_new_set_ArrayOfCDatabase(soap*, ...) allocate, set all public members
/// - int soap_read_ArrayOfCDatabase(soap*, ArrayOfCDatabase*) deserialize from a stream
/// - int soap_write_ArrayOfCDatabase(soap, ArrayOfCDatabase*) serialize to a stream
/// SOAP encoded array of "urn:testtrack-interface":CDatabase
class ArrayOfCDatabase
{ public:
/// Pointer to array of ns1__CDatabase*.
    ns1__CDatabase*                     *__ptritem                     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":ArrayOfCProjectDataOption is a complexType with complexContent restriction of SOAP-ENC:Array.
/// class ArrayOfCProjectDataOption operations:
/// - soap_new_ArrayOfCProjectDataOption(soap*) allocate
/// - soap_new_ArrayOfCProjectDataOption(soap*, int num) allocate array
/// - soap_new_req_ArrayOfCProjectDataOption(soap*, ...) allocate, set required members
/// - soap_new_set_ArrayOfCProjectDataOption(soap*, ...) allocate, set all public members
/// - int soap_read_ArrayOfCProjectDataOption(soap*, ArrayOfCProjectDataOption*) deserialize from a stream
/// - int soap_write_ArrayOfCProjectDataOption(soap, ArrayOfCProjectDataOption*) serialize to a stream
/// SOAP encoded array of "urn:testtrack-interface":CProjectDataOption
class ArrayOfCProjectDataOption
{ public:
/// Pointer to array of ns1__CProjectDataOption*.
    ns1__CProjectDataOption*            *__ptritem                     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":ArrayOfCProject is a complexType with complexContent restriction of SOAP-ENC:Array.
/// class ArrayOfCProject operations:
/// - soap_new_ArrayOfCProject(soap*) allocate
/// - soap_new_ArrayOfCProject(soap*, int num) allocate array
/// - soap_new_req_ArrayOfCProject(soap*, ...) allocate, set required members
/// - soap_new_set_ArrayOfCProject(soap*, ...) allocate, set all public members
/// - int soap_read_ArrayOfCProject(soap*, ArrayOfCProject*) deserialize from a stream
/// - int soap_write_ArrayOfCProject(soap, ArrayOfCProject*) serialize to a stream
/// SOAP encoded array of "urn:testtrack-interface":CProject
class ArrayOfCProject
{ public:
/// Pointer to array of ns1__CProject*.
    ns1__CProject*                      *__ptritem                     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":ArrayOfCDatabaseTable is a complexType with complexContent restriction of SOAP-ENC:Array.
/// class ArrayOfCDatabaseTable operations:
/// - soap_new_ArrayOfCDatabaseTable(soap*) allocate
/// - soap_new_ArrayOfCDatabaseTable(soap*, int num) allocate array
/// - soap_new_req_ArrayOfCDatabaseTable(soap*, ...) allocate, set required members
/// - soap_new_set_ArrayOfCDatabaseTable(soap*, ...) allocate, set all public members
/// - int soap_read_ArrayOfCDatabaseTable(soap*, ArrayOfCDatabaseTable*) deserialize from a stream
/// - int soap_write_ArrayOfCDatabaseTable(soap, ArrayOfCDatabaseTable*) serialize to a stream
/// SOAP encoded array of "urn:testtrack-interface":CDatabaseTable
class ArrayOfCDatabaseTable
{ public:
/// Pointer to array of ns1__CDatabaseTable*.
    ns1__CDatabaseTable*                *__ptritem                     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":ArrayOfCTableField is a complexType with complexContent restriction of SOAP-ENC:Array.
/// class ArrayOfCTableField operations:
/// - soap_new_ArrayOfCTableField(soap*) allocate
/// - soap_new_ArrayOfCTableField(soap*, int num) allocate array
/// - soap_new_req_ArrayOfCTableField(soap*, ...) allocate, set required members
/// - soap_new_set_ArrayOfCTableField(soap*, ...) allocate, set all public members
/// - int soap_read_ArrayOfCTableField(soap*, ArrayOfCTableField*) deserialize from a stream
/// - int soap_write_ArrayOfCTableField(soap, ArrayOfCTableField*) serialize to a stream
/// SOAP encoded array of "urn:testtrack-interface":CTableField
class ArrayOfCTableField
{ public:
/// Pointer to array of ns1__CTableField*.
    ns1__CTableField*                   *__ptritem                     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":ArrayOfCFieldValue is a complexType with complexContent restriction of SOAP-ENC:Array.
/// class ArrayOfCFieldValue operations:
/// - soap_new_ArrayOfCFieldValue(soap*) allocate
/// - soap_new_ArrayOfCFieldValue(soap*, int num) allocate array
/// - soap_new_req_ArrayOfCFieldValue(soap*, ...) allocate, set required members
/// - soap_new_set_ArrayOfCFieldValue(soap*, ...) allocate, set all public members
/// - int soap_read_ArrayOfCFieldValue(soap*, ArrayOfCFieldValue*) deserialize from a stream
/// - int soap_write_ArrayOfCFieldValue(soap, ArrayOfCFieldValue*) serialize to a stream
/// SOAP encoded array of "urn:testtrack-interface":CFieldValue
class ArrayOfCFieldValue
{ public:
/// Pointer to array of ns1__CFieldValue*.
    ns1__CFieldValue*                   *__ptritem                     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":ArrayOfCTableColumn is a complexType with complexContent restriction of SOAP-ENC:Array.
/// class ArrayOfCTableColumn operations:
/// - soap_new_ArrayOfCTableColumn(soap*) allocate
/// - soap_new_ArrayOfCTableColumn(soap*, int num) allocate array
/// - soap_new_req_ArrayOfCTableColumn(soap*, ...) allocate, set required members
/// - soap_new_set_ArrayOfCTableColumn(soap*, ...) allocate, set all public members
/// - int soap_read_ArrayOfCTableColumn(soap*, ArrayOfCTableColumn*) deserialize from a stream
/// - int soap_write_ArrayOfCTableColumn(soap, ArrayOfCTableColumn*) serialize to a stream
/// SOAP encoded array of "urn:testtrack-interface":CTableColumn
class ArrayOfCTableColumn
{ public:
/// Pointer to array of ns1__CTableColumn*.
    ns1__CTableColumn*                  *__ptritem                     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":ArrayOfCFilter is a complexType with complexContent restriction of SOAP-ENC:Array.
/// class ArrayOfCFilter operations:
/// - soap_new_ArrayOfCFilter(soap*) allocate
/// - soap_new_ArrayOfCFilter(soap*, int num) allocate array
/// - soap_new_req_ArrayOfCFilter(soap*, ...) allocate, set required members
/// - soap_new_set_ArrayOfCFilter(soap*, ...) allocate, set all public members
/// - int soap_read_ArrayOfCFilter(soap*, ArrayOfCFilter*) deserialize from a stream
/// - int soap_write_ArrayOfCFilter(soap, ArrayOfCFilter*) serialize to a stream
/// SOAP encoded array of "urn:testtrack-interface":CFilter
class ArrayOfCFilter
{ public:
/// Pointer to array of ns1__CFilter*.
    ns1__CFilter*                       *__ptritem                     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":ArrayOfCRecordData is a complexType with complexContent restriction of SOAP-ENC:Array.
/// class ArrayOfCRecordData operations:
/// - soap_new_ArrayOfCRecordData(soap*) allocate
/// - soap_new_ArrayOfCRecordData(soap*, int num) allocate array
/// - soap_new_req_ArrayOfCRecordData(soap*, ...) allocate, set required members
/// - soap_new_set_ArrayOfCRecordData(soap*, ...) allocate, set all public members
/// - int soap_read_ArrayOfCRecordData(soap*, ArrayOfCRecordData*) deserialize from a stream
/// - int soap_write_ArrayOfCRecordData(soap, ArrayOfCRecordData*) serialize to a stream
/// SOAP encoded array of "urn:testtrack-interface":CRecordData
class ArrayOfCRecordData
{ public:
/// Pointer to array of ns1__CRecordData*.
    ns1__CRecordData*                   *__ptritem                     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":ArrayOfCRecordRowSoap is a complexType with complexContent restriction of SOAP-ENC:Array.
/// class ArrayOfCRecordRowSoap operations:
/// - soap_new_ArrayOfCRecordRowSoap(soap*) allocate
/// - soap_new_ArrayOfCRecordRowSoap(soap*, int num) allocate array
/// - soap_new_req_ArrayOfCRecordRowSoap(soap*, ...) allocate, set required members
/// - soap_new_set_ArrayOfCRecordRowSoap(soap*, ...) allocate, set all public members
/// - int soap_read_ArrayOfCRecordRowSoap(soap*, ArrayOfCRecordRowSoap*) deserialize from a stream
/// - int soap_write_ArrayOfCRecordRowSoap(soap, ArrayOfCRecordRowSoap*) serialize to a stream
/// SOAP encoded array of "urn:testtrack-interface":CRecordRowSoap
class ArrayOfCRecordRowSoap
{ public:
/// Pointer to array of ns1__CRecordRowSoap*.
    ns1__CRecordRowSoap*                *__ptritem                     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":CItemToTrack is a complexType with complexContent extension of "urn:testtrack-interface":CItemWithDBRecordId.
/// @brief Inherits from CItemWithDBRecordID. Extends the CItemWithDBRecordID structure, allowing it to be used polymorphically to create more advanced structures such as CTestCase.
/// class ns1__CItemToTrack operations:
/// - soap_new_ns1__CItemToTrack(soap*) allocate
/// - soap_new_ns1__CItemToTrack(soap*, int num) allocate array
/// - soap_new_req_ns1__CItemToTrack(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CItemToTrack(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CItemToTrack(soap*, ns1__CItemToTrack*) deserialize from a stream
/// - int soap_write_ns1__CItemToTrack(soap, ns1__CItemToTrack*) serialize to a stream
class ns1__CItemToTrack
{ public:
/// INHERITED FROM ns1__CItemWithDBRecordId:
/// Element recordid of type xs:long.
    LONG64                               recordid                       1;	///< Required element.
//  END OF INHERITED FROM ns1__CItemWithDBRecordId
};

/// "urn:testtrack-interface":COrderedItemWithDBRecordId is a complexType with complexContent extension of "urn:testtrack-interface":CItemWithDBRecordId.
/// @brief Inherits from CItemWithDBRecordID. Extends the CItemWithDBRecordID type by adding an element that represents its order in a list. Used by CLinkedItem and CLinkHistoryItem, where the order of items is important.
/// class ns1__COrderedItemWithDBRecordId operations:
/// - soap_new_ns1__COrderedItemWithDBRecordId(soap*) allocate
/// - soap_new_ns1__COrderedItemWithDBRecordId(soap*, int num) allocate array
/// - soap_new_req_ns1__COrderedItemWithDBRecordId(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__COrderedItemWithDBRecordId(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__COrderedItemWithDBRecordId(soap*, ns1__COrderedItemWithDBRecordId*) deserialize from a stream
/// - int soap_write_ns1__COrderedItemWithDBRecordId(soap, ns1__COrderedItemWithDBRecordId*) serialize to a stream
class ns1__COrderedItemWithDBRecordId
{ public:
/// INHERITED FROM ns1__CItemWithDBRecordId:
/// Element recordid of type xs:long.
    LONG64                               recordid                       1;	///< Required element.
//  END OF INHERITED FROM ns1__CItemWithDBRecordId
/// Element order of type xs:long.
    LONG64                               order                          1;	///< Required element.
};

/// "urn:testtrack-interface":CSCCFileRecord is a complexType with complexContent extension of "urn:testtrack-interface":CItemWithDBRecordId.
/// @brief Inherits from CItemWithDBRecordID. Stores the source control information about files associated with the record. Structure is an extension of the CItemWithDBRecordID structure because the server tracks a unique CSSCFileRecord for each source control file associated with a record.
/// class ns1__CSCCFileRecord operations:
/// - soap_new_ns1__CSCCFileRecord(soap*) allocate
/// - soap_new_ns1__CSCCFileRecord(soap*, int num) allocate array
/// - soap_new_req_ns1__CSCCFileRecord(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CSCCFileRecord(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CSCCFileRecord(soap*, ns1__CSCCFileRecord*) deserialize from a stream
/// - int soap_write_ns1__CSCCFileRecord(soap, ns1__CSCCFileRecord*) serialize to a stream
class ns1__CSCCFileRecord
{ public:
/// INHERITED FROM ns1__CItemWithDBRecordId:
/// Element recordid of type xs:long.
    LONG64                               recordid                       1;	///< Required element.
//  END OF INHERITED FROM ns1__CItemWithDBRecordId
/// Element m-strFileName of type xs:string.
    char*                                m_strFileName                  1;	///< Required element.
/// Element m-strFixedRevision of type xs:string.
    char*                                m_strFixedRevision             0;	///< Nillable pointer.
/// Element m-dateFixedTimestamp of type xs:dateTime.
    time_t*                              m_dateFixedTimestamp           0;	///< Nillable pointer.
/// Element m-strType of type xs:string.
    char*                                m_strType                      0;	///< Nillable pointer.
/// Element m-scriptOrder of type xs:long.
    LONG64*                              m_scriptOrder                  0;	///< Optional element.
/// Element m-strScriptState of type xs:string.
    char*                                m_strScriptState               0;	///< Nillable pointer.
};

/// "urn:testtrack-interface":ArrayOfCSCCFileRecord is a complexType with complexContent restriction of SOAP-ENC:Array.
/// class ArrayOfCSCCFileRecord operations:
/// - soap_new_ArrayOfCSCCFileRecord(soap*) allocate
/// - soap_new_ArrayOfCSCCFileRecord(soap*, int num) allocate array
/// - soap_new_req_ArrayOfCSCCFileRecord(soap*, ...) allocate, set required members
/// - soap_new_set_ArrayOfCSCCFileRecord(soap*, ...) allocate, set all public members
/// - int soap_read_ArrayOfCSCCFileRecord(soap*, ArrayOfCSCCFileRecord*) deserialize from a stream
/// - int soap_write_ArrayOfCSCCFileRecord(soap, ArrayOfCSCCFileRecord*) serialize to a stream
/// SOAP encoded array of "urn:testtrack-interface":CSCCFileRecord
class ArrayOfCSCCFileRecord
{ public:
/// Pointer to array of ns1__CSCCFileRecord*.
    ns1__CSCCFileRecord*                *__ptritem                     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":ArrayOfCFile is a complexType with complexContent restriction of SOAP-ENC:Array.
/// class ArrayOfCFile operations:
/// - soap_new_ArrayOfCFile(soap*) allocate
/// - soap_new_ArrayOfCFile(soap*, int num) allocate array
/// - soap_new_req_ArrayOfCFile(soap*, ...) allocate, set required members
/// - soap_new_set_ArrayOfCFile(soap*, ...) allocate, set all public members
/// - int soap_read_ArrayOfCFile(soap*, ArrayOfCFile*) deserialize from a stream
/// - int soap_write_ArrayOfCFile(soap, ArrayOfCFile*) serialize to a stream
/// SOAP encoded array of "urn:testtrack-interface":CFile
class ArrayOfCFile
{ public:
/// Pointer to array of ns1__CFile*.
    ns1__CFile*                         *__ptritem                     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":CFileAttachment is a complexType with complexContent extension of "urn:testtrack-interface":CFile.
/// @brief Stores binary data for a file attached to a CReportedByRecord. The xsd:base64binary type contains two elements: _ptr and _size. The _ptr member stores binary data of the file and the _size specifies the length of data. When retrieving a CFileAttachment from the server, caller must create a file and copy the data from the m-pFileData into the file. When saving a CFileAttachment to the server, the caller must copy the data from the file and place it in the m-pFileData member.
/// class ns1__CFileAttachment operations:
/// - soap_new_ns1__CFileAttachment(soap*) allocate
/// - soap_new_ns1__CFileAttachment(soap*, int num) allocate array
/// - soap_new_req_ns1__CFileAttachment(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CFileAttachment(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CFileAttachment(soap*, ns1__CFileAttachment*) deserialize from a stream
/// - int soap_write_ns1__CFileAttachment(soap, ns1__CFileAttachment*) serialize to a stream
class ns1__CFileAttachment
{ public:
/// INHERITED FROM ns1__CFile:
/// Element m-pFileData of type xs:base64Binary.
    xsd__base64Binary*                   m_pFileData                    0;	///< Nillable pointer.
/// Element m-strFileName of type xs:string.
    char*                                m_strFileName                  0;	///< Nillable pointer.
//  END OF INHERITED FROM ns1__CFile
/// Element m-recordid of type xs:long.
    LONG64                               m_recordid                     1;	///< Required element.
/// Element m-strArchiveName of type xs:string.
    char*                                m_strArchiveName               0;	///< Nillable pointer.
/// Element m-strType of type xs:string.
    char*                                m_strType                      0;	///< Nillable pointer.
/// Element m-scriptOrder of type xs:long.
    LONG64*                              m_scriptOrder                  0;	///< Optional element.
/// Element m-strScriptState of type xs:string.
    char*                                m_strScriptState               0;	///< Nillable pointer.
};

/// "urn:testtrack-interface":ArrayOfCFileAttachment is a complexType with complexContent restriction of SOAP-ENC:Array.
/// class ArrayOfCFileAttachment operations:
/// - soap_new_ArrayOfCFileAttachment(soap*) allocate
/// - soap_new_ArrayOfCFileAttachment(soap*, int num) allocate array
/// - soap_new_req_ArrayOfCFileAttachment(soap*, ...) allocate, set required members
/// - soap_new_set_ArrayOfCFileAttachment(soap*, ...) allocate, set all public members
/// - int soap_read_ArrayOfCFileAttachment(soap*, ArrayOfCFileAttachment*) deserialize from a stream
/// - int soap_write_ArrayOfCFileAttachment(soap, ArrayOfCFileAttachment*) serialize to a stream
/// SOAP encoded array of "urn:testtrack-interface":CFileAttachment
class ArrayOfCFileAttachment
{ public:
/// Pointer to array of ns1__CFileAttachment*.
    ns1__CFileAttachment*               *__ptritem                     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":CReportedByRecord is a complexType with complexContent extension of "urn:testtrack-interface":CItemWithDBRecordId.
/// class ns1__CReportedByRecord operations:
/// - soap_new_ns1__CReportedByRecord(soap*) allocate
/// - soap_new_ns1__CReportedByRecord(soap*, int num) allocate array
/// - soap_new_req_ns1__CReportedByRecord(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CReportedByRecord(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CReportedByRecord(soap*, ns1__CReportedByRecord*) deserialize from a stream
/// - int soap_write_ns1__CReportedByRecord(soap, ns1__CReportedByRecord*) serialize to a stream
class ns1__CReportedByRecord
{ public:
/// INHERITED FROM ns1__CItemWithDBRecordId:
/// Element recordid of type xs:long.
    LONG64                               recordid                       1;	///< Required element.
//  END OF INHERITED FROM ns1__CItemWithDBRecordId
/// Element foundby of type xs:string.
    char*                                foundby                        0;	///< Nillable pointer.
/// Element datefound of type xs:date.
    xsd__date                            datefound                      0;	///< Nillable pointer.
/// Element contactinfo of type xs:string.
    char*                                contactinfo                    0;	///< Nillable pointer.
/// Element foundinversion of type xs:string.
    char*                                foundinversion                 0;	///< Nillable pointer.
/// Element comments of type xs:string.
    char*                                comments                       0;	///< Nillable pointer.
/// Element commentsInlineAttachList of type "urn:testtrack-interface":ArrayOfCFileAttachment.
    ArrayOfCFileAttachment*              commentsInlineAttachList       0;	///< Nillable pointer.
/// Element reproduced of type xs:string.
    char*                                reproduced                     0;	///< Nillable pointer.
/// Element reproducedsteps of type xs:string.
    char*                                reproducedsteps                0;	///< Nillable pointer.
/// Element reproStepsInlineAttachList of type "urn:testtrack-interface":ArrayOfCFileAttachment.
    ArrayOfCFileAttachment*              reproStepsInlineAttachList     0;	///< Nillable pointer.
/// Element standardtestconfig of type "urn:testtrack-interface":CSystem.
    ns1__CSystem*                        standardtestconfig             0;	///< Nillable pointer.
/// Element otherhardwaresoftware of type xs:string.
    char*                                otherhardwaresoftware          0;	///< Nillable pointer.
/// Element otherHWSWInlineAttachList of type "urn:testtrack-interface":ArrayOfCFileAttachment.
    ArrayOfCFileAttachment*              otherHWSWInlineAttachList      0;	///< Nillable pointer.
/// Element testconfigtype of type xs:short.
    short*                               testconfigtype                 0;	///< Optional element.
/// Element attachmentlist of type "urn:testtrack-interface":ArrayOfCFileAttachment.
    ArrayOfCFileAttachment*              attachmentlist                 0;	///< Nillable pointer.
/// Element showorder of type xs:short.
    short                                showorder                      1;	///< Required element.
};

/// "urn:testtrack-interface":ArrayOfCReportedByRecord is a complexType with complexContent restriction of SOAP-ENC:Array.
/// class ArrayOfCReportedByRecord operations:
/// - soap_new_ArrayOfCReportedByRecord(soap*) allocate
/// - soap_new_ArrayOfCReportedByRecord(soap*, int num) allocate array
/// - soap_new_req_ArrayOfCReportedByRecord(soap*, ...) allocate, set required members
/// - soap_new_set_ArrayOfCReportedByRecord(soap*, ...) allocate, set all public members
/// - int soap_read_ArrayOfCReportedByRecord(soap*, ArrayOfCReportedByRecord*) deserialize from a stream
/// - int soap_write_ArrayOfCReportedByRecord(soap, ArrayOfCReportedByRecord*) serialize to a stream
/// SOAP encoded array of "urn:testtrack-interface":CReportedByRecord
class ArrayOfCReportedByRecord
{ public:
/// Pointer to array of ns1__CReportedByRecord*.
    ns1__CReportedByRecord*             *__ptritem                     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":CField is a complexType with complexContent extension of "urn:testtrack-interface":CItemWithDBRecordId.
/// @brief Inherits from CItemWithDBRecordID. Superclass for all field classes (e.g., CStringField, CIntegerField). This class is necessary so the ArrayOfCField polymorphic array can have a mixed collection of field objects.
/// class ns1__CField operations:
/// - soap_new_ns1__CField(soap*) allocate
/// - soap_new_ns1__CField(soap*, int num) allocate array
/// - soap_new_req_ns1__CField(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CField(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CField(soap*, ns1__CField*) deserialize from a stream
/// - int soap_write_ns1__CField(soap, ns1__CField*) serialize to a stream
class ns1__CField
{ public:
/// INHERITED FROM ns1__CItemWithDBRecordId:
/// Element recordid of type xs:long.
    LONG64                               recordid                       1;	///< Required element.
//  END OF INHERITED FROM ns1__CItemWithDBRecordId
/// Element name of type xs:string.
    char*                                name                           1;	///< Required element.
};

/// "urn:testtrack-interface":ArrayOfCField is a complexType with complexContent restriction of SOAP-ENC:Array.
/// class ArrayOfCField operations:
/// - soap_new_ArrayOfCField(soap*) allocate
/// - soap_new_ArrayOfCField(soap*, int num) allocate array
/// - soap_new_req_ArrayOfCField(soap*, ...) allocate, set required members
/// - soap_new_set_ArrayOfCField(soap*, ...) allocate, set all public members
/// - int soap_read_ArrayOfCField(soap*, ArrayOfCField*) deserialize from a stream
/// - int soap_write_ArrayOfCField(soap, ArrayOfCField*) serialize to a stream
/// SOAP encoded array of "urn:testtrack-interface":CField
class ArrayOfCField
{ public:
/// Pointer to array of ns1__CField*.
    ns1__CField*                        *__ptritem                     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":ArrayOfCTestRunVariantField is a complexType with complexContent restriction of SOAP-ENC:Array.
/// class ArrayOfCTestRunVariantField operations:
/// - soap_new_ArrayOfCTestRunVariantField(soap*) allocate
/// - soap_new_ArrayOfCTestRunVariantField(soap*, int num) allocate array
/// - soap_new_req_ArrayOfCTestRunVariantField(soap*, ...) allocate, set required members
/// - soap_new_set_ArrayOfCTestRunVariantField(soap*, ...) allocate, set all public members
/// - int soap_read_ArrayOfCTestRunVariantField(soap*, ArrayOfCTestRunVariantField*) deserialize from a stream
/// - int soap_write_ArrayOfCTestRunVariantField(soap, ArrayOfCTestRunVariantField*) serialize to a stream
/// SOAP encoded array of "urn:testtrack-interface":CTestRunVariantField
class ArrayOfCTestRunVariantField
{ public:
/// Pointer to array of ns1__CTestRunVariantField*.
    ns1__CTestRunVariantField*          *__ptritem                     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":ArrayOfCTestCaseVariantField is a complexType with complexContent restriction of SOAP-ENC:Array.
/// class ArrayOfCTestCaseVariantField operations:
/// - soap_new_ArrayOfCTestCaseVariantField(soap*) allocate
/// - soap_new_ArrayOfCTestCaseVariantField(soap*, int num) allocate array
/// - soap_new_req_ArrayOfCTestCaseVariantField(soap*, ...) allocate, set required members
/// - soap_new_set_ArrayOfCTestCaseVariantField(soap*, ...) allocate, set all public members
/// - int soap_read_ArrayOfCTestCaseVariantField(soap*, ArrayOfCTestCaseVariantField*) deserialize from a stream
/// - int soap_write_ArrayOfCTestCaseVariantField(soap, ArrayOfCTestCaseVariantField*) serialize to a stream
/// SOAP encoded array of "urn:testtrack-interface":CTestCaseVariantField
class ArrayOfCTestCaseVariantField
{ public:
/// Pointer to array of ns1__CTestCaseVariantField*.
    ns1__CTestCaseVariantField*         *__ptritem                     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":CEvent is a complexType with complexContent extension of "urn:testtrack-interface":CItemWithDBRecordId.
/// @brief The base used for all events. All events extend this structure.
/// class ns1__CEvent operations:
/// - soap_new_ns1__CEvent(soap*) allocate
/// - soap_new_ns1__CEvent(soap*, int num) allocate array
/// - soap_new_req_ns1__CEvent(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CEvent(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CEvent(soap*, ns1__CEvent*) deserialize from a stream
/// - int soap_write_ns1__CEvent(soap, ns1__CEvent*) serialize to a stream
class ns1__CEvent
{ public:
/// INHERITED FROM ns1__CItemWithDBRecordId:
/// Element recordid of type xs:long.
    LONG64                               recordid                       1;	///< Required element.
//  END OF INHERITED FROM ns1__CItemWithDBRecordId
/// Element user of type xs:string.
    char*                                user                           0;	///< Nillable pointer.
/// Element date of type xs:dateTime.
    time_t                               date                           1;	///< Required element.
/// Element notes of type xs:string.
    char*                                notes                          0;	///< Nillable pointer.
/// Element eventaddorder of type xs:short.
    short                                eventaddorder                  1;	///< Required element.
/// Element name of type xs:string.
    char*                                name                           0;	///< Nillable pointer.
/// Element parenteventid of type xs:long.
    LONG64*                              parenteventid                  0;	///< Optional element.
/// Element attachmentlist of type "urn:testtrack-interface":ArrayOfCFileAttachment.
    ArrayOfCFileAttachment*              attachmentlist                 0;	///< Nillable pointer.
/// Element fieldlist of type "urn:testtrack-interface":ArrayOfCField.
    ArrayOfCField*                       fieldlist                      0;	///< Nillable pointer.
/// Element resultingstate of type xs:string.
    char*                                resultingstate                 0;	///< Nillable pointer.
/// Element hours of type xs:double.
    double*                              hours                          0;	///< Optional element.
/// Element assigntolist of type "urn:testtrack-interface":ArrayOfstring.
    ArrayOfstring*                       assigntolist                   0;	///< Nillable pointer.
/// Element releasenotesversion of type xs:string.
    char*                                releasenotesversion            0;	///< Nillable pointer.
/// Element generatedeventtype of type xs:string.
    char*                                generatedeventtype             0;	///< Nillable pointer.
/// Element generatedbyname of type xs:string.
    char*                                generatedbyname                0;	///< Nillable pointer.
/// Element totaltimespent of type xs:double.
    double*                              totaltimespent                 0;	///< Optional element.
/// Element overrideuser of type xs:string.
    char*                                overrideuser                   0;	///< Nillable pointer.
/// Element marksuspect of type xs:boolean.
    bool*                                marksuspect                    0;	///< Optional element.
};

/// "urn:testtrack-interface":ArrayOfCEvent is a complexType with complexContent restriction of SOAP-ENC:Array.
/// class ArrayOfCEvent operations:
/// - soap_new_ArrayOfCEvent(soap*) allocate
/// - soap_new_ArrayOfCEvent(soap*, int num) allocate array
/// - soap_new_req_ArrayOfCEvent(soap*, ...) allocate, set required members
/// - soap_new_set_ArrayOfCEvent(soap*, ...) allocate, set all public members
/// - int soap_read_ArrayOfCEvent(soap*, ArrayOfCEvent*) deserialize from a stream
/// - int soap_write_ArrayOfCEvent(soap, ArrayOfCEvent*) serialize to a stream
/// SOAP encoded array of "urn:testtrack-interface":CEvent
class ArrayOfCEvent
{ public:
/// Pointer to array of ns1__CEvent*.
    ns1__CEvent*                        *__ptritem                     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":ArrayOfCDefectEvent is a complexType with complexContent restriction of SOAP-ENC:Array.
/// class ArrayOfCDefectEvent operations:
/// - soap_new_ArrayOfCDefectEvent(soap*) allocate
/// - soap_new_ArrayOfCDefectEvent(soap*, int num) allocate array
/// - soap_new_req_ArrayOfCDefectEvent(soap*, ...) allocate, set required members
/// - soap_new_set_ArrayOfCDefectEvent(soap*, ...) allocate, set all public members
/// - int soap_read_ArrayOfCDefectEvent(soap*, ArrayOfCDefectEvent*) deserialize from a stream
/// - int soap_write_ArrayOfCDefectEvent(soap, ArrayOfCDefectEvent*) serialize to a stream
/// SOAP encoded array of "urn:testtrack-interface":CDefectEvent
class ArrayOfCDefectEvent
{ public:
/// Pointer to array of ns1__CDefectEvent*.
    ns1__CDefectEvent*                  *__ptritem                     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":ArrayOfCEventDefinition is a complexType with complexContent restriction of SOAP-ENC:Array.
/// class ArrayOfCEventDefinition operations:
/// - soap_new_ArrayOfCEventDefinition(soap*) allocate
/// - soap_new_ArrayOfCEventDefinition(soap*, int num) allocate array
/// - soap_new_req_ArrayOfCEventDefinition(soap*, ...) allocate, set required members
/// - soap_new_set_ArrayOfCEventDefinition(soap*, ...) allocate, set all public members
/// - int soap_read_ArrayOfCEventDefinition(soap*, ArrayOfCEventDefinition*) deserialize from a stream
/// - int soap_write_ArrayOfCEventDefinition(soap, ArrayOfCEventDefinition*) serialize to a stream
/// SOAP encoded array of "urn:testtrack-interface":CEventDefinition
class ArrayOfCEventDefinition
{ public:
/// Pointer to array of ns1__CEventDefinition*.
    ns1__CEventDefinition*              *__ptritem                     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":CDefectEventDefinition is a complexType with complexContent extension of "urn:testtrack-interface":CEventDefinition.
/// @brief Deprecated; use CEventDefinition
/// class ns1__CDefectEventDefinition operations:
/// - soap_new_ns1__CDefectEventDefinition(soap*) allocate
/// - soap_new_ns1__CDefectEventDefinition(soap*, int num) allocate array
/// - soap_new_req_ns1__CDefectEventDefinition(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CDefectEventDefinition(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CDefectEventDefinition(soap*, ns1__CDefectEventDefinition*) deserialize from a stream
/// - int soap_write_ns1__CDefectEventDefinition(soap, ns1__CDefectEventDefinition*) serialize to a stream
class ns1__CDefectEventDefinition
{ public:
/// INHERITED FROM ns1__CEventDefinition:
/// Element name of type xs:string.
    char*                                name                           0;	///< Nillable pointer.
/// Element user of type xs:boolean.
    bool*                                user                           0;	///< Optional element.
/// Element datetime of type xs:boolean.
    bool*                                datetime                       0;	///< Optional element.
/// Element notes of type xs:boolean.
    bool*                                notes                          0;	///< Optional element.
/// Element resultingState of type xs:boolean.
    bool*                                resultingState                 0;	///< Optional element.
/// Element resultingStateValues of type "urn:testtrack-interface":ArrayOfCFieldValue.
    ArrayOfCFieldValue*                  resultingStateValues           0;	///< Nillable pointer.
/// Element fileattachments of type xs:boolean.
    bool*                                fileattachments                0;	///< Optional element.
/// Element timeTracking of type xs:boolean.
    bool*                                timeTracking                   0;	///< Optional element.
/// Element timeSumOfAll of type xs:boolean.
    bool*                                timeSumOfAll                   0;	///< Optional element.
/// Element timeHoursSinceLast of type xs:boolean.
    bool*                                timeHoursSinceLast             0;	///< Optional element.
/// Element newAssignment of type xs:boolean.
    bool*                                newAssignment                  0;	///< Optional element.
/// Element releaseNotes of type xs:boolean.
    bool*                                releaseNotes                   0;	///< Optional element.
/// Element marksuspect of type xs:boolean.
    bool*                                marksuspect                    0;	///< Optional element.
/// Element reviewnote of type xs:boolean.
    bool*                                reviewnote                     0;	///< Optional element.
/// Element customFields of type "urn:testtrack-interface":ArrayOfCField.
    ArrayOfCField*                       customFields                   0;	///< Nillable pointer.
//  END OF INHERITED FROM ns1__CEventDefinition
};

/// "urn:testtrack-interface":ArrayOfCDefectEventDefinition is a complexType with complexContent restriction of SOAP-ENC:Array.
/// class ArrayOfCDefectEventDefinition operations:
/// - soap_new_ArrayOfCDefectEventDefinition(soap*) allocate
/// - soap_new_ArrayOfCDefectEventDefinition(soap*, int num) allocate array
/// - soap_new_req_ArrayOfCDefectEventDefinition(soap*, ...) allocate, set required members
/// - soap_new_set_ArrayOfCDefectEventDefinition(soap*, ...) allocate, set all public members
/// - int soap_read_ArrayOfCDefectEventDefinition(soap*, ArrayOfCDefectEventDefinition*) deserialize from a stream
/// - int soap_write_ArrayOfCDefectEventDefinition(soap, ArrayOfCDefectEventDefinition*) serialize to a stream
/// SOAP encoded array of "urn:testtrack-interface":CDefectEventDefinition
class ArrayOfCDefectEventDefinition
{ public:
/// Pointer to array of ns1__CDefectEventDefinition*.
    ns1__CDefectEventDefinition*        *__ptritem                     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":ArrayOfCGlobalUser is a complexType with complexContent restriction of SOAP-ENC:Array.
/// class ArrayOfCGlobalUser operations:
/// - soap_new_ArrayOfCGlobalUser(soap*) allocate
/// - soap_new_ArrayOfCGlobalUser(soap*, int num) allocate array
/// - soap_new_req_ArrayOfCGlobalUser(soap*, ...) allocate, set required members
/// - soap_new_set_ArrayOfCGlobalUser(soap*, ...) allocate, set all public members
/// - int soap_read_ArrayOfCGlobalUser(soap*, ArrayOfCGlobalUser*) deserialize from a stream
/// - int soap_write_ArrayOfCGlobalUser(soap, ArrayOfCGlobalUser*) serialize to a stream
/// SOAP encoded array of "urn:testtrack-interface":CGlobalUser
class ArrayOfCGlobalUser
{ public:
/// Pointer to array of ns1__CGlobalUser*.
    ns1__CGlobalUser*                   *__ptritem                     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":ArrayOfCUserLicense is a complexType with complexContent restriction of SOAP-ENC:Array.
/// class ArrayOfCUserLicense operations:
/// - soap_new_ArrayOfCUserLicense(soap*) allocate
/// - soap_new_ArrayOfCUserLicense(soap*, int num) allocate array
/// - soap_new_req_ArrayOfCUserLicense(soap*, ...) allocate, set required members
/// - soap_new_set_ArrayOfCUserLicense(soap*, ...) allocate, set all public members
/// - int soap_read_ArrayOfCUserLicense(soap*, ArrayOfCUserLicense*) deserialize from a stream
/// - int soap_write_ArrayOfCUserLicense(soap, ArrayOfCUserLicense*) serialize to a stream
/// SOAP encoded array of "urn:testtrack-interface":CUserLicense
class ArrayOfCUserLicense
{ public:
/// Pointer to array of ns1__CUserLicense*.
    ns1__CUserLicense*                  *__ptritem                     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":ArrayOfCLinkedItem is a complexType with complexContent restriction of SOAP-ENC:Array.
/// class ArrayOfCLinkedItem operations:
/// - soap_new_ArrayOfCLinkedItem(soap*) allocate
/// - soap_new_ArrayOfCLinkedItem(soap*, int num) allocate array
/// - soap_new_req_ArrayOfCLinkedItem(soap*, ...) allocate, set required members
/// - soap_new_set_ArrayOfCLinkedItem(soap*, ...) allocate, set all public members
/// - int soap_read_ArrayOfCLinkedItem(soap*, ArrayOfCLinkedItem*) deserialize from a stream
/// - int soap_write_ArrayOfCLinkedItem(soap, ArrayOfCLinkedItem*) serialize to a stream
/// SOAP encoded array of "urn:testtrack-interface":CLinkedItem
class ArrayOfCLinkedItem
{ public:
/// Pointer to array of ns1__CLinkedItem*.
    ns1__CLinkedItem*                   *__ptritem                     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":ArrayOfCLinkHistoryItem is a complexType with complexContent restriction of SOAP-ENC:Array.
/// class ArrayOfCLinkHistoryItem operations:
/// - soap_new_ArrayOfCLinkHistoryItem(soap*) allocate
/// - soap_new_ArrayOfCLinkHistoryItem(soap*, int num) allocate array
/// - soap_new_req_ArrayOfCLinkHistoryItem(soap*, ...) allocate, set required members
/// - soap_new_set_ArrayOfCLinkHistoryItem(soap*, ...) allocate, set all public members
/// - int soap_read_ArrayOfCLinkHistoryItem(soap*, ArrayOfCLinkHistoryItem*) deserialize from a stream
/// - int soap_write_ArrayOfCLinkHistoryItem(soap, ArrayOfCLinkHistoryItem*) serialize to a stream
/// SOAP encoded array of "urn:testtrack-interface":CLinkHistoryItem
class ArrayOfCLinkHistoryItem
{ public:
/// Pointer to array of ns1__CLinkHistoryItem*.
    ns1__CLinkHistoryItem*              *__ptritem                     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":ArrayOfCLink is a complexType with complexContent restriction of SOAP-ENC:Array.
/// class ArrayOfCLink operations:
/// - soap_new_ArrayOfCLink(soap*) allocate
/// - soap_new_ArrayOfCLink(soap*, int num) allocate array
/// - soap_new_req_ArrayOfCLink(soap*, ...) allocate, set required members
/// - soap_new_set_ArrayOfCLink(soap*, ...) allocate, set all public members
/// - int soap_read_ArrayOfCLink(soap*, ArrayOfCLink*) deserialize from a stream
/// - int soap_write_ArrayOfCLink(soap, ArrayOfCLink*) serialize to a stream
/// SOAP encoded array of "urn:testtrack-interface":CLink
class ArrayOfCLink
{ public:
/// Pointer to array of ns1__CLink*.
    ns1__CLink*                         *__ptritem                     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":ArrayOfCItemToTrack is a complexType with complexContent restriction of SOAP-ENC:Array.
/// class ArrayOfCItemToTrack operations:
/// - soap_new_ArrayOfCItemToTrack(soap*) allocate
/// - soap_new_ArrayOfCItemToTrack(soap*, int num) allocate array
/// - soap_new_req_ArrayOfCItemToTrack(soap*, ...) allocate, set required members
/// - soap_new_set_ArrayOfCItemToTrack(soap*, ...) allocate, set all public members
/// - int soap_read_ArrayOfCItemToTrack(soap*, ArrayOfCItemToTrack*) deserialize from a stream
/// - int soap_write_ArrayOfCItemToTrack(soap, ArrayOfCItemToTrack*) serialize to a stream
/// SOAP encoded array of "urn:testtrack-interface":CItemToTrack
class ArrayOfCItemToTrack
{ public:
/// Pointer to array of ns1__CItemToTrack*.
    ns1__CItemToTrack*                  *__ptritem                     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":ArrayOfCFolderType is a complexType with complexContent restriction of SOAP-ENC:Array.
/// class ArrayOfCFolderType operations:
/// - soap_new_ArrayOfCFolderType(soap*) allocate
/// - soap_new_ArrayOfCFolderType(soap*, int num) allocate array
/// - soap_new_req_ArrayOfCFolderType(soap*, ...) allocate, set required members
/// - soap_new_set_ArrayOfCFolderType(soap*, ...) allocate, set all public members
/// - int soap_read_ArrayOfCFolderType(soap*, ArrayOfCFolderType*) deserialize from a stream
/// - int soap_write_ArrayOfCFolderType(soap, ArrayOfCFolderType*) serialize to a stream
/// SOAP encoded array of "urn:testtrack-interface":CFolderType
class ArrayOfCFolderType
{ public:
/// Pointer to array of ns1__CFolderType*.
    ns1__CFolderType*                   *__ptritem                     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":CFolderItem is a complexType with complexContent extension of "urn:testtrack-interface":CItemWithDBRecordId.
/// class ns1__CFolderItem operations:
/// - soap_new_ns1__CFolderItem(soap*) allocate
/// - soap_new_ns1__CFolderItem(soap*, int num) allocate array
/// - soap_new_req_ns1__CFolderItem(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CFolderItem(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CFolderItem(soap*, ns1__CFolderItem*) deserialize from a stream
/// - int soap_write_ns1__CFolderItem(soap, ns1__CFolderItem*) serialize to a stream
class ns1__CFolderItem
{ public:
/// INHERITED FROM ns1__CItemWithDBRecordId:
/// Element recordid of type xs:long.
    LONG64                               recordid                       1;	///< Required element.
//  END OF INHERITED FROM ns1__CItemWithDBRecordId
/// Element entitytablename of type xs:string.
    char*                                entitytablename                1;	///< Required element.
/// Element entityrecordid of type xs:long.
    LONG64                               entityrecordid                 1;	///< Required element.
/// Element rank of type xs:long.
    LONG64*                              rank                           0;	///< Optional element.
};

/// "urn:testtrack-interface":ArrayOfCFolder is a complexType with complexContent restriction of SOAP-ENC:Array.
/// class ArrayOfCFolder operations:
/// - soap_new_ArrayOfCFolder(soap*) allocate
/// - soap_new_ArrayOfCFolder(soap*, int num) allocate array
/// - soap_new_req_ArrayOfCFolder(soap*, ...) allocate, set required members
/// - soap_new_set_ArrayOfCFolder(soap*, ...) allocate, set all public members
/// - int soap_read_ArrayOfCFolder(soap*, ArrayOfCFolder*) deserialize from a stream
/// - int soap_write_ArrayOfCFolder(soap, ArrayOfCFolder*) serialize to a stream
/// SOAP encoded array of "urn:testtrack-interface":CFolder
class ArrayOfCFolder
{ public:
/// Pointer to array of ns1__CFolder*.
    ns1__CFolder*                       *__ptritem                     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":ArrayOfCFolderItem is a complexType with complexContent restriction of SOAP-ENC:Array.
/// class ArrayOfCFolderItem operations:
/// - soap_new_ArrayOfCFolderItem(soap*) allocate
/// - soap_new_ArrayOfCFolderItem(soap*, int num) allocate array
/// - soap_new_req_ArrayOfCFolderItem(soap*, ...) allocate, set required members
/// - soap_new_set_ArrayOfCFolderItem(soap*, ...) allocate, set all public members
/// - int soap_read_ArrayOfCFolderItem(soap*, ArrayOfCFolderItem*) deserialize from a stream
/// - int soap_write_ArrayOfCFolderItem(soap, ArrayOfCFolderItem*) serialize to a stream
/// SOAP encoded array of "urn:testtrack-interface":CFolderItem
class ArrayOfCFolderItem
{ public:
/// Pointer to array of ns1__CFolderItem*.
    ns1__CFolderItem*                   *__ptritem                     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":ArrayOfCVersionInfo is a complexType with complexContent restriction of SOAP-ENC:Array.
/// class ArrayOfCVersionInfo operations:
/// - soap_new_ArrayOfCVersionInfo(soap*) allocate
/// - soap_new_ArrayOfCVersionInfo(soap*, int num) allocate array
/// - soap_new_req_ArrayOfCVersionInfo(soap*, ...) allocate, set required members
/// - soap_new_set_ArrayOfCVersionInfo(soap*, ...) allocate, set all public members
/// - int soap_read_ArrayOfCVersionInfo(soap*, ArrayOfCVersionInfo*) deserialize from a stream
/// - int soap_write_ArrayOfCVersionInfo(soap, ArrayOfCVersionInfo*) serialize to a stream
/// SOAP encoded array of "urn:testtrack-interface":CVersionInfo
class ArrayOfCVersionInfo
{ public:
/// Pointer to array of ns1__CVersionInfo*.
    ns1__CVersionInfo*                  *__ptritem                     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":CSnapshotInfo is a complexType with complexContent extension of "urn:testtrack-interface":CVersionInfo.
/// class ns1__CSnapshotInfo operations:
/// - soap_new_ns1__CSnapshotInfo(soap*) allocate
/// - soap_new_ns1__CSnapshotInfo(soap*, int num) allocate array
/// - soap_new_req_ns1__CSnapshotInfo(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CSnapshotInfo(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CSnapshotInfo(soap*, ns1__CSnapshotInfo*) deserialize from a stream
/// - int soap_write_ns1__CSnapshotInfo(soap, ns1__CSnapshotInfo*) serialize to a stream
class ns1__CSnapshotInfo
{ public:
/// INHERITED FROM ns1__CVersionInfo:
/// Element versionNumber of type xs:long.
    LONG64*                              versionNumber                  0;	///< Optional element.
/// Element createdByUser of type xs:string.
    char*                                createdByUser                  0;	///< Nillable pointer.
/// Element dateTimeCreated of type xs:string.
    char*                                dateTimeCreated                0;	///< Nillable pointer.
//  END OF INHERITED FROM ns1__CVersionInfo
/// Element label of type xs:string.
    char*                                label                          0;	///< Nillable pointer.
/// Element comment of type xs:string.
    char*                                comment                        0;	///< Nillable pointer.
};

/// "urn:testtrack-interface":ArrayOfCSnapshotInfo is a complexType with complexContent restriction of SOAP-ENC:Array.
/// class ArrayOfCSnapshotInfo operations:
/// - soap_new_ArrayOfCSnapshotInfo(soap*) allocate
/// - soap_new_ArrayOfCSnapshotInfo(soap*, int num) allocate array
/// - soap_new_req_ArrayOfCSnapshotInfo(soap*, ...) allocate, set required members
/// - soap_new_set_ArrayOfCSnapshotInfo(soap*, ...) allocate, set all public members
/// - int soap_read_ArrayOfCSnapshotInfo(soap*, ArrayOfCSnapshotInfo*) deserialize from a stream
/// - int soap_write_ArrayOfCSnapshotInfo(soap, ArrayOfCSnapshotInfo*) serialize to a stream
/// SOAP encoded array of "urn:testtrack-interface":CSnapshotInfo
class ArrayOfCSnapshotInfo
{ public:
/// Pointer to array of ns1__CSnapshotInfo*.
    ns1__CSnapshotInfo*                 *__ptritem                     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":ArrayOfCTreeNodeSoap is a complexType with complexContent restriction of SOAP-ENC:Array.
/// class ArrayOfCTreeNodeSoap operations:
/// - soap_new_ArrayOfCTreeNodeSoap(soap*) allocate
/// - soap_new_ArrayOfCTreeNodeSoap(soap*, int num) allocate array
/// - soap_new_req_ArrayOfCTreeNodeSoap(soap*, ...) allocate, set required members
/// - soap_new_set_ArrayOfCTreeNodeSoap(soap*, ...) allocate, set all public members
/// - int soap_read_ArrayOfCTreeNodeSoap(soap*, ArrayOfCTreeNodeSoap*) deserialize from a stream
/// - int soap_write_ArrayOfCTreeNodeSoap(soap, ArrayOfCTreeNodeSoap*) serialize to a stream
/// SOAP encoded array of "urn:testtrack-interface":CTreeNodeSoap
class ArrayOfCTreeNodeSoap
{ public:
/// Pointer to array of ns1__CTreeNodeSoap*.
    ns1__CTreeNodeSoap*                 *__ptritem                     ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:testtrack-interface":CDocumentTreeNode is a complexType with complexContent extension of "urn:testtrack-interface":CTreeNodeSoap.
/// class ns1__CDocumentTreeNode operations:
/// - soap_new_ns1__CDocumentTreeNode(soap*) allocate
/// - soap_new_ns1__CDocumentTreeNode(soap*, int num) allocate array
/// - soap_new_req_ns1__CDocumentTreeNode(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CDocumentTreeNode(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CDocumentTreeNode(soap*, ns1__CDocumentTreeNode*) deserialize from a stream
/// - int soap_write_ns1__CDocumentTreeNode(soap, ns1__CDocumentTreeNode*) serialize to a stream
class ns1__CDocumentTreeNode
{ public:
/// INHERITED FROM ns1__CTreeNodeSoap:
/// Element entityTableName of type xs:string.
    char*                                entityTableName                0;	///< Nillable pointer.
/// Element entityRecordID of type xs:long.
    LONG64                               entityRecordID                 1;	///< Required element.
/// Element childList of type "urn:testtrack-interface":ArrayOfCTreeNodeSoap.
    ArrayOfCTreeNodeSoap*                childList                      0;	///< Nillable pointer.
//  END OF INHERITED FROM ns1__CTreeNodeSoap
/// Element summary of type xs:string.
    char*                                summary                        0;	///< Nillable pointer.
/// Element outlineNumber of type xs:string.
    char*                                outlineNumber                  0;	///< Nillable pointer.
/// Element tag of type xs:string.
    char*                                tag                            0;	///< Nillable pointer.
};

/// "urn:testtrack-interface":CSystemBase is a complexType with complexContent extension of "urn:testtrack-interface":CItemToTrack.
/// class ns1__CSystemBase operations:
/// - soap_new_ns1__CSystemBase(soap*) allocate
/// - soap_new_ns1__CSystemBase(soap*, int num) allocate array
/// - soap_new_req_ns1__CSystemBase(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CSystemBase(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CSystemBase(soap*, ns1__CSystemBase*) deserialize from a stream
/// - int soap_write_ns1__CSystemBase(soap, ns1__CSystemBase*) serialize to a stream
class ns1__CSystemBase
{ public:
/// INHERITED FROM ns1__CItemWithDBRecordId:
/// Element recordid of type xs:long.
    LONG64                               recordid                       1;	///< Required element.
//  END OF INHERITED FROM ns1__CItemWithDBRecordId
/// INHERITED FROM ns1__CItemToTrack:
//  END OF INHERITED FROM ns1__CItemToTrack
/// Element systemname of type xs:string.
    char*                                systemname                     1;	///< Required element.
};

/// "urn:testtrack-interface":CStringField is a complexType with complexContent extension of "urn:testtrack-interface":CField.
/// class ns1__CStringField operations:
/// - soap_new_ns1__CStringField(soap*) allocate
/// - soap_new_ns1__CStringField(soap*, int num) allocate array
/// - soap_new_req_ns1__CStringField(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CStringField(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CStringField(soap*, ns1__CStringField*) deserialize from a stream
/// - int soap_write_ns1__CStringField(soap, ns1__CStringField*) serialize to a stream
class ns1__CStringField
{ public:
/// INHERITED FROM ns1__CItemWithDBRecordId:
/// Element recordid of type xs:long.
    LONG64                               recordid                       1;	///< Required element.
//  END OF INHERITED FROM ns1__CItemWithDBRecordId
/// INHERITED FROM ns1__CField:
/// Element name of type xs:string.
    char*                                name                           1;	///< Required element.
//  END OF INHERITED FROM ns1__CField
/// Element value of type xs:string.
    char*                                value                          0;	///< Nillable pointer.
/// Element isMultilineString of type xs:boolean.
    bool*                                isMultilineString              0;	///< Optional element.
/// Element containsFormatting of type xs:boolean.
    bool*                                containsFormatting             0;	///< Optional element.
/// Element inlineAttachmentList of type "urn:testtrack-interface":ArrayOfCFileAttachment.
    ArrayOfCFileAttachment*              inlineAttachmentList           0;	///< Nillable pointer.
};

/// "urn:testtrack-interface":CIntegerField is a complexType with complexContent extension of "urn:testtrack-interface":CField.
/// class ns1__CIntegerField operations:
/// - soap_new_ns1__CIntegerField(soap*) allocate
/// - soap_new_ns1__CIntegerField(soap*, int num) allocate array
/// - soap_new_req_ns1__CIntegerField(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CIntegerField(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CIntegerField(soap*, ns1__CIntegerField*) deserialize from a stream
/// - int soap_write_ns1__CIntegerField(soap, ns1__CIntegerField*) serialize to a stream
class ns1__CIntegerField
{ public:
/// INHERITED FROM ns1__CItemWithDBRecordId:
/// Element recordid of type xs:long.
    LONG64                               recordid                       1;	///< Required element.
//  END OF INHERITED FROM ns1__CItemWithDBRecordId
/// INHERITED FROM ns1__CField:
/// Element name of type xs:string.
    char*                                name                           1;	///< Required element.
//  END OF INHERITED FROM ns1__CField
/// Element value of type xs:int.
    int                                  value                          1;	///< Required element.
};

/// "urn:testtrack-interface":CDecimalField is a complexType with complexContent extension of "urn:testtrack-interface":CField.
/// class ns1__CDecimalField operations:
/// - soap_new_ns1__CDecimalField(soap*) allocate
/// - soap_new_ns1__CDecimalField(soap*, int num) allocate array
/// - soap_new_req_ns1__CDecimalField(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CDecimalField(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CDecimalField(soap*, ns1__CDecimalField*) deserialize from a stream
/// - int soap_write_ns1__CDecimalField(soap, ns1__CDecimalField*) serialize to a stream
class ns1__CDecimalField
{ public:
/// INHERITED FROM ns1__CItemWithDBRecordId:
/// Element recordid of type xs:long.
    LONG64                               recordid                       1;	///< Required element.
//  END OF INHERITED FROM ns1__CItemWithDBRecordId
/// INHERITED FROM ns1__CField:
/// Element name of type xs:string.
    char*                                name                           1;	///< Required element.
//  END OF INHERITED FROM ns1__CField
/// Element value of type xs:double.
    double                               value                          1;	///< Required element.
};

/// "urn:testtrack-interface":CBooleanField is a complexType with complexContent extension of "urn:testtrack-interface":CField.
/// class ns1__CBooleanField operations:
/// - soap_new_ns1__CBooleanField(soap*) allocate
/// - soap_new_ns1__CBooleanField(soap*, int num) allocate array
/// - soap_new_req_ns1__CBooleanField(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CBooleanField(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CBooleanField(soap*, ns1__CBooleanField*) deserialize from a stream
/// - int soap_write_ns1__CBooleanField(soap, ns1__CBooleanField*) serialize to a stream
class ns1__CBooleanField
{ public:
/// INHERITED FROM ns1__CItemWithDBRecordId:
/// Element recordid of type xs:long.
    LONG64                               recordid                       1;	///< Required element.
//  END OF INHERITED FROM ns1__CItemWithDBRecordId
/// INHERITED FROM ns1__CField:
/// Element name of type xs:string.
    char*                                name                           1;	///< Required element.
//  END OF INHERITED FROM ns1__CField
/// Element value of type xs:boolean.
    bool                                 value                          1;	///< Required element.
};

/// "urn:testtrack-interface":CDateField is a complexType with complexContent extension of "urn:testtrack-interface":CField.
/// class ns1__CDateField operations:
/// - soap_new_ns1__CDateField(soap*) allocate
/// - soap_new_ns1__CDateField(soap*, int num) allocate array
/// - soap_new_req_ns1__CDateField(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CDateField(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CDateField(soap*, ns1__CDateField*) deserialize from a stream
/// - int soap_write_ns1__CDateField(soap, ns1__CDateField*) serialize to a stream
class ns1__CDateField
{ public:
/// INHERITED FROM ns1__CItemWithDBRecordId:
/// Element recordid of type xs:long.
    LONG64                               recordid                       1;	///< Required element.
//  END OF INHERITED FROM ns1__CItemWithDBRecordId
/// INHERITED FROM ns1__CField:
/// Element name of type xs:string.
    char*                                name                           1;	///< Required element.
//  END OF INHERITED FROM ns1__CField
/// Element value of type xs:date.
    xsd__date                            value                          0;	///< Nillable pointer.
};

/// "urn:testtrack-interface":CDateTimeField is a complexType with complexContent extension of "urn:testtrack-interface":CField.
/// class ns1__CDateTimeField operations:
/// - soap_new_ns1__CDateTimeField(soap*) allocate
/// - soap_new_ns1__CDateTimeField(soap*, int num) allocate array
/// - soap_new_req_ns1__CDateTimeField(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CDateTimeField(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CDateTimeField(soap*, ns1__CDateTimeField*) deserialize from a stream
/// - int soap_write_ns1__CDateTimeField(soap, ns1__CDateTimeField*) serialize to a stream
class ns1__CDateTimeField
{ public:
/// INHERITED FROM ns1__CItemWithDBRecordId:
/// Element recordid of type xs:long.
    LONG64                               recordid                       1;	///< Required element.
//  END OF INHERITED FROM ns1__CItemWithDBRecordId
/// INHERITED FROM ns1__CField:
/// Element name of type xs:string.
    char*                                name                           1;	///< Required element.
//  END OF INHERITED FROM ns1__CField
/// Element value of type xs:dateTime.
    time_t*                              value                          0;	///< Nillable pointer.
};

/// "urn:testtrack-interface":CDropdownField is a complexType with complexContent extension of "urn:testtrack-interface":CField.
/// class ns1__CDropdownField operations:
/// - soap_new_ns1__CDropdownField(soap*) allocate
/// - soap_new_ns1__CDropdownField(soap*, int num) allocate array
/// - soap_new_req_ns1__CDropdownField(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CDropdownField(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CDropdownField(soap*, ns1__CDropdownField*) deserialize from a stream
/// - int soap_write_ns1__CDropdownField(soap, ns1__CDropdownField*) serialize to a stream
class ns1__CDropdownField
{ public:
/// INHERITED FROM ns1__CItemWithDBRecordId:
/// Element recordid of type xs:long.
    LONG64                               recordid                       1;	///< Required element.
//  END OF INHERITED FROM ns1__CItemWithDBRecordId
/// INHERITED FROM ns1__CField:
/// Element name of type xs:string.
    char*                                name                           1;	///< Required element.
//  END OF INHERITED FROM ns1__CField
/// Element value of type xs:string.
    char*                                value                          0;	///< Nillable pointer.
/// Element dropdownValues of type "urn:testtrack-interface":ArrayOfCFieldValue.
    ArrayOfCFieldValue*                  dropdownValues                 0;	///< Nillable pointer.
};

/// "urn:testtrack-interface":CMultiSelectDropdownField is a complexType with complexContent extension of "urn:testtrack-interface":CField.
/// class ns1__CMultiSelectDropdownField operations:
/// - soap_new_ns1__CMultiSelectDropdownField(soap*) allocate
/// - soap_new_ns1__CMultiSelectDropdownField(soap*, int num) allocate array
/// - soap_new_req_ns1__CMultiSelectDropdownField(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CMultiSelectDropdownField(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CMultiSelectDropdownField(soap*, ns1__CMultiSelectDropdownField*) deserialize from a stream
/// - int soap_write_ns1__CMultiSelectDropdownField(soap, ns1__CMultiSelectDropdownField*) serialize to a stream
class ns1__CMultiSelectDropdownField
{ public:
/// INHERITED FROM ns1__CItemWithDBRecordId:
/// Element recordid of type xs:long.
    LONG64                               recordid                       1;	///< Required element.
//  END OF INHERITED FROM ns1__CItemWithDBRecordId
/// INHERITED FROM ns1__CField:
/// Element name of type xs:string.
    char*                                name                           1;	///< Required element.
//  END OF INHERITED FROM ns1__CField
/// Element values of type "urn:testtrack-interface":ArrayOfCFieldValue.
    ArrayOfCFieldValue*                  values                         0;	///< Nillable pointer.
/// Element dropdownValues of type "urn:testtrack-interface":ArrayOfCFieldValue.
    ArrayOfCFieldValue*                  dropdownValues                 0;	///< Nillable pointer.
};

/// "urn:testtrack-interface":CVersionField is a complexType with complexContent extension of "urn:testtrack-interface":CField.
/// class ns1__CVersionField operations:
/// - soap_new_ns1__CVersionField(soap*) allocate
/// - soap_new_ns1__CVersionField(soap*, int num) allocate array
/// - soap_new_req_ns1__CVersionField(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CVersionField(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CVersionField(soap*, ns1__CVersionField*) deserialize from a stream
/// - int soap_write_ns1__CVersionField(soap, ns1__CVersionField*) serialize to a stream
class ns1__CVersionField
{ public:
/// INHERITED FROM ns1__CItemWithDBRecordId:
/// Element recordid of type xs:long.
    LONG64                               recordid                       1;	///< Required element.
//  END OF INHERITED FROM ns1__CItemWithDBRecordId
/// INHERITED FROM ns1__CField:
/// Element name of type xs:string.
    char*                                name                           1;	///< Required element.
//  END OF INHERITED FROM ns1__CField
/// Element value of type xs:string.
    char*                                value                          0;	///< Nillable pointer.
};

/// "urn:testtrack-interface":CTimespanField is a complexType with complexContent extension of "urn:testtrack-interface":CField.
/// class ns1__CTimespanField operations:
/// - soap_new_ns1__CTimespanField(soap*) allocate
/// - soap_new_ns1__CTimespanField(soap*, int num) allocate array
/// - soap_new_req_ns1__CTimespanField(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CTimespanField(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CTimespanField(soap*, ns1__CTimespanField*) deserialize from a stream
/// - int soap_write_ns1__CTimespanField(soap, ns1__CTimespanField*) serialize to a stream
class ns1__CTimespanField
{ public:
/// INHERITED FROM ns1__CItemWithDBRecordId:
/// Element recordid of type xs:long.
    LONG64                               recordid                       1;	///< Required element.
//  END OF INHERITED FROM ns1__CItemWithDBRecordId
/// INHERITED FROM ns1__CField:
/// Element name of type xs:string.
    char*                                name                           1;	///< Required element.
//  END OF INHERITED FROM ns1__CField
/// Element value of type xs:double.
    double                               value                          1;	///< Required element.
/// Element unit of type xs:string.
    char*                                unit                           1;	///< Required element.
};

/// "urn:testtrack-interface":CDefectEvent is a complexType with complexContent extension of "urn:testtrack-interface":CEvent.
/// @brief Deprecated; use CEvent
/// class ns1__CDefectEvent operations:
/// - soap_new_ns1__CDefectEvent(soap*) allocate
/// - soap_new_ns1__CDefectEvent(soap*, int num) allocate array
/// - soap_new_req_ns1__CDefectEvent(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CDefectEvent(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CDefectEvent(soap*, ns1__CDefectEvent*) deserialize from a stream
/// - int soap_write_ns1__CDefectEvent(soap, ns1__CDefectEvent*) serialize to a stream
class ns1__CDefectEvent
{ public:
/// INHERITED FROM ns1__CItemWithDBRecordId:
/// Element recordid of type xs:long.
    LONG64                               recordid                       1;	///< Required element.
//  END OF INHERITED FROM ns1__CItemWithDBRecordId
/// INHERITED FROM ns1__CEvent:
/// Element user of type xs:string.
    char*                                user                           0;	///< Nillable pointer.
/// Element date of type xs:dateTime.
    time_t                               date                           1;	///< Required element.
/// Element notes of type xs:string.
    char*                                notes                          0;	///< Nillable pointer.
/// Element eventaddorder of type xs:short.
    short                                eventaddorder                  1;	///< Required element.
/// Element name of type xs:string.
    char*                                name                           0;	///< Nillable pointer.
/// Element parenteventid of type xs:long.
    LONG64*                              parenteventid                  0;	///< Optional element.
/// Element attachmentlist of type "urn:testtrack-interface":ArrayOfCFileAttachment.
    ArrayOfCFileAttachment*              attachmentlist                 0;	///< Nillable pointer.
/// Element fieldlist of type "urn:testtrack-interface":ArrayOfCField.
    ArrayOfCField*                       fieldlist                      0;	///< Nillable pointer.
/// Element resultingstate of type xs:string.
    char*                                resultingstate                 0;	///< Nillable pointer.
/// Element hours of type xs:double.
    double*                              hours                          0;	///< Optional element.
/// Element assigntolist of type "urn:testtrack-interface":ArrayOfstring.
    ArrayOfstring*                       assigntolist                   0;	///< Nillable pointer.
/// Element releasenotesversion of type xs:string.
    char*                                releasenotesversion            0;	///< Nillable pointer.
/// Element generatedeventtype of type xs:string.
    char*                                generatedeventtype             0;	///< Nillable pointer.
/// Element generatedbyname of type xs:string.
    char*                                generatedbyname                0;	///< Nillable pointer.
/// Element totaltimespent of type xs:double.
    double*                              totaltimespent                 0;	///< Optional element.
/// Element overrideuser of type xs:string.
    char*                                overrideuser                   0;	///< Nillable pointer.
/// Element marksuspect of type xs:boolean.
    bool*                                marksuspect                    0;	///< Optional element.
//  END OF INHERITED FROM ns1__CEvent
};

/// "urn:testtrack-interface":CDefect is a complexType with complexContent extension of "urn:testtrack-interface":CItemToTrack.
/// class ns1__CDefect operations:
/// - soap_new_ns1__CDefect(soap*) allocate
/// - soap_new_ns1__CDefect(soap*, int num) allocate array
/// - soap_new_req_ns1__CDefect(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CDefect(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CDefect(soap*, ns1__CDefect*) deserialize from a stream
/// - int soap_write_ns1__CDefect(soap, ns1__CDefect*) serialize to a stream
class ns1__CDefect
{ public:
/// INHERITED FROM ns1__CItemWithDBRecordId:
/// Element recordid of type xs:long.
    LONG64                               recordid                       1;	///< Required element.
//  END OF INHERITED FROM ns1__CItemWithDBRecordId
/// INHERITED FROM ns1__CItemToTrack:
//  END OF INHERITED FROM ns1__CItemToTrack
/// Element defectnumber of type xs:long.
    LONG64*                              defectnumber                   0;	///< Optional element.
/// Element summary of type xs:string.
    char*                                summary                        0;	///< Nillable pointer.
/// Element state of type xs:string.
    char*                                state                          0;	///< Nillable pointer.
/// Element disposition of type xs:string.
    char*                                disposition                    0;	///< Nillable pointer.
/// Element type of type xs:string.
    char*                                type                           0;	///< Nillable pointer.
/// Element priority of type xs:string.
    char*                                priority                       0;	///< Nillable pointer.
/// Element product of type xs:string.
    char*                                product                        0;	///< Nillable pointer.
/// Element component of type xs:string.
    char*                                component                      0;	///< Nillable pointer.
/// Element reference of type xs:string.
    char*                                reference                      0;	///< Nillable pointer.
/// Element severity of type xs:string.
    char*                                severity                       0;	///< Nillable pointer.
/// Element enteredby of type xs:string.
    char*                                enteredby                      0;	///< Nillable pointer.
/// Element workaround of type xs:string.
    char*                                workaround                     0;	///< Nillable pointer.
/// Element workaroundInlineAttachList of type "urn:testtrack-interface":ArrayOfCFileAttachment.
    ArrayOfCFileAttachment*              workaroundInlineAttachList     0;	///< Nillable pointer.
/// Element dateentered of type xs:date.
    xsd__date                            dateentered                    0;	///< Nillable pointer.
/// Element locationaddedfrom of type xs:string.
    char*                                locationaddedfrom              0;	///< Nillable pointer.
/// Element datetimecreated of type xs:dateTime.
    time_t*                              datetimecreated                0;	///< Nillable pointer.
/// Element datetimemodified of type xs:dateTime.
    time_t*                              datetimemodified               0;	///< Nillable pointer.
/// Element createdbyuser of type xs:string.
    char*                                createdbyuser                  0;	///< Nillable pointer.
/// Element modifiedbyuser of type xs:string.
    char*                                modifiedbyuser                 0;	///< Nillable pointer.
/// Element actualhourstofix of type xs:double.
    double*                              actualhourstofix               0;	///< Optional element.
/// Element estimatedhours of type xs:double.
    double*                              estimatedhours                 0;	///< Optional element.
/// Element remaininghours of type xs:double.
    double*                              remaininghours                 0;	///< Optional element.
/// Element variance of type xs:double.
    double*                              variance                       0;	///< Optional element.
/// Element storypoints of type xs:long.
    LONG64*                              storypoints                    0;	///< Optional element.
/// Element percentdone of type xs:long.
    LONG64*                              percentdone                    0;	///< Optional element.
/// Element reportedbylist of type "urn:testtrack-interface":ArrayOfCReportedByRecord.
    ArrayOfCReportedByRecord*            reportedbylist                 0;	///< Nillable pointer.
/// Element eventlist of type "urn:testtrack-interface":ArrayOfCEvent.
    ArrayOfCEvent*                       eventlist                      0;	///< Nillable pointer.
/// Element pSCCFileList of type "urn:testtrack-interface":ArrayOfCSCCFileRecord.
    ArrayOfCSCCFileRecord*               pSCCFileList                   0;	///< Nillable pointer.
/// Element customFieldList of type "urn:testtrack-interface":ArrayOfCField.
    ArrayOfCField*                       customFieldList                0;	///< Nillable pointer.
};

/// "urn:testtrack-interface":CTask is a complexType with complexContent extension of "urn:testtrack-interface":CItemToTrack.
/// @brief Inherits from CItemToTrack. Stores task fields tracked by the TestTrack Server. The addTask, editTask, getTask, and saveTask requests use this structure.
/// class ns1__CTask operations:
/// - soap_new_ns1__CTask(soap*) allocate
/// - soap_new_ns1__CTask(soap*, int num) allocate array
/// - soap_new_req_ns1__CTask(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CTask(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CTask(soap*, ns1__CTask*) deserialize from a stream
/// - int soap_write_ns1__CTask(soap, ns1__CTask*) serialize to a stream
class ns1__CTask
{ public:
/// INHERITED FROM ns1__CItemWithDBRecordId:
/// Element recordid of type xs:long.
    LONG64                               recordid                       1;	///< Required element.
//  END OF INHERITED FROM ns1__CItemWithDBRecordId
/// INHERITED FROM ns1__CItemToTrack:
//  END OF INHERITED FROM ns1__CItemToTrack
/// Element status of type xs:string.
    char*                                status                         0;	///< Nillable pointer.
/// Element priority of type xs:string.
    char*                                priority                       0;	///< Nillable pointer.
/// Element summary of type xs:string.
    char*                                summary                        0;	///< Nillable pointer.
/// Element description of type xs:string.
    char*                                description                    0;	///< Nillable pointer.
/// Element datedue of type xs:date.
    xsd__date                            datedue                        0;	///< Nillable pointer.
/// Element dateassigned of type xs:date.
    xsd__date                            dateassigned                   0;	///< Nillable pointer.
/// Element versiondue of type xs:string.
    char*                                versiondue                     0;	///< Nillable pointer.
/// Element assignedto of type xs:string.
    char*                                assignedto                     0;	///< Nillable pointer.
/// Element assignedby of type xs:string.
    char*                                assignedby                     0;	///< Nillable pointer.
/// Element assigneddefect of type xs:long.
    LONG64*                              assigneddefect                 0;	///< Optional element.
};

/// "urn:testtrack-interface":CUser is a complexType with complexContent extension of "urn:testtrack-interface":CItemToTrack.
/// @brief Inherits from CItemToTrack. Contains all user object fields stored in TestTrack. Used by the addUser, editUser, getUser, saveUser, addCustomer, editCustomer, getCustomer and saveCustomer requests. Use getDropdownFieldValuesForTable to get the allowed values for the security group and email type fields.
/// class ns1__CUser operations:
/// - soap_new_ns1__CUser(soap*) allocate
/// - soap_new_ns1__CUser(soap*, int num) allocate array
/// - soap_new_req_ns1__CUser(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CUser(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CUser(soap*, ns1__CUser*) deserialize from a stream
/// - int soap_write_ns1__CUser(soap, ns1__CUser*) serialize to a stream
class ns1__CUser
{ public:
/// INHERITED FROM ns1__CItemWithDBRecordId:
/// Element recordid of type xs:long.
    LONG64                               recordid                       1;	///< Required element.
//  END OF INHERITED FROM ns1__CItemWithDBRecordId
/// INHERITED FROM ns1__CItemToTrack:
//  END OF INHERITED FROM ns1__CItemToTrack
/// Element firstname of type xs:string.
    char*                                firstname                      0;	///< Nillable pointer.
/// Element middleinitials of type xs:string.
    char*                                middleinitials                 0;	///< Nillable pointer.
/// Element lastname of type xs:string.
    char*                                lastname                       0;	///< Nillable pointer.
/// Element usergroupname of type xs:string.
    char*                                usergroupname                  0;	///< Nillable pointer.
/// Element company of type xs:string.
    char*                                company                        0;	///< Nillable pointer.
/// Element division of type xs:string.
    char*                                division                       0;	///< Nillable pointer.
/// Element department of type xs:string.
    char*                                department                     0;	///< Nillable pointer.
/// Element emailtype of type xs:string.
    char*                                emailtype                      0;	///< Nillable pointer.
/// Element emailaddress of type xs:string.
    char*                                emailaddress                   0;	///< Nillable pointer.
/// Element isactive of type xs:boolean.
    bool*                                isactive                       0;	///< Optional element.
/// Element iscustomer of type xs:boolean.
    bool*                                iscustomer                     0;	///< Optional element.
/// Element isglobal of type xs:boolean.
    bool*                                isglobal                       0;	///< Optional element.
/// Element isactiveglobal of type xs:boolean.
    bool*                                isactiveglobal                 0;	///< Optional element.
/// Element userLicense of type xs:string.
    char*                                userLicense                    0;	///< Nillable pointer.
/// Element userLicenseTCM of type xs:string.
    char*                                userLicenseTCM                 0;	///< Nillable pointer.
/// Element userLicenseRM of type xs:string.
    char*                                userLicenseRM                  0;	///< Nillable pointer.
/// Element password of type xs:string.
    char*                                password                       0;	///< Nillable pointer.
/// Element loginname of type xs:string.
    char*                                loginname                      0;	///< Nillable pointer.
/// Element phoneone of type "urn:testtrack-interface":PhoneNumber.
    ns1__PhoneNumber*                    phoneone                       0;	///< Optional element.
/// Element phonetwo of type "urn:testtrack-interface":PhoneNumber.
    ns1__PhoneNumber*                    phonetwo                       0;	///< Optional element.
/// Element notes of type xs:string.
    char*                                notes                          0;	///< Nillable pointer.
/// Element betasite of type xs:boolean.
    bool*                                betasite                       0;	///< Optional element.
/// Element address of type xs:string.
    char*                                address                        0;	///< Nillable pointer.
/// Element testconfig of type "urn:testtrack-interface":CSystem.
    ns1__CSystem*                        testconfig                     0;	///< Nillable pointer.
};

/// "urn:testtrack-interface":CLinkedItem is a complexType with complexContent extension of "urn:testtrack-interface":COrderedItemWithDBRecordId.
/// @brief Inherits from COrderedItemWithDBRecordID. Extends the COrderedItemWithDBRecordID structure and stores information about an item that is in a link. NOTE: entityType is deprecated; use tablename.
/// class ns1__CLinkedItem operations:
/// - soap_new_ns1__CLinkedItem(soap*) allocate
/// - soap_new_ns1__CLinkedItem(soap*, int num) allocate array
/// - soap_new_req_ns1__CLinkedItem(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CLinkedItem(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CLinkedItem(soap*, ns1__CLinkedItem*) deserialize from a stream
/// - int soap_write_ns1__CLinkedItem(soap, ns1__CLinkedItem*) serialize to a stream
class ns1__CLinkedItem
{ public:
/// INHERITED FROM ns1__CItemWithDBRecordId:
/// Element recordid of type xs:long.
    LONG64                               recordid                       1;	///< Required element.
//  END OF INHERITED FROM ns1__CItemWithDBRecordId
/// INHERITED FROM ns1__COrderedItemWithDBRecordId:
/// Element order of type xs:long.
    LONG64                               order                          1;	///< Required element.
//  END OF INHERITED FROM ns1__COrderedItemWithDBRecordId
/// Element entityType of type xs:long.
    LONG64*                              entityType                     0;	///< Optional element.
/// Element tablename of type xs:string.
    char*                                tablename                      1;	///< Required element.
/// Element entityID of type xs:long.
    LONG64                               entityID                       1;	///< Required element.
/// Element number of type xs:string.
    char*                                number                         0;	///< Nillable pointer.
/// Element summary of type xs:string.
    char*                                summary                        0;	///< Nillable pointer.
/// Element status of type xs:string.
    char*                                status                         0;	///< Nillable pointer.
/// Element state of type xs:string.
    char*                                state                          0;	///< Nillable pointer.
/// Element issuspect of type xs:boolean.
    bool*                                issuspect                      0;	///< Optional element.
};

/// "urn:testtrack-interface":CLinkHistoryItem is a complexType with complexContent extension of "urn:testtrack-interface":COrderedItemWithDBRecordId.
/// @brief Inherits from COrderedItemWithDBRecordID. Extends the COrderedItemWithDBRecordID and stores the description of a change made to a link. This is a read-only object.
/// class ns1__CLinkHistoryItem operations:
/// - soap_new_ns1__CLinkHistoryItem(soap*) allocate
/// - soap_new_ns1__CLinkHistoryItem(soap*, int num) allocate array
/// - soap_new_req_ns1__CLinkHistoryItem(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CLinkHistoryItem(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CLinkHistoryItem(soap*, ns1__CLinkHistoryItem*) deserialize from a stream
/// - int soap_write_ns1__CLinkHistoryItem(soap, ns1__CLinkHistoryItem*) serialize to a stream
class ns1__CLinkHistoryItem
{ public:
/// INHERITED FROM ns1__CItemWithDBRecordId:
/// Element recordid of type xs:long.
    LONG64                               recordid                       1;	///< Required element.
//  END OF INHERITED FROM ns1__CItemWithDBRecordId
/// INHERITED FROM ns1__COrderedItemWithDBRecordId:
/// Element order of type xs:long.
    LONG64                               order                          1;	///< Required element.
//  END OF INHERITED FROM ns1__COrderedItemWithDBRecordId
/// Element date of type xs:dateTime.
    time_t*                              date                           0;	///< Nillable pointer.
/// Element firstname of type xs:string.
    char*                                firstname                      0;	///< Nillable pointer.
/// Element lastname of type xs:string.
    char*                                lastname                       0;	///< Nillable pointer.
/// Element history of type xs:string.
    char*                                history                        0;	///< Nillable pointer.
};

/// "urn:testtrack-interface":CLink is a complexType with complexContent extension of "urn:testtrack-interface":CItemToTrack.
/// class ns1__CLink operations:
/// - soap_new_ns1__CLink(soap*) allocate
/// - soap_new_ns1__CLink(soap*, int num) allocate array
/// - soap_new_req_ns1__CLink(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CLink(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CLink(soap*, ns1__CLink*) deserialize from a stream
/// - int soap_write_ns1__CLink(soap, ns1__CLink*) serialize to a stream
class ns1__CLink
{ public:
/// INHERITED FROM ns1__CItemWithDBRecordId:
/// Element recordid of type xs:long.
    LONG64                               recordid                       1;	///< Required element.
//  END OF INHERITED FROM ns1__CItemWithDBRecordId
/// INHERITED FROM ns1__CItemToTrack:
//  END OF INHERITED FROM ns1__CItemToTrack
/// Element linkDefinitionName of type xs:string.
    char*                                linkDefinitionName             1;	///< Required element.
/// Element comment of type xs:string.
    char*                                comment                        0;	///< Nillable pointer.
/// Element linkbroken of type xs:boolean.
    bool*                                linkbroken                     0;	///< Optional element.
/// Element linkparent of type "urn:testtrack-interface":CLinkedItem.
    ns1__CLinkedItem*                    linkparent                     0;	///< Nillable pointer.
/// Element childList of type "urn:testtrack-interface":ArrayOfCLinkedItem.
    ArrayOfCLinkedItem*                  childList                      0;	///< Nillable pointer.
/// Element historyList of type "urn:testtrack-interface":ArrayOfCLinkHistoryItem.
    ArrayOfCLinkHistoryItem*             historyList                    0;	///< Nillable pointer.
};

/// "urn:testtrack-interface":CTestCase is a complexType with complexContent extension of "urn:testtrack-interface":CItemToTrack.
/// @brief Inherits from CItemToTrack. Stores the fields that comprise a test case. NOTE: Problem statements added to test runs with the steps in grid mode will be added as the last element in the grid. If you want to insert problem statements (steps, comments or expected results) into the grid, use the following mark up characters, which are only valid if they are the first letter after a new line: Asterisk(*)- indicates the beginning of a new step; Plus sign (+) - indicates the expected result of the previous step; Pound sign (#) - indicates a comment line
/// class ns1__CTestCase operations:
/// - soap_new_ns1__CTestCase(soap*) allocate
/// - soap_new_ns1__CTestCase(soap*, int num) allocate array
/// - soap_new_req_ns1__CTestCase(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CTestCase(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CTestCase(soap*, ns1__CTestCase*) deserialize from a stream
/// - int soap_write_ns1__CTestCase(soap, ns1__CTestCase*) serialize to a stream
class ns1__CTestCase
{ public:
/// INHERITED FROM ns1__CItemWithDBRecordId:
/// Element recordid of type xs:long.
    LONG64                               recordid                       1;	///< Required element.
//  END OF INHERITED FROM ns1__CItemWithDBRecordId
/// INHERITED FROM ns1__CItemToTrack:
//  END OF INHERITED FROM ns1__CItemToTrack
/// Element testcasenumber of type xs:long.
    LONG64*                              testcasenumber                 0;	///< Optional element.
/// Element summary of type xs:string.
    char*                                summary                        0;	///< Nillable pointer.
/// Element state of type xs:string.
    char*                                state                          0;	///< Nillable pointer.
/// Element createdbyuser of type xs:string.
    char*                                createdbyuser                  0;	///< Nillable pointer.
/// Element datetimecreated of type xs:dateTime.
    time_t*                              datetimecreated                0;	///< Nillable pointer.
/// Element locationaddedfrom of type xs:string.
    char*                                locationaddedfrom              0;	///< Nillable pointer.
/// Element modifiedbyuser of type xs:string.
    char*                                modifiedbyuser                 0;	///< Nillable pointer.
/// Element datetimemodified of type xs:dateTime.
    time_t*                              datetimemodified               0;	///< Nillable pointer.
/// Element customFieldList of type "urn:testtrack-interface":ArrayOfCField.
    ArrayOfCField*                       customFieldList                0;	///< Nillable pointer.
/// Element eventlist of type "urn:testtrack-interface":ArrayOfCEvent.
    ArrayOfCEvent*                       eventlist                      0;	///< Nillable pointer.
/// Element actualhours of type xs:double.
    double*                              actualhours                    0;	///< Optional element.
/// Element estimatedhours of type xs:double.
    double*                              estimatedhours                 0;	///< Optional element.
/// Element remaininghours of type xs:double.
    double*                              remaininghours                 0;	///< Optional element.
/// Element variance of type xs:double.
    double*                              variance                       0;	///< Optional element.
/// Element storypoints of type xs:long.
    LONG64*                              storypoints                    0;	///< Optional element.
/// Element percentdone of type xs:long.
    LONG64*                              percentdone                    0;	///< Optional element.
/// Element type of type xs:string.
    char*                                type                           0;	///< Nillable pointer.
/// Element testrunstepsmode of type xs:string.
    char*                                testrunstepsmode               0;	///< Nillable pointer.
/// Element isautomated of type xs:boolean.
    bool*                                isautomated                    0;	///< Optional element.
/// Element estimatedtime of type xs:string.
    char*                                estimatedtime                  0;	///< Nillable pointer.
/// Element steps of type xs:string.
    char*                                steps                          0;	///< Nillable pointer.
/// Element testVariants of type "urn:testtrack-interface":ArrayOfCTestCaseVariantField.
    ArrayOfCTestCaseVariantField*        testVariants                   0;	///< Nillable pointer.
/// Element attachmentlist of type "urn:testtrack-interface":ArrayOfCFileAttachment.
    ArrayOfCFileAttachment*              attachmentlist                 0;	///< Nillable pointer.
/// Element sccFileList of type "urn:testtrack-interface":ArrayOfCSCCFileRecord.
    ArrayOfCSCCFileRecord*               sccFileList                    0;	///< Nillable pointer.
};

/// "urn:testtrack-interface":CTestRun is a complexType with complexContent extension of "urn:testtrack-interface":CItemToTrack.
/// @brief Inherits from CItemToTrack. Stores the fields that comprise a test run. NOTE: Problem statements added to test runs with the steps in grid mode will be added as the last element in the grid. If you want to insert problem statements (steps, comments or expected results) into the grid, use the following mark up characters, which are only valid if they are the first letter after a new line: Asterisk(*)- indicates the beginning of a new step; Plus sign (+) - indicates the expected result of the previous step; Pound sign (#) - indicates a comment line; Exclamation point (!) - indicates a problem statement
/// class ns1__CTestRun operations:
/// - soap_new_ns1__CTestRun(soap*) allocate
/// - soap_new_ns1__CTestRun(soap*, int num) allocate array
/// - soap_new_req_ns1__CTestRun(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CTestRun(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CTestRun(soap*, ns1__CTestRun*) deserialize from a stream
/// - int soap_write_ns1__CTestRun(soap, ns1__CTestRun*) serialize to a stream
class ns1__CTestRun
{ public:
/// INHERITED FROM ns1__CItemWithDBRecordId:
/// Element recordid of type xs:long.
    LONG64                               recordid                       1;	///< Required element.
//  END OF INHERITED FROM ns1__CItemWithDBRecordId
/// INHERITED FROM ns1__CItemToTrack:
//  END OF INHERITED FROM ns1__CItemToTrack
/// Element testrunnumber of type xs:long.
    LONG64*                              testrunnumber                  0;	///< Optional element.
/// Element summary of type xs:string.
    char*                                summary                        0;	///< Nillable pointer.
/// Element state of type xs:string.
    char*                                state                          0;	///< Nillable pointer.
/// Element createdbyuser of type xs:string.
    char*                                createdbyuser                  0;	///< Nillable pointer.
/// Element datetimecreated of type xs:dateTime.
    time_t*                              datetimecreated                0;	///< Nillable pointer.
/// Element locationaddedfrom of type xs:string.
    char*                                locationaddedfrom              0;	///< Nillable pointer.
/// Element modifiedbyuser of type xs:string.
    char*                                modifiedbyuser                 0;	///< Nillable pointer.
/// Element datetimemodified of type xs:dateTime.
    time_t*                              datetimemodified               0;	///< Nillable pointer.
/// Element customFieldList of type "urn:testtrack-interface":ArrayOfCField.
    ArrayOfCField*                       customFieldList                0;	///< Nillable pointer.
/// Element eventlist of type "urn:testtrack-interface":ArrayOfCEvent.
    ArrayOfCEvent*                       eventlist                      0;	///< Nillable pointer.
/// Element actualhours of type xs:double.
    double*                              actualhours                    0;	///< Optional element.
/// Element estimatedhours of type xs:double.
    double*                              estimatedhours                 0;	///< Optional element.
/// Element remaininghours of type xs:double.
    double*                              remaininghours                 0;	///< Optional element.
/// Element variance of type xs:double.
    double*                              variance                       0;	///< Optional element.
/// Element storypoints of type xs:long.
    LONG64*                              storypoints                    0;	///< Optional element.
/// Element percentdone of type xs:long.
    LONG64*                              percentdone                    0;	///< Optional element.
/// Element testcasenumber of type xs:long.
    LONG64*                              testcasenumber                 0;	///< Optional element.
/// Element testcaserecordid of type xs:long.
    LONG64*                              testcaserecordid               0;	///< Optional element.
/// Element type of type xs:string.
    char*                                type                           0;	///< Nillable pointer.
/// Element testrunset of type xs:string.
    char*                                testrunset                     0;	///< Nillable pointer.
/// Element isautomated of type xs:boolean.
    bool*                                isautomated                    0;	///< Optional element.
/// Element estimatedtime of type xs:string.
    char*                                estimatedtime                  0;	///< Nillable pointer.
/// Element steps of type xs:string.
    char*                                steps                          0;	///< Nillable pointer.
/// Element problemstatement of type xs:string.
    char*                                problemstatement               0;	///< Nillable pointer.
/// Element testVariants of type "urn:testtrack-interface":ArrayOfCTestCaseVariantField.
    ArrayOfCTestCaseVariantField*        testVariants                   0;	///< Nillable pointer.
/// Element attachmentlist of type "urn:testtrack-interface":ArrayOfCFileAttachment.
    ArrayOfCFileAttachment*              attachmentlist                 0;	///< Nillable pointer.
/// Element sccFileList of type "urn:testtrack-interface":ArrayOfCSCCFileRecord.
    ArrayOfCSCCFileRecord*               sccFileList                    0;	///< Nillable pointer.
/// Element stepsmode of type xs:string.
    char*                                stepsmode                      0;	///< Nillable pointer.
};

/// "urn:testtrack-interface":CFolderType is a complexType with complexContent extension of "urn:testtrack-interface":CItemToTrack.
/// class ns1__CFolderType operations:
/// - soap_new_ns1__CFolderType(soap*) allocate
/// - soap_new_ns1__CFolderType(soap*, int num) allocate array
/// - soap_new_req_ns1__CFolderType(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CFolderType(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CFolderType(soap*, ns1__CFolderType*) deserialize from a stream
/// - int soap_write_ns1__CFolderType(soap, ns1__CFolderType*) serialize to a stream
class ns1__CFolderType
{ public:
/// INHERITED FROM ns1__CItemWithDBRecordId:
/// Element recordid of type xs:long.
    LONG64                               recordid                       1;	///< Required element.
//  END OF INHERITED FROM ns1__CItemWithDBRecordId
/// INHERITED FROM ns1__CItemToTrack:
//  END OF INHERITED FROM ns1__CItemToTrack
/// Element name of type xs:string.
    char*                                name                           0;	///< Nillable pointer.
/// Element description of type xs:string.
    char*                                description                    0;	///< Nillable pointer.
/// Element allowweb of type xs:boolean.
    bool*                                allowweb                       0;	///< Optional element.
/// Element allowdetails of type xs:boolean.
    bool*                                allowdetails                   0;	///< Optional element.
/// Element releaseplanning of type xs:boolean.
    bool*                                releaseplanning                0;	///< Optional element.
};

/// "urn:testtrack-interface":CFolder is a complexType with complexContent extension of "urn:testtrack-interface":CItemToTrack.
/// class ns1__CFolder operations:
/// - soap_new_ns1__CFolder(soap*) allocate
/// - soap_new_ns1__CFolder(soap*, int num) allocate array
/// - soap_new_req_ns1__CFolder(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CFolder(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CFolder(soap*, ns1__CFolder*) deserialize from a stream
/// - int soap_write_ns1__CFolder(soap, ns1__CFolder*) serialize to a stream
class ns1__CFolder
{ public:
/// INHERITED FROM ns1__CItemWithDBRecordId:
/// Element recordid of type xs:long.
    LONG64                               recordid                       1;	///< Required element.
//  END OF INHERITED FROM ns1__CItemWithDBRecordId
/// INHERITED FROM ns1__CItemToTrack:
//  END OF INHERITED FROM ns1__CItemToTrack
/// Element createdbyuser of type xs:long.
    LONG64*                              createdbyuser                  0;	///< Optional element.
/// Element ispublic of type xs:boolean.
    bool*                                ispublic                       0;	///< Optional element.
/// Element modifiedbyuser of type xs:long.
    LONG64*                              modifiedbyuser                 0;	///< Optional element.
/// Element locationaddedfrom of type xs:string.
    char*                                locationaddedfrom              0;	///< Nillable pointer.
/// Element datetimecreated of type xs:dateTime.
    time_t*                              datetimecreated                0;	///< Nillable pointer.
/// Element datetimemodified of type xs:dateTime.
    time_t*                              datetimemodified               0;	///< Nillable pointer.
/// Element name of type xs:string.
    char*                                name                           0;	///< Nillable pointer.
/// Element description of type xs:string.
    char*                                description                    0;	///< Nillable pointer.
/// Element path of type xs:string.
    char*                                path                           0;	///< Nillable pointer.
/// Element order of type xs:long.
    LONG64*                              order                          0;	///< Optional element.
/// Element parentid of type xs:long.
    LONG64*                              parentid                       0;	///< Optional element.
/// Element foldertypename of type xs:string.
    char*                                foldertypename                 0;	///< Nillable pointer.
/// Element webview of type xs:string.
    char*                                webview                        0;	///< Nillable pointer.
/// Element notes of type xs:string.
    char*                                notes                          0;	///< Nillable pointer.
/// Element notesInlineAttachList of type "urn:testtrack-interface":ArrayOfCFileAttachment.
    ArrayOfCFileAttachment*              notesInlineAttachList          0;	///< Nillable pointer.
/// Element noteseditable of type xs:boolean.
    bool*                                noteseditable                  0;	///< Optional element.
/// Element scheduleinfo of type "urn:testtrack-interface":CScheduleInfo.
    ns1__CScheduleInfo*                  scheduleinfo                   0;	///< Nillable pointer.
};

/// "urn:testtrack-interface":CRequirement is a complexType with complexContent extension of "urn:testtrack-interface":CItemToTrack.
/// class ns1__CRequirement operations:
/// - soap_new_ns1__CRequirement(soap*) allocate
/// - soap_new_ns1__CRequirement(soap*, int num) allocate array
/// - soap_new_req_ns1__CRequirement(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CRequirement(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CRequirement(soap*, ns1__CRequirement*) deserialize from a stream
/// - int soap_write_ns1__CRequirement(soap, ns1__CRequirement*) serialize to a stream
class ns1__CRequirement
{ public:
/// INHERITED FROM ns1__CItemWithDBRecordId:
/// Element recordid of type xs:long.
    LONG64                               recordid                       1;	///< Required element.
//  END OF INHERITED FROM ns1__CItemWithDBRecordId
/// INHERITED FROM ns1__CItemToTrack:
//  END OF INHERITED FROM ns1__CItemToTrack
/// Element number of type xs:long.
    LONG64*                              number                         0;	///< Optional element.
/// Element type of type xs:string.
    char*                                type                           1;	///< Required element.
/// Element summary of type xs:string.
    char*                                summary                        0;	///< Nillable pointer.
/// Element tag of type xs:string.
    char*                                tag                            0;	///< Nillable pointer.
/// Element dateEntered of type xs:date.
    xsd__date                            dateEntered                    0;	///< Nillable pointer.
/// Element enteredBy of type xs:string.
    char*                                enteredBy                      0;	///< Nillable pointer.
/// Element importance of type xs:string.
    char*                                importance                     0;	///< Nillable pointer.
/// Element description of type xs:string.
    char*                                description                    0;	///< Nillable pointer.
/// Element descriptionInlineAttachList of type "urn:testtrack-interface":ArrayOfCFileAttachment.
    ArrayOfCFileAttachment*              descriptionInlineAttachList    0;	///< Nillable pointer.
/// Element state of type xs:string.
    char*                                state                          0;	///< Nillable pointer.
/// Element attachmentList of type "urn:testtrack-interface":ArrayOfCFileAttachment.
    ArrayOfCFileAttachment*              attachmentList                 0;	///< Nillable pointer.
/// Element sccFileList of type "urn:testtrack-interface":ArrayOfCSCCFileRecord.
    ArrayOfCSCCFileRecord*               sccFileList                    0;	///< Nillable pointer.
/// Element customFieldList of type "urn:testtrack-interface":ArrayOfCField.
    ArrayOfCField*                       customFieldList                0;	///< Nillable pointer.
/// Element eventList of type "urn:testtrack-interface":ArrayOfCEvent.
    ArrayOfCEvent*                       eventList                      0;	///< Nillable pointer.
/// Element versionList of type "urn:testtrack-interface":ArrayOfCVersionInfo.
    ArrayOfCVersionInfo*                 versionList                    0;	///< Nillable pointer.
/// Element dateTimeCreated of type xs:dateTime.
    time_t*                              dateTimeCreated                0;	///< Nillable pointer.
/// Element createdByUser of type xs:string.
    char*                                createdByUser                  0;	///< Nillable pointer.
/// Element locationAddedFrom of type xs:string.
    char*                                locationAddedFrom              0;	///< Nillable pointer.
/// Element modifiedByUser of type xs:string.
    char*                                modifiedByUser                 0;	///< Nillable pointer.
/// Element dateTimeModified of type xs:dateTime.
    time_t*                              dateTimeModified               0;	///< Nillable pointer.
/// Element actualHours of type xs:double.
    double*                              actualHours                    0;	///< Optional element.
/// Element estimatedHours of type xs:double.
    double*                              estimatedHours                 0;	///< Optional element.
/// Element remainingHours of type xs:double.
    double*                              remainingHours                 0;	///< Optional element.
/// Element variance of type xs:double.
    double*                              variance                       0;	///< Optional element.
/// Element storyPoints of type xs:long.
    LONG64*                              storyPoints                    0;	///< Optional element.
/// Element percentDone of type xs:long.
    LONG64*                              percentDone                    0;	///< Optional element.
};

/// "urn:testtrack-interface":CRequirementDocument is a complexType with complexContent extension of "urn:testtrack-interface":CItemToTrack.
/// class ns1__CRequirementDocument operations:
/// - soap_new_ns1__CRequirementDocument(soap*) allocate
/// - soap_new_ns1__CRequirementDocument(soap*, int num) allocate array
/// - soap_new_req_ns1__CRequirementDocument(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CRequirementDocument(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CRequirementDocument(soap*, ns1__CRequirementDocument*) deserialize from a stream
/// - int soap_write_ns1__CRequirementDocument(soap, ns1__CRequirementDocument*) serialize to a stream
class ns1__CRequirementDocument
{ public:
/// INHERITED FROM ns1__CItemWithDBRecordId:
/// Element recordid of type xs:long.
    LONG64                               recordid                       1;	///< Required element.
//  END OF INHERITED FROM ns1__CItemWithDBRecordId
/// INHERITED FROM ns1__CItemToTrack:
//  END OF INHERITED FROM ns1__CItemToTrack
/// Element number of type xs:long.
    LONG64*                              number                         0;	///< Optional element.
/// Element name of type xs:string.
    char*                                name                           0;	///< Nillable pointer.
/// Element description of type xs:string.
    char*                                description                    0;	///< Nillable pointer.
/// Element descriptionInlineAttachList of type "urn:testtrack-interface":ArrayOfCFileAttachment.
    ArrayOfCFileAttachment*              descriptionInlineAttachList    0;	///< Nillable pointer.
/// Element state of type xs:string.
    char*                                state                          0;	///< Nillable pointer.
/// Element attachmentList of type "urn:testtrack-interface":ArrayOfCFileAttachment.
    ArrayOfCFileAttachment*              attachmentList                 0;	///< Nillable pointer.
/// Element sccFileList of type "urn:testtrack-interface":ArrayOfCSCCFileRecord.
    ArrayOfCSCCFileRecord*               sccFileList                    0;	///< Nillable pointer.
/// Element customFieldList of type "urn:testtrack-interface":ArrayOfCField.
    ArrayOfCField*                       customFieldList                0;	///< Nillable pointer.
/// Element eventList of type "urn:testtrack-interface":ArrayOfCEvent.
    ArrayOfCEvent*                       eventList                      0;	///< Nillable pointer.
/// Element snapshotList of type "urn:testtrack-interface":ArrayOfCSnapshotInfo.
    ArrayOfCSnapshotInfo*                snapshotList                   0;	///< Nillable pointer.
/// Element dateTimeCreated of type xs:dateTime.
    time_t*                              dateTimeCreated                0;	///< Nillable pointer.
/// Element createdByUser of type xs:string.
    char*                                createdByUser                  0;	///< Nillable pointer.
/// Element locationAddedFrom of type xs:string.
    char*                                locationAddedFrom              0;	///< Nillable pointer.
/// Element modifiedByUser of type xs:string.
    char*                                modifiedByUser                 0;	///< Nillable pointer.
/// Element dateTimeModified of type xs:dateTime.
    time_t*                              dateTimeModified               0;	///< Nillable pointer.
/// Element actualHours of type xs:double.
    double*                              actualHours                    0;	///< Optional element.
/// Element estimatedHours of type xs:double.
    double*                              estimatedHours                 0;	///< Optional element.
/// Element remainingHours of type xs:double.
    double*                              remainingHours                 0;	///< Optional element.
/// Element variance of type xs:double.
    double*                              variance                       0;	///< Optional element.
/// Element storyPoints of type xs:long.
    LONG64*                              storyPoints                    0;	///< Optional element.
/// Element percentDone of type xs:long.
    LONG64*                              percentDone                    0;	///< Optional element.
};

/// "urn:testtrack-interface":CSystem is a complexType with complexContent extension of "urn:testtrack-interface":CSystemBase.
/// class ns1__CSystem operations:
/// - soap_new_ns1__CSystem(soap*) allocate
/// - soap_new_ns1__CSystem(soap*, int num) allocate array
/// - soap_new_req_ns1__CSystem(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CSystem(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CSystem(soap*, ns1__CSystem*) deserialize from a stream
/// - int soap_write_ns1__CSystem(soap, ns1__CSystem*) serialize to a stream
class ns1__CSystem
{ public:
/// INHERITED FROM ns1__CItemWithDBRecordId:
/// Element recordid of type xs:long.
    LONG64                               recordid                       1;	///< Required element.
//  END OF INHERITED FROM ns1__CItemWithDBRecordId
/// INHERITED FROM ns1__CItemToTrack:
//  END OF INHERITED FROM ns1__CItemToTrack
/// INHERITED FROM ns1__CSystemBase:
/// Element systemname of type xs:string.
    char*                                systemname                     1;	///< Required element.
//  END OF INHERITED FROM ns1__CSystemBase
/// Element computermodel of type xs:string.
    char*                                computermodel                  0;	///< Nillable pointer.
/// Element computerbrand of type xs:string.
    char*                                computerbrand                  0;	///< Nillable pointer.
/// Element cputype of type xs:string.
    char*                                cputype                        0;	///< Nillable pointer.
/// Element cpuspeed of type xs:string.
    char*                                cpuspeed                       0;	///< Nillable pointer.
/// Element harddisktype of type xs:string.
    char*                                harddisktype                   0;	///< Nillable pointer.
/// Element harddisksize of type xs:string.
    char*                                harddisksize                   0;	///< Nillable pointer.
/// Element ramsize of type xs:string.
    char*                                ramsize                        0;	///< Nillable pointer.
/// Element romsize of type xs:string.
    char*                                romsize                        0;	///< Nillable pointer.
/// Element osname of type xs:string.
    char*                                osname                         0;	///< Nillable pointer.
/// Element osversion of type xs:string.
    char*                                osversion                      0;	///< Nillable pointer.
/// Element videoname of type xs:string.
    char*                                videoname                      0;	///< Nillable pointer.
/// Element hascdrom of type xs:boolean.
    bool*                                hascdrom                       0;	///< Optional element.
/// Element cdrommodel of type xs:string.
    char*                                cdrommodel                     0;	///< Nillable pointer.
/// Element hasscanner of type xs:boolean.
    bool*                                hasscanner                     0;	///< Optional element.
/// Element scannermodel of type xs:string.
    char*                                scannermodel                   0;	///< Nillable pointer.
/// Element hasmodem of type xs:boolean.
    bool*                                hasmodem                       0;	///< Optional element.
/// Element modemmodel of type xs:string.
    char*                                modemmodel                     0;	///< Nillable pointer.
/// Element hasprinter of type xs:boolean.
    bool*                                hasprinter                     0;	///< Optional element.
/// Element printermodel of type xs:string.
    char*                                printermodel                   0;	///< Nillable pointer.
/// Element otherhardware of type xs:string.
    char*                                otherhardware                  0;	///< Nillable pointer.
/// Element hasmultiplemonitors of type xs:boolean.
    bool*                                hasmultiplemonitors            0;	///< Optional element.
};

/// "urn:testtrack-interface":CTestRunVariantField is a complexType with complexContent extension of "urn:testtrack-interface":CMultiSelectDropdownField.
/// @brief Inherits from CMultiSelectDropdownfield. Extends CMultiSelectDropdownField. Stores any additional test variants added to a test run.
/// class ns1__CTestRunVariantField operations:
/// - soap_new_ns1__CTestRunVariantField(soap*) allocate
/// - soap_new_ns1__CTestRunVariantField(soap*, int num) allocate array
/// - soap_new_req_ns1__CTestRunVariantField(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CTestRunVariantField(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CTestRunVariantField(soap*, ns1__CTestRunVariantField*) deserialize from a stream
/// - int soap_write_ns1__CTestRunVariantField(soap, ns1__CTestRunVariantField*) serialize to a stream
class ns1__CTestRunVariantField
{ public:
/// INHERITED FROM ns1__CItemWithDBRecordId:
/// Element recordid of type xs:long.
    LONG64                               recordid                       1;	///< Required element.
//  END OF INHERITED FROM ns1__CItemWithDBRecordId
/// INHERITED FROM ns1__CField:
/// Element name of type xs:string.
    char*                                name                           1;	///< Required element.
//  END OF INHERITED FROM ns1__CField
/// INHERITED FROM ns1__CMultiSelectDropdownField:
/// Element values of type "urn:testtrack-interface":ArrayOfCFieldValue.
    ArrayOfCFieldValue*                  values                         0;	///< Nillable pointer.
/// Element dropdownValues of type "urn:testtrack-interface":ArrayOfCFieldValue.
    ArrayOfCFieldValue*                  dropdownValues                 0;	///< Nillable pointer.
//  END OF INHERITED FROM ns1__CMultiSelectDropdownField
};

/// "urn:testtrack-interface":CTestCaseVariantField is a complexType with complexContent extension of "urn:testtrack-interface":CTestRunVariantField.
/// @brief Inherits from CMultiSelectDropdownfield. Extends CMultiSelectDropdownField. Stores any additional test variants added to a test case.
/// class ns1__CTestCaseVariantField operations:
/// - soap_new_ns1__CTestCaseVariantField(soap*) allocate
/// - soap_new_ns1__CTestCaseVariantField(soap*, int num) allocate array
/// - soap_new_req_ns1__CTestCaseVariantField(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__CTestCaseVariantField(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__CTestCaseVariantField(soap*, ns1__CTestCaseVariantField*) deserialize from a stream
/// - int soap_write_ns1__CTestCaseVariantField(soap, ns1__CTestCaseVariantField*) serialize to a stream
class ns1__CTestCaseVariantField
{ public:
/// INHERITED FROM ns1__CItemWithDBRecordId:
/// Element recordid of type xs:long.
    LONG64                               recordid                       1;	///< Required element.
//  END OF INHERITED FROM ns1__CItemWithDBRecordId
/// INHERITED FROM ns1__CField:
/// Element name of type xs:string.
    char*                                name                           1;	///< Required element.
//  END OF INHERITED FROM ns1__CField
/// INHERITED FROM ns1__CMultiSelectDropdownField:
/// Element values of type "urn:testtrack-interface":ArrayOfCFieldValue.
    ArrayOfCFieldValue*                  values                         0;	///< Nillable pointer.
/// Element dropdownValues of type "urn:testtrack-interface":ArrayOfCFieldValue.
    ArrayOfCFieldValue*                  dropdownValues                 0;	///< Nillable pointer.
//  END OF INHERITED FROM ns1__CMultiSelectDropdownField
/// INHERITED FROM ns1__CTestRunVariantField:
//  END OF INHERITED FROM ns1__CTestRunVariantField
/// Element type of type xs:string.
    char*                                type                           1;	///< Required element.
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   urn:testtrack-interface                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   urn:testtrack-interface                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	ttsoapcgi 
//gsoap ns1  service type:	ttsoapcgiPortType 
//gsoap ns1  service port:	http://192.168.100.19:80/scripts/ttsoapcgi.exe 
//gsoap ns1  service namespace:	urn:testtrack-interface 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage ttsoapcgi Definitions

@section ttsoapcgi_bindings Service Bindings

  - @ref ttsoapcgi

@section ttsoapcgi_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page ttsoapcgi Binding "ttsoapcgi"

@section ttsoapcgi_service Service Documentation "ttsoapcgi"
Returns ttstudio and http hyperlinks for a specified item.

@section ttsoapcgi_operations Operations of Binding  "ttsoapcgi"

  - @ref ns1__getDatabaseList

  - @ref ns1__getProjectList

  - @ref ns1__getProjectDataOptionList

  - @ref ns1__DatabaseLogon

  - @ref ns1__ProjectLogon

  - @ref ns1__DatabaseLogoff

  - @ref ns1__formattedTextSupport

  - @ref ns1__getTableList

  - @ref ns1__getDropdownFieldForTable

  - @ref ns1__getDropdownFieldValuesForTable

  - @ref ns1__addDropdownFieldValuesForTable

  - @ref ns1__GetLinkDefinitionValues

  - @ref ns1__getColumnsForTable

  - @ref ns1__getFilterList

  - @ref ns1__getFilterListForTable

  - @ref ns1__getRecordListForTable

  - @ref ns1__getTestConfig

  - @ref ns1__getTestConfigByRecordID

  - @ref ns1__addTestConfig

  - @ref ns1__editTestConfig

  - @ref ns1__editTestConfigByRecordID

  - @ref ns1__saveTestConfig

  - @ref ns1__deleteTestConfig

  - @ref ns1__deleteTestConfigByRecordID

  - @ref ns1__cancelSaveTestConfig

  - @ref ns1__getAttachmentTypes

  - @ref ns1__getReportRunResultsByName

  - @ref ns1__getReportRunResultsByRecordID

  - @ref ns1__getEventDefinitionList

  - @ref ns1__getDefectEventDefinitionList

  - @ref ns1__getCustomFieldsDefinitionList

  - @ref ns1__getDefectCustomFieldsDefinitionList

  - @ref ns1__getDefect

  - @ref ns1__getDefectByRecordID

  - @ref ns1__addDefect

  - @ref ns1__addDefectWithLink

  - @ref ns1__deleteDefect

  - @ref ns1__deleteDefectByRecordID

  - @ref ns1__editDefect

  - @ref ns1__editDefectByRecordID

  - @ref ns1__saveDefect

  - @ref ns1__cancelSaveDefect

  - @ref ns1__getAttachment

  - @ref ns1__getDefectAttachment

  - @ref ns1__getTask

  - @ref ns1__getTaskByRecordID

  - @ref ns1__addTask

  - @ref ns1__deleteTask

  - @ref ns1__deleteTaskByRecordID

  - @ref ns1__editTask

  - @ref ns1__editTaskByRecordID

  - @ref ns1__saveTask

  - @ref ns1__cancelSaveTask

  - @ref ns1__getGlobalUserList

  - @ref ns1__getGlobalCustomerList

  - @ref ns1__getUserLicenseList

  - @ref ns1__getUser

  - @ref ns1__getUserByRecordID

  - @ref ns1__getUserForCurrentSession

  - @ref ns1__addUser

  - @ref ns1__editUser

  - @ref ns1__editUserByRecordID

  - @ref ns1__saveUser

  - @ref ns1__deleteUser

  - @ref ns1__deleteUserByRecordID

  - @ref ns1__cancelSaveUser

  - @ref ns1__promoteUser

  - @ref ns1__addGlobalUser

  - @ref ns1__getCustomer

  - @ref ns1__getCustomerByRecordID

  - @ref ns1__addCustomer

  - @ref ns1__editCustomer

  - @ref ns1__editCustomerByRecordID

  - @ref ns1__saveCustomer

  - @ref ns1__deleteCustomer

  - @ref ns1__deleteCustomerByRecordID

  - @ref ns1__cancelSaveCustomer

  - @ref ns1__promoteCustomer

  - @ref ns1__addGlobalCustomer

  - @ref ns1__getLinksForItem

  - @ref ns1__getLinksForDefect

  - @ref ns1__getLink

  - @ref ns1__addLink

  - @ref ns1__deleteLink

  - @ref ns1__editLink

  - @ref ns1__saveLink

  - @ref ns1__cancelSaveLink

  - @ref ns1__getTestVariantTypes

  - @ref ns1__getTestRunStepsModes

  - @ref ns1__getTestCase

  - @ref ns1__getTestCaseByRecordID

  - @ref ns1__addTestCase

  - @ref ns1__deleteTestCase

  - @ref ns1__deleteTestCaseByRecordID

  - @ref ns1__editTestCase

  - @ref ns1__editTestCaseByRecordID

  - @ref ns1__saveTestCase

  - @ref ns1__cancelSaveTestCase

  - @ref ns1__getTestRun

  - @ref ns1__getTestRunByRecordID

  - @ref ns1__deleteTestRun

  - @ref ns1__deleteTestRunByRecordID

  - @ref ns1__editTestRun

  - @ref ns1__editTestRunByRecordID

  - @ref ns1__saveTestRun

  - @ref ns1__cancelSaveTestRun

  - @ref ns1__createDefectForTestRun

  - @ref ns1__generateTestRuns

  - @ref ns1__getFolderTypeByName

  - @ref ns1__getFolderTypeList

  - @ref ns1__addFolder

  - @ref ns1__editFolder

  - @ref ns1__editFolderByRecordID

  - @ref ns1__saveFolder

  - @ref ns1__cancelSaveFolder

  - @ref ns1__getFolder

  - @ref ns1__getFolderByRecordID

  - @ref ns1__deleteFolder

  - @ref ns1__deleteFolderByRecordID

  - @ref ns1__addEntityToFolderByRecordID

  - @ref ns1__removeEntityFromFolderByRecordID

  - @ref ns1__getEntityListForFolderByRecordID

  - @ref ns1__getFolderListForEntityByRecordID

  - @ref ns1__getFolderPathSeparator

  - @ref ns1__getRootPublicFolderPath

  - @ref ns1__getRootPrivateFolderPath

  - @ref ns1__editFolderItemRank

  - @ref ns1__saveFolderItemRank

  - @ref ns1__cancelSaveFolderItemRank

  - @ref ns1__getRequirement

  - @ref ns1__getRequirementByRecordID

  - @ref ns1__addRequirement

  - @ref ns1__deleteRequirement

  - @ref ns1__deleteRequirementByRecordID

  - @ref ns1__editRequirement

  - @ref ns1__editRequirementByRecordID

  - @ref ns1__saveRequirement

  - @ref ns1__cancelSaveRequirement

  - @ref ns1__appendToRequirementDocument

  - @ref ns1__getDocumentIDsForRequirement

  - @ref ns1__changeRequirementType

  - @ref ns1__getRequirementDocument

  - @ref ns1__getRequirementDocumentByRecordID

  - @ref ns1__addRequirementDocument

  - @ref ns1__deleteRequirementDocument

  - @ref ns1__deleteRequirementDocumentByRecordID

  - @ref ns1__editRequirementDocument

  - @ref ns1__editRequirementDocumentByRecordID

  - @ref ns1__saveRequirementDocument

  - @ref ns1__cancelSaveRequirementDocument

  - @ref ns1__createSnapshot

  - @ref ns1__getRequirementIDsForDocument

  - @ref ns1__getDocumentTree

  - @ref ns1__getFolderTreeByRecordID

  - @ref ns1__getFolderTree

  - @ref ns1__getItemHyperlinks

@section ttsoapcgi_ports Endpoints of Binding  "ttsoapcgi"

  - http://192.168.100.19:80/scripts/ttsoapcgi.exe

Note: use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   ttsoapcgi                                                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getDatabaseList                                                     *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getDatabaseListResponse" of operation "ns1__getDatabaseList"
struct ns1__getDatabaseListResponse
{
    ArrayOfCDatabase*                   pDBList;
};

/// Operation "ns1__getDatabaseList" of service binding "ttsoapcgi"

/**

Operation details:
Returns a list of database names the SOAP client can connect to. Deprecated; use
getProjectList.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getDatabaseList"

  - Addressing input action: "urn:testtrack-interface#getDatabaseList"

  - Addressing output action: "urn:testtrack-interface#getDatabaseListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getDatabaseList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    // output parameters:
    struct ns1__getDatabaseListResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getDatabaseList(
    struct soap *soap,
    // input parameters:
    // output parameters:
    struct ns1__getDatabaseListResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getDatabaseList SOAP
//gsoap ns1  service method-style:	getDatabaseList rpc
//gsoap ns1  service method-encoding:	getDatabaseList http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getDatabaseList urn:testtrack-interface#getDatabaseList
//gsoap ns1  service method-output-action:	getDatabaseList urn:testtrack-interface#getDatabaseListResponse
int ns1__getDatabaseList(
    struct ns1__getDatabaseListResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getProjectList                                                      *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getProjectListResponse" of operation "ns1__getProjectList"
struct ns1__getProjectListResponse
{
    ArrayOfCProject*                    pProjList;
};

/// Operation "ns1__getProjectList" of service binding "ttsoapcgi"

/**

Operation details:
Returns a list of project names the SOAP client can connect to.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getProjectList"

  - Addressing input action: "urn:testtrack-interface#getProjectList"

  - Addressing output action: "urn:testtrack-interface#getProjectListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getProjectList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    char*                               username,
    char*                               password,
    // output parameters:
    struct ns1__getProjectListResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getProjectList(
    struct soap *soap,
    // input parameters:
    char*                               username,
    char*                               password,
    // output parameters:
    struct ns1__getProjectListResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getProjectList SOAP
//gsoap ns1  service method-style:	getProjectList rpc
//gsoap ns1  service method-encoding:	getProjectList http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getProjectList urn:testtrack-interface#getProjectList
//gsoap ns1  service method-output-action:	getProjectList urn:testtrack-interface#getProjectListResponse
int ns1__getProjectList(
    char*                               username,	///< Input parameter
    char*                               password,	///< Input parameter
    struct ns1__getProjectListResponse &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getProjectDataOptionList                                            *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getProjectDataOptionListResponse" of operation "ns1__getProjectDataOptionList"
struct ns1__getProjectDataOptionListResponse
{
    ArrayOfCProjectDataOption*          pProjTypes;
};

/// Operation "ns1__getProjectDataOptionList" of service binding "ttsoapcgi"

/**

Operation details:
Returns what type of access SOAP user has. For example, logging in with access to
TestTrack Pro.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getProjectDataOptionList"

  - Addressing input action: "urn:testtrack-interface#getProjectDataOptionList"

  - Addressing output action: "urn:testtrack-interface#getProjectDataOptionListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getProjectDataOptionList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    // output parameters:
    struct ns1__getProjectDataOptionListResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getProjectDataOptionList(
    struct soap *soap,
    // input parameters:
    // output parameters:
    struct ns1__getProjectDataOptionListResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getProjectDataOptionList SOAP
//gsoap ns1  service method-style:	getProjectDataOptionList rpc
//gsoap ns1  service method-encoding:	getProjectDataOptionList http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getProjectDataOptionList urn:testtrack-interface#getProjectDataOptionList
//gsoap ns1  service method-output-action:	getProjectDataOptionList urn:testtrack-interface#getProjectDataOptionListResponse
int ns1__getProjectDataOptionList(
    struct ns1__getProjectDataOptionListResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__DatabaseLogon                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__DatabaseLogon" of service binding "ttsoapcgi"

/**

Operation details:
Logs SOAP user into TestTrack. Deprecated; use ProjectLogon.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#DatabaseLogon"

  - Addressing input action: "urn:testtrack-interface#DatabaseLogon"

  - Addressing output action: "urn:testtrack-interface#DatabaseLogonResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__DatabaseLogon(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    char*                               dbname,
    char*                               username,
    char*                               password,
    // output parameters:
    LONG64                             &Cookie
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__DatabaseLogon(
    struct soap *soap,
    // input parameters:
    char*                               dbname,
    char*                               username,
    char*                               password,
    // output parameters:
    LONG64                             &Cookie
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DatabaseLogon SOAP
//gsoap ns1  service method-style:	DatabaseLogon rpc
//gsoap ns1  service method-encoding:	DatabaseLogon http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	DatabaseLogon urn:testtrack-interface#DatabaseLogon
//gsoap ns1  service method-output-action:	DatabaseLogon urn:testtrack-interface#DatabaseLogonResponse
int ns1__DatabaseLogon(
    char*                               dbname,	///< Input parameter
    char*                               username,	///< Input parameter
    char*                               password,	///< Input parameter
    LONG64                             &Cookie	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__ProjectLogon                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__ProjectLogon" of service binding "ttsoapcgi"

/**

Operation details:
Logs SOAP user into TestTrack. Uses a project name, which the getProjectList request
returns, with a username and password. This request returns a cookie that is used
in subsequent calls. NOTE: In the TestTrack Client, users can be required to change
their passwords at the next login. This option is not enforced in the SOAP client
because we do not want to prevent SOAP scripts from running because of the change
password option.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#ProjectLogon"

  - Addressing input action: "urn:testtrack-interface#ProjectLogon"

  - Addressing output action: "urn:testtrack-interface#ProjectLogonResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__ProjectLogon(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__CProject*                      pProj,
    char*                               username,
    char*                               password,
    // output parameters:
    LONG64                             &Cookie
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__ProjectLogon(
    struct soap *soap,
    // input parameters:
    ns1__CProject*                      pProj,
    char*                               username,
    char*                               password,
    // output parameters:
    LONG64                             &Cookie
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ProjectLogon SOAP
//gsoap ns1  service method-style:	ProjectLogon rpc
//gsoap ns1  service method-encoding:	ProjectLogon http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	ProjectLogon urn:testtrack-interface#ProjectLogon
//gsoap ns1  service method-output-action:	ProjectLogon urn:testtrack-interface#ProjectLogonResponse
int ns1__ProjectLogon(
    ns1__CProject*                      pProj,	///< Input parameter
    char*                               username,	///< Input parameter
    char*                               password,	///< Input parameter
    LONG64                             &Cookie	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__DatabaseLogoff                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__DatabaseLogoff" of service binding "ttsoapcgi"

/**

Operation details:
Logs SOAP user out of TestTrack. This operation is used for session management and
should be the final call made to the SOAP server. It performs session clean up,
logs off all users, and closes all connections to the TestTrack project.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#DatabaseLogoff"

  - Addressing input action: "urn:testtrack-interface#DatabaseLogoff"

  - Addressing output action: "urn:testtrack-interface#DatabaseLogoffResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__DatabaseLogoff(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__DatabaseLogoff(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DatabaseLogoff SOAP
//gsoap ns1  service method-style:	DatabaseLogoff rpc
//gsoap ns1  service method-encoding:	DatabaseLogoff http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	DatabaseLogoff urn:testtrack-interface#DatabaseLogoff
//gsoap ns1  service method-output-action:	DatabaseLogoff urn:testtrack-interface#DatabaseLogoffResponse
int ns1__DatabaseLogoff(
    LONG64                              cookie,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__formattedTextSupport                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__formattedTextSupport" of service binding "ttsoapcgi"

/**

Operation details:
Turns formattedTextSupport on or off. Defaults to plain text. Pass in 'true' to
turn rich text on.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__formattedTextSupport(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    bool                                enableFormattedText,
    // output parameters:
    bool                               &formattingEnabled
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__formattedTextSupport(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    bool                                enableFormattedText,
    // output parameters:
    bool                               &formattingEnabled
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	formattedTextSupport SOAP
//gsoap ns1  service method-style:	formattedTextSupport rpc
//gsoap ns1  service method-encoding:	formattedTextSupport http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	formattedTextSupport ""
//gsoap ns1  service method-output-action:	formattedTextSupport Response
int ns1__formattedTextSupport(
    LONG64                              cookie,	///< Input parameter
    bool                                enableFormattedText,	///< Input parameter
    bool                               &formattingEnabled	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getTableList                                                        *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getTableListResponse" of operation "ns1__getTableList"
struct ns1__getTableListResponse
{
    ArrayOfCDatabaseTable*              pTableList;
};

/// Operation "ns1__getTableList" of service binding "ttsoapcgi"

/**

Operation details:
Returns a list of tables the user can access. Many TestTrack SOAP requests and types
use a table name as a parameter. This request filters out tables the SOAP user
does not have security access to.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getTableList"

  - Addressing input action: "urn:testtrack-interface#getTableList"

  - Addressing output action: "urn:testtrack-interface#getTableListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getTableList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    // output parameters:
    struct ns1__getTableListResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getTableList(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    // output parameters:
    struct ns1__getTableListResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getTableList SOAP
//gsoap ns1  service method-style:	getTableList rpc
//gsoap ns1  service method-encoding:	getTableList http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getTableList urn:testtrack-interface#getTableList
//gsoap ns1  service method-output-action:	getTableList urn:testtrack-interface#getTableListResponse
int ns1__getTableList(
    LONG64                              cookie,	///< Input parameter
    struct ns1__getTableListResponse   &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getDropdownFieldForTable                                            *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getDropdownFieldForTableResponse" of operation "ns1__getDropdownFieldForTable"
struct ns1__getDropdownFieldForTableResponse
{
    ArrayOfCTableField*                 pFieldList;
};

/// Operation "ns1__getDropdownFieldForTable" of service binding "ttsoapcgi"

/**

Operation details:
Returns table drop-down field. Fields only access specific values and are included
as a subset of columns returned from getColumnsForTable. Use getDropdownFieldValuesForTable
to get field values.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getDropdownFieldForTable"

  - Addressing input action: "urn:testtrack-interface#getDropdownFieldForTable"

  - Addressing output action: "urn:testtrack-interface#getDropdownFieldForTableResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getDropdownFieldForTable(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    char*                               tablename,
    // output parameters:
    struct ns1__getDropdownFieldForTableResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getDropdownFieldForTable(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    char*                               tablename,
    // output parameters:
    struct ns1__getDropdownFieldForTableResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getDropdownFieldForTable SOAP
//gsoap ns1  service method-style:	getDropdownFieldForTable rpc
//gsoap ns1  service method-encoding:	getDropdownFieldForTable http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getDropdownFieldForTable urn:testtrack-interface#getDropdownFieldForTable
//gsoap ns1  service method-output-action:	getDropdownFieldForTable urn:testtrack-interface#getDropdownFieldForTableResponse
int ns1__getDropdownFieldForTable(
    LONG64                              cookie,	///< Input parameter
    char*                               tablename,	///< Input parameter
    struct ns1__getDropdownFieldForTableResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getDropdownFieldValuesForTable                                      *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getDropdownFieldValuesForTableResponse" of operation "ns1__getDropdownFieldValuesForTable"
struct ns1__getDropdownFieldValuesForTableResponse
{
    ArrayOfCFieldValue*                 pValueList;
};

/// Operation "ns1__getDropdownFieldValuesForTable" of service binding "ttsoapcgi"

/**

Operation details:
Returns table drop-down field values. Use getDropdownFieldForTable to get fields.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getDropdownFieldValuesForTable"

  - Addressing input action: "urn:testtrack-interface#getDropdownFieldValuesForTable"

  - Addressing output action: "urn:testtrack-interface#getDropdownFieldValuesForTableResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getDropdownFieldValuesForTable(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    char*                               tablename,
    char*                               fieldname,
    // output parameters:
    struct ns1__getDropdownFieldValuesForTableResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getDropdownFieldValuesForTable(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    char*                               tablename,
    char*                               fieldname,
    // output parameters:
    struct ns1__getDropdownFieldValuesForTableResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getDropdownFieldValuesForTable SOAP
//gsoap ns1  service method-style:	getDropdownFieldValuesForTable rpc
//gsoap ns1  service method-encoding:	getDropdownFieldValuesForTable http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getDropdownFieldValuesForTable urn:testtrack-interface#getDropdownFieldValuesForTable
//gsoap ns1  service method-output-action:	getDropdownFieldValuesForTable urn:testtrack-interface#getDropdownFieldValuesForTableResponse
int ns1__getDropdownFieldValuesForTable(
    LONG64                              cookie,	///< Input parameter
    char*                               tablename,	///< Input parameter
    char*                               fieldname,	///< Input parameter
    struct ns1__getDropdownFieldValuesForTableResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__addDropdownFieldValuesForTable                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__addDropdownFieldValuesForTable" of service binding "ttsoapcgi"

/**

Operation details:
Adds drop-down values to a selected field. The list of values is sent to the server
with the new value added last.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#addDropdownFieldValuesForTable"

  - Addressing input action: "urn:testtrack-interface#addDropdownFieldValuesForTable"

  - Addressing output action: "urn:testtrack-interface#addDropdownFieldValuesForTableResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__addDropdownFieldValuesForTable(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    char*                               tablename,
    char*                               fieldname,
    ArrayOfCFieldValue*                 pValueList,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__addDropdownFieldValuesForTable(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    char*                               tablename,
    char*                               fieldname,
    ArrayOfCFieldValue*                 pValueList,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	addDropdownFieldValuesForTable SOAP
//gsoap ns1  service method-style:	addDropdownFieldValuesForTable rpc
//gsoap ns1  service method-encoding:	addDropdownFieldValuesForTable http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	addDropdownFieldValuesForTable urn:testtrack-interface#addDropdownFieldValuesForTable
//gsoap ns1  service method-output-action:	addDropdownFieldValuesForTable urn:testtrack-interface#addDropdownFieldValuesForTableResponse
int ns1__addDropdownFieldValuesForTable(
    LONG64                              cookie,	///< Input parameter
    char*                               tablename,	///< Input parameter
    char*                               fieldname,	///< Input parameter
    ArrayOfCFieldValue*                 pValueList,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetLinkDefinitionValues                                             *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__GetLinkDefinitionValuesResponse" of operation "ns1__GetLinkDefinitionValues"
struct ns1__GetLinkDefinitionValuesResponse
{
    ArrayOfCFieldValue*                 pValueList;
};

/// Operation "ns1__GetLinkDefinitionValues" of service binding "ttsoapcgi"

/**

Operation details:
Returns a list of defined links.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#GetLinkDefinitionValues"

  - Addressing input action: "urn:testtrack-interface#GetLinkDefinitionValues"

  - Addressing output action: "urn:testtrack-interface#GetLinkDefinitionValuesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetLinkDefinitionValues(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    // output parameters:
    struct ns1__GetLinkDefinitionValuesResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetLinkDefinitionValues(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    // output parameters:
    struct ns1__GetLinkDefinitionValuesResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetLinkDefinitionValues SOAP
//gsoap ns1  service method-style:	GetLinkDefinitionValues rpc
//gsoap ns1  service method-encoding:	GetLinkDefinitionValues http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	GetLinkDefinitionValues urn:testtrack-interface#GetLinkDefinitionValues
//gsoap ns1  service method-output-action:	GetLinkDefinitionValues urn:testtrack-interface#GetLinkDefinitionValuesResponse
int ns1__GetLinkDefinitionValues(
    LONG64                              cookie,	///< Input parameter
    struct ns1__GetLinkDefinitionValuesResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getColumnsForTable                                                  *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getColumnsForTableResponse" of operation "ns1__getColumnsForTable"
struct ns1__getColumnsForTableResponse
{
    ArrayOfCTableColumn*                pColumnList;
};

/// Operation "ns1__getColumnsForTable" of service binding "ttsoapcgi"

/**

Operation details:
Returns column fields that are displayed for a specific table.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getColumnsForTable"

  - Addressing input action: "urn:testtrack-interface#getColumnsForTable"

  - Addressing output action: "urn:testtrack-interface#getColumnsForTableResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getColumnsForTable(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    char*                               tablename,
    // output parameters:
    struct ns1__getColumnsForTableResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getColumnsForTable(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    char*                               tablename,
    // output parameters:
    struct ns1__getColumnsForTableResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getColumnsForTable SOAP
//gsoap ns1  service method-style:	getColumnsForTable rpc
//gsoap ns1  service method-encoding:	getColumnsForTable http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getColumnsForTable urn:testtrack-interface#getColumnsForTable
//gsoap ns1  service method-output-action:	getColumnsForTable urn:testtrack-interface#getColumnsForTableResponse
int ns1__getColumnsForTable(
    LONG64                              cookie,	///< Input parameter
    char*                               tablename,	///< Input parameter
    struct ns1__getColumnsForTableResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getFilterList                                                       *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getFilterListResponse" of operation "ns1__getFilterList"
struct ns1__getFilterListResponse
{
    ArrayOfCFilter*                     pFilterList;
};

/// Operation "ns1__getFilterList" of service binding "ttsoapcgi"

/**

Operation details:
Returns a list of filters.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getFilterList"

  - Addressing input action: "urn:testtrack-interface#getFilterList"

  - Addressing output action: "urn:testtrack-interface#getFilterListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getFilterList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    // output parameters:
    struct ns1__getFilterListResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getFilterList(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    // output parameters:
    struct ns1__getFilterListResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getFilterList SOAP
//gsoap ns1  service method-style:	getFilterList rpc
//gsoap ns1  service method-encoding:	getFilterList http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getFilterList urn:testtrack-interface#getFilterList
//gsoap ns1  service method-output-action:	getFilterList urn:testtrack-interface#getFilterListResponse
int ns1__getFilterList(
    LONG64                              cookie,	///< Input parameter
    struct ns1__getFilterListResponse  &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getFilterListForTable                                               *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getFilterListForTableResponse" of operation "ns1__getFilterListForTable"
struct ns1__getFilterListForTableResponse
{
    ArrayOfCFilter*                     pFilterList;
};

/// Operation "ns1__getFilterListForTable" of service binding "ttsoapcgi"

/**

Operation details:
Returns list of filters that a specified table can use.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getFilterListForTable"

  - Addressing input action: "urn:testtrack-interface#getFilterListForTable"

  - Addressing output action: "urn:testtrack-interface#getFilterListForTableResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getFilterListForTable(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    char*                               tablename,
    // output parameters:
    struct ns1__getFilterListForTableResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getFilterListForTable(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    char*                               tablename,
    // output parameters:
    struct ns1__getFilterListForTableResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getFilterListForTable SOAP
//gsoap ns1  service method-style:	getFilterListForTable rpc
//gsoap ns1  service method-encoding:	getFilterListForTable http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getFilterListForTable urn:testtrack-interface#getFilterListForTable
//gsoap ns1  service method-output-action:	getFilterListForTable urn:testtrack-interface#getFilterListForTableResponse
int ns1__getFilterListForTable(
    LONG64                              cookie,	///< Input parameter
    char*                               tablename,	///< Input parameter
    struct ns1__getFilterListForTableResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getRecordListForTable                                               *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getRecordListForTableResponse" of operation "ns1__getRecordListForTable"
struct ns1__getRecordListForTableResponse
{
    ns1__CRecordListSoap*               recordlist;
};

/// Operation "ns1__getRecordListForTable" of service binding "ttsoapcgi"

/**

Operation details:
Returns table data. The filtername parameter applies a filter to the results. The
columnlist parameter limits the returned data to specific columns. NOTE: Only the
first 128 characters are returned. Following are the table names: Customer, Defect,
Folder, Links, Report, Requirement, Requirement Document, Task, Test Case, Test
Config, Test Run, Test Variant, User.  The returned DateTime data format is based
on the server locale setting.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getRecordListForTable"

  - Addressing input action: "urn:testtrack-interface#getRecordListForTable"

  - Addressing output action: "urn:testtrack-interface#getRecordListForTableResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getRecordListForTable(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    char*                               tablename,
    char*                               filtername,
    ArrayOfCTableColumn*                columnlist,
    // output parameters:
    struct ns1__getRecordListForTableResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getRecordListForTable(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    char*                               tablename,
    char*                               filtername,
    ArrayOfCTableColumn*                columnlist,
    // output parameters:
    struct ns1__getRecordListForTableResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getRecordListForTable SOAP
//gsoap ns1  service method-style:	getRecordListForTable rpc
//gsoap ns1  service method-encoding:	getRecordListForTable http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getRecordListForTable urn:testtrack-interface#getRecordListForTable
//gsoap ns1  service method-output-action:	getRecordListForTable urn:testtrack-interface#getRecordListForTableResponse
int ns1__getRecordListForTable(
    LONG64                              cookie,	///< Input parameter
    char*                               tablename,	///< Input parameter
    char*                               filtername,	///< Input parameter
    ArrayOfCTableColumn*                columnlist,	///< Input parameter
    struct ns1__getRecordListForTableResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getTestConfig                                                       *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getTestConfigResponse" of operation "ns1__getTestConfig"
struct ns1__getTestConfigResponse
{
    ns1__CSystem*                       pTestConfig;
};

/// Operation "ns1__getTestConfig" of service binding "ttsoapcgi"

/**

Operation details:
Returns a list of test configs.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getTestConfig"

  - Addressing input action: "urn:testtrack-interface#getTestConfig"

  - Addressing output action: "urn:testtrack-interface#getTestConfigResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getTestConfig(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    char*                               name,
    // output parameters:
    struct ns1__getTestConfigResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getTestConfig(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    char*                               name,
    // output parameters:
    struct ns1__getTestConfigResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getTestConfig SOAP
//gsoap ns1  service method-style:	getTestConfig rpc
//gsoap ns1  service method-encoding:	getTestConfig http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getTestConfig urn:testtrack-interface#getTestConfig
//gsoap ns1  service method-output-action:	getTestConfig urn:testtrack-interface#getTestConfigResponse
int ns1__getTestConfig(
    LONG64                              cookie,	///< Input parameter
    char*                               name,	///< Input parameter
    struct ns1__getTestConfigResponse  &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getTestConfigByRecordID                                             *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getTestConfigByRecordIDResponse" of operation "ns1__getTestConfigByRecordID"
struct ns1__getTestConfigByRecordIDResponse
{
    ns1__CSystem*                       pTestConfig;
};

/// Operation "ns1__getTestConfigByRecordID" of service binding "ttsoapcgi"

/**

Operation details:
Returns a test config based on record ID.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getTestConfigByRecordID"

  - Addressing input action: "urn:testtrack-interface#getTestConfigByRecordID"

  - Addressing output action: "urn:testtrack-interface#getTestConfigByRecordIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getTestConfigByRecordID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    struct ns1__getTestConfigByRecordIDResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getTestConfigByRecordID(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    struct ns1__getTestConfigByRecordIDResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getTestConfigByRecordID SOAP
//gsoap ns1  service method-style:	getTestConfigByRecordID rpc
//gsoap ns1  service method-encoding:	getTestConfigByRecordID http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getTestConfigByRecordID urn:testtrack-interface#getTestConfigByRecordID
//gsoap ns1  service method-output-action:	getTestConfigByRecordID urn:testtrack-interface#getTestConfigByRecordIDResponse
int ns1__getTestConfigByRecordID(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    struct ns1__getTestConfigByRecordIDResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__addTestConfig                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__addTestConfig" of service binding "ttsoapcgi"

/**

Operation details:
Creates a test config.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#addTestConfig"

  - Addressing input action: "urn:testtrack-interface#addTestConfig"

  - Addressing output action: "urn:testtrack-interface#addTestConfigResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__addTestConfig(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    ns1__CSystem*                       pTestConfig,
    // output parameters:
    LONG64                             &recordID
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__addTestConfig(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    ns1__CSystem*                       pTestConfig,
    // output parameters:
    LONG64                             &recordID
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	addTestConfig SOAP
//gsoap ns1  service method-style:	addTestConfig rpc
//gsoap ns1  service method-encoding:	addTestConfig http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	addTestConfig urn:testtrack-interface#addTestConfig
//gsoap ns1  service method-output-action:	addTestConfig urn:testtrack-interface#addTestConfigResponse
int ns1__addTestConfig(
    LONG64                              cookie,	///< Input parameter
    ns1__CSystem*                       pTestConfig,	///< Input parameter
    LONG64                             &recordID	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__editTestConfig                                                      *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__editTestConfigResponse" of operation "ns1__editTestConfig"
struct ns1__editTestConfigResponse
{
    ns1__CSystem*                       pTestConfig;
};

/// Operation "ns1__editTestConfig" of service binding "ttsoapcgi"

/**

Operation details:
Retrieves a test config for editing. The saveTestConfig request must be called and
passed the changed object.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#editTestConfig"

  - Addressing input action: "urn:testtrack-interface#editTestConfig"

  - Addressing output action: "urn:testtrack-interface#editTestConfigResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__editTestConfig(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    char*                               name,
    // output parameters:
    struct ns1__editTestConfigResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__editTestConfig(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    char*                               name,
    // output parameters:
    struct ns1__editTestConfigResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	editTestConfig SOAP
//gsoap ns1  service method-style:	editTestConfig rpc
//gsoap ns1  service method-encoding:	editTestConfig http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	editTestConfig urn:testtrack-interface#editTestConfig
//gsoap ns1  service method-output-action:	editTestConfig urn:testtrack-interface#editTestConfigResponse
int ns1__editTestConfig(
    LONG64                              cookie,	///< Input parameter
    char*                               name,	///< Input parameter
    struct ns1__editTestConfigResponse &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__editTestConfigByRecordID                                            *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__editTestConfigByRecordIDResponse" of operation "ns1__editTestConfigByRecordID"
struct ns1__editTestConfigByRecordIDResponse
{
    ns1__CSystem*                       pTestConfig;
};

/// Operation "ns1__editTestConfigByRecordID" of service binding "ttsoapcgi"

/**

Operation details:
Retrieves a test config for editing based on record ID. The saveTestConfig request
must be called and passed the changed objects.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#editTestConfigByRecordID"

  - Addressing input action: "urn:testtrack-interface#editTestConfigByRecordID"

  - Addressing output action: "urn:testtrack-interface#editTestConfigByRecordIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__editTestConfigByRecordID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    struct ns1__editTestConfigByRecordIDResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__editTestConfigByRecordID(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    struct ns1__editTestConfigByRecordIDResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	editTestConfigByRecordID SOAP
//gsoap ns1  service method-style:	editTestConfigByRecordID rpc
//gsoap ns1  service method-encoding:	editTestConfigByRecordID http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	editTestConfigByRecordID urn:testtrack-interface#editTestConfigByRecordID
//gsoap ns1  service method-output-action:	editTestConfigByRecordID urn:testtrack-interface#editTestConfigByRecordIDResponse
int ns1__editTestConfigByRecordID(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    struct ns1__editTestConfigByRecordIDResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__saveTestConfig                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__saveTestConfig" of service binding "ttsoapcgi"

/**

Operation details:
Saves a modified test config.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#saveTestConfig"

  - Addressing input action: "urn:testtrack-interface#saveTestConfig"

  - Addressing output action: "urn:testtrack-interface#saveTestConfigResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__saveTestConfig(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    ns1__CSystem*                       pTestConfig,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__saveTestConfig(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    ns1__CSystem*                       pTestConfig,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	saveTestConfig SOAP
//gsoap ns1  service method-style:	saveTestConfig rpc
//gsoap ns1  service method-encoding:	saveTestConfig http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	saveTestConfig urn:testtrack-interface#saveTestConfig
//gsoap ns1  service method-output-action:	saveTestConfig urn:testtrack-interface#saveTestConfigResponse
int ns1__saveTestConfig(
    LONG64                              cookie,	///< Input parameter
    ns1__CSystem*                       pTestConfig,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__deleteTestConfig                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__deleteTestConfig" of service binding "ttsoapcgi"

/**

Operation details:
Deletes a test config.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#deleteTestConfig"

  - Addressing input action: "urn:testtrack-interface#deleteTestConfig"

  - Addressing output action: "urn:testtrack-interface#deleteTestConfigResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__deleteTestConfig(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    char*                               name,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__deleteTestConfig(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    char*                               name,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	deleteTestConfig SOAP
//gsoap ns1  service method-style:	deleteTestConfig rpc
//gsoap ns1  service method-encoding:	deleteTestConfig http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	deleteTestConfig urn:testtrack-interface#deleteTestConfig
//gsoap ns1  service method-output-action:	deleteTestConfig urn:testtrack-interface#deleteTestConfigResponse
int ns1__deleteTestConfig(
    LONG64                              cookie,	///< Input parameter
    char*                               name,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__deleteTestConfigByRecordID                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__deleteTestConfigByRecordID" of service binding "ttsoapcgi"

/**

Operation details:
Deletes a test config based on record ID.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#deleteTestConfigByRecordID"

  - Addressing input action: "urn:testtrack-interface#deleteTestConfigByRecordID"

  - Addressing output action: "urn:testtrack-interface#deleteTestConfigByRecordIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__deleteTestConfigByRecordID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__deleteTestConfigByRecordID(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	deleteTestConfigByRecordID SOAP
//gsoap ns1  service method-style:	deleteTestConfigByRecordID rpc
//gsoap ns1  service method-encoding:	deleteTestConfigByRecordID http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	deleteTestConfigByRecordID urn:testtrack-interface#deleteTestConfigByRecordID
//gsoap ns1  service method-output-action:	deleteTestConfigByRecordID urn:testtrack-interface#deleteTestConfigByRecordIDResponse
int ns1__deleteTestConfigByRecordID(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__cancelSaveTestConfig                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__cancelSaveTestConfig" of service binding "ttsoapcgi"

/**

Operation details:
Discards changes to a test config.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#cancelSaveTestConfig"

  - Addressing input action: "urn:testtrack-interface#cancelSaveTestConfig"

  - Addressing output action: "urn:testtrack-interface#cancelSaveTestConfigResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__cancelSaveTestConfig(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__cancelSaveTestConfig(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	cancelSaveTestConfig SOAP
//gsoap ns1  service method-style:	cancelSaveTestConfig rpc
//gsoap ns1  service method-encoding:	cancelSaveTestConfig http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	cancelSaveTestConfig urn:testtrack-interface#cancelSaveTestConfig
//gsoap ns1  service method-output-action:	cancelSaveTestConfig urn:testtrack-interface#cancelSaveTestConfigResponse
int ns1__cancelSaveTestConfig(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getAttachmentTypes                                                  *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getAttachmentTypesResponse" of operation "ns1__getAttachmentTypes"
struct ns1__getAttachmentTypesResponse
{
    ArrayOfstring*                      pTypeList;
};

/// Operation "ns1__getAttachmentTypes" of service binding "ttsoapcgi"

/**

Operation details:
Returns the values (Standard, Script, Run Result) that are used in the m-strType
var of an attachment in an attachmentList for core items.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getAttachmentTypes"

  - Addressing input action: "urn:testtrack-interface#getAttachmentTypes"

  - Addressing output action: "urn:testtrack-interface#getAttachmentTypesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getAttachmentTypes(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    // output parameters:
    struct ns1__getAttachmentTypesResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getAttachmentTypes(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    // output parameters:
    struct ns1__getAttachmentTypesResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getAttachmentTypes SOAP
//gsoap ns1  service method-style:	getAttachmentTypes rpc
//gsoap ns1  service method-encoding:	getAttachmentTypes http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getAttachmentTypes urn:testtrack-interface#getAttachmentTypes
//gsoap ns1  service method-output-action:	getAttachmentTypes urn:testtrack-interface#getAttachmentTypesResponse
int ns1__getAttachmentTypes(
    LONG64                              cookie,	///< Input parameter
    struct ns1__getAttachmentTypesResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getReportRunResultsByName                                           *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getReportRunResultsByNameResponse" of operation "ns1__getReportRunResultsByName"
struct ns1__getReportRunResultsByNameResponse
{
    ns1__CReportRunResults*             results;
};

/// Operation "ns1__getReportRunResultsByName" of service binding "ttsoapcgi"

/**

Operation details:
Runs a report and returns results based on report names. NOTE: Live charts and interactively
filtered reports are not supported.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getReportRunResultsByName"

  - Addressing input action: "urn:testtrack-interface#getReportRunResultsByName"

  - Addressing output action: "urn:testtrack-interface#getReportRunResultsByNameResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getReportRunResultsByName(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    char*                               name,
    // output parameters:
    struct ns1__getReportRunResultsByNameResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getReportRunResultsByName(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    char*                               name,
    // output parameters:
    struct ns1__getReportRunResultsByNameResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getReportRunResultsByName SOAP
//gsoap ns1  service method-style:	getReportRunResultsByName rpc
//gsoap ns1  service method-encoding:	getReportRunResultsByName http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getReportRunResultsByName urn:testtrack-interface#getReportRunResultsByName
//gsoap ns1  service method-output-action:	getReportRunResultsByName urn:testtrack-interface#getReportRunResultsByNameResponse
int ns1__getReportRunResultsByName(
    LONG64                              cookie,	///< Input parameter
    char*                               name,	///< Input parameter
    struct ns1__getReportRunResultsByNameResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getReportRunResultsByRecordID                                       *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getReportRunResultsByRecordIDResponse" of operation "ns1__getReportRunResultsByRecordID"
struct ns1__getReportRunResultsByRecordIDResponse
{
    ns1__CReportRunResults*             results;
};

/// Operation "ns1__getReportRunResultsByRecordID" of service binding "ttsoapcgi"

/**

Operation details:
Runs a report and returns results based on report ID. NOTE: Live charts and interactively
filtered reports are not supported.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getReportRunResultsByRecordID"

  - Addressing input action: "urn:testtrack-interface#getReportRunResultsByRecordID"

  - Addressing output action: "urn:testtrack-interface#getReportRunResultsByRecordIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getReportRunResultsByRecordID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    struct ns1__getReportRunResultsByRecordIDResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getReportRunResultsByRecordID(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    struct ns1__getReportRunResultsByRecordIDResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getReportRunResultsByRecordID SOAP
//gsoap ns1  service method-style:	getReportRunResultsByRecordID rpc
//gsoap ns1  service method-encoding:	getReportRunResultsByRecordID http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getReportRunResultsByRecordID urn:testtrack-interface#getReportRunResultsByRecordID
//gsoap ns1  service method-output-action:	getReportRunResultsByRecordID urn:testtrack-interface#getReportRunResultsByRecordIDResponse
int ns1__getReportRunResultsByRecordID(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    struct ns1__getReportRunResultsByRecordIDResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getEventDefinitionList                                              *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getEventDefinitionListResponse" of operation "ns1__getEventDefinitionList"
struct ns1__getEventDefinitionListResponse
{
    ArrayOfCEventDefinition*            EventDefinitionList;
};

/// Operation "ns1__getEventDefinitionList" of service binding "ttsoapcgi"

/**

Operation details:
Returns a list of event definitions that describe what fields are included with
each event.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getEventDefinitionList"

  - Addressing input action: "urn:testtrack-interface#getEventDefinitionList"

  - Addressing output action: "urn:testtrack-interface#getEventDefinitionListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getEventDefinitionList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    char*                               tablename,
    // output parameters:
    struct ns1__getEventDefinitionListResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getEventDefinitionList(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    char*                               tablename,
    // output parameters:
    struct ns1__getEventDefinitionListResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getEventDefinitionList SOAP
//gsoap ns1  service method-style:	getEventDefinitionList rpc
//gsoap ns1  service method-encoding:	getEventDefinitionList http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getEventDefinitionList urn:testtrack-interface#getEventDefinitionList
//gsoap ns1  service method-output-action:	getEventDefinitionList urn:testtrack-interface#getEventDefinitionListResponse
int ns1__getEventDefinitionList(
    LONG64                              cookie,	///< Input parameter
    char*                               tablename,	///< Input parameter
    struct ns1__getEventDefinitionListResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getDefectEventDefinitionList                                        *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getDefectEventDefinitionListResponse" of operation "ns1__getDefectEventDefinitionList"
struct ns1__getDefectEventDefinitionListResponse
{
    ArrayOfCDefectEventDefinition*      EventDefinitionList;
};

/// Operation "ns1__getDefectEventDefinitionList" of service binding "ttsoapcgi"

/**

Operation details:
Returns a list of defect event definitions that describe the fields included with
each event.  Deprecated; use getEventDefinitionList.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getDefectEventDefinitionList"

  - Addressing input action: "urn:testtrack-interface#getDefectEventDefinitionList"

  - Addressing output action: "urn:testtrack-interface#getDefectEventDefinitionListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getDefectEventDefinitionList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    // output parameters:
    struct ns1__getDefectEventDefinitionListResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getDefectEventDefinitionList(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    // output parameters:
    struct ns1__getDefectEventDefinitionListResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getDefectEventDefinitionList SOAP
//gsoap ns1  service method-style:	getDefectEventDefinitionList rpc
//gsoap ns1  service method-encoding:	getDefectEventDefinitionList http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getDefectEventDefinitionList urn:testtrack-interface#getDefectEventDefinitionList
//gsoap ns1  service method-output-action:	getDefectEventDefinitionList urn:testtrack-interface#getDefectEventDefinitionListResponse
int ns1__getDefectEventDefinitionList(
    LONG64                              cookie,	///< Input parameter
    struct ns1__getDefectEventDefinitionListResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getCustomFieldsDefinitionList                                       *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getCustomFieldsDefinitionListResponse" of operation "ns1__getCustomFieldsDefinitionList"
struct ns1__getCustomFieldsDefinitionListResponse
{
    ArrayOfCField*                      customFields;
};

/// Operation "ns1__getCustomFieldsDefinitionList" of service binding "ttsoapcgi"

/**

Operation details:
Returns a list of custom field definitions.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getCustomFieldsDefinitionList"

  - Addressing input action: "urn:testtrack-interface#getCustomFieldsDefinitionList"

  - Addressing output action: "urn:testtrack-interface#getCustomFieldsDefinitionListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getCustomFieldsDefinitionList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    char*                               tablename,
    // output parameters:
    struct ns1__getCustomFieldsDefinitionListResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getCustomFieldsDefinitionList(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    char*                               tablename,
    // output parameters:
    struct ns1__getCustomFieldsDefinitionListResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getCustomFieldsDefinitionList SOAP
//gsoap ns1  service method-style:	getCustomFieldsDefinitionList rpc
//gsoap ns1  service method-encoding:	getCustomFieldsDefinitionList http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getCustomFieldsDefinitionList urn:testtrack-interface#getCustomFieldsDefinitionList
//gsoap ns1  service method-output-action:	getCustomFieldsDefinitionList urn:testtrack-interface#getCustomFieldsDefinitionListResponse
int ns1__getCustomFieldsDefinitionList(
    LONG64                              cookie,	///< Input parameter
    char*                               tablename,	///< Input parameter
    struct ns1__getCustomFieldsDefinitionListResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getDefectCustomFieldsDefinitionList                                 *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getDefectCustomFieldsDefinitionListResponse" of operation "ns1__getDefectCustomFieldsDefinitionList"
struct ns1__getDefectCustomFieldsDefinitionListResponse
{
    ArrayOfCField*                      customFields;
};

/// Operation "ns1__getDefectCustomFieldsDefinitionList" of service binding "ttsoapcgi"

/**

Operation details:
Returns a list of defect custom field definitions.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getDefectCustomFieldsDefinitionList"

  - Addressing input action: "urn:testtrack-interface#getDefectCustomFieldsDefinitionList"

  - Addressing output action: "urn:testtrack-interface#getDefectCustomFieldsDefinitionListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getDefectCustomFieldsDefinitionList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    // output parameters:
    struct ns1__getDefectCustomFieldsDefinitionListResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getDefectCustomFieldsDefinitionList(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    // output parameters:
    struct ns1__getDefectCustomFieldsDefinitionListResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getDefectCustomFieldsDefinitionList SOAP
//gsoap ns1  service method-style:	getDefectCustomFieldsDefinitionList rpc
//gsoap ns1  service method-encoding:	getDefectCustomFieldsDefinitionList http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getDefectCustomFieldsDefinitionList urn:testtrack-interface#getDefectCustomFieldsDefinitionList
//gsoap ns1  service method-output-action:	getDefectCustomFieldsDefinitionList urn:testtrack-interface#getDefectCustomFieldsDefinitionListResponse
int ns1__getDefectCustomFieldsDefinitionList(
    LONG64                              cookie,	///< Input parameter
    struct ns1__getDefectCustomFieldsDefinitionListResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getDefect                                                           *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getDefectResponse" of operation "ns1__getDefect"
struct ns1__getDefectResponse
{
    ns1__CDefect*                       pDefect;
};

/// Operation "ns1__getDefect" of service binding "ttsoapcgi"

/**

Operation details:
Returns a defect based on defect number or summary.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getDefect"

  - Addressing input action: "urn:testtrack-interface#getDefect"

  - Addressing output action: "urn:testtrack-interface#getDefectResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getDefect(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              defectNumber,
    char*                               summary,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__getDefectResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getDefect(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              defectNumber,
    char*                               summary,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__getDefectResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getDefect SOAP
//gsoap ns1  service method-style:	getDefect rpc
//gsoap ns1  service method-encoding:	getDefect http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getDefect urn:testtrack-interface#getDefect
//gsoap ns1  service method-output-action:	getDefect urn:testtrack-interface#getDefectResponse
int ns1__getDefect(
    LONG64                              cookie,	///< Input parameter
    LONG64                              defectNumber,	///< Input parameter
    char*                               summary,	///< Input parameter
    bool                                bDownloadAttachments,	///< Input parameter
    struct ns1__getDefectResponse      &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getDefectByRecordID                                                 *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getDefectByRecordIDResponse" of operation "ns1__getDefectByRecordID"
struct ns1__getDefectByRecordIDResponse
{
    ns1__CDefect*                       pDefect;
};

/// Operation "ns1__getDefectByRecordID" of service binding "ttsoapcgi"

/**

Operation details:
Returns a defect based on record ID.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getDefectByRecordID"

  - Addressing input action: "urn:testtrack-interface#getDefectByRecordID"

  - Addressing output action: "urn:testtrack-interface#getDefectByRecordIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getDefectByRecordID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__getDefectByRecordIDResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getDefectByRecordID(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__getDefectByRecordIDResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getDefectByRecordID SOAP
//gsoap ns1  service method-style:	getDefectByRecordID rpc
//gsoap ns1  service method-encoding:	getDefectByRecordID http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getDefectByRecordID urn:testtrack-interface#getDefectByRecordID
//gsoap ns1  service method-output-action:	getDefectByRecordID urn:testtrack-interface#getDefectByRecordIDResponse
int ns1__getDefectByRecordID(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    bool                                bDownloadAttachments,	///< Input parameter
    struct ns1__getDefectByRecordIDResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__addDefect                                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__addDefect" of service binding "ttsoapcgi"

/**

Operation details:
Creates a defect.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#addDefect"

  - Addressing input action: "urn:testtrack-interface#addDefect"

  - Addressing output action: "urn:testtrack-interface#addDefectResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__addDefect(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    ns1__CDefect*                       pDefect,
    // output parameters:
    LONG64                             &recordID
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__addDefect(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    ns1__CDefect*                       pDefect,
    // output parameters:
    LONG64                             &recordID
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	addDefect SOAP
//gsoap ns1  service method-style:	addDefect rpc
//gsoap ns1  service method-encoding:	addDefect http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	addDefect urn:testtrack-interface#addDefect
//gsoap ns1  service method-output-action:	addDefect urn:testtrack-interface#addDefectResponse
int ns1__addDefect(
    LONG64                              cookie,	///< Input parameter
    ns1__CDefect*                       pDefect,	///< Input parameter
    LONG64                             &recordID	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__addDefectWithLink                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__addDefectWithLink" of service binding "ttsoapcgi"

/**

Operation details:
Creates a linked defect.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#addDefectWithLink"

  - Addressing input action: "urn:testtrack-interface#addDefectWithLink"

  - Addressing output action: "urn:testtrack-interface#addDefectWithLinkResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__addDefectWithLink(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    ns1__CDefect*                       pDefect,
    LONG64                              testRunRecordID,
    // output parameters:
    LONG64                             &recordID
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__addDefectWithLink(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    ns1__CDefect*                       pDefect,
    LONG64                              testRunRecordID,
    // output parameters:
    LONG64                             &recordID
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	addDefectWithLink SOAP
//gsoap ns1  service method-style:	addDefectWithLink rpc
//gsoap ns1  service method-encoding:	addDefectWithLink http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	addDefectWithLink urn:testtrack-interface#addDefectWithLink
//gsoap ns1  service method-output-action:	addDefectWithLink urn:testtrack-interface#addDefectWithLinkResponse
int ns1__addDefectWithLink(
    LONG64                              cookie,	///< Input parameter
    ns1__CDefect*                       pDefect,	///< Input parameter
    LONG64                              testRunRecordID,	///< Input parameter
    LONG64                             &recordID	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__deleteDefect                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__deleteDefect" of service binding "ttsoapcgi"

/**

Operation details:
Deletes a defect based on defect number or summary.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#deleteDefect"

  - Addressing input action: "urn:testtrack-interface#deleteDefect"

  - Addressing output action: "urn:testtrack-interface#deleteDefectResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__deleteDefect(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              defectNumber,
    char*                               summary,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__deleteDefect(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              defectNumber,
    char*                               summary,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	deleteDefect SOAP
//gsoap ns1  service method-style:	deleteDefect rpc
//gsoap ns1  service method-encoding:	deleteDefect http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	deleteDefect urn:testtrack-interface#deleteDefect
//gsoap ns1  service method-output-action:	deleteDefect urn:testtrack-interface#deleteDefectResponse
int ns1__deleteDefect(
    LONG64                              cookie,	///< Input parameter
    LONG64                              defectNumber,	///< Input parameter
    char*                               summary,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__deleteDefectByRecordID                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__deleteDefectByRecordID" of service binding "ttsoapcgi"

/**

Operation details:
Deletes a defect based on record ID.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#deleteDefectByRecordID"

  - Addressing input action: "urn:testtrack-interface#deleteDefectByRecordID"

  - Addressing output action: "urn:testtrack-interface#deleteDefectByRecordIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__deleteDefectByRecordID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__deleteDefectByRecordID(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	deleteDefectByRecordID SOAP
//gsoap ns1  service method-style:	deleteDefectByRecordID rpc
//gsoap ns1  service method-encoding:	deleteDefectByRecordID http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	deleteDefectByRecordID urn:testtrack-interface#deleteDefectByRecordID
//gsoap ns1  service method-output-action:	deleteDefectByRecordID urn:testtrack-interface#deleteDefectByRecordIDResponse
int ns1__deleteDefectByRecordID(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__editDefect                                                          *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__editDefectResponse" of operation "ns1__editDefect"
struct ns1__editDefectResponse
{
    ns1__CDefect*                       pDefect;
};

/// Operation "ns1__editDefect" of service binding "ttsoapcgi"

/**

Operation details:
Retrieves a defect for editing. The saveDefect request must be called and passed
the changed objects.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#editDefect"

  - Addressing input action: "urn:testtrack-interface#editDefect"

  - Addressing output action: "urn:testtrack-interface#editDefectResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__editDefect(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              defectNumber,
    char*                               summary,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__editDefectResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__editDefect(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              defectNumber,
    char*                               summary,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__editDefectResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	editDefect SOAP
//gsoap ns1  service method-style:	editDefect rpc
//gsoap ns1  service method-encoding:	editDefect http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	editDefect urn:testtrack-interface#editDefect
//gsoap ns1  service method-output-action:	editDefect urn:testtrack-interface#editDefectResponse
int ns1__editDefect(
    LONG64                              cookie,	///< Input parameter
    LONG64                              defectNumber,	///< Input parameter
    char*                               summary,	///< Input parameter
    bool                                bDownloadAttachments,	///< Input parameter
    struct ns1__editDefectResponse     &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__editDefectByRecordID                                                *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__editDefectByRecordIDResponse" of operation "ns1__editDefectByRecordID"
struct ns1__editDefectByRecordIDResponse
{
    ns1__CDefect*                       pDefect;
};

/// Operation "ns1__editDefectByRecordID" of service binding "ttsoapcgi"

/**

Operation details:
Retrieves a defect for editing based on record ID. The saveDefect request must be
called and passed the changed objects.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#editDefectByRecordID"

  - Addressing input action: "urn:testtrack-interface#editDefectByRecordID"

  - Addressing output action: "urn:testtrack-interface#editDefectByRecordIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__editDefectByRecordID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__editDefectByRecordIDResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__editDefectByRecordID(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__editDefectByRecordIDResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	editDefectByRecordID SOAP
//gsoap ns1  service method-style:	editDefectByRecordID rpc
//gsoap ns1  service method-encoding:	editDefectByRecordID http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	editDefectByRecordID urn:testtrack-interface#editDefectByRecordID
//gsoap ns1  service method-output-action:	editDefectByRecordID urn:testtrack-interface#editDefectByRecordIDResponse
int ns1__editDefectByRecordID(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    bool                                bDownloadAttachments,	///< Input parameter
    struct ns1__editDefectByRecordIDResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__saveDefect                                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__saveDefect" of service binding "ttsoapcgi"

/**

Operation details:
Saves changes made to a defect.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#saveDefect"

  - Addressing input action: "urn:testtrack-interface#saveDefect"

  - Addressing output action: "urn:testtrack-interface#saveDefectResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__saveDefect(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    ns1__CDefect*                       pDefect,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__saveDefect(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    ns1__CDefect*                       pDefect,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	saveDefect SOAP
//gsoap ns1  service method-style:	saveDefect rpc
//gsoap ns1  service method-encoding:	saveDefect http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	saveDefect urn:testtrack-interface#saveDefect
//gsoap ns1  service method-output-action:	saveDefect urn:testtrack-interface#saveDefectResponse
int ns1__saveDefect(
    LONG64                              cookie,	///< Input parameter
    ns1__CDefect*                       pDefect,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__cancelSaveDefect                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__cancelSaveDefect" of service binding "ttsoapcgi"

/**

Operation details:
Discards any changes made to a defect.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#cancelSaveDefect"

  - Addressing input action: "urn:testtrack-interface#cancelSaveDefect"

  - Addressing output action: "urn:testtrack-interface#cancelSaveDefectResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__cancelSaveDefect(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__cancelSaveDefect(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	cancelSaveDefect SOAP
//gsoap ns1  service method-style:	cancelSaveDefect rpc
//gsoap ns1  service method-encoding:	cancelSaveDefect http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	cancelSaveDefect urn:testtrack-interface#cancelSaveDefect
//gsoap ns1  service method-output-action:	cancelSaveDefect urn:testtrack-interface#cancelSaveDefectResponse
int ns1__cancelSaveDefect(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getAttachment                                                       *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getAttachmentResponse" of operation "ns1__getAttachment"
struct ns1__getAttachmentResponse
{
    ns1__CFileAttachment*               pAttachment;
};

/// Operation "ns1__getAttachment" of service binding "ttsoapcgi"

/**

Operation details:
Retrieves file attachments.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getAttachment"

  - Addressing input action: "urn:testtrack-interface#getAttachment"

  - Addressing output action: "urn:testtrack-interface#getAttachmentResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getAttachment(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    char*                               tablename,
    LONG64                              recordID,
    LONG64                              eventID,
    char*                               pszArchiveName,
    // output parameters:
    struct ns1__getAttachmentResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getAttachment(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    char*                               tablename,
    LONG64                              recordID,
    LONG64                              eventID,
    char*                               pszArchiveName,
    // output parameters:
    struct ns1__getAttachmentResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getAttachment SOAP
//gsoap ns1  service method-style:	getAttachment rpc
//gsoap ns1  service method-encoding:	getAttachment http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getAttachment urn:testtrack-interface#getAttachment
//gsoap ns1  service method-output-action:	getAttachment urn:testtrack-interface#getAttachmentResponse
int ns1__getAttachment(
    LONG64                              cookie,	///< Input parameter
    char*                               tablename,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    LONG64                              eventID,	///< Input parameter
    char*                               pszArchiveName,	///< Input parameter
    struct ns1__getAttachmentResponse  &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getDefectAttachment                                                 *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getDefectAttachmentResponse" of operation "ns1__getDefectAttachment"
struct ns1__getDefectAttachmentResponse
{
    ns1__CFileAttachment*               pAttachment;
};

/// Operation "ns1__getDefectAttachment" of service binding "ttsoapcgi"

/**

Operation details:
Retrieves defect file attachments. Deprecated; use getAttachmentRequest.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getDefectAttachment"

  - Addressing input action: "urn:testtrack-interface#getDefectAttachment"

  - Addressing output action: "urn:testtrack-interface#getDefectAttachmentResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getDefectAttachment(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    char*                               pszArchiveName,
    // output parameters:
    struct ns1__getDefectAttachmentResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getDefectAttachment(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    char*                               pszArchiveName,
    // output parameters:
    struct ns1__getDefectAttachmentResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getDefectAttachment SOAP
//gsoap ns1  service method-style:	getDefectAttachment rpc
//gsoap ns1  service method-encoding:	getDefectAttachment http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getDefectAttachment urn:testtrack-interface#getDefectAttachment
//gsoap ns1  service method-output-action:	getDefectAttachment urn:testtrack-interface#getDefectAttachmentResponse
int ns1__getDefectAttachment(
    LONG64                              cookie,	///< Input parameter
    char*                               pszArchiveName,	///< Input parameter
    struct ns1__getDefectAttachmentResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getTask                                                             *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getTaskResponse" of operation "ns1__getTask"
struct ns1__getTaskResponse
{
    ns1__CTask*                         pTask;
};

/// Operation "ns1__getTask" of service binding "ttsoapcgi"

/**

Operation details:
Retrieves a task.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getTask"

  - Addressing input action: "urn:testtrack-interface#getTask"

  - Addressing output action: "urn:testtrack-interface#getTaskResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getTask(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    char*                               summary,
    // output parameters:
    struct ns1__getTaskResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getTask(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    char*                               summary,
    // output parameters:
    struct ns1__getTaskResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getTask SOAP
//gsoap ns1  service method-style:	getTask rpc
//gsoap ns1  service method-encoding:	getTask http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getTask urn:testtrack-interface#getTask
//gsoap ns1  service method-output-action:	getTask urn:testtrack-interface#getTaskResponse
int ns1__getTask(
    LONG64                              cookie,	///< Input parameter
    char*                               summary,	///< Input parameter
    struct ns1__getTaskResponse        &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getTaskByRecordID                                                   *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getTaskByRecordIDResponse" of operation "ns1__getTaskByRecordID"
struct ns1__getTaskByRecordIDResponse
{
    ns1__CTask*                         pTask;
};

/// Operation "ns1__getTaskByRecordID" of service binding "ttsoapcgi"

/**

Operation details:
Retrieves a task based on record ID.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getTaskByRecordID"

  - Addressing input action: "urn:testtrack-interface#getTaskByRecordID"

  - Addressing output action: "urn:testtrack-interface#getTaskByRecordIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getTaskByRecordID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    struct ns1__getTaskByRecordIDResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getTaskByRecordID(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    struct ns1__getTaskByRecordIDResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getTaskByRecordID SOAP
//gsoap ns1  service method-style:	getTaskByRecordID rpc
//gsoap ns1  service method-encoding:	getTaskByRecordID http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getTaskByRecordID urn:testtrack-interface#getTaskByRecordID
//gsoap ns1  service method-output-action:	getTaskByRecordID urn:testtrack-interface#getTaskByRecordIDResponse
int ns1__getTaskByRecordID(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    struct ns1__getTaskByRecordIDResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__addTask                                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__addTask" of service binding "ttsoapcgi"

/**

Operation details:
Creates a task.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#addTask"

  - Addressing input action: "urn:testtrack-interface#addTask"

  - Addressing output action: "urn:testtrack-interface#addTaskResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__addTask(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    ns1__CTask*                         pTask,
    // output parameters:
    LONG64                             &recordID
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__addTask(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    ns1__CTask*                         pTask,
    // output parameters:
    LONG64                             &recordID
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	addTask SOAP
//gsoap ns1  service method-style:	addTask rpc
//gsoap ns1  service method-encoding:	addTask http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	addTask urn:testtrack-interface#addTask
//gsoap ns1  service method-output-action:	addTask urn:testtrack-interface#addTaskResponse
int ns1__addTask(
    LONG64                              cookie,	///< Input parameter
    ns1__CTask*                         pTask,	///< Input parameter
    LONG64                             &recordID	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__deleteTask                                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__deleteTask" of service binding "ttsoapcgi"

/**

Operation details:
Deletes a task.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#deleteTask"

  - Addressing input action: "urn:testtrack-interface#deleteTask"

  - Addressing output action: "urn:testtrack-interface#deleteTaskResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__deleteTask(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    char*                               summary,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__deleteTask(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    char*                               summary,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	deleteTask SOAP
//gsoap ns1  service method-style:	deleteTask rpc
//gsoap ns1  service method-encoding:	deleteTask http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	deleteTask urn:testtrack-interface#deleteTask
//gsoap ns1  service method-output-action:	deleteTask urn:testtrack-interface#deleteTaskResponse
int ns1__deleteTask(
    LONG64                              cookie,	///< Input parameter
    char*                               summary,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__deleteTaskByRecordID                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__deleteTaskByRecordID" of service binding "ttsoapcgi"

/**

Operation details:
Deletes a task based on record ID.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#deleteTaskByRecordID"

  - Addressing input action: "urn:testtrack-interface#deleteTaskByRecordID"

  - Addressing output action: "urn:testtrack-interface#deleteTaskByRecordIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__deleteTaskByRecordID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__deleteTaskByRecordID(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	deleteTaskByRecordID SOAP
//gsoap ns1  service method-style:	deleteTaskByRecordID rpc
//gsoap ns1  service method-encoding:	deleteTaskByRecordID http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	deleteTaskByRecordID urn:testtrack-interface#deleteTaskByRecordID
//gsoap ns1  service method-output-action:	deleteTaskByRecordID urn:testtrack-interface#deleteTaskByRecordIDResponse
int ns1__deleteTaskByRecordID(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__editTask                                                            *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__editTaskResponse" of operation "ns1__editTask"
struct ns1__editTaskResponse
{
    ns1__CTask*                         pTask;
};

/// Operation "ns1__editTask" of service binding "ttsoapcgi"

/**

Operation details:
Retrieves a task for editing. The saveTask request must be called and passed the
changed object.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#editTask"

  - Addressing input action: "urn:testtrack-interface#editTask"

  - Addressing output action: "urn:testtrack-interface#editTaskResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__editTask(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    char*                               summary,
    // output parameters:
    struct ns1__editTaskResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__editTask(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    char*                               summary,
    // output parameters:
    struct ns1__editTaskResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	editTask SOAP
//gsoap ns1  service method-style:	editTask rpc
//gsoap ns1  service method-encoding:	editTask http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	editTask urn:testtrack-interface#editTask
//gsoap ns1  service method-output-action:	editTask urn:testtrack-interface#editTaskResponse
int ns1__editTask(
    LONG64                              cookie,	///< Input parameter
    char*                               summary,	///< Input parameter
    struct ns1__editTaskResponse       &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__editTaskByRecordID                                                  *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__editTaskByRecordIDResponse" of operation "ns1__editTaskByRecordID"
struct ns1__editTaskByRecordIDResponse
{
    ns1__CTask*                         pTask;
};

/// Operation "ns1__editTaskByRecordID" of service binding "ttsoapcgi"

/**

Operation details:
Retrieves a task for editing based on record ID. The saveTask request must be called
and passed the changed object.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#editTaskByRecordID"

  - Addressing input action: "urn:testtrack-interface#editTaskByRecordID"

  - Addressing output action: "urn:testtrack-interface#editTaskByRecordIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__editTaskByRecordID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    struct ns1__editTaskByRecordIDResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__editTaskByRecordID(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    struct ns1__editTaskByRecordIDResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	editTaskByRecordID SOAP
//gsoap ns1  service method-style:	editTaskByRecordID rpc
//gsoap ns1  service method-encoding:	editTaskByRecordID http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	editTaskByRecordID urn:testtrack-interface#editTaskByRecordID
//gsoap ns1  service method-output-action:	editTaskByRecordID urn:testtrack-interface#editTaskByRecordIDResponse
int ns1__editTaskByRecordID(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    struct ns1__editTaskByRecordIDResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__saveTask                                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__saveTask" of service binding "ttsoapcgi"

/**

Operation details:
Saves changes made to a task.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#saveTask"

  - Addressing input action: "urn:testtrack-interface#saveTask"

  - Addressing output action: "urn:testtrack-interface#saveTaskResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__saveTask(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    ns1__CTask*                         pTask,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__saveTask(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    ns1__CTask*                         pTask,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	saveTask SOAP
//gsoap ns1  service method-style:	saveTask rpc
//gsoap ns1  service method-encoding:	saveTask http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	saveTask urn:testtrack-interface#saveTask
//gsoap ns1  service method-output-action:	saveTask urn:testtrack-interface#saveTaskResponse
int ns1__saveTask(
    LONG64                              cookie,	///< Input parameter
    ns1__CTask*                         pTask,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__cancelSaveTask                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__cancelSaveTask" of service binding "ttsoapcgi"

/**

Operation details:
Discards any changes made to a task.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#cancelSaveTask"

  - Addressing input action: "urn:testtrack-interface#cancelSaveTask"

  - Addressing output action: "urn:testtrack-interface#cancelSaveTaskResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__cancelSaveTask(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__cancelSaveTask(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	cancelSaveTask SOAP
//gsoap ns1  service method-style:	cancelSaveTask rpc
//gsoap ns1  service method-encoding:	cancelSaveTask http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	cancelSaveTask urn:testtrack-interface#cancelSaveTask
//gsoap ns1  service method-output-action:	cancelSaveTask urn:testtrack-interface#cancelSaveTaskResponse
int ns1__cancelSaveTask(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getGlobalUserList                                                   *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getGlobalUserListResponse" of operation "ns1__getGlobalUserList"
struct ns1__getGlobalUserListResponse
{
    ArrayOfCGlobalUser*                 GlobalUserList;
};

/// Operation "ns1__getGlobalUserList" of service binding "ttsoapcgi"

/**

Operation details:
Returns a list of global users from the Seapine License Server.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getGlobalUserList"

  - Addressing input action: "urn:testtrack-interface#getGlobalUserList"

  - Addressing output action: "urn:testtrack-interface#getGlobalUserListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getGlobalUserList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    // output parameters:
    struct ns1__getGlobalUserListResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getGlobalUserList(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    // output parameters:
    struct ns1__getGlobalUserListResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getGlobalUserList SOAP
//gsoap ns1  service method-style:	getGlobalUserList rpc
//gsoap ns1  service method-encoding:	getGlobalUserList http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getGlobalUserList urn:testtrack-interface#getGlobalUserList
//gsoap ns1  service method-output-action:	getGlobalUserList urn:testtrack-interface#getGlobalUserListResponse
int ns1__getGlobalUserList(
    LONG64                              cookie,	///< Input parameter
    struct ns1__getGlobalUserListResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getGlobalCustomerList                                               *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getGlobalCustomerListResponse" of operation "ns1__getGlobalCustomerList"
struct ns1__getGlobalCustomerListResponse
{
    ArrayOfCGlobalUser*                 GlobalCustomerList;
};

/// Operation "ns1__getGlobalCustomerList" of service binding "ttsoapcgi"

/**

Operation details:
Returns a list of global customers from the Seapine License Server.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getGlobalCustomerList"

  - Addressing input action: "urn:testtrack-interface#getGlobalCustomerList"

  - Addressing output action: "urn:testtrack-interface#getGlobalCustomerListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getGlobalCustomerList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    // output parameters:
    struct ns1__getGlobalCustomerListResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getGlobalCustomerList(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    // output parameters:
    struct ns1__getGlobalCustomerListResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getGlobalCustomerList SOAP
//gsoap ns1  service method-style:	getGlobalCustomerList rpc
//gsoap ns1  service method-encoding:	getGlobalCustomerList http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getGlobalCustomerList urn:testtrack-interface#getGlobalCustomerList
//gsoap ns1  service method-output-action:	getGlobalCustomerList urn:testtrack-interface#getGlobalCustomerListResponse
int ns1__getGlobalCustomerList(
    LONG64                              cookie,	///< Input parameter
    struct ns1__getGlobalCustomerListResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getUserLicenseList                                                  *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getUserLicenseListResponse" of operation "ns1__getUserLicenseList"
struct ns1__getUserLicenseListResponse
{
    ArrayOfCUserLicense*                UserLicenseList;
};

/// Operation "ns1__getUserLicenseList" of service binding "ttsoapcgi"

/**

Operation details:
Returns a list of user licenses.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getUserLicenseList"

  - Addressing input action: "urn:testtrack-interface#getUserLicenseList"

  - Addressing output action: "urn:testtrack-interface#getUserLicenseListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getUserLicenseList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    // output parameters:
    struct ns1__getUserLicenseListResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getUserLicenseList(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    // output parameters:
    struct ns1__getUserLicenseListResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getUserLicenseList SOAP
//gsoap ns1  service method-style:	getUserLicenseList rpc
//gsoap ns1  service method-encoding:	getUserLicenseList http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getUserLicenseList urn:testtrack-interface#getUserLicenseList
//gsoap ns1  service method-output-action:	getUserLicenseList urn:testtrack-interface#getUserLicenseListResponse
int ns1__getUserLicenseList(
    LONG64                              cookie,	///< Input parameter
    struct ns1__getUserLicenseListResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getUser                                                             *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getUserResponse" of operation "ns1__getUser"
struct ns1__getUserResponse
{
    ns1__CUser*                         pUser;
};

/// Operation "ns1__getUser" of service binding "ttsoapcgi"

/**

Operation details:
Returns a user.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getUser"

  - Addressing input action: "urn:testtrack-interface#getUser"

  - Addressing output action: "urn:testtrack-interface#getUserResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getUser(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    char*                               firstName,
    char*                               middleInitials,
    char*                               lastName,
    // output parameters:
    struct ns1__getUserResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getUser(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    char*                               firstName,
    char*                               middleInitials,
    char*                               lastName,
    // output parameters:
    struct ns1__getUserResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getUser SOAP
//gsoap ns1  service method-style:	getUser rpc
//gsoap ns1  service method-encoding:	getUser http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getUser urn:testtrack-interface#getUser
//gsoap ns1  service method-output-action:	getUser urn:testtrack-interface#getUserResponse
int ns1__getUser(
    LONG64                              cookie,	///< Input parameter
    char*                               firstName,	///< Input parameter
    char*                               middleInitials,	///< Input parameter
    char*                               lastName,	///< Input parameter
    struct ns1__getUserResponse        &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getUserByRecordID                                                   *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getUserByRecordIDResponse" of operation "ns1__getUserByRecordID"
struct ns1__getUserByRecordIDResponse
{
    ns1__CUser*                         pUser;
};

/// Operation "ns1__getUserByRecordID" of service binding "ttsoapcgi"

/**

Operation details:
Returns a user based on record ID.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getUserByRecordID"

  - Addressing input action: "urn:testtrack-interface#getUserByRecordID"

  - Addressing output action: "urn:testtrack-interface#getUserByRecordIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getUserByRecordID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    struct ns1__getUserByRecordIDResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getUserByRecordID(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    struct ns1__getUserByRecordIDResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getUserByRecordID SOAP
//gsoap ns1  service method-style:	getUserByRecordID rpc
//gsoap ns1  service method-encoding:	getUserByRecordID http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getUserByRecordID urn:testtrack-interface#getUserByRecordID
//gsoap ns1  service method-output-action:	getUserByRecordID urn:testtrack-interface#getUserByRecordIDResponse
int ns1__getUserByRecordID(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    struct ns1__getUserByRecordIDResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getUserForCurrentSession                                            *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getUserForCurrentSessionResponse" of operation "ns1__getUserForCurrentSession"
struct ns1__getUserForCurrentSessionResponse
{
    ns1__CUser*                         pUser;
};

/// Operation "ns1__getUserForCurrentSession" of service binding "ttsoapcgi"

/**

Operation details:
Returns the user used to log in for this session.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getUserForCurrentSession"

  - Addressing input action: "urn:testtrack-interface#getUserForCurrentSession"

  - Addressing output action: "urn:testtrack-interface#getUserForCurrentSessionResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getUserForCurrentSession(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    // output parameters:
    struct ns1__getUserForCurrentSessionResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getUserForCurrentSession(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    // output parameters:
    struct ns1__getUserForCurrentSessionResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getUserForCurrentSession SOAP
//gsoap ns1  service method-style:	getUserForCurrentSession rpc
//gsoap ns1  service method-encoding:	getUserForCurrentSession http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getUserForCurrentSession urn:testtrack-interface#getUserForCurrentSession
//gsoap ns1  service method-output-action:	getUserForCurrentSession urn:testtrack-interface#getUserForCurrentSessionResponse
int ns1__getUserForCurrentSession(
    LONG64                              cookie,	///< Input parameter
    struct ns1__getUserForCurrentSessionResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__addUser                                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__addUser" of service binding "ttsoapcgi"

/**

Operation details:
Creates a user.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#addUser"

  - Addressing input action: "urn:testtrack-interface#addUser"

  - Addressing output action: "urn:testtrack-interface#addUserResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__addUser(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    ns1__CUser*                         pUser,
    // output parameters:
    LONG64                             &recordID
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__addUser(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    ns1__CUser*                         pUser,
    // output parameters:
    LONG64                             &recordID
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	addUser SOAP
//gsoap ns1  service method-style:	addUser rpc
//gsoap ns1  service method-encoding:	addUser http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	addUser urn:testtrack-interface#addUser
//gsoap ns1  service method-output-action:	addUser urn:testtrack-interface#addUserResponse
int ns1__addUser(
    LONG64                              cookie,	///< Input parameter
    ns1__CUser*                         pUser,	///< Input parameter
    LONG64                             &recordID	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__editUser                                                            *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__editUserResponse" of operation "ns1__editUser"
struct ns1__editUserResponse
{
    ns1__CUser*                         pUser;
};

/// Operation "ns1__editUser" of service binding "ttsoapcgi"

/**

Operation details:
Retrieves a user for editing. The saveUser request must be called and passed the
changed object.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#editUser"

  - Addressing input action: "urn:testtrack-interface#editUser"

  - Addressing output action: "urn:testtrack-interface#editUserResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__editUser(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    char*                               firstName,
    char*                               middleInitials,
    char*                               lastName,
    // output parameters:
    struct ns1__editUserResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__editUser(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    char*                               firstName,
    char*                               middleInitials,
    char*                               lastName,
    // output parameters:
    struct ns1__editUserResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	editUser SOAP
//gsoap ns1  service method-style:	editUser rpc
//gsoap ns1  service method-encoding:	editUser http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	editUser urn:testtrack-interface#editUser
//gsoap ns1  service method-output-action:	editUser urn:testtrack-interface#editUserResponse
int ns1__editUser(
    LONG64                              cookie,	///< Input parameter
    char*                               firstName,	///< Input parameter
    char*                               middleInitials,	///< Input parameter
    char*                               lastName,	///< Input parameter
    struct ns1__editUserResponse       &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__editUserByRecordID                                                  *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__editUserByRecordIDResponse" of operation "ns1__editUserByRecordID"
struct ns1__editUserByRecordIDResponse
{
    ns1__CUser*                         pUser;
};

/// Operation "ns1__editUserByRecordID" of service binding "ttsoapcgi"

/**

Operation details:
Retrieves a user for editing based on record ID. The saveUser request must be called
and passed the changed object.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#editUserByRecordID"

  - Addressing input action: "urn:testtrack-interface#editUserByRecordID"

  - Addressing output action: "urn:testtrack-interface#editUserByRecordIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__editUserByRecordID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    struct ns1__editUserByRecordIDResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__editUserByRecordID(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    struct ns1__editUserByRecordIDResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	editUserByRecordID SOAP
//gsoap ns1  service method-style:	editUserByRecordID rpc
//gsoap ns1  service method-encoding:	editUserByRecordID http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	editUserByRecordID urn:testtrack-interface#editUserByRecordID
//gsoap ns1  service method-output-action:	editUserByRecordID urn:testtrack-interface#editUserByRecordIDResponse
int ns1__editUserByRecordID(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    struct ns1__editUserByRecordIDResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__saveUser                                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__saveUser" of service binding "ttsoapcgi"

/**

Operation details:
Saves changes made to a user record.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#saveUser"

  - Addressing input action: "urn:testtrack-interface#saveUser"

  - Addressing output action: "urn:testtrack-interface#saveUserResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__saveUser(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    char*                               firstName,
    char*                               middleInitials,
    char*                               lastName,
    ns1__CUser*                         pUser,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__saveUser(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    char*                               firstName,
    char*                               middleInitials,
    char*                               lastName,
    ns1__CUser*                         pUser,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	saveUser SOAP
//gsoap ns1  service method-style:	saveUser rpc
//gsoap ns1  service method-encoding:	saveUser http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	saveUser urn:testtrack-interface#saveUser
//gsoap ns1  service method-output-action:	saveUser urn:testtrack-interface#saveUserResponse
int ns1__saveUser(
    LONG64                              cookie,	///< Input parameter
    char*                               firstName,	///< Input parameter
    char*                               middleInitials,	///< Input parameter
    char*                               lastName,	///< Input parameter
    ns1__CUser*                         pUser,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__deleteUser                                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__deleteUser" of service binding "ttsoapcgi"

/**

Operation details:
Deletes a user.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#deleteUser"

  - Addressing input action: "urn:testtrack-interface#deleteUser"

  - Addressing output action: "urn:testtrack-interface#deleteUserResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__deleteUser(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    char*                               firstName,
    char*                               middleInitials,
    char*                               lastName,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__deleteUser(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    char*                               firstName,
    char*                               middleInitials,
    char*                               lastName,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	deleteUser SOAP
//gsoap ns1  service method-style:	deleteUser rpc
//gsoap ns1  service method-encoding:	deleteUser http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	deleteUser urn:testtrack-interface#deleteUser
//gsoap ns1  service method-output-action:	deleteUser urn:testtrack-interface#deleteUserResponse
int ns1__deleteUser(
    LONG64                              cookie,	///< Input parameter
    char*                               firstName,	///< Input parameter
    char*                               middleInitials,	///< Input parameter
    char*                               lastName,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__deleteUserByRecordID                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__deleteUserByRecordID" of service binding "ttsoapcgi"

/**

Operation details:
Deletes a user based on record ID.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#deleteUserByRecordID"

  - Addressing input action: "urn:testtrack-interface#deleteUserByRecordID"

  - Addressing output action: "urn:testtrack-interface#deleteUserByRecordIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__deleteUserByRecordID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__deleteUserByRecordID(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	deleteUserByRecordID SOAP
//gsoap ns1  service method-style:	deleteUserByRecordID rpc
//gsoap ns1  service method-encoding:	deleteUserByRecordID http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	deleteUserByRecordID urn:testtrack-interface#deleteUserByRecordID
//gsoap ns1  service method-output-action:	deleteUserByRecordID urn:testtrack-interface#deleteUserByRecordIDResponse
int ns1__deleteUserByRecordID(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__cancelSaveUser                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__cancelSaveUser" of service binding "ttsoapcgi"

/**

Operation details:
Discards changes made to a user record.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#cancelSaveUser"

  - Addressing input action: "urn:testtrack-interface#cancelSaveUser"

  - Addressing output action: "urn:testtrack-interface#cancelSaveUserResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__cancelSaveUser(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__cancelSaveUser(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	cancelSaveUser SOAP
//gsoap ns1  service method-style:	cancelSaveUser rpc
//gsoap ns1  service method-encoding:	cancelSaveUser http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	cancelSaveUser urn:testtrack-interface#cancelSaveUser
//gsoap ns1  service method-output-action:	cancelSaveUser urn:testtrack-interface#cancelSaveUserResponse
int ns1__cancelSaveUser(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__promoteUser                                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__promoteUser" of service binding "ttsoapcgi"

/**

Operation details:
Promotes a local user to a global user on the Seapine License Server.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__promoteUser(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    char*                               localUser,
    char*                               globalUser,
    char*                               loginname,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__promoteUser(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    char*                               localUser,
    char*                               globalUser,
    char*                               loginname,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	promoteUser SOAP
//gsoap ns1  service method-style:	promoteUser rpc
//gsoap ns1  service method-encoding:	promoteUser http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	promoteUser ""
//gsoap ns1  service method-output-action:	promoteUser Response
int ns1__promoteUser(
    LONG64                              cookie,	///< Input parameter
    char*                               localUser,	///< Input parameter
    char*                               globalUser,	///< Input parameter
    char*                               loginname,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__addGlobalUser                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__addGlobalUser" of service binding "ttsoapcgi"

/**

Operation details:
Retrieves a global user from the Seapine License Server and adds them to TestTrack.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__addGlobalUser(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    ns1__CGlobalUser*                   pUser,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__addGlobalUser(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    ns1__CGlobalUser*                   pUser,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	addGlobalUser SOAP
//gsoap ns1  service method-style:	addGlobalUser rpc
//gsoap ns1  service method-encoding:	addGlobalUser http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	addGlobalUser ""
//gsoap ns1  service method-output-action:	addGlobalUser Response
int ns1__addGlobalUser(
    LONG64                              cookie,	///< Input parameter
    ns1__CGlobalUser*                   pUser,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getCustomer                                                         *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getCustomerResponse" of operation "ns1__getCustomer"
struct ns1__getCustomerResponse
{
    ns1__CUser*                         pCustomer;
};

/// Operation "ns1__getCustomer" of service binding "ttsoapcgi"

/**

Operation details:
Returns a customer.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getCustomer"

  - Addressing input action: "urn:testtrack-interface#getCustomer"

  - Addressing output action: "urn:testtrack-interface#getCustomerResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getCustomer(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    char*                               firstName,
    char*                               middleInitials,
    char*                               lastName,
    // output parameters:
    struct ns1__getCustomerResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getCustomer(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    char*                               firstName,
    char*                               middleInitials,
    char*                               lastName,
    // output parameters:
    struct ns1__getCustomerResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getCustomer SOAP
//gsoap ns1  service method-style:	getCustomer rpc
//gsoap ns1  service method-encoding:	getCustomer http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getCustomer urn:testtrack-interface#getCustomer
//gsoap ns1  service method-output-action:	getCustomer urn:testtrack-interface#getCustomerResponse
int ns1__getCustomer(
    LONG64                              cookie,	///< Input parameter
    char*                               firstName,	///< Input parameter
    char*                               middleInitials,	///< Input parameter
    char*                               lastName,	///< Input parameter
    struct ns1__getCustomerResponse    &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getCustomerByRecordID                                               *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getCustomerByRecordIDResponse" of operation "ns1__getCustomerByRecordID"
struct ns1__getCustomerByRecordIDResponse
{
    ns1__CUser*                         pCustomer;
};

/// Operation "ns1__getCustomerByRecordID" of service binding "ttsoapcgi"

/**

Operation details:
Returns a customer based on record ID.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getCustomerByRecordID"

  - Addressing input action: "urn:testtrack-interface#getCustomerByRecordID"

  - Addressing output action: "urn:testtrack-interface#getCustomerByRecordIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getCustomerByRecordID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    struct ns1__getCustomerByRecordIDResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getCustomerByRecordID(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    struct ns1__getCustomerByRecordIDResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getCustomerByRecordID SOAP
//gsoap ns1  service method-style:	getCustomerByRecordID rpc
//gsoap ns1  service method-encoding:	getCustomerByRecordID http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getCustomerByRecordID urn:testtrack-interface#getCustomerByRecordID
//gsoap ns1  service method-output-action:	getCustomerByRecordID urn:testtrack-interface#getCustomerByRecordIDResponse
int ns1__getCustomerByRecordID(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    struct ns1__getCustomerByRecordIDResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__addCustomer                                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__addCustomer" of service binding "ttsoapcgi"

/**

Operation details:
Creates a customer.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#addCustomer"

  - Addressing input action: "urn:testtrack-interface#addCustomer"

  - Addressing output action: "urn:testtrack-interface#addCustomerResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__addCustomer(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    ns1__CUser*                         pCustomer,
    // output parameters:
    LONG64                             &recordID
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__addCustomer(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    ns1__CUser*                         pCustomer,
    // output parameters:
    LONG64                             &recordID
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	addCustomer SOAP
//gsoap ns1  service method-style:	addCustomer rpc
//gsoap ns1  service method-encoding:	addCustomer http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	addCustomer urn:testtrack-interface#addCustomer
//gsoap ns1  service method-output-action:	addCustomer urn:testtrack-interface#addCustomerResponse
int ns1__addCustomer(
    LONG64                              cookie,	///< Input parameter
    ns1__CUser*                         pCustomer,	///< Input parameter
    LONG64                             &recordID	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__editCustomer                                                        *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__editCustomerResponse" of operation "ns1__editCustomer"
struct ns1__editCustomerResponse
{
    ns1__CUser*                         pCustomer;
};

/// Operation "ns1__editCustomer" of service binding "ttsoapcgi"

/**

Operation details:
Retrieves a customer for editing. The saveCustomer request must be called and passed
the changed object.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#editCustomer"

  - Addressing input action: "urn:testtrack-interface#editCustomer"

  - Addressing output action: "urn:testtrack-interface#editCustomerResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__editCustomer(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    char*                               firstName,
    char*                               middleInitials,
    char*                               lastName,
    // output parameters:
    struct ns1__editCustomerResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__editCustomer(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    char*                               firstName,
    char*                               middleInitials,
    char*                               lastName,
    // output parameters:
    struct ns1__editCustomerResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	editCustomer SOAP
//gsoap ns1  service method-style:	editCustomer rpc
//gsoap ns1  service method-encoding:	editCustomer http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	editCustomer urn:testtrack-interface#editCustomer
//gsoap ns1  service method-output-action:	editCustomer urn:testtrack-interface#editCustomerResponse
int ns1__editCustomer(
    LONG64                              cookie,	///< Input parameter
    char*                               firstName,	///< Input parameter
    char*                               middleInitials,	///< Input parameter
    char*                               lastName,	///< Input parameter
    struct ns1__editCustomerResponse   &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__editCustomerByRecordID                                              *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__editCustomerByRecordIDResponse" of operation "ns1__editCustomerByRecordID"
struct ns1__editCustomerByRecordIDResponse
{
    ns1__CUser*                         pCustomer;
};

/// Operation "ns1__editCustomerByRecordID" of service binding "ttsoapcgi"

/**

Operation details:
Retrieves a customer for editing based on record ID. The saveCustomer request must
be called and passed the changed object.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#editCustomerByRecordID"

  - Addressing input action: "urn:testtrack-interface#editCustomerByRecordID"

  - Addressing output action: "urn:testtrack-interface#editCustomerByRecordIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__editCustomerByRecordID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    struct ns1__editCustomerByRecordIDResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__editCustomerByRecordID(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    struct ns1__editCustomerByRecordIDResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	editCustomerByRecordID SOAP
//gsoap ns1  service method-style:	editCustomerByRecordID rpc
//gsoap ns1  service method-encoding:	editCustomerByRecordID http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	editCustomerByRecordID urn:testtrack-interface#editCustomerByRecordID
//gsoap ns1  service method-output-action:	editCustomerByRecordID urn:testtrack-interface#editCustomerByRecordIDResponse
int ns1__editCustomerByRecordID(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    struct ns1__editCustomerByRecordIDResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__saveCustomer                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__saveCustomer" of service binding "ttsoapcgi"

/**

Operation details:
Saves changes made to a customer record.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#saveCustomer"

  - Addressing input action: "urn:testtrack-interface#saveCustomer"

  - Addressing output action: "urn:testtrack-interface#saveCustomerResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__saveCustomer(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    char*                               firstName,
    char*                               middleInitials,
    char*                               lastName,
    ns1__CUser*                         pCustomer,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__saveCustomer(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    char*                               firstName,
    char*                               middleInitials,
    char*                               lastName,
    ns1__CUser*                         pCustomer,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	saveCustomer SOAP
//gsoap ns1  service method-style:	saveCustomer rpc
//gsoap ns1  service method-encoding:	saveCustomer http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	saveCustomer urn:testtrack-interface#saveCustomer
//gsoap ns1  service method-output-action:	saveCustomer urn:testtrack-interface#saveCustomerResponse
int ns1__saveCustomer(
    LONG64                              cookie,	///< Input parameter
    char*                               firstName,	///< Input parameter
    char*                               middleInitials,	///< Input parameter
    char*                               lastName,	///< Input parameter
    ns1__CUser*                         pCustomer,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__deleteCustomer                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__deleteCustomer" of service binding "ttsoapcgi"

/**

Operation details:
Deletes a customer.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#deleteCustomer"

  - Addressing input action: "urn:testtrack-interface#deleteCustomer"

  - Addressing output action: "urn:testtrack-interface#deleteCustomerResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__deleteCustomer(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    char*                               firstName,
    char*                               middleInitials,
    char*                               lastName,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__deleteCustomer(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    char*                               firstName,
    char*                               middleInitials,
    char*                               lastName,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	deleteCustomer SOAP
//gsoap ns1  service method-style:	deleteCustomer rpc
//gsoap ns1  service method-encoding:	deleteCustomer http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	deleteCustomer urn:testtrack-interface#deleteCustomer
//gsoap ns1  service method-output-action:	deleteCustomer urn:testtrack-interface#deleteCustomerResponse
int ns1__deleteCustomer(
    LONG64                              cookie,	///< Input parameter
    char*                               firstName,	///< Input parameter
    char*                               middleInitials,	///< Input parameter
    char*                               lastName,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__deleteCustomerByRecordID                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__deleteCustomerByRecordID" of service binding "ttsoapcgi"

/**

Operation details:
Deletes a customer based on record ID.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#deleteCustomerByRecordID"

  - Addressing input action: "urn:testtrack-interface#deleteCustomerByRecordID"

  - Addressing output action: "urn:testtrack-interface#deleteCustomerByRecordIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__deleteCustomerByRecordID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__deleteCustomerByRecordID(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	deleteCustomerByRecordID SOAP
//gsoap ns1  service method-style:	deleteCustomerByRecordID rpc
//gsoap ns1  service method-encoding:	deleteCustomerByRecordID http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	deleteCustomerByRecordID urn:testtrack-interface#deleteCustomerByRecordID
//gsoap ns1  service method-output-action:	deleteCustomerByRecordID urn:testtrack-interface#deleteCustomerByRecordIDResponse
int ns1__deleteCustomerByRecordID(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__cancelSaveCustomer                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__cancelSaveCustomer" of service binding "ttsoapcgi"

/**

Operation details:
Discards changes made to a customer record.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#cancelSaveCustomer"

  - Addressing input action: "urn:testtrack-interface#cancelSaveCustomer"

  - Addressing output action: "urn:testtrack-interface#cancelSaveCustomerResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__cancelSaveCustomer(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__cancelSaveCustomer(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	cancelSaveCustomer SOAP
//gsoap ns1  service method-style:	cancelSaveCustomer rpc
//gsoap ns1  service method-encoding:	cancelSaveCustomer http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	cancelSaveCustomer urn:testtrack-interface#cancelSaveCustomer
//gsoap ns1  service method-output-action:	cancelSaveCustomer urn:testtrack-interface#cancelSaveCustomerResponse
int ns1__cancelSaveCustomer(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__promoteCustomer                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__promoteCustomer" of service binding "ttsoapcgi"

/**

Operation details:
Promotes a local customer to a global customer on the Seapine License Server.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__promoteCustomer(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    char*                               localCustomer,
    char*                               globalUser,
    char*                               loginname,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__promoteCustomer(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    char*                               localCustomer,
    char*                               globalUser,
    char*                               loginname,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	promoteCustomer SOAP
//gsoap ns1  service method-style:	promoteCustomer rpc
//gsoap ns1  service method-encoding:	promoteCustomer http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	promoteCustomer ""
//gsoap ns1  service method-output-action:	promoteCustomer Response
int ns1__promoteCustomer(
    LONG64                              cookie,	///< Input parameter
    char*                               localCustomer,	///< Input parameter
    char*                               globalUser,	///< Input parameter
    char*                               loginname,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__addGlobalCustomer                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__addGlobalCustomer" of service binding "ttsoapcgi"

/**

Operation details:
Retrieves a global customer from the Seapine License Server and adds them to TestTrack.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__addGlobalCustomer(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    ns1__CGlobalUser*                   pUser,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__addGlobalCustomer(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    ns1__CGlobalUser*                   pUser,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	addGlobalCustomer SOAP
//gsoap ns1  service method-style:	addGlobalCustomer rpc
//gsoap ns1  service method-encoding:	addGlobalCustomer http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	addGlobalCustomer ""
//gsoap ns1  service method-output-action:	addGlobalCustomer Response
int ns1__addGlobalCustomer(
    LONG64                              cookie,	///< Input parameter
    ns1__CGlobalUser*                   pUser,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getLinksForItem                                                     *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getLinksForItemResponse" of operation "ns1__getLinksForItem"
struct ns1__getLinksForItemResponse
{
    ArrayOfCLink*                       pLinkList;
};

/// Operation "ns1__getLinksForItem" of service binding "ttsoapcgi"

/**

Operation details:
Returns links for a specified item.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getLinksForItem"

  - Addressing input action: "urn:testtrack-interface#getLinksForItem"

  - Addressing output action: "urn:testtrack-interface#getLinksForItemResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getLinksForItem(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    char*                               tablename,
    LONG64                              itemRecordID,
    // output parameters:
    struct ns1__getLinksForItemResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getLinksForItem(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    char*                               tablename,
    LONG64                              itemRecordID,
    // output parameters:
    struct ns1__getLinksForItemResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getLinksForItem SOAP
//gsoap ns1  service method-style:	getLinksForItem rpc
//gsoap ns1  service method-encoding:	getLinksForItem http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getLinksForItem urn:testtrack-interface#getLinksForItem
//gsoap ns1  service method-output-action:	getLinksForItem urn:testtrack-interface#getLinksForItemResponse
int ns1__getLinksForItem(
    LONG64                              cookie,	///< Input parameter
    char*                               tablename,	///< Input parameter
    LONG64                              itemRecordID,	///< Input parameter
    struct ns1__getLinksForItemResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getLinksForDefect                                                   *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getLinksForDefectResponse" of operation "ns1__getLinksForDefect"
struct ns1__getLinksForDefectResponse
{
    ArrayOfCLink*                       pLinkList;
};

/// Operation "ns1__getLinksForDefect" of service binding "ttsoapcgi"

/**

Operation details:
Returns links for a specified defect.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getLinksForDefect"

  - Addressing input action: "urn:testtrack-interface#getLinksForDefect"

  - Addressing output action: "urn:testtrack-interface#getLinksForDefectResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getLinksForDefect(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              defectRecordID,
    // output parameters:
    struct ns1__getLinksForDefectResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getLinksForDefect(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              defectRecordID,
    // output parameters:
    struct ns1__getLinksForDefectResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getLinksForDefect SOAP
//gsoap ns1  service method-style:	getLinksForDefect rpc
//gsoap ns1  service method-encoding:	getLinksForDefect http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getLinksForDefect urn:testtrack-interface#getLinksForDefect
//gsoap ns1  service method-output-action:	getLinksForDefect urn:testtrack-interface#getLinksForDefectResponse
int ns1__getLinksForDefect(
    LONG64                              cookie,	///< Input parameter
    LONG64                              defectRecordID,	///< Input parameter
    struct ns1__getLinksForDefectResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getLink                                                             *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getLinkResponse" of operation "ns1__getLink"
struct ns1__getLinkResponse
{
    ns1__CLink*                         pLink;
};

/// Operation "ns1__getLink" of service binding "ttsoapcgi"

/**

Operation details:
Returns a list of all links.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getLink"

  - Addressing input action: "urn:testtrack-interface#getLink"

  - Addressing output action: "urn:testtrack-interface#getLinkResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getLink(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              linkID,
    // output parameters:
    struct ns1__getLinkResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getLink(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              linkID,
    // output parameters:
    struct ns1__getLinkResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getLink SOAP
//gsoap ns1  service method-style:	getLink rpc
//gsoap ns1  service method-encoding:	getLink http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getLink urn:testtrack-interface#getLink
//gsoap ns1  service method-output-action:	getLink urn:testtrack-interface#getLinkResponse
int ns1__getLink(
    LONG64                              cookie,	///< Input parameter
    LONG64                              linkID,	///< Input parameter
    struct ns1__getLinkResponse        &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__addLink                                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__addLink" of service binding "ttsoapcgi"

/**

Operation details:
Creates a link.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#addLink"

  - Addressing input action: "urn:testtrack-interface#addLink"

  - Addressing output action: "urn:testtrack-interface#addLinkResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__addLink(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    ns1__CLink*                         pLink,
    // output parameters:
    LONG64                             &recordID
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__addLink(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    ns1__CLink*                         pLink,
    // output parameters:
    LONG64                             &recordID
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	addLink SOAP
//gsoap ns1  service method-style:	addLink rpc
//gsoap ns1  service method-encoding:	addLink http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	addLink urn:testtrack-interface#addLink
//gsoap ns1  service method-output-action:	addLink urn:testtrack-interface#addLinkResponse
int ns1__addLink(
    LONG64                              cookie,	///< Input parameter
    ns1__CLink*                         pLink,	///< Input parameter
    LONG64                             &recordID	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__deleteLink                                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__deleteLink" of service binding "ttsoapcgi"

/**

Operation details:
Deletes a link.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#deleteLink"

  - Addressing input action: "urn:testtrack-interface#deleteLink"

  - Addressing output action: "urn:testtrack-interface#deleteLinkResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__deleteLink(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              linkID,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__deleteLink(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              linkID,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	deleteLink SOAP
//gsoap ns1  service method-style:	deleteLink rpc
//gsoap ns1  service method-encoding:	deleteLink http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	deleteLink urn:testtrack-interface#deleteLink
//gsoap ns1  service method-output-action:	deleteLink urn:testtrack-interface#deleteLinkResponse
int ns1__deleteLink(
    LONG64                              cookie,	///< Input parameter
    LONG64                              linkID,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__editLink                                                            *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__editLinkResponse" of operation "ns1__editLink"
struct ns1__editLinkResponse
{
    ns1__CLink*                         pLink;
};

/// Operation "ns1__editLink" of service binding "ttsoapcgi"

/**

Operation details:
Retrieves a link for editing. The saveLink request must be called and passed the
changed objects.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#editLink"

  - Addressing input action: "urn:testtrack-interface#editLink"

  - Addressing output action: "urn:testtrack-interface#editLinkResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__editLink(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              linkID,
    // output parameters:
    struct ns1__editLinkResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__editLink(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              linkID,
    // output parameters:
    struct ns1__editLinkResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	editLink SOAP
//gsoap ns1  service method-style:	editLink rpc
//gsoap ns1  service method-encoding:	editLink http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	editLink urn:testtrack-interface#editLink
//gsoap ns1  service method-output-action:	editLink urn:testtrack-interface#editLinkResponse
int ns1__editLink(
    LONG64                              cookie,	///< Input parameter
    LONG64                              linkID,	///< Input parameter
    struct ns1__editLinkResponse       &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__saveLink                                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__saveLink" of service binding "ttsoapcgi"

/**

Operation details:
Saves changes made to a link.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#saveLink"

  - Addressing input action: "urn:testtrack-interface#saveLink"

  - Addressing output action: "urn:testtrack-interface#saveLinkResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__saveLink(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    ns1__CLink*                         pLink,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__saveLink(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    ns1__CLink*                         pLink,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	saveLink SOAP
//gsoap ns1  service method-style:	saveLink rpc
//gsoap ns1  service method-encoding:	saveLink http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	saveLink urn:testtrack-interface#saveLink
//gsoap ns1  service method-output-action:	saveLink urn:testtrack-interface#saveLinkResponse
int ns1__saveLink(
    LONG64                              cookie,	///< Input parameter
    ns1__CLink*                         pLink,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__cancelSaveLink                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__cancelSaveLink" of service binding "ttsoapcgi"

/**

Operation details:
Discards changes made to a link.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#cancelSaveLink"

  - Addressing input action: "urn:testtrack-interface#cancelSaveLink"

  - Addressing output action: "urn:testtrack-interface#cancelSaveLinkResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__cancelSaveLink(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              linkID,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__cancelSaveLink(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              linkID,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	cancelSaveLink SOAP
//gsoap ns1  service method-style:	cancelSaveLink rpc
//gsoap ns1  service method-encoding:	cancelSaveLink http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	cancelSaveLink urn:testtrack-interface#cancelSaveLink
//gsoap ns1  service method-output-action:	cancelSaveLink urn:testtrack-interface#cancelSaveLinkResponse
int ns1__cancelSaveLink(
    LONG64                              cookie,	///< Input parameter
    LONG64                              linkID,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getTestVariantTypes                                                 *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getTestVariantTypesResponse" of operation "ns1__getTestVariantTypes"
struct ns1__getTestVariantTypesResponse
{
    ArrayOfstring*                      pTypeList;
};

/// Operation "ns1__getTestVariantTypes" of service binding "ttsoapcgi"

/**

Operation details:
Returns a list of test variant types.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getTestVariantTypes"

  - Addressing input action: "urn:testtrack-interface#getTestVariantTypes"

  - Addressing output action: "urn:testtrack-interface#getTestVariantTypesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getTestVariantTypes(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    // output parameters:
    struct ns1__getTestVariantTypesResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getTestVariantTypes(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    // output parameters:
    struct ns1__getTestVariantTypesResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getTestVariantTypes SOAP
//gsoap ns1  service method-style:	getTestVariantTypes rpc
//gsoap ns1  service method-encoding:	getTestVariantTypes http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getTestVariantTypes urn:testtrack-interface#getTestVariantTypes
//gsoap ns1  service method-output-action:	getTestVariantTypes urn:testtrack-interface#getTestVariantTypesResponse
int ns1__getTestVariantTypes(
    LONG64                              cookie,	///< Input parameter
    struct ns1__getTestVariantTypesResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getTestRunStepsModes                                                *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getTestRunStepsModesResponse" of operation "ns1__getTestRunStepsModes"
struct ns1__getTestRunStepsModesResponse
{
    ArrayOfstring*                      pModeList;
};

/// Operation "ns1__getTestRunStepsModes" of service binding "ttsoapcgi"

/**

Operation details:
Returns test runs steps mode. Either Grid View or Free Form Text View.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getTestRunStepsModes"

  - Addressing input action: "urn:testtrack-interface#getTestRunStepsModes"

  - Addressing output action: "urn:testtrack-interface#getTestRunStepsModesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getTestRunStepsModes(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    // output parameters:
    struct ns1__getTestRunStepsModesResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getTestRunStepsModes(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    // output parameters:
    struct ns1__getTestRunStepsModesResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getTestRunStepsModes SOAP
//gsoap ns1  service method-style:	getTestRunStepsModes rpc
//gsoap ns1  service method-encoding:	getTestRunStepsModes http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getTestRunStepsModes urn:testtrack-interface#getTestRunStepsModes
//gsoap ns1  service method-output-action:	getTestRunStepsModes urn:testtrack-interface#getTestRunStepsModesResponse
int ns1__getTestRunStepsModes(
    LONG64                              cookie,	///< Input parameter
    struct ns1__getTestRunStepsModesResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getTestCase                                                         *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getTestCaseResponse" of operation "ns1__getTestCase"
struct ns1__getTestCaseResponse
{
    ns1__CTestCase*                     pTestCase;
};

/// Operation "ns1__getTestCase" of service binding "ttsoapcgi"

/**

Operation details:
Returns a list of test cases.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getTestCase"

  - Addressing input action: "urn:testtrack-interface#getTestCase"

  - Addressing output action: "urn:testtrack-interface#getTestCaseResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getTestCase(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              testCaseNumber,
    char*                               summary,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__getTestCaseResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getTestCase(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              testCaseNumber,
    char*                               summary,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__getTestCaseResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getTestCase SOAP
//gsoap ns1  service method-style:	getTestCase rpc
//gsoap ns1  service method-encoding:	getTestCase http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getTestCase urn:testtrack-interface#getTestCase
//gsoap ns1  service method-output-action:	getTestCase urn:testtrack-interface#getTestCaseResponse
int ns1__getTestCase(
    LONG64                              cookie,	///< Input parameter
    LONG64                              testCaseNumber,	///< Input parameter
    char*                               summary,	///< Input parameter
    bool                                bDownloadAttachments,	///< Input parameter
    struct ns1__getTestCaseResponse    &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getTestCaseByRecordID                                               *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getTestCaseByRecordIDResponse" of operation "ns1__getTestCaseByRecordID"
struct ns1__getTestCaseByRecordIDResponse
{
    ns1__CTestCase*                     pTestCase;
};

/// Operation "ns1__getTestCaseByRecordID" of service binding "ttsoapcgi"

/**

Operation details:
Returns a test case based on record ID.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getTestCaseByRecordID"

  - Addressing input action: "urn:testtrack-interface#getTestCaseByRecordID"

  - Addressing output action: "urn:testtrack-interface#getTestCaseByRecordIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getTestCaseByRecordID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__getTestCaseByRecordIDResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getTestCaseByRecordID(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__getTestCaseByRecordIDResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getTestCaseByRecordID SOAP
//gsoap ns1  service method-style:	getTestCaseByRecordID rpc
//gsoap ns1  service method-encoding:	getTestCaseByRecordID http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getTestCaseByRecordID urn:testtrack-interface#getTestCaseByRecordID
//gsoap ns1  service method-output-action:	getTestCaseByRecordID urn:testtrack-interface#getTestCaseByRecordIDResponse
int ns1__getTestCaseByRecordID(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    bool                                bDownloadAttachments,	///< Input parameter
    struct ns1__getTestCaseByRecordIDResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__addTestCase                                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__addTestCase" of service binding "ttsoapcgi"

/**

Operation details:
Creates a test case.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#addTestCase"

  - Addressing input action: "urn:testtrack-interface#addTestCase"

  - Addressing output action: "urn:testtrack-interface#addTestCaseResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__addTestCase(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    ns1__CTestCase*                     pTestCase,
    // output parameters:
    LONG64                             &recordID
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__addTestCase(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    ns1__CTestCase*                     pTestCase,
    // output parameters:
    LONG64                             &recordID
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	addTestCase SOAP
//gsoap ns1  service method-style:	addTestCase rpc
//gsoap ns1  service method-encoding:	addTestCase http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	addTestCase urn:testtrack-interface#addTestCase
//gsoap ns1  service method-output-action:	addTestCase urn:testtrack-interface#addTestCaseResponse
int ns1__addTestCase(
    LONG64                              cookie,	///< Input parameter
    ns1__CTestCase*                     pTestCase,	///< Input parameter
    LONG64                             &recordID	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__deleteTestCase                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__deleteTestCase" of service binding "ttsoapcgi"

/**

Operation details:
Deletes a test case.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#deleteTestCase"

  - Addressing input action: "urn:testtrack-interface#deleteTestCase"

  - Addressing output action: "urn:testtrack-interface#deleteTestCaseResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__deleteTestCase(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              testCaseNumber,
    char*                               summary,
    bool                                bDeleteAssociatedTestRuns,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__deleteTestCase(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              testCaseNumber,
    char*                               summary,
    bool                                bDeleteAssociatedTestRuns,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	deleteTestCase SOAP
//gsoap ns1  service method-style:	deleteTestCase rpc
//gsoap ns1  service method-encoding:	deleteTestCase http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	deleteTestCase urn:testtrack-interface#deleteTestCase
//gsoap ns1  service method-output-action:	deleteTestCase urn:testtrack-interface#deleteTestCaseResponse
int ns1__deleteTestCase(
    LONG64                              cookie,	///< Input parameter
    LONG64                              testCaseNumber,	///< Input parameter
    char*                               summary,	///< Input parameter
    bool                                bDeleteAssociatedTestRuns,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__deleteTestCaseByRecordID                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__deleteTestCaseByRecordID" of service binding "ttsoapcgi"

/**

Operation details:
Deletes a test case based on a record ID.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#deleteTestCaseByRecordID"

  - Addressing input action: "urn:testtrack-interface#deleteTestCaseByRecordID"

  - Addressing output action: "urn:testtrack-interface#deleteTestCaseByRecordIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__deleteTestCaseByRecordID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                bDeleteAssociatedTestRun,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__deleteTestCaseByRecordID(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                bDeleteAssociatedTestRun,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	deleteTestCaseByRecordID SOAP
//gsoap ns1  service method-style:	deleteTestCaseByRecordID rpc
//gsoap ns1  service method-encoding:	deleteTestCaseByRecordID http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	deleteTestCaseByRecordID urn:testtrack-interface#deleteTestCaseByRecordID
//gsoap ns1  service method-output-action:	deleteTestCaseByRecordID urn:testtrack-interface#deleteTestCaseByRecordIDResponse
int ns1__deleteTestCaseByRecordID(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    bool                                bDeleteAssociatedTestRun,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__editTestCase                                                        *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__editTestCaseResponse" of operation "ns1__editTestCase"
struct ns1__editTestCaseResponse
{
    ns1__CTestCase*                     pTestCase;
};

/// Operation "ns1__editTestCase" of service binding "ttsoapcgi"

/**

Operation details:
Retrieves a test case for editing. The saveTestCase request must be called and passed
the changed objects.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#editTestCase"

  - Addressing input action: "urn:testtrack-interface#editTestCase"

  - Addressing output action: "urn:testtrack-interface#editTestCaseResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__editTestCase(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              testCaseNumber,
    char*                               summary,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__editTestCaseResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__editTestCase(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              testCaseNumber,
    char*                               summary,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__editTestCaseResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	editTestCase SOAP
//gsoap ns1  service method-style:	editTestCase rpc
//gsoap ns1  service method-encoding:	editTestCase http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	editTestCase urn:testtrack-interface#editTestCase
//gsoap ns1  service method-output-action:	editTestCase urn:testtrack-interface#editTestCaseResponse
int ns1__editTestCase(
    LONG64                              cookie,	///< Input parameter
    LONG64                              testCaseNumber,	///< Input parameter
    char*                               summary,	///< Input parameter
    bool                                bDownloadAttachments,	///< Input parameter
    struct ns1__editTestCaseResponse   &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__editTestCaseByRecordID                                              *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__editTestCaseByRecordIDResponse" of operation "ns1__editTestCaseByRecordID"
struct ns1__editTestCaseByRecordIDResponse
{
    ns1__CTestCase*                     pTestCase;
};

/// Operation "ns1__editTestCaseByRecordID" of service binding "ttsoapcgi"

/**

Operation details:
Retrieves a test case for editing based on record ID. The saveTestCase request must
be called and passed the changed objects.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#editTestCaseByRecordID"

  - Addressing input action: "urn:testtrack-interface#editTestCaseByRecordID"

  - Addressing output action: "urn:testtrack-interface#editTestCaseByRecordIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__editTestCaseByRecordID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__editTestCaseByRecordIDResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__editTestCaseByRecordID(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__editTestCaseByRecordIDResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	editTestCaseByRecordID SOAP
//gsoap ns1  service method-style:	editTestCaseByRecordID rpc
//gsoap ns1  service method-encoding:	editTestCaseByRecordID http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	editTestCaseByRecordID urn:testtrack-interface#editTestCaseByRecordID
//gsoap ns1  service method-output-action:	editTestCaseByRecordID urn:testtrack-interface#editTestCaseByRecordIDResponse
int ns1__editTestCaseByRecordID(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    bool                                bDownloadAttachments,	///< Input parameter
    struct ns1__editTestCaseByRecordIDResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__saveTestCase                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__saveTestCase" of service binding "ttsoapcgi"

/**

Operation details:
Saves changes made to a test case.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#saveTestCase"

  - Addressing input action: "urn:testtrack-interface#saveTestCase"

  - Addressing output action: "urn:testtrack-interface#saveTestCaseResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__saveTestCase(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    ns1__CTestCase*                     pTestCase,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__saveTestCase(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    ns1__CTestCase*                     pTestCase,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	saveTestCase SOAP
//gsoap ns1  service method-style:	saveTestCase rpc
//gsoap ns1  service method-encoding:	saveTestCase http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	saveTestCase urn:testtrack-interface#saveTestCase
//gsoap ns1  service method-output-action:	saveTestCase urn:testtrack-interface#saveTestCaseResponse
int ns1__saveTestCase(
    LONG64                              cookie,	///< Input parameter
    ns1__CTestCase*                     pTestCase,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__cancelSaveTestCase                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__cancelSaveTestCase" of service binding "ttsoapcgi"

/**

Operation details:
Discards changes made to a test case.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#cancelSaveTestCase"

  - Addressing input action: "urn:testtrack-interface#cancelSaveTestCase"

  - Addressing output action: "urn:testtrack-interface#cancelSaveTestCaseResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__cancelSaveTestCase(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__cancelSaveTestCase(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	cancelSaveTestCase SOAP
//gsoap ns1  service method-style:	cancelSaveTestCase rpc
//gsoap ns1  service method-encoding:	cancelSaveTestCase http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	cancelSaveTestCase urn:testtrack-interface#cancelSaveTestCase
//gsoap ns1  service method-output-action:	cancelSaveTestCase urn:testtrack-interface#cancelSaveTestCaseResponse
int ns1__cancelSaveTestCase(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getTestRun                                                          *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getTestRunResponse" of operation "ns1__getTestRun"
struct ns1__getTestRunResponse
{
    ns1__CTestRun*                      pTestRun;
};

/// Operation "ns1__getTestRun" of service binding "ttsoapcgi"

/**

Operation details:
Returns a list of test runs.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getTestRun"

  - Addressing input action: "urn:testtrack-interface#getTestRun"

  - Addressing output action: "urn:testtrack-interface#getTestRunResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getTestRun(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              testRunNumber,
    char*                               summary,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__getTestRunResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getTestRun(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              testRunNumber,
    char*                               summary,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__getTestRunResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getTestRun SOAP
//gsoap ns1  service method-style:	getTestRun rpc
//gsoap ns1  service method-encoding:	getTestRun http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getTestRun urn:testtrack-interface#getTestRun
//gsoap ns1  service method-output-action:	getTestRun urn:testtrack-interface#getTestRunResponse
int ns1__getTestRun(
    LONG64                              cookie,	///< Input parameter
    LONG64                              testRunNumber,	///< Input parameter
    char*                               summary,	///< Input parameter
    bool                                bDownloadAttachments,	///< Input parameter
    struct ns1__getTestRunResponse     &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getTestRunByRecordID                                                *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getTestRunByRecordIDResponse" of operation "ns1__getTestRunByRecordID"
struct ns1__getTestRunByRecordIDResponse
{
    ns1__CTestRun*                      pTestRun;
};

/// Operation "ns1__getTestRunByRecordID" of service binding "ttsoapcgi"

/**

Operation details:
Returns a test run based on record ID.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getTestRunByRecordID"

  - Addressing input action: "urn:testtrack-interface#getTestRunByRecordID"

  - Addressing output action: "urn:testtrack-interface#getTestRunByRecordIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getTestRunByRecordID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__getTestRunByRecordIDResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getTestRunByRecordID(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__getTestRunByRecordIDResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getTestRunByRecordID SOAP
//gsoap ns1  service method-style:	getTestRunByRecordID rpc
//gsoap ns1  service method-encoding:	getTestRunByRecordID http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getTestRunByRecordID urn:testtrack-interface#getTestRunByRecordID
//gsoap ns1  service method-output-action:	getTestRunByRecordID urn:testtrack-interface#getTestRunByRecordIDResponse
int ns1__getTestRunByRecordID(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    bool                                bDownloadAttachments,	///< Input parameter
    struct ns1__getTestRunByRecordIDResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__deleteTestRun                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__deleteTestRun" of service binding "ttsoapcgi"

/**

Operation details:
Deletes a test run.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#deleteTestRun"

  - Addressing input action: "urn:testtrack-interface#deleteTestRun"

  - Addressing output action: "urn:testtrack-interface#deleteTestRunResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__deleteTestRun(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              testRunNumber,
    char*                               summary,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__deleteTestRun(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              testRunNumber,
    char*                               summary,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	deleteTestRun SOAP
//gsoap ns1  service method-style:	deleteTestRun rpc
//gsoap ns1  service method-encoding:	deleteTestRun http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	deleteTestRun urn:testtrack-interface#deleteTestRun
//gsoap ns1  service method-output-action:	deleteTestRun urn:testtrack-interface#deleteTestRunResponse
int ns1__deleteTestRun(
    LONG64                              cookie,	///< Input parameter
    LONG64                              testRunNumber,	///< Input parameter
    char*                               summary,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__deleteTestRunByRecordID                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__deleteTestRunByRecordID" of service binding "ttsoapcgi"

/**

Operation details:
Deletes a test run based on record ID.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#deleteTestRunByRecordID"

  - Addressing input action: "urn:testtrack-interface#deleteTestRunByRecordID"

  - Addressing output action: "urn:testtrack-interface#deleteTestRunByRecordIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__deleteTestRunByRecordID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__deleteTestRunByRecordID(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	deleteTestRunByRecordID SOAP
//gsoap ns1  service method-style:	deleteTestRunByRecordID rpc
//gsoap ns1  service method-encoding:	deleteTestRunByRecordID http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	deleteTestRunByRecordID urn:testtrack-interface#deleteTestRunByRecordID
//gsoap ns1  service method-output-action:	deleteTestRunByRecordID urn:testtrack-interface#deleteTestRunByRecordIDResponse
int ns1__deleteTestRunByRecordID(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__editTestRun                                                         *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__editTestRunResponse" of operation "ns1__editTestRun"
struct ns1__editTestRunResponse
{
    ns1__CTestRun*                      pTestRun;
};

/// Operation "ns1__editTestRun" of service binding "ttsoapcgi"

/**

Operation details:
Retrieves a test run for editing. The saveTestRun request must be called and passed
the changed objects.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#editTestRun"

  - Addressing input action: "urn:testtrack-interface#editTestRun"

  - Addressing output action: "urn:testtrack-interface#editTestRunResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__editTestRun(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              testRunNumber,
    char*                               summary,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__editTestRunResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__editTestRun(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              testRunNumber,
    char*                               summary,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__editTestRunResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	editTestRun SOAP
//gsoap ns1  service method-style:	editTestRun rpc
//gsoap ns1  service method-encoding:	editTestRun http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	editTestRun urn:testtrack-interface#editTestRun
//gsoap ns1  service method-output-action:	editTestRun urn:testtrack-interface#editTestRunResponse
int ns1__editTestRun(
    LONG64                              cookie,	///< Input parameter
    LONG64                              testRunNumber,	///< Input parameter
    char*                               summary,	///< Input parameter
    bool                                bDownloadAttachments,	///< Input parameter
    struct ns1__editTestRunResponse    &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__editTestRunByRecordID                                               *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__editTestRunByRecordIDResponse" of operation "ns1__editTestRunByRecordID"
struct ns1__editTestRunByRecordIDResponse
{
    ns1__CTestRun*                      pTestRun;
};

/// Operation "ns1__editTestRunByRecordID" of service binding "ttsoapcgi"

/**

Operation details:
Retrieves a test run for editing based on record ID. The saveTestRun request must
be called and passed the changed objects.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#editTestRunByRecordID"

  - Addressing input action: "urn:testtrack-interface#editTestRunByRecordID"

  - Addressing output action: "urn:testtrack-interface#editTestRunByRecordIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__editTestRunByRecordID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__editTestRunByRecordIDResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__editTestRunByRecordID(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__editTestRunByRecordIDResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	editTestRunByRecordID SOAP
//gsoap ns1  service method-style:	editTestRunByRecordID rpc
//gsoap ns1  service method-encoding:	editTestRunByRecordID http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	editTestRunByRecordID urn:testtrack-interface#editTestRunByRecordID
//gsoap ns1  service method-output-action:	editTestRunByRecordID urn:testtrack-interface#editTestRunByRecordIDResponse
int ns1__editTestRunByRecordID(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    bool                                bDownloadAttachments,	///< Input parameter
    struct ns1__editTestRunByRecordIDResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__saveTestRun                                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__saveTestRun" of service binding "ttsoapcgi"

/**

Operation details:
Saves changes made to a test run.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#saveTestRun"

  - Addressing input action: "urn:testtrack-interface#saveTestRun"

  - Addressing output action: "urn:testtrack-interface#saveTestRunResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__saveTestRun(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    ns1__CTestRun*                      pTestRun,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__saveTestRun(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    ns1__CTestRun*                      pTestRun,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	saveTestRun SOAP
//gsoap ns1  service method-style:	saveTestRun rpc
//gsoap ns1  service method-encoding:	saveTestRun http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	saveTestRun urn:testtrack-interface#saveTestRun
//gsoap ns1  service method-output-action:	saveTestRun urn:testtrack-interface#saveTestRunResponse
int ns1__saveTestRun(
    LONG64                              cookie,	///< Input parameter
    ns1__CTestRun*                      pTestRun,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__cancelSaveTestRun                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__cancelSaveTestRun" of service binding "ttsoapcgi"

/**

Operation details:
Discards changes made to a test run.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#cancelSaveTestRun"

  - Addressing input action: "urn:testtrack-interface#cancelSaveTestRun"

  - Addressing output action: "urn:testtrack-interface#cancelSaveTestRunResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__cancelSaveTestRun(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__cancelSaveTestRun(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	cancelSaveTestRun SOAP
//gsoap ns1  service method-style:	cancelSaveTestRun rpc
//gsoap ns1  service method-encoding:	cancelSaveTestRun http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	cancelSaveTestRun urn:testtrack-interface#cancelSaveTestRun
//gsoap ns1  service method-output-action:	cancelSaveTestRun urn:testtrack-interface#cancelSaveTestRunResponse
int ns1__cancelSaveTestRun(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__createDefectForTestRun                                              *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__createDefectForTestRunResponse" of operation "ns1__createDefectForTestRun"
struct ns1__createDefectForTestRunResponse
{
    ns1__CDefect*                       pDefect;
};

/// Operation "ns1__createDefectForTestRun" of service binding "ttsoapcgi"

/**

Operation details:
Creates a defect based on test run results.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#createDefectForTestRun"

  - Addressing input action: "urn:testtrack-interface#createDefectForTestRun"

  - Addressing output action: "urn:testtrack-interface#createDefectForTestRunResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__createDefectForTestRun(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    struct ns1__createDefectForTestRunResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__createDefectForTestRun(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    struct ns1__createDefectForTestRunResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	createDefectForTestRun SOAP
//gsoap ns1  service method-style:	createDefectForTestRun rpc
//gsoap ns1  service method-encoding:	createDefectForTestRun http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	createDefectForTestRun urn:testtrack-interface#createDefectForTestRun
//gsoap ns1  service method-output-action:	createDefectForTestRun urn:testtrack-interface#createDefectForTestRunResponse
int ns1__createDefectForTestRun(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    struct ns1__createDefectForTestRunResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__generateTestRuns                                                    *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__generateTestRunsResponse" of operation "ns1__generateTestRuns"
struct ns1__generateTestRunsResponse
{
    ArrayOfCItemToTrack*                pResults;
};

/// Operation "ns1__generateTestRuns" of service binding "ttsoapcgi"

/**

Operation details:
Generates test runs for a test case.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#generateTestRuns"

  - Addressing input action: "urn:testtrack-interface#generateTestRuns"

  - Addressing output action: "urn:testtrack-interface#generateTestRunsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__generateTestRuns(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    ArrayOfCTestRunVariantField*        testVariants,
    char*                               testRunSet,
    // output parameters:
    struct ns1__generateTestRunsResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__generateTestRuns(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    ArrayOfCTestRunVariantField*        testVariants,
    char*                               testRunSet,
    // output parameters:
    struct ns1__generateTestRunsResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	generateTestRuns SOAP
//gsoap ns1  service method-style:	generateTestRuns rpc
//gsoap ns1  service method-encoding:	generateTestRuns http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	generateTestRuns urn:testtrack-interface#generateTestRuns
//gsoap ns1  service method-output-action:	generateTestRuns urn:testtrack-interface#generateTestRunsResponse
int ns1__generateTestRuns(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    ArrayOfCTestRunVariantField*        testVariants,	///< Input parameter
    char*                               testRunSet,	///< Input parameter
    struct ns1__generateTestRunsResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getFolderTypeByName                                                 *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getFolderTypeByNameResponse" of operation "ns1__getFolderTypeByName"
struct ns1__getFolderTypeByNameResponse
{
    ns1__CFolderType*                   pType;
};

/// Operation "ns1__getFolderTypeByName" of service binding "ttsoapcgi"

/**

Operation details:
Returns the properties of the folder type. Call the getFolderTypeList request to
get the names used in this request.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getFolderTypeByName"

  - Addressing input action: "urn:testtrack-interface#getFolderTypeByName"

  - Addressing output action: "urn:testtrack-interface#getFolderTypeByNameResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getFolderTypeByName(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    char*                               name,
    // output parameters:
    struct ns1__getFolderTypeByNameResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getFolderTypeByName(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    char*                               name,
    // output parameters:
    struct ns1__getFolderTypeByNameResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getFolderTypeByName SOAP
//gsoap ns1  service method-style:	getFolderTypeByName rpc
//gsoap ns1  service method-encoding:	getFolderTypeByName http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getFolderTypeByName urn:testtrack-interface#getFolderTypeByName
//gsoap ns1  service method-output-action:	getFolderTypeByName urn:testtrack-interface#getFolderTypeByNameResponse
int ns1__getFolderTypeByName(
    LONG64                              cookie,	///< Input parameter
    char*                               name,	///< Input parameter
    struct ns1__getFolderTypeByNameResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getFolderTypeList                                                   *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getFolderTypeListResponse" of operation "ns1__getFolderTypeList"
struct ns1__getFolderTypeListResponse
{
    ArrayOfCFolderType*                 pTypeList;
};

/// Operation "ns1__getFolderTypeList" of service binding "ttsoapcgi"

/**

Operation details:
Returns a list of configured folder types.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getFolderTypeList"

  - Addressing input action: "urn:testtrack-interface#getFolderTypeList"

  - Addressing output action: "urn:testtrack-interface#getFolderTypeListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getFolderTypeList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    // output parameters:
    struct ns1__getFolderTypeListResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getFolderTypeList(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    // output parameters:
    struct ns1__getFolderTypeListResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getFolderTypeList SOAP
//gsoap ns1  service method-style:	getFolderTypeList rpc
//gsoap ns1  service method-encoding:	getFolderTypeList http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getFolderTypeList urn:testtrack-interface#getFolderTypeList
//gsoap ns1  service method-output-action:	getFolderTypeList urn:testtrack-interface#getFolderTypeListResponse
int ns1__getFolderTypeList(
    LONG64                              cookie,	///< Input parameter
    struct ns1__getFolderTypeListResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__addFolder                                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__addFolder" of service binding "ttsoapcgi"

/**

Operation details:
Creates a folder.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#addFolder"

  - Addressing input action: "urn:testtrack-interface#addFolder"

  - Addressing output action: "urn:testtrack-interface#addFolderResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__addFolder(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    ns1__CFolder*                       pFolder,
    // output parameters:
    LONG64                             &recordID
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__addFolder(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    ns1__CFolder*                       pFolder,
    // output parameters:
    LONG64                             &recordID
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	addFolder SOAP
//gsoap ns1  service method-style:	addFolder rpc
//gsoap ns1  service method-encoding:	addFolder http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	addFolder urn:testtrack-interface#addFolder
//gsoap ns1  service method-output-action:	addFolder urn:testtrack-interface#addFolderResponse
int ns1__addFolder(
    LONG64                              cookie,	///< Input parameter
    ns1__CFolder*                       pFolder,	///< Input parameter
    LONG64                             &recordID	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__editFolder                                                          *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__editFolderResponse" of operation "ns1__editFolder"
struct ns1__editFolderResponse
{
    ns1__CFolder*                       pFolder;
};

/// Operation "ns1__editFolder" of service binding "ttsoapcgi"

/**

Operation details:
Retrieves a folder for editing. The saveFolder request must be called and passed
the changed objects.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#editFolder"

  - Addressing input action: "urn:testtrack-interface#editFolder"

  - Addressing output action: "urn:testtrack-interface#editFolderResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__editFolder(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    char*                               folderPath,
    // output parameters:
    struct ns1__editFolderResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__editFolder(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    char*                               folderPath,
    // output parameters:
    struct ns1__editFolderResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	editFolder SOAP
//gsoap ns1  service method-style:	editFolder rpc
//gsoap ns1  service method-encoding:	editFolder http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	editFolder urn:testtrack-interface#editFolder
//gsoap ns1  service method-output-action:	editFolder urn:testtrack-interface#editFolderResponse
int ns1__editFolder(
    LONG64                              cookie,	///< Input parameter
    char*                               folderPath,	///< Input parameter
    struct ns1__editFolderResponse     &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__editFolderByRecordID                                                *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__editFolderByRecordIDResponse" of operation "ns1__editFolderByRecordID"
struct ns1__editFolderByRecordIDResponse
{
    ns1__CFolder*                       pFolder;
};

/// Operation "ns1__editFolderByRecordID" of service binding "ttsoapcgi"

/**

Operation details:
Retrieves a folder for editing based on record ID. The saveFolder request must be
called and passed the changed objects.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#editFolderByRecordID"

  - Addressing input action: "urn:testtrack-interface#editFolderByRecordID"

  - Addressing output action: "urn:testtrack-interface#editFolderByRecordIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__editFolderByRecordID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                publicFolder,
    // output parameters:
    struct ns1__editFolderByRecordIDResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__editFolderByRecordID(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                publicFolder,
    // output parameters:
    struct ns1__editFolderByRecordIDResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	editFolderByRecordID SOAP
//gsoap ns1  service method-style:	editFolderByRecordID rpc
//gsoap ns1  service method-encoding:	editFolderByRecordID http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	editFolderByRecordID urn:testtrack-interface#editFolderByRecordID
//gsoap ns1  service method-output-action:	editFolderByRecordID urn:testtrack-interface#editFolderByRecordIDResponse
int ns1__editFolderByRecordID(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    bool                                publicFolder,	///< Input parameter
    struct ns1__editFolderByRecordIDResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__saveFolder                                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__saveFolder" of service binding "ttsoapcgi"

/**

Operation details:
Saves changes made to a folder. NOTES: If you set the path, parentid, and the ispublic
flag, they must all be consistent. If you set only the path, you can pass back
the original parentid and ispublic flag and they will be updated automatically.
Similarly, if you set the parentid and the ispublic flag you can pass back the
original path (or none at all) and it will be updated. If you set only the parentid,
the ispublic flag and the owner of the new parent folder (if private) must be the
same as the old parent folder. If the folder name changes, the path must also change.
The path must always end with the folder name and no trailing path separator character.
Changing only ispublic or only name results in an error.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#saveFolder"

  - Addressing input action: "urn:testtrack-interface#saveFolder"

  - Addressing output action: "urn:testtrack-interface#saveFolderResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__saveFolder(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    ns1__CFolder*                       pFolder,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__saveFolder(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    ns1__CFolder*                       pFolder,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	saveFolder SOAP
//gsoap ns1  service method-style:	saveFolder rpc
//gsoap ns1  service method-encoding:	saveFolder http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	saveFolder urn:testtrack-interface#saveFolder
//gsoap ns1  service method-output-action:	saveFolder urn:testtrack-interface#saveFolderResponse
int ns1__saveFolder(
    LONG64                              cookie,	///< Input parameter
    ns1__CFolder*                       pFolder,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__cancelSaveFolder                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__cancelSaveFolder" of service binding "ttsoapcgi"

/**

Operation details:
Discards changes made to a folder.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#cancelSaveFolder"

  - Addressing input action: "urn:testtrack-interface#cancelSaveFolder"

  - Addressing output action: "urn:testtrack-interface#cancelSaveFolderResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__cancelSaveFolder(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__cancelSaveFolder(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	cancelSaveFolder SOAP
//gsoap ns1  service method-style:	cancelSaveFolder rpc
//gsoap ns1  service method-encoding:	cancelSaveFolder http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	cancelSaveFolder urn:testtrack-interface#cancelSaveFolder
//gsoap ns1  service method-output-action:	cancelSaveFolder urn:testtrack-interface#cancelSaveFolderResponse
int ns1__cancelSaveFolder(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getFolder                                                           *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getFolderResponse" of operation "ns1__getFolder"
struct ns1__getFolderResponse
{
    ns1__CFolder*                       pFolder;
};

/// Operation "ns1__getFolder" of service binding "ttsoapcgi"

/**

Operation details:
Returns a list of folders.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getFolder"

  - Addressing input action: "urn:testtrack-interface#getFolder"

  - Addressing output action: "urn:testtrack-interface#getFolderResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getFolder(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    char*                               path,
    // output parameters:
    struct ns1__getFolderResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getFolder(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    char*                               path,
    // output parameters:
    struct ns1__getFolderResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getFolder SOAP
//gsoap ns1  service method-style:	getFolder rpc
//gsoap ns1  service method-encoding:	getFolder http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getFolder urn:testtrack-interface#getFolder
//gsoap ns1  service method-output-action:	getFolder urn:testtrack-interface#getFolderResponse
int ns1__getFolder(
    LONG64                              cookie,	///< Input parameter
    char*                               path,	///< Input parameter
    struct ns1__getFolderResponse      &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getFolderByRecordID                                                 *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getFolderByRecordIDResponse" of operation "ns1__getFolderByRecordID"
struct ns1__getFolderByRecordIDResponse
{
    ns1__CFolder*                       pFolder;
};

/// Operation "ns1__getFolderByRecordID" of service binding "ttsoapcgi"

/**

Operation details:
Returns a folder based on record ID.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getFolderByRecordID"

  - Addressing input action: "urn:testtrack-interface#getFolderByRecordID"

  - Addressing output action: "urn:testtrack-interface#getFolderByRecordIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getFolderByRecordID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                publicFolder,
    // output parameters:
    struct ns1__getFolderByRecordIDResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getFolderByRecordID(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                publicFolder,
    // output parameters:
    struct ns1__getFolderByRecordIDResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getFolderByRecordID SOAP
//gsoap ns1  service method-style:	getFolderByRecordID rpc
//gsoap ns1  service method-encoding:	getFolderByRecordID http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getFolderByRecordID urn:testtrack-interface#getFolderByRecordID
//gsoap ns1  service method-output-action:	getFolderByRecordID urn:testtrack-interface#getFolderByRecordIDResponse
int ns1__getFolderByRecordID(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    bool                                publicFolder,	///< Input parameter
    struct ns1__getFolderByRecordIDResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__deleteFolder                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__deleteFolder" of service binding "ttsoapcgi"

/**

Operation details:
Deletes a folder.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#deleteFolder"

  - Addressing input action: "urn:testtrack-interface#deleteFolder"

  - Addressing output action: "urn:testtrack-interface#deleteFolderResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__deleteFolder(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    char*                               folderPath,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__deleteFolder(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    char*                               folderPath,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	deleteFolder SOAP
//gsoap ns1  service method-style:	deleteFolder rpc
//gsoap ns1  service method-encoding:	deleteFolder http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	deleteFolder urn:testtrack-interface#deleteFolder
//gsoap ns1  service method-output-action:	deleteFolder urn:testtrack-interface#deleteFolderResponse
int ns1__deleteFolder(
    LONG64                              cookie,	///< Input parameter
    char*                               folderPath,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__deleteFolderByRecordID                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__deleteFolderByRecordID" of service binding "ttsoapcgi"

/**

Operation details:
Deletes a folder based on record ID.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#deleteFolderByRecordID"

  - Addressing input action: "urn:testtrack-interface#deleteFolderByRecordID"

  - Addressing output action: "urn:testtrack-interface#deleteFolderByRecordIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__deleteFolderByRecordID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                publicFolder,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__deleteFolderByRecordID(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                publicFolder,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	deleteFolderByRecordID SOAP
//gsoap ns1  service method-style:	deleteFolderByRecordID rpc
//gsoap ns1  service method-encoding:	deleteFolderByRecordID http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	deleteFolderByRecordID urn:testtrack-interface#deleteFolderByRecordID
//gsoap ns1  service method-output-action:	deleteFolderByRecordID urn:testtrack-interface#deleteFolderByRecordIDResponse
int ns1__deleteFolderByRecordID(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    bool                                publicFolder,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__addEntityToFolderByRecordID                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__addEntityToFolderByRecordID" of service binding "ttsoapcgi"

/**

Operation details:
Adds a TestTrack item to a folder based on record ID.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#addEntityToFolderByRecordID"

  - Addressing input action: "urn:testtrack-interface#addEntityToFolderByRecordID"

  - Addressing output action: "urn:testtrack-interface#addEntityToFolderByRecordIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__addEntityToFolderByRecordID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                publicFolder,
    LONG64                              entityRecordID,
    char*                               entityTableName,
    // output parameters:
    int                                &itemRecordID
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__addEntityToFolderByRecordID(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                publicFolder,
    LONG64                              entityRecordID,
    char*                               entityTableName,
    // output parameters:
    int                                &itemRecordID
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	addEntityToFolderByRecordID SOAP
//gsoap ns1  service method-style:	addEntityToFolderByRecordID rpc
//gsoap ns1  service method-encoding:	addEntityToFolderByRecordID http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	addEntityToFolderByRecordID urn:testtrack-interface#addEntityToFolderByRecordID
//gsoap ns1  service method-output-action:	addEntityToFolderByRecordID urn:testtrack-interface#addEntityToFolderByRecordIDResponse
int ns1__addEntityToFolderByRecordID(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    bool                                publicFolder,	///< Input parameter
    LONG64                              entityRecordID,	///< Input parameter
    char*                               entityTableName,	///< Input parameter
    int                                &itemRecordID	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__removeEntityFromFolderByRecordID                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__removeEntityFromFolderByRecordID" of service binding "ttsoapcgi"

/**

Operation details:
Removes a TestTrack item from a folder based on record ID.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#removeEntityFromFolderByRecordID"

  - Addressing input action: "urn:testtrack-interface#removeEntityFromFolderByRecordID"

  - Addressing output action: "urn:testtrack-interface#removeEntityFromFolderByRecordIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__removeEntityFromFolderByRecordID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                publicFolder,
    ns1__CFolderItem*                   entity,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__removeEntityFromFolderByRecordID(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                publicFolder,
    ns1__CFolderItem*                   entity,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	removeEntityFromFolderByRecordID SOAP
//gsoap ns1  service method-style:	removeEntityFromFolderByRecordID rpc
//gsoap ns1  service method-encoding:	removeEntityFromFolderByRecordID http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	removeEntityFromFolderByRecordID urn:testtrack-interface#removeEntityFromFolderByRecordID
//gsoap ns1  service method-output-action:	removeEntityFromFolderByRecordID urn:testtrack-interface#removeEntityFromFolderByRecordIDResponse
int ns1__removeEntityFromFolderByRecordID(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    bool                                publicFolder,	///< Input parameter
    ns1__CFolderItem*                   entity,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getEntityListForFolderByRecordID                                    *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getEntityListForFolderByRecordIDResponse" of operation "ns1__getEntityListForFolderByRecordID"
struct ns1__getEntityListForFolderByRecordIDResponse
{
    ArrayOfCFolderItem*                 pEntityList;
};

/// Operation "ns1__getEntityListForFolderByRecordID" of service binding "ttsoapcgi"

/**

Operation details:
Returns a list of TestTrack items in a folder based on record ID.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getEntityListForFolderByRecordID"

  - Addressing input action: "urn:testtrack-interface#getEntityListForFolderByRecordID"

  - Addressing output action: "urn:testtrack-interface#getEntityListForFolderByRecordIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getEntityListForFolderByRecordID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                publicFolder,
    // output parameters:
    struct ns1__getEntityListForFolderByRecordIDResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getEntityListForFolderByRecordID(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                publicFolder,
    // output parameters:
    struct ns1__getEntityListForFolderByRecordIDResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getEntityListForFolderByRecordID SOAP
//gsoap ns1  service method-style:	getEntityListForFolderByRecordID rpc
//gsoap ns1  service method-encoding:	getEntityListForFolderByRecordID http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getEntityListForFolderByRecordID urn:testtrack-interface#getEntityListForFolderByRecordID
//gsoap ns1  service method-output-action:	getEntityListForFolderByRecordID urn:testtrack-interface#getEntityListForFolderByRecordIDResponse
int ns1__getEntityListForFolderByRecordID(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    bool                                publicFolder,	///< Input parameter
    struct ns1__getEntityListForFolderByRecordIDResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getFolderListForEntityByRecordID                                    *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getFolderListForEntityByRecordIDResponse" of operation "ns1__getFolderListForEntityByRecordID"
struct ns1__getFolderListForEntityByRecordIDResponse
{
    ArrayOfCFolder*                     pFolderList;
};

/// Operation "ns1__getFolderListForEntityByRecordID" of service binding "ttsoapcgi"

/**

Operation details:
Returns a list of folders a specified item is in.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getFolderListForEntityByRecordID"

  - Addressing input action: "urn:testtrack-interface#getFolderListForEntityByRecordID"

  - Addressing output action: "urn:testtrack-interface#getFolderListForEntityByRecordIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getFolderListForEntityByRecordID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    char*                               tablename,
    LONG64                              recordID,
    // output parameters:
    struct ns1__getFolderListForEntityByRecordIDResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getFolderListForEntityByRecordID(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    char*                               tablename,
    LONG64                              recordID,
    // output parameters:
    struct ns1__getFolderListForEntityByRecordIDResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getFolderListForEntityByRecordID SOAP
//gsoap ns1  service method-style:	getFolderListForEntityByRecordID rpc
//gsoap ns1  service method-encoding:	getFolderListForEntityByRecordID http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getFolderListForEntityByRecordID urn:testtrack-interface#getFolderListForEntityByRecordID
//gsoap ns1  service method-output-action:	getFolderListForEntityByRecordID urn:testtrack-interface#getFolderListForEntityByRecordIDResponse
int ns1__getFolderListForEntityByRecordID(
    LONG64                              cookie,	///< Input parameter
    char*                               tablename,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    struct ns1__getFolderListForEntityByRecordIDResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getFolderPathSeparator                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__getFolderPathSeparator" of service binding "ttsoapcgi"

/**

Operation details:
Returns the folder separator character, which is '/'.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getFolderPathSeparator"

  - Addressing input action: "urn:testtrack-interface#getFolderPathSeparator"

  - Addressing output action: "urn:testtrack-interface#getFolderPathSeparatorResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getFolderPathSeparator(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    // output parameters:
    xsd__byte                          &separator
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getFolderPathSeparator(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    // output parameters:
    xsd__byte                          &separator
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getFolderPathSeparator SOAP
//gsoap ns1  service method-style:	getFolderPathSeparator rpc
//gsoap ns1  service method-encoding:	getFolderPathSeparator http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getFolderPathSeparator urn:testtrack-interface#getFolderPathSeparator
//gsoap ns1  service method-output-action:	getFolderPathSeparator urn:testtrack-interface#getFolderPathSeparatorResponse
int ns1__getFolderPathSeparator(
    LONG64                              cookie,	///< Input parameter
    xsd__byte                          &separator	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getRootPublicFolderPath                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__getRootPublicFolderPath" of service binding "ttsoapcgi"

/**

Operation details:
Returns a public folder path.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getRootPublicFolderPath"

  - Addressing input action: "urn:testtrack-interface#getRootPublicFolderPath"

  - Addressing output action: "urn:testtrack-interface#getRootPublicFolderPathResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getRootPublicFolderPath(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    // output parameters:
    char*                              &strPublicPath
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getRootPublicFolderPath(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    // output parameters:
    char*                              &strPublicPath
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getRootPublicFolderPath SOAP
//gsoap ns1  service method-style:	getRootPublicFolderPath rpc
//gsoap ns1  service method-encoding:	getRootPublicFolderPath http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getRootPublicFolderPath urn:testtrack-interface#getRootPublicFolderPath
//gsoap ns1  service method-output-action:	getRootPublicFolderPath urn:testtrack-interface#getRootPublicFolderPathResponse
int ns1__getRootPublicFolderPath(
    LONG64                              cookie,	///< Input parameter
    char*                              &strPublicPath	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getRootPrivateFolderPath                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__getRootPrivateFolderPath" of service binding "ttsoapcgi"

/**

Operation details:
Returns a private folder path.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getRootPrivateFolderPath"

  - Addressing input action: "urn:testtrack-interface#getRootPrivateFolderPath"

  - Addressing output action: "urn:testtrack-interface#getRootPrivateFolderPathResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getRootPrivateFolderPath(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    // output parameters:
    char*                              &strPrivatePath
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getRootPrivateFolderPath(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    // output parameters:
    char*                              &strPrivatePath
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getRootPrivateFolderPath SOAP
//gsoap ns1  service method-style:	getRootPrivateFolderPath rpc
//gsoap ns1  service method-encoding:	getRootPrivateFolderPath http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getRootPrivateFolderPath urn:testtrack-interface#getRootPrivateFolderPath
//gsoap ns1  service method-output-action:	getRootPrivateFolderPath urn:testtrack-interface#getRootPrivateFolderPathResponse
int ns1__getRootPrivateFolderPath(
    LONG64                              cookie,	///< Input parameter
    char*                              &strPrivatePath	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__editFolderItemRank                                                  *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__editFolderItemRankResponse" of operation "ns1__editFolderItemRank"
struct ns1__editFolderItemRankResponse
{
    ArrayOfCFolderItem*                 pEntityList;
};

/// Operation "ns1__editFolderItemRank" of service binding "ttsoapcgi"

/**

Operation details:
Retrieves a folder for item ranking.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#editFolderItemRank"

  - Addressing input action: "urn:testtrack-interface#editFolderItemRank"

  - Addressing output action: "urn:testtrack-interface#editFolderItemRankResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__editFolderItemRank(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                publicFolder,
    // output parameters:
    struct ns1__editFolderItemRankResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__editFolderItemRank(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                publicFolder,
    // output parameters:
    struct ns1__editFolderItemRankResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	editFolderItemRank SOAP
//gsoap ns1  service method-style:	editFolderItemRank rpc
//gsoap ns1  service method-encoding:	editFolderItemRank http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	editFolderItemRank urn:testtrack-interface#editFolderItemRank
//gsoap ns1  service method-output-action:	editFolderItemRank urn:testtrack-interface#editFolderItemRankResponse
int ns1__editFolderItemRank(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    bool                                publicFolder,	///< Input parameter
    struct ns1__editFolderItemRankResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__saveFolderItemRank                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__saveFolderItemRank" of service binding "ttsoapcgi"

/**

Operation details:
Save changes made to item rank in a folder.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#saveFolderItemRank"

  - Addressing input action: "urn:testtrack-interface#saveFolderItemRank"

  - Addressing output action: "urn:testtrack-interface#saveFolderItemRankResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__saveFolderItemRank(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                publicFolder,
    ArrayOfCFolderItem*                 folderItemList,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__saveFolderItemRank(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                publicFolder,
    ArrayOfCFolderItem*                 folderItemList,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	saveFolderItemRank SOAP
//gsoap ns1  service method-style:	saveFolderItemRank rpc
//gsoap ns1  service method-encoding:	saveFolderItemRank http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	saveFolderItemRank urn:testtrack-interface#saveFolderItemRank
//gsoap ns1  service method-output-action:	saveFolderItemRank urn:testtrack-interface#saveFolderItemRankResponse
int ns1__saveFolderItemRank(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    bool                                publicFolder,	///< Input parameter
    ArrayOfCFolderItem*                 folderItemList,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__cancelSaveFolderItemRank                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__cancelSaveFolderItemRank" of service binding "ttsoapcgi"

/**

Operation details:
Discards changes made to item rank in a folder.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#cancelSaveFolderItemRank"

  - Addressing input action: "urn:testtrack-interface#cancelSaveFolderItemRank"

  - Addressing output action: "urn:testtrack-interface#cancelSaveFolderItemRankResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__cancelSaveFolderItemRank(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__cancelSaveFolderItemRank(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	cancelSaveFolderItemRank SOAP
//gsoap ns1  service method-style:	cancelSaveFolderItemRank rpc
//gsoap ns1  service method-encoding:	cancelSaveFolderItemRank http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	cancelSaveFolderItemRank urn:testtrack-interface#cancelSaveFolderItemRank
//gsoap ns1  service method-output-action:	cancelSaveFolderItemRank urn:testtrack-interface#cancelSaveFolderItemRankResponse
int ns1__cancelSaveFolderItemRank(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getRequirement                                                      *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getRequirementResponse" of operation "ns1__getRequirement"
struct ns1__getRequirementResponse
{
    ns1__CRequirement*                  pRequirement;
};

/// Operation "ns1__getRequirement" of service binding "ttsoapcgi"

/**

Operation details:
Returns a list of requirements.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getRequirement"

  - Addressing input action: "urn:testtrack-interface#getRequirement"

  - Addressing output action: "urn:testtrack-interface#getRequirementResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getRequirement(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              requirementNumber,
    char*                               summary,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__getRequirementResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getRequirement(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              requirementNumber,
    char*                               summary,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__getRequirementResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getRequirement SOAP
//gsoap ns1  service method-style:	getRequirement rpc
//gsoap ns1  service method-encoding:	getRequirement http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getRequirement urn:testtrack-interface#getRequirement
//gsoap ns1  service method-output-action:	getRequirement urn:testtrack-interface#getRequirementResponse
int ns1__getRequirement(
    LONG64                              cookie,	///< Input parameter
    LONG64                              requirementNumber,	///< Input parameter
    char*                               summary,	///< Input parameter
    bool                                bDownloadAttachments,	///< Input parameter
    struct ns1__getRequirementResponse &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getRequirementByRecordID                                            *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getRequirementByRecordIDResponse" of operation "ns1__getRequirementByRecordID"
struct ns1__getRequirementByRecordIDResponse
{
    ns1__CRequirement*                  pRequirement;
};

/// Operation "ns1__getRequirementByRecordID" of service binding "ttsoapcgi"

/**

Operation details:
Returns a requirement based on record ID.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getRequirementByRecordID"

  - Addressing input action: "urn:testtrack-interface#getRequirementByRecordID"

  - Addressing output action: "urn:testtrack-interface#getRequirementByRecordIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getRequirementByRecordID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__getRequirementByRecordIDResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getRequirementByRecordID(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__getRequirementByRecordIDResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getRequirementByRecordID SOAP
//gsoap ns1  service method-style:	getRequirementByRecordID rpc
//gsoap ns1  service method-encoding:	getRequirementByRecordID http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getRequirementByRecordID urn:testtrack-interface#getRequirementByRecordID
//gsoap ns1  service method-output-action:	getRequirementByRecordID urn:testtrack-interface#getRequirementByRecordIDResponse
int ns1__getRequirementByRecordID(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    bool                                bDownloadAttachments,	///< Input parameter
    struct ns1__getRequirementByRecordIDResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__addRequirement                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__addRequirement" of service binding "ttsoapcgi"

/**

Operation details:
Creates a requirement.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#addRequirement"

  - Addressing input action: "urn:testtrack-interface#addRequirement"

  - Addressing output action: "urn:testtrack-interface#addRequirementResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__addRequirement(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    ns1__CRequirement*                  pRequirement,
    // output parameters:
    LONG64                             &recordID
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__addRequirement(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    ns1__CRequirement*                  pRequirement,
    // output parameters:
    LONG64                             &recordID
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	addRequirement SOAP
//gsoap ns1  service method-style:	addRequirement rpc
//gsoap ns1  service method-encoding:	addRequirement http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	addRequirement urn:testtrack-interface#addRequirement
//gsoap ns1  service method-output-action:	addRequirement urn:testtrack-interface#addRequirementResponse
int ns1__addRequirement(
    LONG64                              cookie,	///< Input parameter
    ns1__CRequirement*                  pRequirement,	///< Input parameter
    LONG64                             &recordID	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__deleteRequirement                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__deleteRequirement" of service binding "ttsoapcgi"

/**

Operation details:
Deletes a requirement.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#deleteRequirement"

  - Addressing input action: "urn:testtrack-interface#deleteRequirement"

  - Addressing output action: "urn:testtrack-interface#deleteRequirementResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__deleteRequirement(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              requirementNumber,
    char*                               summary,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__deleteRequirement(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              requirementNumber,
    char*                               summary,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	deleteRequirement SOAP
//gsoap ns1  service method-style:	deleteRequirement rpc
//gsoap ns1  service method-encoding:	deleteRequirement http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	deleteRequirement urn:testtrack-interface#deleteRequirement
//gsoap ns1  service method-output-action:	deleteRequirement urn:testtrack-interface#deleteRequirementResponse
int ns1__deleteRequirement(
    LONG64                              cookie,	///< Input parameter
    LONG64                              requirementNumber,	///< Input parameter
    char*                               summary,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__deleteRequirementByRecordID                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__deleteRequirementByRecordID" of service binding "ttsoapcgi"

/**

Operation details:
Deletes a requirement based on record ID.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#deleteRequirementByRecordID"

  - Addressing input action: "urn:testtrack-interface#deleteRequirementByRecordID"

  - Addressing output action: "urn:testtrack-interface#deleteRequirementByRecordIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__deleteRequirementByRecordID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__deleteRequirementByRecordID(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	deleteRequirementByRecordID SOAP
//gsoap ns1  service method-style:	deleteRequirementByRecordID rpc
//gsoap ns1  service method-encoding:	deleteRequirementByRecordID http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	deleteRequirementByRecordID urn:testtrack-interface#deleteRequirementByRecordID
//gsoap ns1  service method-output-action:	deleteRequirementByRecordID urn:testtrack-interface#deleteRequirementByRecordIDResponse
int ns1__deleteRequirementByRecordID(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__editRequirement                                                     *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__editRequirementResponse" of operation "ns1__editRequirement"
struct ns1__editRequirementResponse
{
    ns1__CRequirement*                  pRequirement;
};

/// Operation "ns1__editRequirement" of service binding "ttsoapcgi"

/**

Operation details:
Retrieves a requirement for editing. The saveRequirement request must be called
and passed the changed objects.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#editRequirement"

  - Addressing input action: "urn:testtrack-interface#editRequirement"

  - Addressing output action: "urn:testtrack-interface#editRequirementResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__editRequirement(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              requirementNumber,
    char*                               summary,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__editRequirementResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__editRequirement(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              requirementNumber,
    char*                               summary,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__editRequirementResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	editRequirement SOAP
//gsoap ns1  service method-style:	editRequirement rpc
//gsoap ns1  service method-encoding:	editRequirement http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	editRequirement urn:testtrack-interface#editRequirement
//gsoap ns1  service method-output-action:	editRequirement urn:testtrack-interface#editRequirementResponse
int ns1__editRequirement(
    LONG64                              cookie,	///< Input parameter
    LONG64                              requirementNumber,	///< Input parameter
    char*                               summary,	///< Input parameter
    bool                                bDownloadAttachments,	///< Input parameter
    struct ns1__editRequirementResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__editRequirementByRecordID                                           *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__editRequirementByRecordIDResponse" of operation "ns1__editRequirementByRecordID"
struct ns1__editRequirementByRecordIDResponse
{
    ns1__CRequirement*                  pRequirement;
};

/// Operation "ns1__editRequirementByRecordID" of service binding "ttsoapcgi"

/**

Operation details:
Retrieves a requirement for editing based on record ID. The saveRequirement request
must be called and passed the changed objects.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#editRequirementByRecordID"

  - Addressing input action: "urn:testtrack-interface#editRequirementByRecordID"

  - Addressing output action: "urn:testtrack-interface#editRequirementByRecordIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__editRequirementByRecordID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__editRequirementByRecordIDResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__editRequirementByRecordID(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__editRequirementByRecordIDResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	editRequirementByRecordID SOAP
//gsoap ns1  service method-style:	editRequirementByRecordID rpc
//gsoap ns1  service method-encoding:	editRequirementByRecordID http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	editRequirementByRecordID urn:testtrack-interface#editRequirementByRecordID
//gsoap ns1  service method-output-action:	editRequirementByRecordID urn:testtrack-interface#editRequirementByRecordIDResponse
int ns1__editRequirementByRecordID(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    bool                                bDownloadAttachments,	///< Input parameter
    struct ns1__editRequirementByRecordIDResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__saveRequirement                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__saveRequirement" of service binding "ttsoapcgi"

/**

Operation details:
Saves changes made to a requirement.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#saveRequirement"

  - Addressing input action: "urn:testtrack-interface#saveRequirement"

  - Addressing output action: "urn:testtrack-interface#saveRequirementResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__saveRequirement(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    ns1__CRequirement*                  pRequirement,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__saveRequirement(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    ns1__CRequirement*                  pRequirement,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	saveRequirement SOAP
//gsoap ns1  service method-style:	saveRequirement rpc
//gsoap ns1  service method-encoding:	saveRequirement http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	saveRequirement urn:testtrack-interface#saveRequirement
//gsoap ns1  service method-output-action:	saveRequirement urn:testtrack-interface#saveRequirementResponse
int ns1__saveRequirement(
    LONG64                              cookie,	///< Input parameter
    ns1__CRequirement*                  pRequirement,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__cancelSaveRequirement                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__cancelSaveRequirement" of service binding "ttsoapcgi"

/**

Operation details:
Discards changes made to a requirement.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#cancelSaveRequirement"

  - Addressing input action: "urn:testtrack-interface#cancelSaveRequirement"

  - Addressing output action: "urn:testtrack-interface#cancelSaveRequirementResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__cancelSaveRequirement(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__cancelSaveRequirement(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	cancelSaveRequirement SOAP
//gsoap ns1  service method-style:	cancelSaveRequirement rpc
//gsoap ns1  service method-encoding:	cancelSaveRequirement http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	cancelSaveRequirement urn:testtrack-interface#cancelSaveRequirement
//gsoap ns1  service method-output-action:	cancelSaveRequirement urn:testtrack-interface#cancelSaveRequirementResponse
int ns1__cancelSaveRequirement(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__appendToRequirementDocument                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__appendToRequirementDocument" of service binding "ttsoapcgi"

/**

Operation details:
Appends the requirement to the end of a requirement document.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#appendToRequirementDocument"

  - Addressing input action: "urn:testtrack-interface#appendToRequirementDocument"

  - Addressing output action: "urn:testtrack-interface#appendToRequirementDocumentResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__appendToRequirementDocument(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              requirementID,
    LONG64                              documentID,
    LONG64                              parentRequirementID,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__appendToRequirementDocument(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              requirementID,
    LONG64                              documentID,
    LONG64                              parentRequirementID,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	appendToRequirementDocument SOAP
//gsoap ns1  service method-style:	appendToRequirementDocument rpc
//gsoap ns1  service method-encoding:	appendToRequirementDocument http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	appendToRequirementDocument urn:testtrack-interface#appendToRequirementDocument
//gsoap ns1  service method-output-action:	appendToRequirementDocument urn:testtrack-interface#appendToRequirementDocumentResponse
int ns1__appendToRequirementDocument(
    LONG64                              cookie,	///< Input parameter
    LONG64                              requirementID,	///< Input parameter
    LONG64                              documentID,	///< Input parameter
    LONG64                              parentRequirementID,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getDocumentIDsForRequirement                                        *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getDocumentIDsForRequirementResponse" of operation "ns1__getDocumentIDsForRequirement"
struct ns1__getDocumentIDsForRequirementResponse
{
    ArrayOflong*                        recordIDs;
};

/// Operation "ns1__getDocumentIDsForRequirement" of service binding "ttsoapcgi"

/**

Operation details:
Returns a list of requirement document IDs for a specified requirement.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getDocumentIDsForRequirement"

  - Addressing input action: "urn:testtrack-interface#getDocumentIDsForRequirement"

  - Addressing output action: "urn:testtrack-interface#getDocumentIDsForRequirementResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getDocumentIDsForRequirement(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              requirementID,
    // output parameters:
    struct ns1__getDocumentIDsForRequirementResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getDocumentIDsForRequirement(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              requirementID,
    // output parameters:
    struct ns1__getDocumentIDsForRequirementResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getDocumentIDsForRequirement SOAP
//gsoap ns1  service method-style:	getDocumentIDsForRequirement rpc
//gsoap ns1  service method-encoding:	getDocumentIDsForRequirement http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getDocumentIDsForRequirement urn:testtrack-interface#getDocumentIDsForRequirement
//gsoap ns1  service method-output-action:	getDocumentIDsForRequirement urn:testtrack-interface#getDocumentIDsForRequirementResponse
int ns1__getDocumentIDsForRequirement(
    LONG64                              cookie,	///< Input parameter
    LONG64                              requirementID,	///< Input parameter
    struct ns1__getDocumentIDsForRequirementResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__changeRequirementType                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__changeRequirementType" of service binding "ttsoapcgi"

/**

Operation details:
Changes the requirement type.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#changeRequirementType"

  - Addressing input action: "urn:testtrack-interface#changeRequirementType"

  - Addressing output action: "urn:testtrack-interface#changeRequirementTypeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__changeRequirementType(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              requirementID,
    char*                               newTypeName,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__changeRequirementType(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              requirementID,
    char*                               newTypeName,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	changeRequirementType SOAP
//gsoap ns1  service method-style:	changeRequirementType rpc
//gsoap ns1  service method-encoding:	changeRequirementType http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	changeRequirementType urn:testtrack-interface#changeRequirementType
//gsoap ns1  service method-output-action:	changeRequirementType urn:testtrack-interface#changeRequirementTypeResponse
int ns1__changeRequirementType(
    LONG64                              cookie,	///< Input parameter
    LONG64                              requirementID,	///< Input parameter
    char*                               newTypeName,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getRequirementDocument                                              *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getRequirementDocumentResponse" of operation "ns1__getRequirementDocument"
struct ns1__getRequirementDocumentResponse
{
    ns1__CRequirementDocument*          pRequirementDocument;
};

/// Operation "ns1__getRequirementDocument" of service binding "ttsoapcgi"

/**

Operation details:
Returns a list of requirement documents.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getRequirementDocument"

  - Addressing input action: "urn:testtrack-interface#getRequirementDocument"

  - Addressing output action: "urn:testtrack-interface#getRequirementDocumentResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getRequirementDocument(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              documentNumber,
    char*                               name,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__getRequirementDocumentResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getRequirementDocument(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              documentNumber,
    char*                               name,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__getRequirementDocumentResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getRequirementDocument SOAP
//gsoap ns1  service method-style:	getRequirementDocument rpc
//gsoap ns1  service method-encoding:	getRequirementDocument http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getRequirementDocument urn:testtrack-interface#getRequirementDocument
//gsoap ns1  service method-output-action:	getRequirementDocument urn:testtrack-interface#getRequirementDocumentResponse
int ns1__getRequirementDocument(
    LONG64                              cookie,	///< Input parameter
    LONG64                              documentNumber,	///< Input parameter
    char*                               name,	///< Input parameter
    bool                                bDownloadAttachments,	///< Input parameter
    struct ns1__getRequirementDocumentResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getRequirementDocumentByRecordID                                    *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getRequirementDocumentByRecordIDResponse" of operation "ns1__getRequirementDocumentByRecordID"
struct ns1__getRequirementDocumentByRecordIDResponse
{
    ns1__CRequirementDocument*          pRequirementDocument;
};

/// Operation "ns1__getRequirementDocumentByRecordID" of service binding "ttsoapcgi"

/**

Operation details:
Returns a list of requirement documents by record ID.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getRequirementDocumentByRecordID"

  - Addressing input action: "urn:testtrack-interface#getRequirementDocumentByRecordID"

  - Addressing output action: "urn:testtrack-interface#getRequirementDocumentByRecordIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getRequirementDocumentByRecordID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__getRequirementDocumentByRecordIDResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getRequirementDocumentByRecordID(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__getRequirementDocumentByRecordIDResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getRequirementDocumentByRecordID SOAP
//gsoap ns1  service method-style:	getRequirementDocumentByRecordID rpc
//gsoap ns1  service method-encoding:	getRequirementDocumentByRecordID http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getRequirementDocumentByRecordID urn:testtrack-interface#getRequirementDocumentByRecordID
//gsoap ns1  service method-output-action:	getRequirementDocumentByRecordID urn:testtrack-interface#getRequirementDocumentByRecordIDResponse
int ns1__getRequirementDocumentByRecordID(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    bool                                bDownloadAttachments,	///< Input parameter
    struct ns1__getRequirementDocumentByRecordIDResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__addRequirementDocument                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__addRequirementDocument" of service binding "ttsoapcgi"

/**

Operation details:
Creates a requirement document.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#addRequirementDocument"

  - Addressing input action: "urn:testtrack-interface#addRequirementDocument"

  - Addressing output action: "urn:testtrack-interface#addRequirementDocumentResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__addRequirementDocument(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    ns1__CRequirementDocument*          pRequirementDocument,
    // output parameters:
    LONG64                             &recordID
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__addRequirementDocument(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    ns1__CRequirementDocument*          pRequirementDocument,
    // output parameters:
    LONG64                             &recordID
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	addRequirementDocument SOAP
//gsoap ns1  service method-style:	addRequirementDocument rpc
//gsoap ns1  service method-encoding:	addRequirementDocument http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	addRequirementDocument urn:testtrack-interface#addRequirementDocument
//gsoap ns1  service method-output-action:	addRequirementDocument urn:testtrack-interface#addRequirementDocumentResponse
int ns1__addRequirementDocument(
    LONG64                              cookie,	///< Input parameter
    ns1__CRequirementDocument*          pRequirementDocument,	///< Input parameter
    LONG64                             &recordID	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__deleteRequirementDocument                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__deleteRequirementDocument" of service binding "ttsoapcgi"

/**

Operation details:
Deletes a requirement document.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#deleteRequirementDocument"

  - Addressing input action: "urn:testtrack-interface#deleteRequirementDocument"

  - Addressing output action: "urn:testtrack-interface#deleteRequirementDocumentResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__deleteRequirementDocument(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              documentNumber,
    char*                               name,
    bool                                bDeleteAssociatedRequirements,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__deleteRequirementDocument(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              documentNumber,
    char*                               name,
    bool                                bDeleteAssociatedRequirements,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	deleteRequirementDocument SOAP
//gsoap ns1  service method-style:	deleteRequirementDocument rpc
//gsoap ns1  service method-encoding:	deleteRequirementDocument http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	deleteRequirementDocument urn:testtrack-interface#deleteRequirementDocument
//gsoap ns1  service method-output-action:	deleteRequirementDocument urn:testtrack-interface#deleteRequirementDocumentResponse
int ns1__deleteRequirementDocument(
    LONG64                              cookie,	///< Input parameter
    LONG64                              documentNumber,	///< Input parameter
    char*                               name,	///< Input parameter
    bool                                bDeleteAssociatedRequirements,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__deleteRequirementDocumentByRecordID                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__deleteRequirementDocumentByRecordID" of service binding "ttsoapcgi"

/**

Operation details:
Service definition of function ttns__deleteRequirementDocumentByRecordID

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#deleteRequirementDocumentByRecordID"

  - Addressing input action: "urn:testtrack-interface#deleteRequirementDocumentByRecordID"

  - Addressing output action: "urn:testtrack-interface#deleteRequirementDocumentByRecordIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__deleteRequirementDocumentByRecordID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                bDeleteAssociatedRequirements,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__deleteRequirementDocumentByRecordID(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                bDeleteAssociatedRequirements,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	deleteRequirementDocumentByRecordID SOAP
//gsoap ns1  service method-style:	deleteRequirementDocumentByRecordID rpc
//gsoap ns1  service method-encoding:	deleteRequirementDocumentByRecordID http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	deleteRequirementDocumentByRecordID urn:testtrack-interface#deleteRequirementDocumentByRecordID
//gsoap ns1  service method-output-action:	deleteRequirementDocumentByRecordID urn:testtrack-interface#deleteRequirementDocumentByRecordIDResponse
int ns1__deleteRequirementDocumentByRecordID(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    bool                                bDeleteAssociatedRequirements,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__editRequirementDocument                                             *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__editRequirementDocumentResponse" of operation "ns1__editRequirementDocument"
struct ns1__editRequirementDocumentResponse
{
    ns1__CRequirementDocument*          pRequirementDocument;
};

/// Operation "ns1__editRequirementDocument" of service binding "ttsoapcgi"

/**

Operation details:
Retrieves a requirement document for editing. The saveRequirementDocument request
must be called and passed the changed objects.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#editRequirementDocument"

  - Addressing input action: "urn:testtrack-interface#editRequirementDocument"

  - Addressing output action: "urn:testtrack-interface#editRequirementDocumentResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__editRequirementDocument(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              documentNumber,
    char*                               name,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__editRequirementDocumentResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__editRequirementDocument(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              documentNumber,
    char*                               name,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__editRequirementDocumentResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	editRequirementDocument SOAP
//gsoap ns1  service method-style:	editRequirementDocument rpc
//gsoap ns1  service method-encoding:	editRequirementDocument http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	editRequirementDocument urn:testtrack-interface#editRequirementDocument
//gsoap ns1  service method-output-action:	editRequirementDocument urn:testtrack-interface#editRequirementDocumentResponse
int ns1__editRequirementDocument(
    LONG64                              cookie,	///< Input parameter
    LONG64                              documentNumber,	///< Input parameter
    char*                               name,	///< Input parameter
    bool                                bDownloadAttachments,	///< Input parameter
    struct ns1__editRequirementDocumentResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__editRequirementDocumentByRecordID                                   *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__editRequirementDocumentByRecordIDResponse" of operation "ns1__editRequirementDocumentByRecordID"
struct ns1__editRequirementDocumentByRecordIDResponse
{
    ns1__CRequirementDocument*          pRequirementDocument;
};

/// Operation "ns1__editRequirementDocumentByRecordID" of service binding "ttsoapcgi"

/**

Operation details:
Retrieves a requirement document for editing based on record ID. The saveRequirementDocument
request must be called and passed the changed objects.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#editRequirementDocumentByRecordID"

  - Addressing input action: "urn:testtrack-interface#editRequirementDocumentByRecordID"

  - Addressing output action: "urn:testtrack-interface#editRequirementDocumentByRecordIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__editRequirementDocumentByRecordID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__editRequirementDocumentByRecordIDResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__editRequirementDocumentByRecordID(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    bool                                bDownloadAttachments,
    // output parameters:
    struct ns1__editRequirementDocumentByRecordIDResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	editRequirementDocumentByRecordID SOAP
//gsoap ns1  service method-style:	editRequirementDocumentByRecordID rpc
//gsoap ns1  service method-encoding:	editRequirementDocumentByRecordID http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	editRequirementDocumentByRecordID urn:testtrack-interface#editRequirementDocumentByRecordID
//gsoap ns1  service method-output-action:	editRequirementDocumentByRecordID urn:testtrack-interface#editRequirementDocumentByRecordIDResponse
int ns1__editRequirementDocumentByRecordID(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    bool                                bDownloadAttachments,	///< Input parameter
    struct ns1__editRequirementDocumentByRecordIDResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__saveRequirementDocument                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__saveRequirementDocument" of service binding "ttsoapcgi"

/**

Operation details:
Saves changes made to a requirement document.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#saveRequirementDocument"

  - Addressing input action: "urn:testtrack-interface#saveRequirementDocument"

  - Addressing output action: "urn:testtrack-interface#saveRequirementDocumentResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__saveRequirementDocument(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    ns1__CRequirementDocument*          pRequirementDocument,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__saveRequirementDocument(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    ns1__CRequirementDocument*          pRequirementDocument,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	saveRequirementDocument SOAP
//gsoap ns1  service method-style:	saveRequirementDocument rpc
//gsoap ns1  service method-encoding:	saveRequirementDocument http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	saveRequirementDocument urn:testtrack-interface#saveRequirementDocument
//gsoap ns1  service method-output-action:	saveRequirementDocument urn:testtrack-interface#saveRequirementDocumentResponse
int ns1__saveRequirementDocument(
    LONG64                              cookie,	///< Input parameter
    ns1__CRequirementDocument*          pRequirementDocument,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__cancelSaveRequirementDocument                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__cancelSaveRequirementDocument" of service binding "ttsoapcgi"

/**

Operation details:
Discards changes made to a requirement document.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#cancelSaveRequirementDocument"

  - Addressing input action: "urn:testtrack-interface#cancelSaveRequirementDocument"

  - Addressing output action: "urn:testtrack-interface#cancelSaveRequirementDocumentResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__cancelSaveRequirementDocument(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__cancelSaveRequirementDocument(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              recordID,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	cancelSaveRequirementDocument SOAP
//gsoap ns1  service method-style:	cancelSaveRequirementDocument rpc
//gsoap ns1  service method-encoding:	cancelSaveRequirementDocument http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	cancelSaveRequirementDocument urn:testtrack-interface#cancelSaveRequirementDocument
//gsoap ns1  service method-output-action:	cancelSaveRequirementDocument urn:testtrack-interface#cancelSaveRequirementDocumentResponse
int ns1__cancelSaveRequirementDocument(
    LONG64                              cookie,	///< Input parameter
    LONG64                              recordID,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__createSnapshot                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__createSnapshot" of service binding "ttsoapcgi"

/**

Operation details:
Creates a requirement document snapshot.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#createSnapshot"

  - Addressing input action: "urn:testtrack-interface#createSnapshot"

  - Addressing output action: "urn:testtrack-interface#createSnapshotResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__createSnapshot(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              documentID,
    ns1__CSnapshotInfo*                 snapshot,
    // output parameters:
    int                                &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__createSnapshot(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              documentID,
    ns1__CSnapshotInfo*                 snapshot,
    // output parameters:
    int                                &result
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	createSnapshot SOAP
//gsoap ns1  service method-style:	createSnapshot rpc
//gsoap ns1  service method-encoding:	createSnapshot http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	createSnapshot urn:testtrack-interface#createSnapshot
//gsoap ns1  service method-output-action:	createSnapshot urn:testtrack-interface#createSnapshotResponse
int ns1__createSnapshot(
    LONG64                              cookie,	///< Input parameter
    LONG64                              documentID,	///< Input parameter
    ns1__CSnapshotInfo*                 snapshot,	///< Input parameter
    int                                &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getRequirementIDsForDocument                                        *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getRequirementIDsForDocumentResponse" of operation "ns1__getRequirementIDsForDocument"
struct ns1__getRequirementIDsForDocumentResponse
{
    ArrayOflong*                        recordIDs;
};

/// Operation "ns1__getRequirementIDsForDocument" of service binding "ttsoapcgi"

/**

Operation details:
Returns a list of requirement IDs for the requirement document.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getRequirementIDsForDocument"

  - Addressing input action: "urn:testtrack-interface#getRequirementIDsForDocument"

  - Addressing output action: "urn:testtrack-interface#getRequirementIDsForDocumentResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getRequirementIDsForDocument(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              documentID,
    // output parameters:
    struct ns1__getRequirementIDsForDocumentResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getRequirementIDsForDocument(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              documentID,
    // output parameters:
    struct ns1__getRequirementIDsForDocumentResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getRequirementIDsForDocument SOAP
//gsoap ns1  service method-style:	getRequirementIDsForDocument rpc
//gsoap ns1  service method-encoding:	getRequirementIDsForDocument http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getRequirementIDsForDocument urn:testtrack-interface#getRequirementIDsForDocument
//gsoap ns1  service method-output-action:	getRequirementIDsForDocument urn:testtrack-interface#getRequirementIDsForDocumentResponse
int ns1__getRequirementIDsForDocument(
    LONG64                              cookie,	///< Input parameter
    LONG64                              documentID,	///< Input parameter
    struct ns1__getRequirementIDsForDocumentResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getDocumentTree                                                     *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getDocumentTreeResponse" of operation "ns1__getDocumentTree"
struct ns1__getDocumentTreeResponse
{
    ns1__CTreeNodeSoap*                 docTreeRootNode;
};

/// Operation "ns1__getDocumentTree" of service binding "ttsoapcgi"

/**

Operation details:
Returns the requirement hierarchy from a requirement document.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getDocumentTree"

  - Addressing input action: "urn:testtrack-interface#getDocumentTree"

  - Addressing output action: "urn:testtrack-interface#getDocumentTreeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getDocumentTree(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              documentID,
    // output parameters:
    struct ns1__getDocumentTreeResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getDocumentTree(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              documentID,
    // output parameters:
    struct ns1__getDocumentTreeResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getDocumentTree SOAP
//gsoap ns1  service method-style:	getDocumentTree rpc
//gsoap ns1  service method-encoding:	getDocumentTree http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getDocumentTree urn:testtrack-interface#getDocumentTree
//gsoap ns1  service method-output-action:	getDocumentTree urn:testtrack-interface#getDocumentTreeResponse
int ns1__getDocumentTree(
    LONG64                              cookie,	///< Input parameter
    LONG64                              documentID,	///< Input parameter
    struct ns1__getDocumentTreeResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getFolderTreeByRecordID                                             *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getFolderTreeByRecordIDResponse" of operation "ns1__getFolderTreeByRecordID"
struct ns1__getFolderTreeByRecordIDResponse
{
    ns1__CTreeNodeSoap*                 folderTreeRoot;
};

/// Operation "ns1__getFolderTreeByRecordID" of service binding "ttsoapcgi"

/**

Operation details:
Returns the public or private folder hierarchy starting at a specified folder based
on record ID.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getFolderTreeByRecordID"

  - Addressing input action: "urn:testtrack-interface#getFolderTreeByRecordID"

  - Addressing output action: "urn:testtrack-interface#getFolderTreeByRecordIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getFolderTreeByRecordID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    LONG64                              treeRootFolderID,
    // output parameters:
    struct ns1__getFolderTreeByRecordIDResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getFolderTreeByRecordID(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    LONG64                              treeRootFolderID,
    // output parameters:
    struct ns1__getFolderTreeByRecordIDResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getFolderTreeByRecordID SOAP
//gsoap ns1  service method-style:	getFolderTreeByRecordID rpc
//gsoap ns1  service method-encoding:	getFolderTreeByRecordID http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getFolderTreeByRecordID urn:testtrack-interface#getFolderTreeByRecordID
//gsoap ns1  service method-output-action:	getFolderTreeByRecordID urn:testtrack-interface#getFolderTreeByRecordIDResponse
int ns1__getFolderTreeByRecordID(
    LONG64                              cookie,	///< Input parameter
    LONG64                              treeRootFolderID,	///< Input parameter
    struct ns1__getFolderTreeByRecordIDResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getFolderTree                                                       *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getFolderTreeResponse" of operation "ns1__getFolderTree"
struct ns1__getFolderTreeResponse
{
    ns1__CTreeNodeSoap*                 folderTreeRoot;
};

/// Operation "ns1__getFolderTree" of service binding "ttsoapcgi"

/**

Operation details:
Returns the public or private folder hierarchy starting at a specified folder.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getFolderTree"

  - Addressing input action: "urn:testtrack-interface#getFolderTree"

  - Addressing output action: "urn:testtrack-interface#getFolderTreeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getFolderTree(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    char*                               treeRootFolderPath,
    // output parameters:
    struct ns1__getFolderTreeResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getFolderTree(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    char*                               treeRootFolderPath,
    // output parameters:
    struct ns1__getFolderTreeResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getFolderTree SOAP
//gsoap ns1  service method-style:	getFolderTree rpc
//gsoap ns1  service method-encoding:	getFolderTree http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getFolderTree urn:testtrack-interface#getFolderTree
//gsoap ns1  service method-output-action:	getFolderTree urn:testtrack-interface#getFolderTreeResponse
int ns1__getFolderTree(
    LONG64                              cookie,	///< Input parameter
    char*                               treeRootFolderPath,	///< Input parameter
    struct ns1__getFolderTreeResponse  &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getItemHyperlinks                                                   *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getItemHyperlinksResponse" of operation "ns1__getItemHyperlinks"
struct ns1__getItemHyperlinksResponse
{
    ns1__CItemHyperlinkContainer*       hyperlinks;
};

/// Operation "ns1__getItemHyperlinks" of service binding "ttsoapcgi"

/**

Operation details:
Returns ttstudio and http hyperlinks for a specified item.

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "urn:testtrack-interface#getItemHyperlinks"

  - Addressing input action: "urn:testtrack-interface#getItemHyperlinks"

  - Addressing output action: "urn:testtrack-interface#getItemHyperlinksResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getItemHyperlinks(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    LONG64                              cookie,
    char*                               itemType,
    LONG64                              itemID,
    // output parameters:
    struct ns1__getItemHyperlinksResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getItemHyperlinks(
    struct soap *soap,
    // input parameters:
    LONG64                              cookie,
    char*                               itemType,
    LONG64                              itemID,
    // output parameters:
    struct ns1__getItemHyperlinksResponse&
  );
@endcode

C++ proxy class (defined in soapttsoapcgiProxy.h):
@code
  class ttsoapcgiProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapttsoapcgiService.h):
@code
  class ttsoapcgiService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getItemHyperlinks SOAP
//gsoap ns1  service method-style:	getItemHyperlinks rpc
//gsoap ns1  service method-encoding:	getItemHyperlinks http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	getItemHyperlinks urn:testtrack-interface#getItemHyperlinks
//gsoap ns1  service method-output-action:	getItemHyperlinks urn:testtrack-interface#getItemHyperlinksResponse
int ns1__getItemHyperlinks(
    LONG64                              cookie,	///< Input parameter
    char*                               itemType,	///< Input parameter
    LONG64                              itemID,	///< Input parameter
    struct ns1__getItemHyperlinksResponse&	///< Output response struct parameter
);

/**

@page ttsoapcgi Binding "ttsoapcgi"

@section ttsoapcgi_policy_enablers Policy Enablers of Binding  "ttsoapcgi"

Based on policies, this service imports

  - WS-Policy reminders and enablers:
    - WS-Addressing 1.0 (2005/08, accepts 2004/08):
	@code
	#import "wsa5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-Addressing (2004/08):
	@code
	#import "wsa.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-ReliableMessaging 1.0:
	@code
	#import "wsrm5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-ReliableMessaging 1.1:
	@code
	#import "wsrm.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.0 (accepts 1.1):
	@code
	#import "wsse.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.1 (accepts 1.0):
	@code
	#import "wsse11.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - HTTP Digest Authentication:
	@code
	#include "plugin/httpda.h"
	soap_register_plugin(soap, soap_http_da); // register the HTTP DA plugin in your code
	// See the user guide gsoap/doc/httpda/html/index.html
	@endcode
*/


/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read in XML and deserialized from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

Data can be serialized in XML and written to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "urn:testtrack-interface"

*/

/* End of ttsoapcgi.h */
