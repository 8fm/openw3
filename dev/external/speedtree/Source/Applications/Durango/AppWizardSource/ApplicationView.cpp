//
// Application.cpp -
//

#include "pch.h"
#include "ApplicationView.h"

using namespace Windows::Foundation;
using namespace Windows::ApplicationModel;
using namespace Windows::ApplicationModel::Core;
using namespace Windows::ApplicationModel::Activation;
using namespace Windows::UI::Core;

using namespace SpeedTree;


ApplicationView::ApplicationView()
{
}


// Called by the system.  Perform application initialization here,
// hooking application wide events, etc.
void ApplicationView::Initialize(CoreApplicationView^ applicationView)
{
    applicationView->Activated += ref new TypedEventHandler<CoreApplicationView^, IActivatedEventArgs^>(this, &ApplicationView::OnActivated);
}


// Called when we are provided a window.
void ApplicationView::SetWindow(CoreWindow^ window)
{
}


void ApplicationView::Load(Platform::String^ entryPoint)
{
    m_game = ref new Game();
    m_game->Initialize(CoreWindow::GetForCurrentThread());
}

// Called by the system after initialization is complete.  This
// implements the traditional game loop
void ApplicationView::Run()
{
	// generated by the Durango AppWizard
	#pragma warning(push)
	#pragma warning(disable : 4127) // conditional expression is constant

    while (true)
    {
        // ProcessEvents will throw if the process is exiting, allowing us to
        // break out of the loop.  This will be cleaned up when we get proper
        // process lifetime management online in a future release.
        CoreWindow::GetForCurrentThread()->Dispatcher->ProcessEvents(CoreProcessEventsOption::ProcessAllIfPresent);

        m_game->Tick();
    }

	#pragma warning(pop)
}


void ApplicationView::Uninitialize()
{
}


// Called when the application is activated.  For now, there is just one activation
// kind - Launch.
void ApplicationView::OnActivated(CoreApplicationView^ applicationView, IActivatedEventArgs^ args)
{
    CoreWindow::GetForCurrentThread()->Activate();
}


// Implements a IFrameworkView factory.
IFrameworkView^ ApplicationViewSource::CreateView()
{
    return ref new ApplicationView();
}


// Application entry point
[Platform::MTAThread]
int main(Platform::Array<Platform::String^>^)
{
    auto applicationViewSource = ref new ApplicationViewSource();

    CoreApplication::Run(applicationViewSource);

    return 0;
}
