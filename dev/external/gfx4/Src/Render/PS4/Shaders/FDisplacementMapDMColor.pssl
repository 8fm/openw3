ConstantBuffer Constants : register(b0) { 
float4 boundColor : packoffset(c0);
float4 compx : packoffset(c1);
float4 compy : packoffset(c2);
float4 mapScale : packoffset(c3);
float2 scale : packoffset(c4);
};

SamplerState sampler : register(s0);
Texture2D maptex : register(t0);
Texture2D tex : register(t1);
struct ShaderInputType
{
            float2 tc0 : TEXCOORD0;
};
struct ShaderOutputType
{
           float4 fcolor : S_TARGET_OUTPUT0;
};
ShaderOutputType main( ShaderInputType shaderInput )
{
    ShaderOutputType shaderOutput;

    float2 mapTC = shaderInput.tc0*mapScale.xy - mapScale.zw;
    float mapInBoundsLow  = dot(step(mapTC, float2(0,0)), float2(1,1));
    float mapInBoundsHigh = dot(step(float2(1,1), mapTC), float2(1,1));
    float mapInBounds = 1 - clamp(mapInBoundsLow + mapInBoundsHigh, 0.0, 1.0f);
    shaderOutput.fcolor = maptex.Sample(sampler,mapTC) * mapInBounds + float4(0.5,0.5,0.5,0.5) * (1-mapInBounds);

    float2 tc1;
    float2 componentChannel;
    componentChannel.x = dot(float4(1,1,1,1), compx * shaderOutput.fcolor);
    componentChannel.y = dot(float4(1,1,1,1), compy * shaderOutput.fcolor);
    tc1 = shaderInput.tc0 + (componentChannel - 0.5f) * scale;
    shaderOutput.fcolor = tex.Sample(sampler, tc1);
    

    float srcInBoundsLow  = dot(step(tc1, float2(0,0)), float2(1,1));
    float srcInBoundsHigh = dot(step(float2(1,1), tc1), float2(1,1));
    float srcInBounds     = 1 - clamp(srcInBoundsLow + srcInBoundsHigh, 0.0, 1.0f);
    shaderOutput.fcolor = (shaderOutput.fcolor * srcInBounds) + boundColor * (1-srcInBounds);
    

      shaderOutput.fcolor = shaderOutput.fcolor;
    
    return shaderOutput;
}
