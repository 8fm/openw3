SamplerState sampler : register(s0);
Texture2D tex[4] : register(t0);
struct ShaderInputType
{
            float4 factor : COLOR0;;
           float4 fucxadd : TEXCOORD0;;
           float4 fucxmul : TEXCOORD1;;
           float2 tc0 : TEXCOORD2;
};
struct ShaderOutputType
{
           float4 fcolor : S_TARGET_OUTPUT0;
};
ShaderOutputType main( ShaderInputType shaderInput )
{
    ShaderOutputType shaderOutput;

    float c0 = float((tex[0].Sample(sampler, shaderInput.tc0).a - 16./255.) * 1.164);
    float U0 = float(tex[1].Sample(sampler, shaderInput.tc0).a - 128./255.);
    float V0 = float(tex[2].Sample(sampler, shaderInput.tc0).a - 128./255.);
    float4 c = float4(c0,c0,c0,c0);
    float4 U = float4(U0,U0,U0,U0);
    float4 V = float4(V0,V0,V0,V0);
    c += V * float4(1.596, -0.813, 0, 0);
    c += U * float4(0, -0.392, 2.017, 0);
    c.a = tex[3].Sample(sampler, shaderInput.tc0).a;
    shaderOutput.fcolor = c;
    

      shaderOutput.fcolor = (shaderOutput.fcolor * float4(shaderInput.fucxmul.rgb,1)) * shaderInput.fucxmul.a;
      shaderOutput.fcolor += shaderInput.fucxadd * shaderOutput.fcolor.a;
    

    shaderOutput.fcolor.a *= shaderInput.factor.a;
    

    shaderOutput.fcolor.rgb = float3(shaderOutput.fcolor.a, shaderOutput.fcolor.a, shaderOutput.fcolor.a);
    

      shaderOutput.fcolor = shaderOutput.fcolor;
    
    return shaderOutput;
}
