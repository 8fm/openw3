ConstantBuffer Constants : register(b0) { 
float4 fsize : packoffset(c0);
float4 offset : packoffset(c1);
float4 scolor : packoffset(c2);
float4 scolor2 : packoffset(c3);
float4 srctexscale : packoffset(c4);
float4 texscale : packoffset(c5);
};

SamplerState sampler : register(s0);
Texture2D srctex : register(t0);
Texture2D tex : register(t1);
struct ShaderInputType
{
            float4 fucxadd : TEXCOORD0;;
           float4 fucxmul : TEXCOORD1;;
           float2 tc0 : TEXCOORD2;
};
struct ShaderOutputType
{
           float4 fcolor : S_TARGET_OUTPUT0;
};
ShaderOutputType main( ShaderInputType shaderInput )
{
    ShaderOutputType shaderOutput;

    shaderOutput.fcolor       = float4(0, 0, 0, 0);
    float4 color = float4(0, 0, 0, 0);
    float2 i = float2(0, 0);
    for (i.x = -fsize.x; i.x <= fsize.x; i.x++)
    {
      for (i.y = -fsize.y; i.y <= fsize.y; i.y++)
      {
    

    color.a += tex.SampleLOD(sampler, shaderInput.tc0 + (offset.xy + i) * texscale.xy, 0.0f).a;
    color.r += tex.SampleLOD(sampler, shaderInput.tc0 - (offset.xy + i) * texscale.xy, 0.0f).a;
    }
    } // EndBox2.
    shaderOutput.fcolor = color * fsize.w;
    

    float4 shadowColor = scolor;
    float4 shadowColor2 = scolor2;
    shaderOutput.fcolor.ar = (1.0 - shaderOutput.fcolor.ar * fsize.z) - (1.0 - shaderOutput.fcolor.ra * fsize.z);
    

    float4 base = srctex.SampleLOD(sampler, shaderInput.tc0 * srctexscale.xy, 0.0f);
    float4 baseValue = base;
    

    float2 alphas = float2(shadowColor.a, shadowColor2.a);
    shaderOutput.fcolor.ar = clamp(shaderOutput.fcolor.ar, 0.0f, 1.0f) * alphas;
    shaderOutput.fcolor = (shadowColor * shaderOutput.fcolor.a + shadowColor2 * shaderOutput.fcolor.r + baseValue * (1.0 - shaderOutput.fcolor.a - shaderOutput.fcolor.r));
    

      shaderOutput.fcolor = (shaderOutput.fcolor * float4(shaderInput.fucxmul.rgb,1)) * shaderInput.fucxmul.a;
      shaderOutput.fcolor += shaderInput.fucxadd * shaderOutput.fcolor.a;
    

      shaderOutput.fcolor = shaderOutput.fcolor;
    
    return shaderOutput;
}
