// This code contains NVIDIA Confidential Information and is disclosed to you
// under a form of NVIDIA software license agreement provided separately to you.
//
// Notice
// NVIDIA Corporation and its licensors retain all intellectual property and
// proprietary rights in and to this software and related documentation and
// any modifications thereto. Any use, reproduction, disclosure, or
// distribution of this software and related documentation without an express
// license agreement from NVIDIA Corporation is strictly prohibited.
//
// ALL NVIDIA DESIGN SPECIFICATIONS, CODE ARE PROVIDED "AS IS.". NVIDIA MAKES
// NO WARRANTIES, EXPRESSED, IMPLIED, STATUTORY, OR OTHERWISE WITH RESPECT TO
// THE MATERIALS, AND EXPRESSLY DISCLAIMS ALL IMPLIED WARRANTIES OF NONINFRINGEMENT,
// MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE.
//
// Information and code furnished is believed to be accurate and reliable.
// However, NVIDIA Corporation assumes no responsibility for the consequences of use of such
// information or for any infringement of patents or other rights of third parties that may
// result from its use. No license is granted by implication or otherwise under any patent
// or patent rights of NVIDIA Corporation. Details are subject to change without notice.
// This code supersedes and replaces all information previously supplied.
// NVIDIA Corporation products are not authorized for use as critical
// components in life support devices or systems without express written approval of
// NVIDIA Corporation.
//
// Copyright (c) 2008-2013 NVIDIA Corporation. All rights reserved.

// This file was generated by NxParameterized/scripts/GenParameterized.pl
// Created: 2013.10.01 14:57:26

#include "ExplosionAssetParam_0p0.h"
#include <string.h>
#include <stdlib.h>

using namespace NxParameterized;

namespace physx
{
namespace apex
{

using namespace ExplosionAssetParam_0p0NS;

const char* const ExplosionAssetParam_0p0Factory::vptr =
    NxParameterized::getVptr<ExplosionAssetParam_0p0, ExplosionAssetParam_0p0::ClassAlignment>();

const physx::PxU32 NumParamDefs = 20;
static NxParameterized::DefinitionImpl* ParamDefTable; // now allocated in buildTree [NumParamDefs];


static const size_t ParamLookupChildrenTable[] =
{
	1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 2,
};

#define TENUM(type) physx::##type
#define CHILDREN(index) &ParamLookupChildrenTable[index]
static const NxParameterized::ParamLookupNode ParamLookupTable[NumParamDefs] =
{
	{ TYPE_STRUCT, false, 0, CHILDREN(0), 18 },
	{ TYPE_ARRAY, true, (size_t)(&((ParametersStruct*)0)->boundariesNames), CHILDREN(18), 1 }, // boundariesNames
	{ TYPE_STRING, false, 1 * sizeof(NxParameterized::DummyStringStruct), NULL, 0 }, // boundariesNames[]
	{ TYPE_F32, false, (size_t)(&((ParametersStruct*)0)->defScale), NULL, 0 }, // defScale
	{ TYPE_U32, false, (size_t)(&((ParametersStruct*)0)->mode), NULL, 0 }, // mode
	{ TYPE_BOOL, false, (size_t)(&((ParametersStruct*)0)->useFarDistance), NULL, 0 }, // useFarDistance
	{ TYPE_BOOL, false, (size_t)(&((ParametersStruct*)0)->useNearDistance), NULL, 0 }, // useNearDistance
	{ TYPE_BOOL, false, (size_t)(&((ParametersStruct*)0)->useUniformField), NULL, 0 }, // useUniformField
	{ TYPE_F32, false, (size_t)(&((ParametersStruct*)0)->farDistance), NULL, 0 }, // farDistance
	{ TYPE_F32, false, (size_t)(&((ParametersStruct*)0)->nearDistance), NULL, 0 }, // nearDistance
	{ TYPE_F32, false, (size_t)(&((ParametersStruct*)0)->constantForce), NULL, 0 }, // constantForce
	{ TYPE_F32, false, (size_t)(&((ParametersStruct*)0)->fieldIntensity), NULL, 0 }, // fieldIntensity
	{ TYPE_F32, false, (size_t)(&((ParametersStruct*)0)->distanceTarget), NULL, 0 }, // distanceTarget
	{ TYPE_F32, false, (size_t)(&((ParametersStruct*)0)->distanceScale), NULL, 0 }, // distanceScale
	{ TYPE_F32, false, (size_t)(&((ParametersStruct*)0)->velocityTarget), NULL, 0 }, // velocityTarget
	{ TYPE_F32, false, (size_t)(&((ParametersStruct*)0)->velocityScale), NULL, 0 }, // velocityScale
	{ TYPE_F32, false, (size_t)(&((ParametersStruct*)0)->disAttenuation), NULL, 0 }, // disAttenuation
	{ TYPE_F32, false, (size_t)(&((ParametersStruct*)0)->degreeOfNoise), NULL, 0 }, // degreeOfNoise
	{ TYPE_F32, false, (size_t)(&((ParametersStruct*)0)->shockwaveWidth), NULL, 0 }, // shockwaveWidth
	{ TYPE_F32, false, (size_t)(&((ParametersStruct*)0)->travelVelocity), NULL, 0 }, // travelVelocity
};


bool ExplosionAssetParam_0p0::mBuiltFlag = false;
NxParameterized::MutexType ExplosionAssetParam_0p0::mBuiltFlagMutex;

ExplosionAssetParam_0p0::ExplosionAssetParam_0p0(NxParameterized::Traits* traits, void* buf, PxI32* refCount) :
	NxParameters(traits, buf, refCount)
{
	//mParameterizedTraits->registerFactory(className(), &ExplosionAssetParam_0p0FactoryInst);

	if (!buf) //Do not init data if it is inplace-deserialized
	{
		initDynamicArrays();
		initStrings();
		initReferences();
		initDefaults();
	}
}

ExplosionAssetParam_0p0::~ExplosionAssetParam_0p0()
{
	freeStrings();
	freeReferences();
	freeDynamicArrays();
}

void ExplosionAssetParam_0p0::destroy()
{
	// We cache these fields here to avoid overwrite in destructor
	bool doDeallocateSelf = mDoDeallocateSelf;
	NxParameterized::Traits* traits = mParameterizedTraits;
	physx::PxI32* refCount = mRefCount;
	void* buf = mBuffer;

	this->~ExplosionAssetParam_0p0();

	NxParameters::destroy(this, traits, doDeallocateSelf, refCount, buf);
}

const NxParameterized::DefinitionImpl* ExplosionAssetParam_0p0::getParameterDefinitionTree(void)
{
	if (!mBuiltFlag) // Double-checked lock
	{
		NxParameterized::MutexType::ScopedLock lock(mBuiltFlagMutex);
		if (!mBuiltFlag)
		{
			buildTree();
		}
	}

	return(&ParamDefTable[0]);
}

const NxParameterized::DefinitionImpl* ExplosionAssetParam_0p0::getParameterDefinitionTree(void) const
{
	ExplosionAssetParam_0p0* tmpParam = const_cast<ExplosionAssetParam_0p0*>(this);

	if (!mBuiltFlag) // Double-checked lock
	{
		NxParameterized::MutexType::ScopedLock lock(mBuiltFlagMutex);
		if (!mBuiltFlag)
		{
			tmpParam->buildTree();
		}
	}

	return(&ParamDefTable[0]);
}

NxParameterized::ErrorType ExplosionAssetParam_0p0::getParameterHandle(const char* long_name, Handle& handle) const
{
	ErrorType Ret = NxParameters::getParameterHandle(long_name, handle);
	if (Ret != ERROR_NONE)
	{
		return(Ret);
	}

	size_t offset;
	void* ptr;

	getVarPtr(handle, ptr, offset);

	if (ptr == NULL)
	{
		return(ERROR_INDEX_OUT_OF_RANGE);
	}

	return(ERROR_NONE);
}

NxParameterized::ErrorType ExplosionAssetParam_0p0::getParameterHandle(const char* long_name, Handle& handle)
{
	ErrorType Ret = NxParameters::getParameterHandle(long_name, handle);
	if (Ret != ERROR_NONE)
	{
		return(Ret);
	}

	size_t offset;
	void* ptr;

	getVarPtr(handle, ptr, offset);

	if (ptr == NULL)
	{
		return(ERROR_INDEX_OUT_OF_RANGE);
	}

	return(ERROR_NONE);
}

void ExplosionAssetParam_0p0::getVarPtr(const Handle& handle, void*& ptr, size_t& offset) const
{
	ptr = getVarPtrHelper(&ParamLookupTable[0], const_cast<ExplosionAssetParam_0p0::ParametersStruct*>(&parameters()), handle, offset);
}


/* Dynamic Handle Indices */
/* [0] - boundariesNames (not an array of structs) */

void ExplosionAssetParam_0p0::freeParameterDefinitionTable(NxParameterized::Traits* traits)
{
	if (!traits)
	{
		return;
	}

	if (!mBuiltFlag) // Double-checked lock
	{
		return;
	}

	NxParameterized::MutexType::ScopedLock lock(mBuiltFlagMutex);

	if (!mBuiltFlag)
	{
		return;
	}

	for (physx::PxU32 i = 0; i < NumParamDefs; ++i)
	{
		ParamDefTable[i].~DefinitionImpl();
	}

	traits->free(ParamDefTable);

	mBuiltFlag = false;
}

#define PDEF_PTR(index) (&ParamDefTable[index])

void ExplosionAssetParam_0p0::buildTree(void)
{

	physx::PxU32 allocSize = sizeof(NxParameterized::DefinitionImpl) * NumParamDefs;
	ParamDefTable = (NxParameterized::DefinitionImpl*)(mParameterizedTraits->alloc(allocSize));
	memset(ParamDefTable, 0, allocSize);

	for (physx::PxU32 i = 0; i < NumParamDefs; ++i)
	{
		NX_PARAM_PLACEMENT_NEW(ParamDefTable + i, NxParameterized::DefinitionImpl)(*mParameterizedTraits);
	}

	// Initialize DefinitionImpl node: nodeIndex=0, longName=""
	{
		NxParameterized::DefinitionImpl* ParamDef = &ParamDefTable[0];
		ParamDef->init("", TYPE_STRUCT, "STRUCT", true);






	}

	// Initialize DefinitionImpl node: nodeIndex=1, longName="boundariesNames"
	{
		NxParameterized::DefinitionImpl* ParamDef = &ParamDefTable[1];
		ParamDef->init("boundariesNames", TYPE_ARRAY, NULL, true);

#ifdef NX_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", " - Names of the NxFieldBoundary which will be  included or excluded by the NxExplosionActor.\n - Note: A corresponding NxFieldBoundaryAsset  of the same name to each boundary need to be \n created previously by NxModuleFieldBoundary, or  no boundary will be added to Explosion actor.\n", true);
		HintTable[1].init("shortDescription", "List of explosion boundaries", true);
		ParamDefTable[1].setHints((const NxParameterized::Hint**)HintPtrTable, 2);

#endif /* NX_PARAMETERIZED_HIDE_DESCRIPTIONS */




		ParamDef->setArraySize(-1);
		static const physx::PxU8 dynHandleIndices[1] = { 0, };
		ParamDef->setDynamicHandleIndicesMap(dynHandleIndices, 1);

	}

	// Initialize DefinitionImpl node: nodeIndex=2, longName="boundariesNames[]"
	{
		NxParameterized::DefinitionImpl* ParamDef = &ParamDefTable[2];
		ParamDef->init("boundariesNames", TYPE_STRING, NULL, true);

#ifdef NX_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", " - Names of the NxFieldBoundary which will be  included or excluded by the NxExplosionActor.\n - Note: A corresponding NxFieldBoundaryAsset  of the same name to each boundary need to be \n created previously by NxModuleFieldBoundary, or  no boundary will be added to Explosion actor.\n", true);
		HintTable[1].init("shortDescription", "List of explosion boundaries", true);
		ParamDefTable[2].setHints((const NxParameterized::Hint**)HintPtrTable, 2);

#endif /* NX_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=3, longName="defScale"
	{
		NxParameterized::DefinitionImpl* ParamDef = &ParamDefTable[3];
		ParamDef->init("defScale", TYPE_F32, NULL, true);

#ifdef NX_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "-DefaultScale used to multiply the overall strength of Explosion.\n", true);
		HintTable[1].init("shortDescription", "Default scale of the explosion", true);
		ParamDefTable[3].setHints((const NxParameterized::Hint**)HintPtrTable, 2);

#endif /* NX_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=4, longName="mode"
	{
		NxParameterized::DefinitionImpl* ParamDef = &ParamDefTable[4];
		ParamDef->init("mode", TYPE_U32, NULL, true);

#ifdef NX_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "Explosion mode. Possible values:\n\n1 : NX_APEX_EPM_EXPLOSION	// explosion\n2 : NX_APEX_EPM_IMPLOSION	// implosion\n3 : NX_APEX_EPM_SHOCKWAVE	// shockwave\n", true);
		HintTable[1].init("shortDescription", "The explosion mode", true);
		ParamDefTable[4].setHints((const NxParameterized::Hint**)HintPtrTable, 2);

#endif /* NX_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=5, longName="useFarDistance"
	{
		NxParameterized::DefinitionImpl* ParamDef = &ParamDefTable[5];
		ParamDef->init("useFarDistance", TYPE_BOOL, NULL, true);

#ifdef NX_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "If true, the explosion force field will be bounded by a sphere with farDistance radius.\n", true);
		HintTable[1].init("shortDescription", "If true, the explosion force field will be bounded by a sphere", true);
		ParamDefTable[5].setHints((const NxParameterized::Hint**)HintPtrTable, 2);

#endif /* NX_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=6, longName="useNearDistance"
	{
		NxParameterized::DefinitionImpl* ParamDef = &ParamDefTable[6];
		ParamDef->init("useNearDistance", TYPE_BOOL, NULL, true);

#ifdef NX_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "If true, there will be a no-force core in the explosion force field. The core is a sphere with nearDistance radius.\n", true);
		HintTable[1].init("shortDescription", "If true, there will be a no-force core in the explosion force field", true);
		ParamDefTable[6].setHints((const NxParameterized::Hint**)HintPtrTable, 2);

#endif /* NX_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=7, longName="useUniformField"
	{
		NxParameterized::DefinitionImpl* ParamDef = &ParamDefTable[7];
		ParamDef->init("useUniformField", TYPE_BOOL, NULL, true);

#ifdef NX_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "If true, the force will be constant over the explosion force field.\n", true);
		HintTable[1].init("shortDescription", "If true, the force will be constant over the explosion force field", true);
		ParamDefTable[7].setHints((const NxParameterized::Hint**)HintPtrTable, 2);

#endif /* NX_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=8, longName="farDistance"
	{
		NxParameterized::DefinitionImpl* ParamDef = &ParamDefTable[8];
		ParamDef->init("farDistance", TYPE_F32, NULL, true);

#ifdef NX_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "If useFarDistance is set, this parameter defines the radius of the outer sphere.\n", true);
		HintTable[1].init("shortDescription", "The outer radius of the explosion", true);
		ParamDefTable[8].setHints((const NxParameterized::Hint**)HintPtrTable, 2);

#endif /* NX_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=9, longName="nearDistance"
	{
		NxParameterized::DefinitionImpl* ParamDef = &ParamDefTable[9];
		ParamDef->init("nearDistance", TYPE_F32, NULL, true);

#ifdef NX_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "If useNearDistance is set, this parameter defines the radius of the inner sphere.\n", true);
		HintTable[1].init("shortDescription", "The innder radius of the explosion", true);
		ParamDefTable[9].setHints((const NxParameterized::Hint**)HintPtrTable, 2);

#endif /* NX_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=10, longName="constantForce"
	{
		NxParameterized::DefinitionImpl* ParamDef = &ParamDefTable[10];
		ParamDef->init("constantForce", TYPE_F32, NULL, true);

#ifdef NX_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "The constant part of the explosion force.\n", true);
		HintTable[1].init("shortDescription", "Constant part of force field function", true);
		ParamDefTable[10].setHints((const NxParameterized::Hint**)HintPtrTable, 2);

#endif /* NX_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=11, longName="fieldIntensity"
	{
		NxParameterized::DefinitionImpl* ParamDef = &ParamDefTable[11];
		ParamDef->init("fieldIntensity", TYPE_F32, NULL, true);

#ifdef NX_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "Intensity of the explosion force field.\n", true);
		HintTable[1].init("shortDescription", "Intensity of the explosion force field", true);
		ParamDefTable[11].setHints((const NxParameterized::Hint**)HintPtrTable, 2);

#endif /* NX_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=12, longName="distanceTarget"
	{
		NxParameterized::DefinitionImpl* ParamDef = &ParamDefTable[12];
		ParamDef->init("distanceTarget", TYPE_F32, NULL, true);

#ifdef NX_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "The force field's distance target.\n", true);
		HintTable[1].init("shortDescription", "Force field's distance target", true);
		ParamDefTable[12].setHints((const NxParameterized::Hint**)HintPtrTable, 2);

#endif /* NX_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=13, longName="distanceScale"
	{
		NxParameterized::DefinitionImpl* ParamDef = &ParamDefTable[13];
		ParamDef->init("distanceScale", TYPE_F32, NULL, true);

#ifdef NX_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "The force field's dependence on distance\n", true);
		HintTable[1].init("shortDescription", "The force field's dependence on distance", true);
		ParamDefTable[13].setHints((const NxParameterized::Hint**)HintPtrTable, 2);

#endif /* NX_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=14, longName="velocityTarget"
	{
		NxParameterized::DefinitionImpl* ParamDef = &ParamDefTable[14];
		ParamDef->init("velocityTarget", TYPE_F32, NULL, true);

#ifdef NX_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "The force field's velocity target\n", true);
		HintTable[1].init("shortDescription", "Force field's velocity target", true);
		ParamDefTable[14].setHints((const NxParameterized::Hint**)HintPtrTable, 2);

#endif /* NX_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=15, longName="velocityScale"
	{
		NxParameterized::DefinitionImpl* ParamDef = &ParamDefTable[15];
		ParamDef->init("velocityScale", TYPE_F32, NULL, true);

#ifdef NX_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "The force field's dependence on velocity\n", true);
		HintTable[1].init("shortDescription", "The force field's dependence on velocity", true);
		ParamDefTable[15].setHints((const NxParameterized::Hint**)HintPtrTable, 2);

#endif /* NX_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=16, longName="disAttenuation"
	{
		NxParameterized::DefinitionImpl* ParamDef = &ParamDefTable[16];
		ParamDef->init("disAttenuation", TYPE_F32, NULL, true);

#ifdef NX_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "The force field's distance attentuation\n", true);
		HintTable[1].init("shortDescription", "The force field's distance attentuation", true);
		ParamDefTable[16].setHints((const NxParameterized::Hint**)HintPtrTable, 2);

#endif /* NX_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=17, longName="degreeOfNoise"
	{
		NxParameterized::DefinitionImpl* ParamDef = &ParamDefTable[17];
		ParamDef->init("degreeOfNoise", TYPE_F32, NULL, true);

#ifdef NX_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "The force field's degree of noise\n", true);
		HintTable[1].init("shortDescription", "The force field's degree of noise", true);
		ParamDefTable[17].setHints((const NxParameterized::Hint**)HintPtrTable, 2);

#endif /* NX_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=18, longName="shockwaveWidth"
	{
		NxParameterized::DefinitionImpl* ParamDef = &ParamDefTable[18];
		ParamDef->init("shockwaveWidth", TYPE_F32, NULL, true);

#ifdef NX_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "If the explosion is a shockwave, this parameter defines its width (the difference between its inner and the outer radii)\n", true);
		HintTable[1].init("shortDescription", "Width of the schockwave", true);
		ParamDefTable[18].setHints((const NxParameterized::Hint**)HintPtrTable, 2);

#endif /* NX_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=19, longName="travelVelocity"
	{
		NxParameterized::DefinitionImpl* ParamDef = &ParamDefTable[19];
		ParamDef->init("travelVelocity", TYPE_F32, NULL, true);

#ifdef NX_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("longDescription", "If the explosion is a shockwave, its radii are growing with this velocity \n", true);
		HintTable[1].init("shortDescription", "Propagation velocity of the schockwave", true);
		ParamDefTable[19].setHints((const NxParameterized::Hint**)HintPtrTable, 2);

#endif /* NX_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// SetChildren for: nodeIndex=0, longName=""
	{
		static Definition* Children[18];
		Children[0] = PDEF_PTR(1);
		Children[1] = PDEF_PTR(3);
		Children[2] = PDEF_PTR(4);
		Children[3] = PDEF_PTR(5);
		Children[4] = PDEF_PTR(6);
		Children[5] = PDEF_PTR(7);
		Children[6] = PDEF_PTR(8);
		Children[7] = PDEF_PTR(9);
		Children[8] = PDEF_PTR(10);
		Children[9] = PDEF_PTR(11);
		Children[10] = PDEF_PTR(12);
		Children[11] = PDEF_PTR(13);
		Children[12] = PDEF_PTR(14);
		Children[13] = PDEF_PTR(15);
		Children[14] = PDEF_PTR(16);
		Children[15] = PDEF_PTR(17);
		Children[16] = PDEF_PTR(18);
		Children[17] = PDEF_PTR(19);

		ParamDefTable[0].setChildren(Children, 18);
	}

	// SetChildren for: nodeIndex=1, longName="boundariesNames"
	{
		static Definition* Children[1];
		Children[0] = PDEF_PTR(2);

		ParamDefTable[1].setChildren(Children, 1);
	}

	mBuiltFlag = true;

}
void ExplosionAssetParam_0p0::initStrings(void)
{
}

void ExplosionAssetParam_0p0::initDynamicArrays(void)
{
	boundariesNames.buf = NULL;
	boundariesNames.isAllocated = true;
	boundariesNames.elementSize = sizeof(NxParameterized::DummyStringStruct);
	boundariesNames.arraySizes[0] = 0;
}

void ExplosionAssetParam_0p0::initDefaults(void)
{

	freeStrings();
	freeReferences();
	freeDynamicArrays();
	defScale = physx::PxF32(1);
	mode = physx::PxU32(1);
	useFarDistance = bool(true);
	useNearDistance = bool(true);
	useUniformField = bool(false);
	farDistance = physx::PxF32(1);
	nearDistance = physx::PxF32(0);
	constantForce = physx::PxF32(0);
	fieldIntensity = physx::PxF32(1);
	distanceTarget = physx::PxF32(0);
	distanceScale = physx::PxF32(1);
	velocityTarget = physx::PxF32(0);
	velocityScale = physx::PxF32(1);
	disAttenuation = physx::PxF32(0);
	degreeOfNoise = physx::PxF32(0);
	shockwaveWidth = physx::PxF32(1);
	travelVelocity = physx::PxF32(1);

	initDynamicArrays();
	initStrings();
	initReferences();
}

void ExplosionAssetParam_0p0::initReferences(void)
{
}

void ExplosionAssetParam_0p0::freeDynamicArrays(void)
{
	if (boundariesNames.isAllocated && boundariesNames.buf)
	{
		mParameterizedTraits->free(boundariesNames.buf);
	}
}

void ExplosionAssetParam_0p0::freeStrings(void)
{

	for (int i = 0; i < boundariesNames.arraySizes[0]; ++i)
	{
		if (boundariesNames.buf[i].isAllocated && boundariesNames.buf[i].buf)
		{
			mParameterizedTraits->strfree((char*)boundariesNames.buf[i].buf);
		}
	}
}

void ExplosionAssetParam_0p0::freeReferences(void)
{
}

} // namespace apex
} // namespace physx
