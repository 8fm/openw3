/**
 * Copyright © 2014 CD Projekt Red. All Rights Reserved.
 */

#pragma once

#include "inputDevice.h"
#include "inputDeviceCommand.h"

//////////////////////////////////////////////////////////////////////////
// IInputDeviceKeyboard
//////////////////////////////////////////////////////////////////////////
class IInputDeviceKeyboard: public IInputDevice
{
public:
	//TBD: MouseX etc

	// Note: mostly the same as EInputKey to make the conversion a quick and simple cast
	enum class EKey
	{
		K_None,
		K_Unknown04=4,
		K_Unknown05=5,
		K_Unknown06=6,
		K_Unknown07=7,
		K_Backspace=8,
		K_Tab=9,
		K_Unknown0A=10,
		K_Unknown0B=11,
		K_Unknown0C=12,
		K_Enter=13,
		K_Unknown0E=14,
		K_Unknown0F=15,
		K_Shift=16,
		K_Ctrl=17,
		K_Alt=18,
		K_Pause=19,
		K_CapsLock=20,
		K_Unknown15=21,
		K_Unknown16=22,
		K_Unknown17=23,
		K_Unknown18=24,
		K_Unknown19=25,
		K_Unknown1A=26,
		K_Escape=27,
		K_Unknown1C=28,
		K_Unknown1D=29,
		K_Unknown1E=30,
		K_Unknown1F=31,
		K_Space=32,
		K_PageUp=33,
		K_PageDown=34,
		K_End=35,
		K_Home=36,
		K_Left=37,
		K_Up=38,
		K_Right=39,
		K_Down=40,
		K_Select=41,
		K_Print=42,
		K_Execute=43,
		K_PrintScrn=44,
		K_Insert=45,
		K_Delete=46,
		K_Help=47,
		K_0=48,
		K_1=49,
		K_2=50,
		K_3=51,
		K_4=52,
		K_5=53,
		K_6=54,
		K_7=55,
		K_8=56,
		K_9=57,
		K_Unknown3A=58,
		K_Unknown3B=59,
		K_Unknown3C=60,
		K_Unknown3D=61,
		K_Unknown3E=62,
		K_Unknown3F=63,
		K_Unknown40=64,
		K_A=65,
		K_B=66,
		K_C=67,
		K_D=68,
		K_E=69,
		K_F=70,
		K_G=71,
		K_H=72,
		K_I=73,
		K_J=74,
		K_K=75,
		K_L=76,
		K_M=77,
		K_N=78,
		K_O=79,
		K_P=80,
		K_Q=81,
		K_R=82,
		K_S=83,
		K_T=84,
		K_U=85,
		K_V=86,
		K_W=87,
		K_X=88,
		K_Y=89,
		K_Z=90,
		K_Unknown5B=91,
		K_Unknown5C=92,
		K_Unknown5D=93,
		K_Unknown5E=94,
		K_Unknown5F=95,
		K_NumPad0=96,
		K_NumPad1=97,
		K_NumPad2=98,
		K_NumPad3=99,
		K_NumPad4=100,
		K_NumPad5=101,
		K_NumPad6=102,
		K_NumPad7=103,
		K_NumPad8=104,
		K_NumPad9=105,
		K_NumStar=106,
		K_NumPlus=107,
		K_Separator=108,
		K_NumMinus=109,
		K_NumPeriod=110,
		K_NumSlash=111,
		K_F1=112,
		K_F2=113,
		K_F3=114,
		K_F4=115,
		K_F5=116,
		K_F6=117,
		K_F7=118,
		K_F8=119,
		K_F9=120,
		K_F10=121,
		K_F11=122,
		K_F12=123,
		K_F13=124,
		K_F14=125,
		K_F15=126,
		K_F16=127,
		K_F17=128,
		K_F18=129,
		K_F19=130,
		K_F20=131,
		K_F21=132,
		K_F22=133,
		K_F23=134,
		K_F24=135,
		K_NumLock=156,
		K_ScrollLock=157,
		K_Unknown9E=158,
		K_Unknown9F=159,
		K_LShift=160,
		K_RShift=161,
		K_LControl=162,
		K_RControl=163,
		K_UnknownA4=164,
		K_UnknownA5=165,
		K_UnknownA6=166,
		K_UnknownA7=167,
		K_UnknownA8=168,
		K_UnknownA9=169,
		K_UnknownAA=170,
		K_UnknownAB=171,
		K_UnknownAC=172,
		K_UnknownAD=173,
		K_UnknownAE=174,
		K_UnknownAF=175,
		K_UnknownB0=176,
		K_UnknownB1=177,
		K_UnknownB2=178,
		K_UnknownB3=179,
		K_UnknownB4=180,
		K_UnknownB5=181,
		K_UnknownB6=182,
		K_UnknownB7=183,
		K_UnknownB8=184,
		K_Unicode=185,
		K_Semicolon=186,
		K_Equals=187,
		K_Comma=188,
		K_Minus=189,
		K_Period=190,
		K_Slash=191,
		K_Tilde=192,
		K_Mouse4=193,
		K_Mouse5=194,
		K_Mouse6=195,
		K_Mouse7=196,
		K_Mouse8=197,
		K_UnknownC6=198,
		K_UnknownC7=199,
		K_Joy1=200,
		K_Joy2=201,
		K_Joy3=202,
		K_Joy4=203,
		K_Joy5=204,
		K_Joy6=205,
		K_Joy7=206,
		K_Joy8=207,
		K_Joy9=208,
		K_Joy10=209,
		K_Joy11=210,
		K_Joy12=211,
		K_Joy13=212,
		K_Joy14=213,
		K_Joy15=214,
		K_Joy16=215,
		K_UnknownD8=216,
		K_UnknownD9=217,
		K_UnknownDA=218,
		K_LeftBracket=219,
		K_Backslash=220,
		K_RightBracket=221,
		K_SingleQuote=222,
		K_UnknownDF=223,
		K_UnknownE0=224,
		K_UnknownE1=225,
		K_UnknownE2=226,
		K_UnknownE3=227,
		K_MouseX=228,
		K_MouseY=229,
		K_MouseZ=230,
		K_MouseW=231,
		K_JoyU=232,
		K_JoyV=233,
		K_JoySlider1=234,
		K_JoySlider2=235,
		K_MouseWheelUp=236,
		K_MouseWheelDown=237,
		K_UnknownEE=238,
		K_UnknownEF=239,
		K_JoyX=240,
		K_JoyY=241,
		K_JoyZ=242,
		K_JoyR=243,
		K_UnknownF4=244,
		K_UnknownF5=245,
		K_Attn=246,
		K_ClearSel=247,
		K_ExSel=248,
		K_ErEof=249,
		K_Play=250,
		K_Zoom=251,
		K_NoName=252,
		K_UnknownFD=253,
		K_UnknownFE=254,
		Count = 256, // Explicitly set
	};

public:

	virtual void PerformCommand( IInputDeviceCommand* command ) override
	{
		command->PerformCommand( this );
	}

	virtual const CName GetDeviceName() const override
	{
		return CNAME( keyboardmouse );
	}

};