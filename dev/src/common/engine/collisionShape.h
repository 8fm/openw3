/**
* Copyright © 2007 CD Projekt Red. All Rights Reserved.
*/
#pragma once
#include "renderVertices.h"

/// Simple collision shape from collision mesh
class ICollisionShape : public CObject
{
	DECLARE_ENGINE_ABSTRACT_CLASS( ICollisionShape, CObject );

protected:
	friend class CEdMeshPhysicalRepresentation;

    void* m_geometry;
	Matrix m_pose;
	Float m_densityScaler;

protected:
	ICollisionShape() : m_pose( Matrix::IDENTITY ), m_densityScaler( 1.0f ) {};

public:
	ICollisionShape( CCollisionMesh* mesh, void* shape, const Matrix& pose = Matrix::IDENTITY );

public:
	const Matrix& GetPose() const { return m_pose; }
	Matrix& GetPose() { return m_pose; }

	// Generate a debug mesh for this shape. The existing data will remain, the new triangles are appended to vertices and indices.
	// Default implementation calls GetShape(), generates triangles from that (each triangle has distinct vertices, so that
	// they can be independently colored). Color of the triangles is given by GetDebugTriangleColor().
	virtual void GenerateDebugMesh( TDynArray< DebugVertex >& vertices, TDynArray< Uint32 >& indices ) const;

	// Get how many vertices and indices would be generated by a call to GetShape().
	virtual void GetStats( Uint32& numVertices, Uint32& numIndices ) const = 0;

	// Generate triangle-mesh representation of the shape. vertices and indices will be cleared and contain only this shape.
	virtual void GetShape( const Matrix& localToWorld, TDynArray< Vector >& vertices, TDynArray< Uint32 >& indices ) const=0;

	virtual void GetShapeForNavigation( const Matrix& localToWorld, TDynArray< Vector >& vertices, TDynArray< Uint32 >& indices ) const;

	virtual Bool CompileShape( struct SCachedGeometry* resultGeometry, const CObject* parentObject ) const=0;

	virtual Bool IsEmpty() const { return false; }

	virtual Uint32 GetNumPhysicalMaterials() const = 0;
	virtual CName GetPhysicalMaterial( Uint32 index = 0 ) const = 0;

	// Set a range of material indices to a single material. Out-of-range indices are skipped (e.g. if first+count > size).
	virtual void SetPhysicalMaterial( const CName& materialName, Uint32 firstIndex, Uint32 count = 1 ) = 0;

	virtual Float GetDensityScaler() { return m_densityScaler; }

	virtual void SetDensityScaler( Float densityScaler = 1.0f ) { m_densityScaler = densityScaler; Invalidate(); }

protected:
	void Invalidate();

	// When using the default GenerateDebugMesh() implementation, this is used for coloring the triangles. The index given corresponds
	// to a triangle in the mesh returned by GetShape().
	virtual Uint32 GetDebugTriangleColor( Uint32 index ) const { return 0xFFFFFFFF; }

	const CResource* GetCollisionShapeParentResource( const CObject* object ) const;
}; 

BEGIN_ABSTRACT_CLASS_RTTI( ICollisionShape );
	PARENT_CLASS( CObject );
	PROPERTY( m_pose );
	PROPERTY( m_densityScaler );
END_CLASS_RTTI();
