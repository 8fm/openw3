#pragma once
#include "..\engine\component.h"
#include "..\engine\dropPhysicsComponent.h"
#include "boatDestructionVolume.h"
#include "boatConfig.h"

//////////////////////////////////////////////////////////////////////////

class CBoatDestructionComponent : public CComponent, private IPhysicalCollisionTriggerCallback
{
    DECLARE_ENGINE_CLASS( CBoatDestructionComponent, CComponent, 0 );
public:
    CBoatDestructionComponent(void);

    virtual void OnTickPrePhysics( Float deltaTime );

    virtual void OnAttached( CWorld* world );
    virtual void OnDetached( CWorld* world );

    virtual void OnParentAttachmentAdded( IAttachment* attachment );
    virtual void OnParentAttachmentBroken( IAttachment* attachment );

    void OnSaveGameplayState( IGameSaver* saver );
    void OnLoadGameplayState( IGameLoader* loader );

    virtual void OnGenerateEditorFragments( CRenderFrame* frame, EShowFlags flags );

    void LocalSpaceExternalCollision( const Vector& localHit, const Vector& forceNormal, EBoatCollisionSource collisionSource );
    void GlobalSpaceExternalCollision( const Vector& globalHit, const Vector& forceNormal, EBoatCollisionSource collisionSource );

    void DisableCollisionCallback();

private:
    virtual void onCollision( const SPhysicalCollisionInfo& info );
    void SelectDestructionAreaAndTriggerScript( const Vector& localHit, const Vector& globalHit, const Vector& forceNormal, EBoatCollisionSource collisionSource );

protected:
    THandle<CRigidMeshComponent>        m_hBoatBodyRigidMesh;
    THandle<CBoatComponent>             m_hBoatComponent;
    TDynArray<SBoatDestructionVolume>   m_destructionVolumes;

    Uint32                              m_autoGeneratedVolumesX;
    Uint32                              m_autoGeneratedVolumesY;
    Float                               m_autoGeneratorVolumesResizer;

    Float                               m_lastCollisionTimeout;
    Bool                                m_wasSaveRestored;

#ifndef FINAL
    struct SPointNormalTimeout
    {
        Vector hitPos;
        Vector normal;
        Float totalDrawTime;
        Int32 temp;

        SPointNormalTimeout( const Vector& pos, const Vector& norm )
            : totalDrawTime(0.0f)
            , hitPos(pos)
            , normal(norm)
            , temp(0)
        {}
    };

    TDynArray<SPointNormalTimeout> DBG_collisionHits;
#endif
};

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

BEGIN_CLASS_RTTI( CBoatDestructionComponent );
    PARENT_CLASS( CComponent );
    PROPERTY_EDIT( m_autoGeneratedVolumesX, TXT("Volumes AutoGenerator. Number of volumes in boats X axis") );
    PROPERTY_EDIT( m_autoGeneratedVolumesY, TXT("Volumes AutoGenerator. Number of volumes in boats Y axis") );
    PROPERTY_EDIT( m_autoGeneratorVolumesResizer, TXT("Volumes AutoGenerator. Percent of volumes area scaling") );
    PROPERTY_EDIT( m_destructionVolumes, TXT("Mesh destruction volumes triggerd when collidiong") );

END_CLASS_RTTI();

//////////////////////////////////////////////////////////////////////////
