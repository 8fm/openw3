/*
* Copyright © 2013 CD Projekt Red. All Rights Reserved.
*/

#pragma once

#include "gameMetalinkTypes.h"
#include "queueMetalinkInterface.h"

class CMetalinkComponent : public CWayPointComponent, public PathLib::IMetalinkComponent
{
	DECLARE_ENGINE_CLASS(  CMetalinkComponent, CWayPointComponent, 0 )
protected:
	THandle< IAIExplorationTree >	m_aiAction;
	Float							m_pathfindingCostMultiplier;

	CName							m_destinationEntityTag;
	String							m_destinationWaypointComponent;

	EntityHandle					m_internalObstacleEntity;
	String							m_internalObstacleComponent;

	Bool							m_useInternalObstacle;
	Bool							m_enabledByDefault;
	Bool							m_enabled;
	Bool							m_isGhostLink;

	Bool							m_questTrackingPortal;

	Bool							FindDestinationPosition( CPathLibWorld& pathlib, Vector3& outPosition );
	Bool							ConfigureGraph( GraphConfiguration& configuration, CPathLibWorld& pathlib ) override;
	
public:
	CMetalinkComponent();

	PathLib::IComponent*			AsPathLibComponent() override;
	CComponent*						AsEngineComponent() override;

	IAIExplorationTree*				GetAIAction() const																		{ return m_aiAction.Get(); }

	void							OnAttached( CWorld* world ) override;
	void							OnDetached( CWorld* world ) override;

	void							Enable( Bool b, Bool persistant = false );

	PathLib::IMetalinkSetup::Ptr	CreateMetalinkSetup() const override;

#ifndef NO_EDITOR
	Bool							RemoveOnCookedBuild() override;
#endif

};

BEGIN_CLASS_RTTI( CMetalinkComponent )
	PARENT_CLASS( CWayPointComponent )
	PROPERTY_INLINED( m_aiAction, TXT("AI action performed on use.") )
	PROPERTY_EDIT( m_pathfindingCostMultiplier, TXT("Multiplier to cost coming from nodes mutual distance.") )
	PROPERTY_EDIT( m_destinationEntityTag, TXT("Destination entity. Leave empty for 'self'.") )
	PROPERTY_EDIT( m_destinationWaypointComponent, TXT("Destination waypoint component name. Leave empty for 'any'.") )
	PROPERTY_EDIT( m_internalObstacleEntity, TXT("Entity that represent internal obstacle. Leave empty for 'self'.") )
	PROPERTY_EDIT( m_internalObstacleComponent, TXT("Component name for internal obstacle. Leave empty for 'any'.") )
	PROPERTY_EDIT( m_useInternalObstacle, TXT("If set, internal obstacle will cut out autogenerated connections from navigation graph") )
	PROPERTY_EDIT( m_enabledByDefault, TXT("Is metalink enabled at start.") )
	PROPERTY_EDIT( m_enabled, TXT("Is currently enabled.") )
	PROPERTY_EDIT( m_isGhostLink, TXT("Ghost navigation links never checks collisions") )
	PROPERTY_EDIT( m_questTrackingPortal, TXT("Metalink created portal for minimap quest tracking featurette") )
END_CLASS_RTTI()

class CMetalinkComponentNavigationSetup : public PathLib::IMetalinkSetup
{
public:
	virtual PathLib::MetalinkClassId	GetClassId() const override;

	virtual Bool						AgentPathfollowUpdate( RuntimeData& r, PathLib::CAgent* pathAgent, const Vector3& interactionPoint, const Vector3& destinationPoint ) override;
};


class CMetalinkWithAIQueueComponent : public CMetalinkComponent, public IAIQueueMetalinkInterface
{
	DECLARE_ENGINE_CLASS(  CMetalinkWithAIQueueComponent, CMetalinkComponent, 0 )
public:
	CMetalinkWithAIQueueComponent();
	~CMetalinkWithAIQueueComponent();

	IAIQueueMetalinkInterface* GetAIQueueInterface() override;
};

BEGIN_CLASS_RTTI( CMetalinkWithAIQueueComponent )
	PARENT_CLASS( CMetalinkComponent )
END_CLASS_RTTI()

class CMetalinDestinationComponent : public CWayPointComponent
{
	DECLARE_ENGINE_CLASS( CMetalinDestinationComponent, CWayPointComponent, 0 )
public:
	CMetalinDestinationComponent() {}

#ifndef NO_EDITOR
	virtual Bool RemoveOnCookedBuild() override;
#endif
};

BEGIN_CLASS_RTTI( CMetalinDestinationComponent )
	PARENT_CLASS( CWayPointComponent )
END_CLASS_RTTI()