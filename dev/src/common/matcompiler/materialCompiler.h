/**
* Copyright © 2007 CD Projekt Red. All Rights Reserved.
*/
#pragma once
#include "../engine/materialCompiler.h"

#ifndef NO_RUNTIME_MATERIAL_COMPILATION

class CHLSLMaterialVertexShaderCompiler;
class CHLSLMaterialPixelShaderCompiler;

/// Material compiler
class CHLSLMaterialCompiler : public IMaterialCompiler
{
public:
	// Component type
	enum EComponentType
	{
		CT_Float,
		CT_Int
	};

	// Connection between VS and PS
	struct Connection
	{
		Uint32				m_usedComponents;
		EComponentType		m_componentType;
		CodeChunk			m_semantic;
	};

	struct CustomFunctionInfo
	{
		String m_functionName;
		CodeChunk m_codeChunk;
		Int32 m_shaderTarget;
	};

	struct Interpolator
	{
		CodeChunk		  m_semantic;		// Our block semantic, we will sort by it
		CodeChunk		  m_vsSource;		// VS Source generated by the code generation system
		CodeChunk		  m_psTarget;		// PS target generated by the code generation system
		EMaterialDataType m_type;			// Type of the variable (interpolator)
		Uint32			  m_index;			// Index of occurrence - used for connection (tmp) PS variable generation
	};

	struct SortBySemantic
	{
		static RED_INLINE Bool Sort( const Interpolator& i1, const Interpolator& i2 )
		{
			return Red::System::StringCompareNoCase( i1.m_semantic.AsChar(), i2.m_semantic.AsChar() ) < 0;
		}
	};

public:
	CHLSLMaterialVertexShaderCompiler*		m_vertexShader;			// Pixel shader compiler
	CHLSLMaterialPixelShaderCompiler*		m_pixelShader;			// Vertex shader compiler

	TDynArray< Connection >					m_connections;			// Connections
	TDynArray< MaterialUsedParameter, MC_MaterialParameters >		m_usedPixelParameters;	// Used parameters
	TDynArray< MaterialUsedParameter, MC_MaterialParameters >		m_usedVertexParameters;	// Used parameters
	TDynArray< CustomFunctionInfo >			m_customFunctions;		// Custom functions

	TDynArray< Interpolator >				m_interpolators;		// Outputs of the VS requested by PS <semantic, value>

public:
	CHLSLMaterialCompiler( const MaterialRenderingContext& context, ECookingPlatform platform );
	~CHLSLMaterialCompiler();

	// Get vertex shader compiler
	virtual IMaterialShaderCompiler* GetVertexShaderCompiler();

	// Get pixel shader compiler
	virtual IMaterialShaderCompiler* GetPixelShaderCompiler();

	virtual Bool Function( const String& name, const String& code, const THashMap<String, EMaterialParamType>& params, EMaterialShaderTarget shaderTarget = MSH_PixelShader );

	// Create used parameter definition
	virtual void Param( const CName& name, Uint8 reg, EMaterialShaderTarget shaderTarget = MSH_PixelShader );

	// Connect vertex shader with pixel shader
	virtual void Connect( EMaterialDataType type, const CodeChunk& vsSource, const CodeChunk& psTarget, const CodeChunk& semantic );

	virtual Uint64 GetVSCodeCRC() const;
	virtual Uint64 GetPSCodeCRC() const;

public:
	// Generate default code ( output position and default color )
	void GenerateDefaultCode();

	// Create data connections between shaders
	void CreateDataConnections();

	// Once we have all the interpolators gathered, sort them alphabetically and write to auto-generated code
	void SortAndOutputInterpolators();

	// Allocate automatic connection name
	CodeChunk ConnectionVarName( Uint32 index ) { return CodeChunk::Printf( true, "ConnectionVar%i", index ); }

	// Allocate shader semantics for connections
	void AllocateInterpolator( Interpolator& interpolator );
};

#endif
