/**
 * Copyright © 2014 CD Projekt Red. All Rights Reserved.
 */

#include "build.h"
#include "../../common/engine/dynamicLayer.h"
#include "../../common/engine/worldIterators.h"
#include "frame.h"
#include "sceneExplorer.h"
#include "entityList.h"

//////////////////////////////////////////////////////////////////////////

// Generated by wxFormBuilder, implementation after CEntityListUI below
class CEntityListFrame : public wxFrame 
{
public:
	wxPanel*				m_panel4;
	wxStaticText*			m_entitiesLabel;
	wxPanel*				m_panel2;
	wxListBox*				m_entities;
	wxPanel*				m_panel3;
	wxButton*				m_selectAllRows;
	wxButton*				m_deselectAllRows;
	wxButton*				m_selectEntity;
	wxButton*				m_selectAll;
	wxButton*				m_filterTree;
	wxButton*				m_isolate;
	wxStaticLine*			m_staticline2;
	wxButton*				m_actions;
	wxStaticLine*			m_staticline1;
	wxButton*				m_save;
	wxButton*				m_remove;
	wxButton*				m_clear;
	wxButton*				m_close;
	class CEntityListUI*	m_ui;
		
	void CEntityListFrameOnClose( wxCloseEvent& event );
	void EntitiesOnListBoxDClick( wxCommandEvent& event );
	void EntitiesOnListBoxSelected( wxCommandEvent& event );
	void SelectAllRowsOnButtonClicked( wxCommandEvent& event );
	void DeselectAllRowsOnButtonClicked( wxCommandEvent& event );
	void SelectEntityOnButtonClick( wxCommandEvent& event );
	void SelectAllOnButtonClick( wxCommandEvent& event );
	void FilterTreeOnButtonClick( wxCommandEvent& event );
	void IsolateOnButtonClick( wxCommandEvent& event );
	void ActionsOnButtonClick( wxCommandEvent& event );
	void SaveOnButtonClick( wxCommandEvent& event );
	void RemoveOnButtonClick( wxCommandEvent& event );
	void ClearOnButtonClick( wxCommandEvent& event );
	void CloseOnButtonClick( wxCommandEvent& event );
		
	CEntityListFrame( class CEntityListUI* ui, wxWindow* parent, wxWindowID id = wxID_ANY, const wxString& title = wxT("Entity List"), const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxSize( 417,450 ), long style = wxDEFAULT_FRAME_STYLE|wxTAB_TRAVERSAL );
	~CEntityListFrame();
};

//////////////////////////////////////////////////////////////////////////

// Class that handles the UI for an entity list
class CEntityListUI
{
	friend class CEntityListFrame;

	CEntityList*		m_list;
	CEntityListFrame*	m_frame;
	TDynArray<Vector>	m_markers;

public:
	RED_INLINE CEntityList* GetList() const { return m_list; }

	// Construct an entity list UI
	CEntityListUI( CEntityList* list )
		: m_list( list )
	{
		m_frame = new CEntityListFrame( this, nullptr );
		m_frame->SetTitle( wxString::Format( wxT("Entity List - [%s]"), list->GetName().AsChar() ) );
	}

	~CEntityListUI()
	{
		if ( m_frame != nullptr )
		{
			m_frame->m_ui = nullptr;
			DestroyLater( m_frame );
		}
	}

	// Show the UI
	void Show()
	{
		if ( m_frame == nullptr )
		{
			m_frame = new CEntityListFrame( this, nullptr );
			m_frame->SetTitle( wxString::Format( wxT("Entity List - [%s]"), m_list->GetName().AsChar() ) );
		}
		m_frame->Show();
		m_frame->SetFocus();
	}

	// Returns true if the UI is visible
	Bool IsVisible() const
	{
		return m_frame != nullptr && m_frame->IsShownOnScreen();
	}

	// Refresh the entity list
	void RefreshList()
	{
		if ( m_frame == nullptr ) return;
		wxArrayInt previousIndices;
		m_frame->m_entities->GetSelections( previousIndices );
		m_frame->m_entities->Clear();
		m_frame->m_entities->Freeze();
		const TDynArray< SEntityListEntry >& entries = m_list->GetEntries();
		for ( const SEntityListEntry& entry : entries )
		{
			m_frame->m_entities->Append( wxString::Format( wxT("%s (%s)"), entry.m_name.AsChar(), entry.m_path.AsChar() ) );
		}
		m_frame->m_entities->Thaw();
		for ( int i = 0; i < previousIndices.size(); ++i )
		{
			m_frame->m_entities->SetSelection( previousIndices[i] );
		}
		m_frame->m_entitiesLabel->SetLabelText( wxString::Format( wxT("Entities (%i):"), (int)entries.Size() ) );
	}

	// The list has been modified
	void ListModified()
	{
		RunLaterOnce( [&](){ RefreshList(); } );
	}

	// List double clicked
	void OnTravel( int clicked )
	{
		if ( clicked != -1 )
		{
			if ( m_list->GetEntries()[clicked].m_entity.IsValid() )
			{
				CEntity* entity = m_list->GetEntries()[clicked].m_entity;

				if ( wxGetKeyState( WXK_ALT ) )
				{
					InspectObject( entity );
				}
				else if ( wxGetKeyState( WXK_CONTROL ) )
				{
					if ( entity->GetEntityTemplate() != nullptr )
					{
						String resPath = entity->GetEntityTemplate()->GetFile()->GetDepotPath();
						SEvents::GetInstance().DispatchEvent( CNAME( SelectAsset ), CreateEventData( resPath ) );
					}
				}
				else
				{
					wxTheFrame->GetWorldEditPanel()->LookAtNode( entity );
				}
			}
			else
			{
				wxMessageBox( wxT("The entity object has been deleted, cannot travel there (maybe the layer was unloaded or reloaded?)"), wxT("Invalid Entity") );
			}
		}
	}

	// List selection changed
	void OnSelectionChanged()
	{
		wxArrayInt selection;
		int selected = m_frame->m_entities->GetSelections( selection );
		m_markers.ClearFast();

		for ( int i = 0; i < selected; ++i )
		{
			if ( CEntity* entity = m_list->GetEntries()[selection[i]].m_entity.Get() )
			{
				m_markers.PushBack( entity->GetWorldPosition() );
			}
		}
	}

	void OnSelectAllRows()
	{
		for ( unsigned int i = 0; i < m_frame->m_entities->GetCount(); ++i )
		{
			m_frame->m_entities->SetSelection( i );
		}
		OnSelectionChanged();
	}

	void OnDeselectAllRows()
	{
		for ( unsigned int i = 0; i < m_frame->m_entities->GetCount(); ++i )
		{
			m_frame->m_entities->Deselect( i );
		}
		OnSelectionChanged();
	}

	// Select button clicked
	void OnSelect()
	{
		const TDynArray< SEntityListEntry >& entries = m_list->GetEntries();
		for ( Uint32 i=0; i < entries.Size(); ++i )
		{
			CEntity* entity = entries[i].m_entity.Get();
			if ( m_frame->m_entities->IsSelected( i ) && entity != nullptr )
			{
				m_list->GetManager()->GetWorld()->GetSelectionManager()->Select( entity );
			}
		}
	}

	// Select all button clicked
	void OnSelectAll()
	{
		const TDynArray< SEntityListEntry >& entries = m_list->GetEntries();
		for ( Uint32 i=0; i < entries.Size(); ++i )
		{
			CEntity* entity = entries[i].m_entity.Get();
			if ( entity != nullptr )
			{
				m_list->GetManager()->GetWorld()->GetSelectionManager()->Select( entity );
			}
		}
	}

	// Filter tree button clicked
	void OnFilterTree()
	{
		const TDynArray< SEntityListEntry >& entries = m_list->GetEntries();
		for ( Uint32 i=0; i < entries.Size(); ++i )
		{
			CEntity* entity = entries[i].m_entity.Get();
			if ( entity != nullptr )
			{
				wxTheFrame->GetSceneExplorer()->AddToGlobalFilter( entity );
			}
		}
	}

	// Isolate button clicked
	void OnIsolate()
	{
		TDynArray< CEntity* > entities;
		for ( const SEntityListEntry& entry : m_list->GetEntries() )
		{
			entities.PushBack( entry.m_entity );
		}
		wxTheFrame->GetWorldEditPanel()->IsolateEntities( entities );
	}

	// Actions button clicked
	void OnActions()
	{
		// Build entities array
		LayerEntitiesArray entities;
		for ( CEntity* entity : m_list->m_entities )
		{
			if ( entity != nullptr )
			{
				entities.PushBack( entity );
			}
		}

		// Try the list first
		if ( m_list->m_actions != nullptr )
		{
			m_list->m_actions( m_list, entities, m_list->m_actionsData );
		}
		else if ( m_list->GetManager()->m_actions != nullptr ) // Try the manager next
		{
			m_list->GetManager()->m_actions( m_list, entities, m_list->GetManager()->m_actionsData );
		}
	}

	// Returns true if there are no actions
	Bool HasNoActions() const
	{
		return m_list->m_actions == nullptr && m_list->GetManager()->m_actions == nullptr;
	}

	// Save button clicked
	void OnSave()
	{
		wxFileDialog* fd = new wxFileDialog( m_frame, wxT("Export Entity List"), "", "", "Entity List (*.entlist)|*.entlist", wxFD_SAVE|wxFD_OVERWRITE_PROMPT );
		fd->SetFilename( ( GetList()->GetName() + TXT(".entlist") ).AsChar() );
		if ( fd->ShowModal() == wxID_OK )
		{
			m_list->SaveToFile( fd->GetPath().wc_str() );
		}
		fd->Destroy();
	}

	// Remove button clicked
	void OnRemove()
	{
		wxArrayInt selection;
		if ( m_frame->m_entities->GetSelections( selection ) > 0 )
		{
			for ( int i = 0; i < selection.size(); ++i )
			{
				m_list->Remove( m_list->GetEntries()[selection[i]].m_entity );
			}
		}
	}

	// Clear button clicked
	void OnClear()
	{
		m_list->Clear();
	}

	// Returns the markers
	TDynArray<Vector>& GetWorldMarkers()
	{
		return m_markers;
	}
};

//////////////////////////////////////////////////////////////////////////

CEntityListFrame::CEntityListFrame( class CEntityListUI* ui, wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxFrame( parent, id, title, pos, size, style )
{
	m_ui = ui;

	// All the code below is generated by wxFormBuilder, it needs some cleanup
	/////
	this->SetSizeHints( wxDefaultSize, wxDefaultSize );
	
	wxBoxSizer* bSizer3;
	bSizer3 = new wxBoxSizer( wxVERTICAL );
	
	m_panel4 = new wxPanel( this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
	wxBoxSizer* bSizer7;
	bSizer7 = new wxBoxSizer( wxVERTICAL );
	
	m_entitiesLabel = new wxStaticText( m_panel4, wxID_ANY, wxT("Entities:"), wxDefaultPosition, wxDefaultSize, 0 );
	m_entitiesLabel->Wrap( -1 );
	bSizer7->Add( m_entitiesLabel, 0, wxTOP|wxRIGHT|wxLEFT, 5 );
	
	wxBoxSizer* bSizer1;
	bSizer1 = new wxBoxSizer( wxHORIZONTAL );
	
	m_panel2 = new wxPanel( m_panel4, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
	wxBoxSizer* bSizer2;
	bSizer2 = new wxBoxSizer( wxVERTICAL );
	
	m_entities = new wxListBox( m_panel2, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, NULL, wxLB_EXTENDED ); 
	bSizer2->Add( m_entities, 1, wxEXPAND|wxBOTTOM|wxLEFT, 5 );
		
	m_panel2->SetSizer( bSizer2 );
	m_panel2->Layout();
	bSizer2->Fit( m_panel2 );
	bSizer1->Add( m_panel2, 1, wxEXPAND, 5 );
	
	m_panel3 = new wxPanel( m_panel4, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
	wxBoxSizer* bSizer5;
	bSizer5 = new wxBoxSizer( wxVERTICAL );
	
	m_selectAllRows = new wxButton( m_panel3, wxID_ANY, wxT("Select all rows"), wxDefaultPosition, wxDefaultSize, 0 );
	bSizer5->Add( m_selectAllRows, 0, wxBOTTOM|wxRIGHT|wxLEFT|wxEXPAND, 5 );

	m_deselectAllRows = new wxButton( m_panel3, wxID_ANY, wxT("Deselect all rows"), wxDefaultPosition, wxDefaultSize, 0 );
	bSizer5->Add( m_deselectAllRows, 0, wxRIGHT|wxLEFT|wxEXPAND, 5 );

	bSizer5->Add( new wxStaticLine( m_panel3, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLI_HORIZONTAL ), 0, wxEXPAND | wxALL, 5 );

	m_selectEntity = new wxButton( m_panel3, wxID_ANY, wxT("&Select in the world"), wxDefaultPosition, wxDefaultSize, 0 );
	m_selectEntity->SetDefault(); 
	bSizer5->Add( m_selectEntity, 0, wxBOTTOM|wxRIGHT|wxLEFT|wxEXPAND, 5 );
	
	m_selectAll = new wxButton( m_panel3, wxID_ANY, wxT("Select all in the world"), wxDefaultPosition, wxDefaultSize, 0 );
	bSizer5->Add( m_selectAll, 0, wxBOTTOM|wxRIGHT|wxLEFT|wxEXPAND, 5 );
	
	m_filterTree = new wxButton( m_panel3, wxID_ANY, wxT("Filter Tree"), wxDefaultPosition, wxDefaultSize, 0 );
	bSizer5->Add( m_filterTree, 0, wxBOTTOM|wxRIGHT|wxLEFT|wxEXPAND, 5 );

	m_isolate = new wxButton( m_panel3, wxID_ANY, wxT("Isolate"), wxDefaultPosition, wxDefaultSize, 0 );
	bSizer5->Add( m_isolate, 0, wxRIGHT|wxLEFT|wxEXPAND, 5 );
	
	m_staticline2 = new wxStaticLine( m_panel3, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLI_HORIZONTAL );
	bSizer5->Add( m_staticline2, 0, wxEXPAND | wxALL | wxEXPAND, 5 );
	
	m_actions = new wxButton( m_panel3, wxID_ANY, wxT("&Actions..."), wxDefaultPosition, wxDefaultSize, 0 );
	bSizer5->Add( m_actions, 0, wxRIGHT|wxLEFT | wxEXPAND, 5 );
	
	m_staticline1 = new wxStaticLine( m_panel3, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLI_HORIZONTAL );
	bSizer5->Add( m_staticline1, 0, wxEXPAND | wxALL | wxEXPAND, 5 );
	
	m_save = new wxButton( m_panel3, wxID_ANY, wxT("&Save..."), wxDefaultPosition, wxDefaultSize, 0 );
	bSizer5->Add( m_save, 0, wxRIGHT | wxLEFT | wxEXPAND, 5 );
	
	bSizer5->Add( 0, 0, 1, wxEXPAND, 5 );
	
	m_remove = new wxButton( m_panel3, wxID_ANY, wxT("Remove"), wxDefaultPosition, wxDefaultSize, 0 );
	bSizer5->Add( m_remove, 0, wxALL|wxEXPAND, 5 );
	
	m_clear = new wxButton( m_panel3, wxID_ANY, wxT("Clear"), wxDefaultPosition, wxDefaultSize, 0 );
	bSizer5->Add( m_clear, 0, wxBOTTOM|wxRIGHT|wxLEFT|wxEXPAND, 5 );
	
	bSizer5->Add( 0, 0, 1, wxEXPAND, 5 );
	
	m_close = new wxButton( m_panel3, wxID_ANY, wxT("&Close"), wxDefaultPosition, wxDefaultSize, 0 );
	bSizer5->Add( m_close, 0, wxBOTTOM|wxRIGHT|wxLEFT|wxEXPAND, 5 );
	
	
	m_panel3->SetSizer( bSizer5 );
	m_panel3->Layout();
	bSizer5->Fit( m_panel3 );
	bSizer1->Add( m_panel3, 0, wxEXPAND, 5 );
	
	
	bSizer7->Add( bSizer1, 1, wxEXPAND, 5 );
	
	
	m_panel4->SetSizer( bSizer7 );
	m_panel4->Layout();
	bSizer7->Fit( m_panel4 );
	bSizer3->Add( m_panel4, 1, wxEXPAND, 5 );
	
	
	this->SetSizer( bSizer3 );
	this->Layout();
	
	this->Centre( wxBOTH );
	
	// Connect Events
	Connect( wxEVT_CLOSE_WINDOW, wxCloseEventHandler( CEntityListFrame::CEntityListFrameOnClose ) );
	m_entities->Connect( wxEVT_COMMAND_LISTBOX_DOUBLECLICKED, wxCommandEventHandler( CEntityListFrame::EntitiesOnListBoxDClick ), NULL, this );
	m_entities->Connect( wxEVT_COMMAND_LISTBOX_SELECTED, wxCommandEventHandler( CEntityListFrame::EntitiesOnListBoxSelected ), NULL, this );
	m_selectAllRows->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( CEntityListFrame::SelectAllRowsOnButtonClicked ), NULL, this );
	m_deselectAllRows->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( CEntityListFrame::DeselectAllRowsOnButtonClicked ), NULL, this );
	m_selectEntity->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( CEntityListFrame::SelectEntityOnButtonClick ), NULL, this );
	m_selectAll->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( CEntityListFrame::SelectAllOnButtonClick ), NULL, this );
	m_filterTree->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( CEntityListFrame::FilterTreeOnButtonClick ), NULL, this );
	m_isolate->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( CEntityListFrame::IsolateOnButtonClick ), NULL, this );
	m_actions->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( CEntityListFrame::ActionsOnButtonClick ), NULL, this );
	m_save->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( CEntityListFrame::SaveOnButtonClick ), NULL, this );
	m_remove->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( CEntityListFrame::RemoveOnButtonClick ), NULL, this );
	m_clear->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( CEntityListFrame::ClearOnButtonClick ), NULL, this );
	m_close->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( CEntityListFrame::CloseOnButtonClick ), NULL, this );

	/// End of wxFormBuilder code

	// Check if we should disable actions
	if ( m_ui->HasNoActions() )
	{
		m_actions->Disable();
	}
}

CEntityListFrame::~CEntityListFrame()
{
	if ( m_ui != nullptr && m_ui->m_frame != nullptr )
	{
		m_ui->m_frame = nullptr;
	}
}

void CEntityListFrame::CEntityListFrameOnClose( wxCloseEvent& event )
{
	if ( m_ui != nullptr ) 
	{
		m_ui->GetList()->Hide();
	}
}

void CEntityListFrame::EntitiesOnListBoxDClick( wxCommandEvent& event )
{
	m_ui->OnTravel( event.GetInt() );
}

void CEntityListFrame::EntitiesOnListBoxSelected( wxCommandEvent& event )
{
	m_ui->OnSelectionChanged();
}

void CEntityListFrame::SelectAllRowsOnButtonClicked( wxCommandEvent& event )
{
	m_ui->OnSelectAllRows();
}

void CEntityListFrame::DeselectAllRowsOnButtonClicked( wxCommandEvent& event )
{
	m_ui->OnDeselectAllRows();
}

void CEntityListFrame::SelectEntityOnButtonClick( wxCommandEvent& event )
{
	m_ui->OnSelect();
}

void CEntityListFrame::SelectAllOnButtonClick( wxCommandEvent& event )
{
	m_ui->OnSelectAll();
}

void CEntityListFrame::FilterTreeOnButtonClick( wxCommandEvent& event )
{
	m_ui->OnFilterTree();
}

void CEntityListFrame::IsolateOnButtonClick( wxCommandEvent& event )
{
	m_ui->OnIsolate();
}

void CEntityListFrame::ActionsOnButtonClick( wxCommandEvent& event )
{
	m_ui->OnActions();
}

void CEntityListFrame::SaveOnButtonClick( wxCommandEvent& event )
{
	m_ui->OnSave();
}

void CEntityListFrame::RemoveOnButtonClick( wxCommandEvent& event )
{
	m_ui->OnRemove();
}

void CEntityListFrame::ClearOnButtonClick( wxCommandEvent& event )
{
	m_ui->OnClear();
}

void CEntityListFrame::CloseOnButtonClick( wxCommandEvent& event )
{
	DestroyLater( this );
}

//////////////////////////////////////////////////////////////////////////

void SEntityListEntry::SetEntity( CEntity* entity )
{
	m_guid = entity->GetGUID();
	m_name = entity->GetName();
	if ( entity->GetLayer()->IsA< CDynamicLayer >() )
	{
		m_path = TXT("(dynamic layer)");
	}
	else
	{
		entity->GetLayer()->GetLayerInfo()->GetHierarchyPath( m_path, false );
	}
	m_entity = entity;
}

//////////////////////////////////////////////////////////////////////////

CEntityList::CEntityList( const String& name, CEntityListManager* manager )
	: m_name( name )
	, m_manager( manager )
	, m_ui( nullptr )
	, m_actions( nullptr )
	, m_actionsData( nullptr )
{
}

CEntityList::~CEntityList()
{
	if ( m_ui != nullptr )
	{
		delete m_ui;
	}
}

void CEntityList::Refresh()
{
	if ( m_ui != nullptr )
	{
		m_ui->RefreshList();
	}
}

void CEntityList::ListModified()
{
	if ( m_manager != nullptr )
	{
		m_manager->ListModified( this );
	}
	if ( m_ui != nullptr )
	{
		m_ui->ListModified();
	}
}

void CEntityList::Clear()
{
	if ( !m_entries.Empty() )
	{
		m_entries.Clear();
		m_entities.Clear();
		ListModified();
	}
}

void CEntityList::Add( CEntity* entity )
{
	if ( !Exist( entity ) )
	{
		m_entries.Grow();
		m_entries.Back().SetEntity( entity );
		m_entities.Insert( entity );
		ListModified();
	}
}

void CEntityList::Add( const TDynArray< CEntity* >& entities )
{
	Bool modified = false;
	for ( CEntity* entity : entities )
	{
		if ( !Exist( entity ) )
		{
			m_entries.Grow();
			m_entries.Back().SetEntity( entity );
			m_entities.Insert( entity );
			modified = true;
		}
	}
	if ( modified )
	{
		ListModified();
	}
}

void CEntityList::Remove( CEntity* entity )
{
	Uint32 index = 0;
	if ( GetIndex( entity, index ) )
	{
		m_entries.RemoveAt( index );
		m_entities.Erase( entity );
		ListModified();
	}
}

Bool CEntityList::GetIndex( CEntity* entity, Uint32& index ) const
{
	// Quick check in the set
	if ( m_entities.Exist( entity ) )
	{
		// Scan for the entity
		for ( Uint32 i=0; i < m_entries.Size(); ++i )
		{
			if ( m_entries[i].m_entity == entity )
			{
				index = i;
				return true;
			}
		}
	}

	// Not found
	return false;
}

Bool CEntityList::Exist( CEntity* entity ) const
{
	return m_entities.Exist( entity );
}

void CEntityList::SetActionsHandler( FEntityListActionsHandler handler, void* userData )
{
	m_actions = handler;
	m_actionsData = userData;
}

void CEntityList::SaveToFile( const String& absolutePath ) const
{
	FILE* f = _wfopen( absolutePath.AsChar(), L"wb" );
	if ( f )
	{
		Uint32 i, count = m_entries.Size();
		fwrite( &count, 4, 1, f );
		for ( i=0; i < count; ++i )
		{
			fwrite( &m_entries[i].m_guid, sizeof(CGUID), 1, f );
		}
		fclose( f );
	}
}

Bool CEntityList::LoadFromFile( const String& absolutePath )
{
	FILE* f = _wfopen( absolutePath.AsChar(), L"rb" );
	if ( f )
	{
		Uint32 i, count = 0;
		TDynArray< CGUID > guids;
		TDynArray< CEntity* > entities;

		// Load the data
		if ( fread( &count, 4, 1, f ) != 1 )
		{
			fclose( f );
			return false;
		}
		guids.Grow( count );
		for ( i=0; i < count; ++i )
		{
			if ( fread( guids.TypedData() + i, sizeof(CGUID), 1, f ) != 1 )
			{
				fclose( f );
				return false;
			}
		}
		fclose( f );

		// Find the entities
		CWorld* world = GetManager() != nullptr ? GetManager()->GetWorld() : GGame->GetActiveWorld();
		ASSERT( world != nullptr, TXT("No world to load the entity list for") );
		THashMap< CGUID, CEntity* > guidToEntity;
		for ( WorldAttachedEntitiesIterator it( world ); it; ++it )
		{
			guidToEntity[(*it)->GetGUID()] = *it;
		}

		for ( i=0; i < count; ++i )
		{
			CEntity* entity = guidToEntity[guids[i]];
			if ( entity != nullptr )
			{
				entities.PushBack( entity );
			}
		}

		// Recreate the list
		Clear();
		Add( entities );

		return true;
	}
	return false;
}

void CEntityList::Show()
{
	if ( m_ui == nullptr )
	{
		m_ui = new CEntityListUI( this );
	}
	if ( !m_ui->IsVisible() )
	{
		m_ui->Show();
		m_ui->RefreshList();
	}
}

void CEntityList::Hide()
{
	if ( m_ui != nullptr )
	{
		CEntityListUI* ui = m_ui;
		m_ui = nullptr;
		delete ui;
	}
}

Bool CEntityList::IsVisible() const
{
	// No UI, cannot be visible
	if ( m_ui == nullptr )
	{
		return false;
	}

	return m_ui->IsVisible();
}

const TDynArray<Vector>& CEntityList::GetWorldMarkers() const
{
	if ( m_ui == nullptr )
	{
		static const TDynArray<Vector> empty;
		return empty;
	}
	return m_ui->GetWorldMarkers();
}

//////////////////////////////////////////////////////////////////////////

CEntityListManager::CEntityListManager( CWorld* world )
	: m_world( world )
	, m_actions( nullptr )
	, m_actionsData( nullptr )
{
}

void CEntityListManager::ListModified( CEntityList* list )
{
}

CEntityList* CEntityListManager::FindByName( const String& listName, Bool createNew /* = true */ )
{
	// Check if we already have a list with that name
	if ( m_listByName.KeyExist( listName ) )
	{
		return m_listByName[listName];
	}

	// No list, should we make one or not?
	if ( !createNew )
	{
		return nullptr; // Nope
	}

	// Make a new list
	CEntityList* list = new CEntityList( listName, this );
	m_lists.PushBack( list );
	m_listByName[listName] = list;

	return list;
}

void CEntityListManager::SetActionsHandler( FEntityListActionsHandler handler, void* userData )
{
	m_actions = handler;
	m_actionsData = userData;
}
